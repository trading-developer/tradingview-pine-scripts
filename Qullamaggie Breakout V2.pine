Script Name: Qullamaggie Breakout V2
Author: millerrh
Description: After publishing the Qullamaggie Breakout script and seeing that it had some decent results, I wanted to explore it a bit further. There were a few things I didn't like about that methodology that didn't really jive with the way I like to trade.  So what I did was combined the Breakout Trend Follower strategy I had been using for entries with the Qullamaggie...
PineScript code:

Pine Script™ strategy
Qullamaggie Breakout V2
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  millerrh
//  The  intent  of  this  strategy  is  to  buy  breakouts  with  a  tight  stop  on  smaller  timeframes  in  the  direction  of  the  longer  term  trend.
//  Then  use  a  trailing  stop  of  a  close  below  either  the  10  MA  or  20  MA  (user  choice)  on  that  larger  timeframe  as  the  position
//  moves  in  your  favor  (i.e.  whenever  position  price  rises  above  the  MA).
//  Option  of  using  daily  ADR  as  a  measure  of  finding  contracting  ranges  and  ensuring  a  decent  risk/reward.
//  (If  the  difference  between  the  breakout  point  and  your  stop  level  is  below  a  certain  %  of  ATR,  it  could  possibly  find  those  consolidating  periods.)
//  V2  -  updates  code  of  original  Qullamaggie  Breakout  to  optimize  and  debug  it  a  bit  -  the  goal  is  to  remove  some  of  the  whipsaw  and  poor  win  rate  of  the
//  original  by  incorporating  some  of  what  I  learned  in  the  Breakout  Trend  Follower  script.
//@version=5
strategy("Qullamaggie  Breakout  V2",  overlay=true,  initial_capital=100000,  currency='USD',  calc_on_every_tick  =  true,
      default_qty_type=strategy.percent_of_equity,  default_qty_value=100,  commission_type=strategy.commission.percent,  commission_value=0.1)

//  ===  BACKTEST  RANGE  ===
Start  =  input.time(defval  =  timestamp("01  Jan  2019  06:00  +0000"),  title  =  "Backtest  Start  Date",  group  =  "backtest  window  and  pivot  history")
Finish  =  input.time(defval  =  timestamp("01  Jan  2100  00:00  +0000"),  title  =  "Backtest  End  Date",  group  =  "backtest  window  and  pivot  history")
//  Inputs
showPivotPoints  =  input.bool(title  =  "Show  Historical  Pivot  Points?",  defval  =  false,  group  =  "backtest  window  and  pivot  history",
    tooltip  =  "Toggle  this  on  to  see  the  historical  pivot  points  that  were  used.    Change  the  Lookback  Periods  to  adjust  the  frequency  of  these  points.")
htf  =  input.timeframe(defval="D",  title="Timeframe  of  Moving  Averages",  group  =  "moving  averages",
    tooltip  =  "Allows  you  to  set  a  different  time  frame  for  the  moving  averages  and  your  trailing  stop.
    The  default  behavior  is  to  identify  good  tightening  setups  on  a  larger  timeframe
    (like  daily)  and  enter  the  trade  on  a  breakout  occuring  on  a  smaller  timeframe,  using  the  moving  averages  of  the  larger  timeframe  to  trail  your  stop.")
maType  =  input.string(defval="SMA",  options=["EMA",  "SMA"],  title  =  "Moving  Average  Type",  group  =  "moving  averages")
ma1Length  =  input.int(defval  =  10,  title  =  "1st  Moving  Average:     Length",  minval  =  1,  group  =  "moving  averages",  inline  =  "1ma")
ma1Color  =  input.color(color.new(color.purple,  60),  title  =  " Color",  group  =  "moving  averages",  inline  =  "1ma")
ma2Length  =  input.int(defval  =  20,  title  =  "2nd  Moving  Average:     Length",  minval  =  1,  group  =  "moving  averages",  inline  =  "2ma")
ma2Color  =  input.color(color.new(color.yellow,  60),  title  =  " Color",  group  =  "moving  averages",  inline  =  "2ma")
ma3Length  =  input.int(defval  =  50,  title  =  "3rd  Moving  Average:     Length",  minval  =  1,  group  =  "moving  averages",  inline  =  "3ma")
ma3Color  =  input.color(color.new(color.white,  60),  title  =  " Color",  group  =  "moving  averages",  inline  =  "3ma")
useMaFilter  =  input.bool(title  =  "Use  3rd  Moving  Average  for  Filtering?",  defval  =  true,  group  =  "moving  averages",
    tooltip  =  "Signals  will  be  ignored  when  price  is  under  this  slowest  moving  average.    The  intent  is  to  keep  you  out  of  bear  periods  and  only
                          buying  when  price  is  showing  strength  or  trading  with  the  longer  term  trend.")
trailMaInput  =  input.string(defval="1st  Moving  Average",  options=["1st  Moving  Average",  "2nd  Moving  Average"],  title  =  "Trailing  Stop",  group  =  "stops",
    tooltip  =  "Initial  stops  after  entry  follow  the  range  lows.    Once  in  profit,  the  trade  gets  more  wiggle  room  and
    stops  will  be  trailed  when  price  breaches  this  moving  average.")
trailMaTF  =  input.string(defval="Same  as  Moving  Averages",  options=["Same  as  Moving  Averages",  "Same  as  Chart"],  title  =  "Trailing  Stop  Timeframe",  group  =  "stops",
    tooltip  =  "Once  price  breaches  the  trail  stop  moving  average,  the  stop  will  be  raised  to  the  low  of  that  candle  that  breached.  You  can  choose  to  use  the
    chart  timeframe's  candles  breaching  or  use  the  same  timeframe  the  moving  averages  use.  (i.e.  if  daily,  you  wait  for  the  daily  bar  to  close  before  setting
    your  new  stop  level.)")
currentColorS  =  input.color(color.new(color.orange,50),  title  =  "Current  Range  S/R  Colors:     Support",  group  =  "stops",  inline  =  "lineColor")
currentColorR  =  input.color(color.new(color.blue,50),  title  =  " Resistance",  group  =  "stops",  inline  =  "lineColor")
colorStop  =  input.color(color.new(color.orange,50),  title  =  "Stop  Colors:     Initial",  group  =  "stops",  inline  =  "stopColor")
colorTrail  =  input.color(color.new(color.blue,50),  title  =  " Moving  Average  Trailing",  group  =  "stops",  inline  =  "stopColor")
//  Pivot  lookback
lbHigh  =  3
lbLow  =  3
//  MA  Calculations  (can  likely  move  this  to  a  tuple  for  a  single  security  call!!)
ma(maType,  src,  length)  =>
        maType  ==  "EMA"  ?  ta.ema(src,  length)  :  ta.sma(src,  length)  //Ternary  Operator  (if  maType  equals  EMA,  then  do  ema  calc,  else  do  sma  calc)
ma1  =  request.security(syminfo.tickerid,  htf,  ma(maType,  close,  ma1Length),  barmerge.gaps_off,  barmerge.lookahead_on)
ma2  =  request.security(syminfo.tickerid,  htf,  ma(maType,  close,  ma2Length),  barmerge.gaps_off,  barmerge.lookahead_on)
ma3  =  request.security(syminfo.tickerid,  htf,  ma(maType,  close,  ma3Length),  barmerge.gaps_off,  barmerge.lookahead_on)
plot(ma1,  color=ma1Color,  style=plot.style_line,  title="MA1",  linewidth=2)
plot(ma2,  color=ma2Color,  style=plot.style_line,  title="MA2",  linewidth=2)
plot(ma3,  color=ma3Color,  style=plot.style_line,  title="MA3",  linewidth=2)
//  ===  USE  ADR  FOR  FILTERING  ===
//  The  idea  here  is  that  you  want  to  buy  in  a  consolodating  range  for  best  risk/reward.  So  here  you  can  compare  the  current  distance  between
//  support/resistance  vs.  the  ADR  and  make  sure  you  aren't  buying  at  a  point  that  is  too  extended.
useAdrFilter  =  input.bool(title  =  "Use  ADR  for  Filtering?",  defval  =  false,  group  =  "adr  filtering",
    tooltip  =  "Signals  will  be  ignored  if  the  distance  between  support  and  resistance  is  larger  than  a  user-defined  percentage  of  ADR  (or  monthly  volatility
    in  the  stock  screener).  This  allows  the  user  to  ensure  they  are  not  buying  something  that  is  too  extended  and  instead  focus  on  names  that  are  consolidating  more.")
adrPerc  =  input.int(defval  =  120,  title  =  "%  of  ADR  Value",  minval  =  1,  group  =  "adr  filtering")
tableLocation  =  input.string(defval="Bottom",  options=["Top",  "Bottom"],  title  =  "ADR  Table  Visibility",  group  =  "adr  filtering",
    tooltip  =  "Place  ADR  table  on  the  top  of  the  pane,  the  bottom  of  the  pane,  or  off.")
adrValue  =  request.security(syminfo.tickerid,  "D",  ta.sma((high-low)/math.abs(low)  *  100,  21),  barmerge.gaps_off,  barmerge.lookahead_on)  //  Monthly  Volatility  in  Stock  Screener  (also  ADR)
adrCompare  =  (adrPerc  *  adrValue)  /  100
//  ===  PLOT  SWING  HIGH/LOW  AND  MOST  RECENT  LOW  TO  USE  AS  STOP  LOSS  EXIT  POINT  ===
ph  =  ta.pivothigh(high,  lbHigh,  lbHigh)
pl  =  ta.pivotlow(low,  lbLow,  lbLow)
highLevel  =  ta.valuewhen(ph,  high[lbHigh],  0)
lowLevel  =  ta.valuewhen(pl,  low[lbLow],  0)
barsSinceHigh  =  ta.barssince(ph)  +  lbHigh
barsSinceLow  =  ta.barssince(pl)  +  lbLow
timeSinceHigh  =  time[barsSinceHigh]
timeSinceLow  =  time[barsSinceLow]
//Removes  color  when  there  is  a  change  to  ensure  onlythelevelsareshown(i.e.nodiagonallinesconnectingthelevels)
pvthis=fixnan(ph)
pvtlos=fixnan(pl)
hipc=ta.change(pvthis)!=0?na:color.new(color.maroon,0)
lopc=ta.change(pvtlos)!=0?na:color.new(color.green,0)
//DisplayPivotlines
plot(showPivotPoints?pvthis:na,color=hipc,linewidth=1,offset=-lbHigh,title="TopLevels")
plot(showPivotPoints?pvthis:na,color=hipc,linewidth=1,offset=0,title="TopLevels2")
plot(showPivotPoints?pvtlos:na,color=lopc,linewidth=1,offset=-lbLow,title="BottomLevels")
plot(showPivotPoints?pvtlos:na,color=lopc,linewidth=1,offset=0,title="BottomLevels2")
//BUYANDSELLCONDITIONS
buyLevel=ta.valuewhen(ph,high[lbHigh],0)//BuylevelatSwingHigh
//Conditionsforentry
stopLevel=float(na)//Definestoplevelhereas"na"sothatIcanreferenceitintheADRcalculationbeforethestopLevelisactuallydefined.
buyConditions=(useMaFilter?buyLevel>ma3:true)and
(useAdrFilter?(buyLevel-stopLevel[1])<adrCompare:true)and
time>Startandtime<Finish
buySignal=ta.crossover(high,buyLevel)andbuyConditions
//Trailingstoppoints-whenpricepuncturesthemovingaverage,movestoptothelowofthatcandle-Defineasfunction/tupletoonlyuseonesecuritycall
trailMa=trailMaInput=="1stMovingAverage"?ma1:ma2
f_getCross()=>
maCrossEvent=ta.crossunder(low,trailMa)
maCross=ta.valuewhen(maCrossEvent,low,0)
maCrossLevel=fixnan(maCross)
maCrossPc=ta.change(maCrossLevel)!=0?na:color.new(color.blue,0)//Removescolorwhenthereisachangetoensureonlythelevelsareshown(i.e.nodiagonallinesconnectingthelevels)
[maCrossEvent,maCross,maCrossLevel,maCrossPc]
crossTF=trailMaTF=="SameasMovingAverages"?htf:""
[maCrossEvent,maCross,maCrossLevel,maCrossPc]=request.security(syminfo.tickerid,crossTF,f_getCross(),barmerge.gaps_off,barmerge.lookahead_on)
plot(showPivotPoints?maCrossLevel:na,color=maCrossPc,linewidth=1,offset=0,title="MaStopLevels")
//==STOPANDPRICELEVELS==
inPosition=strategy.position_size>0
buyLevel:=inPosition?buyLevel[1]:buyLevel
stopDefine=ta.valuewhen(pl,low[lbLow],0)//StopLevelatSwingLow
inProfit=strategy.position_avg_price<=stopDefine[1]
//stopLevel:=inPosition?stopLevel[1]:stopDefine//Setstoplossbasedonswinglowandleaveitthere
stopLevel:=inPositionandnotinProfit?stopDefine:inPositionandinProfit?stopLevel[1]:stopDefine//Trailstoplossuntilinprofit
trailStopLevel=float(na)
//tryingtofigureoutabetterwayforwaitingonthetrailstop-itcantriggerifabovethestopLeveleveniftheMAhadn'tbeenbreachedsinceopeningthetrade
notInPosition=strategy.position_size==0
inPositionBars=ta.barssince(notInPosition)
maCrossBars=ta.barssince(maCrossEvent)
trailCross=inPositionBars>maCrossBars
//trailCross=trailMa>stopLevel
trailStopLevel:=inPositionandtrailCross?maCrossLevel:na
plot(inPosition?stopLevel:na,style=plot.style_linebr,color=colorStop,linewidth=2,title="HistoricalStopLevels",trackprice=false)
plot(inPosition?trailStopLevel:na,style=plot.style_linebr,color=colorTrail,linewidth=2,title="HistoricalTrailStopLevels",trackprice=false)
//==PLOTSUPPORT/RESISTANCELINESFORCURRENTCHARTTIMEFRAME==
//Useafunctiontodefinethelines
f_line(x1,y1,y2,_color)=>
varlineid=na
line.delete(id)
id:=line.new(x1,y1,time,y2,xloc.bar_time,extend.right,_color)
highLine=f_line(timeSinceHigh,highLevel,highLevel,currentColorR)
lowLine=f_line(timeSinceLow,lowLevel,lowLevel,currentColorS)
//==ADRTABLE==
tablePos=tableLocation=="Top"?position.top_right:position.bottom_right
vartableadrTable=table.new(tablePos,2,1,border_width=3)
lightTransp=90
avgTransp=80
heavyTransp=70
posColor=color.rgb(38,166,154)
negColor=color.rgb(240,83,80)
volColor=color.new(#999999,0)
f_fillCellVol(_table,_column,_row,_value)=>
_transp=math.abs(_value)>7?heavyTransp:math.abs(_value)>4?avgTransp:lightTransp
_cellText=str.tostring(_value,"0.00")+"%\n"+"ADR"
table.cell(_table,_column,_row,_cellText,bgcolor=color.new(volColor,_transp),text_color=volColor,width=6)
srDistance=(highLevel-lowLevel)/highLevel*100
f_fillCellCalc(_table,_column,_row,_value)=>
_c_color=_value>=adrCompare?negColor:posColor
_transp=_value>=adrCompare*0.8and_value<=adrCompare*1.2?lightTransp:
_value>=adrCompare*0.5and_value<adrCompare*0.8?avgTransp:
_value<adrCompare*0.5?heavyTransp:
_value>adrCompare*1.2and_value<=adrCompare*1.5?avgTransp:
_value>adrCompare*1.5?heavyTransp:na
_cellText=str.tostring(_value,"0.00")+"%\n"+"Range"
table.cell(_table,_column,_row,_cellText,bgcolor=color.new(_c_color,_transp),text_color=_c_color,width=6)
ifbarstate.islast
f_fillCellVol(adrTable,0,0,adrValue)
f_fillCellCalc(adrTable,1,0,srDistance)
//f_fillCellVol(adrTable,0,0,inPositionBars)
//f_fillCellCalc(adrTable,1,0,maCrossBars)
//==STRATEGYENTRYANDEXIT==
strategy.entry("Buy",strategy.long,stop=buyLevel,when=buyConditions)
stop=stopLevel>trailStopLevel?stopLevel:close[1]>trailStopLevelandclose[1]>trailMa?trailStopLevel:stopLevel
strategy.exit("Sell",from_entry="Buy",stop=stop)
Expand (191 lines)
