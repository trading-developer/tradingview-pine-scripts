Script Name: Ultimate Ichimoku Cloud Strategy
Author: antondmt
Description: The goal of this strategy script is to provide the ultimate experience to anyone interested in the Ichimoku Kinkō Hyō (Ichimoku Cloud). The script is designed to be highly customizable and allows the user to set a custom trade date range and select any combination of inputs and conditions that satisfy their goals. Additionally, the script allows the user to...
PineScript code:

Pine Script™ strategy
Ultimate Ichimoku Cloud Strategy
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  antondmt
//@version=5
strategy("Ultimate  Ichimoku  Cloud  Strategy",  "UIC  Strategy",  true,  default_qty_type  =  strategy.percent_of_equity,  default_qty_value  =  100,  process_orders_on_close  =  true)
//  Inputs  {
//  Backtest  Range
i_time_start  =                            input.time(timestamp("2015-12-12T00:00:00"),  "Start  Date",  group  =  "Backtest  Range")
i_time_finish  =                          input.time(timestamp("2022-12-12T00:00:00"),  "Finish  Date",  group  =  "Backtest  Range")
//  Ichimoku  Lines
i_show_conversion  =                  input.bool(false,  "Show  Conversion  Line  (Tenkan  Sen)",  group  =  "Ichimoku  Lines")
i_show_base  =                              input.bool(false,  "Show  Base  Line  (Kijun  Sen)",  group  =  "Ichimoku  Lines")
i_show_lagging  =                        input.bool(false,  "Show  Lagging  Span  (Chikou  Span)",  group  =  "Ichimoku  Lines")
i_show_span_A  =                          input.bool(false,  "Show  Leading  Span  A  (Senkou  Span  A)",  group  =  "Ichimoku  Lines")
i_show_span_B  =                          input.bool(false,  "Show  Leading  Span  B  (Senkou  Span  B)",  group  =  "Ichimoku  Lines")
i_show_all  =                                input.bool(true,  "Show  All  Lines",  group  =  "Ichimoku  Lines")
//  Ichimoku  Periods
i_conversion_line_period  =    input.int(9,  "Conversion  Period",  1,  group  =  "Ichimoku  Periods")
i_base_line_period  =                input.int(26,  "Base  Line  Period",  1,  group  =  "Ichimoku  Periods")
i_leading_span_period  =          input.int(52,  "Lagging  Span  Period",  1,  group  =  "Ichimoku  Periods")
i_displacement  =                        input.int(26,  "Displacement",  1,  group  =  "Ichimoku  Periods")
//  Ichimoku  Long  Conditions
i_long_cond_1  =                          input.bool(true,  "Conversion  Crosses  Base",  "Conversion  line  crosses  up  on  base  line.",  group  =  "Ichimoku  Long  Conditions")
i_long_cond_2  =                          input.bool(false,  "Conversion  Above  Base",  "Conversion  line  is  above  base  line",  group  =  "Ichimoku  Long  Conditions")
i_long_cond_3  =                          input.bool(true,  "Positive  Cloud",  "Cloud  has  to  be  positive.  Span  A  >  Span  B.",  group  =  "Ichimoku  Long  Conditions")
i_long_cond_4  =                          input.bool(true,  "Price  Above  Cloud",  "Price  has  to  be  above  the  clouds.",  group  =  "Ichimoku  Long  Conditions")
i_long_cond_5  =                          input.bool(true,  "Positive  Chikou",  "Lagging  span  has  to  be  higher  than  price  at  displacement.",  group  =  "Ichimoku  Long  Conditions")
i_long_cond_6  =                          input.bool(true,  "Price  Above  Conversion",  "Price  has  to  be  higher  than  conversion  line.",  group  =  "Ichimoku  Long  Conditions")
i_long_cond_show  =                    input.bool(false,  "Show  Condititons  Visually",  "Draws  lines  when  condition  is  true.",  group  =  "Ichimoku  Long  Conditions")
//  Ichimoku  Short  Conditions
i_short_cond_1  =                        input.bool(true,  "Base  Crosses  Conversion",  "Base  line  crosses  up  on  conversion  line.",  group  =  "Ichimoku  Short  Conditions")
i_short_cond_2  =                        input.bool(false,  "Base  Above  Conversion",  "Base  line  is  above  conversion  line",  group  =  "Ichimoku  Short  Conditions")
i_short_cond_3  =                        input.bool(true,  "Negative  Cloud",  "Cloud  has  to  be  negative.  Span  B  >  Span  A.",  group  =  "Ichimoku  Short  Conditions")
i_short_cond_4  =                        input.bool(true,  "Price  Below  Cloud",  "Price  has  to  be  below  the  clouds.",  group  =  "Ichimoku  Short  Conditions")
i_short_cond_5  =                        input.bool(true,  "Negative  Chikou",  "Lagging  span  has  to  be  lower  than  price  at  displacement.",  group  =  "Ichimoku  Short  Conditions")
i_short_cond_6  =                        input.bool(true,  "Price  Below  Base",  "Price  has  to  be  lower  than  base  line.",  group  =  "Ichimoku  Short  Conditions")
i_short_cond_show  =                  input.bool(false,  "Show  Condititons  Visually",  "Draws  lines  when  conditionistrue.",group="IchimokuShortConditions")
//IchimokuLongExitConditions
i_sell_long_cond_1=input.bool(true,"BaseCrossesConversion","Baselinecrossesuponconversionline.",group="IchimokuLongExitConditions")
i_sell_long_cond_2=input.bool(false,"NegativeChikou","Laggingspanislowerthanpriceatdisplacement.",group="IchimokuLongExitConditions")
i_sell_long_cond_show=input.bool(false,"ShowCondititonsVisually","Drawslineswhenconditionistrue.",group="IchimokuLongExitConditions")
//IchimokuShortExitConditions
i_sell_short_cond_1=input.bool(true,"ConversionCrossesBase","Conversionlinecrossesuponbaseline.",group="IchimokuShortExitConditions")
i_sell_short_cond_2=input.bool(false,"PositiveChikou","Laggingspanishigherthanpriceatdisplacement.",group="IchimokuShortExitConditions")
i_sell_short_cond_show=input.bool(false,"ShowCondititonsVisually","Drawslineswhenconditionistrue.",group="IchimokuShortExitConditions")
//ExitsvsTP/SL
i_use_SLTP=input.bool(false,"UseSLandTPInsteadofExits",group="ExitsvsTP/SL")
i_TP=input.float(2,"TakeProfit(%)",group="ExitsvsTP/SL")
i_SL=input.float(1,"StopLoss(%)",group="ExitsvsTP/SL")
//}
//IchimokuCalculations{
donchian(len)=>
math.avg(ta.lowest(len),ta.highest(len))
conversion_line=donchian(i_conversion_line_period)
base_line=donchian(i_base_line_period)
leading_span_A=math.avg(conversion_line,base_line)
leading_span_B=donchian(i_leading_span_period)
//}
//EntriesandExitsLogic{
long_entry=false
if(i_long_cond_1ori_long_cond_2ori_long_cond_3ori_long_cond_4ori_long_cond_5ori_long_cond_6)
long_entry:=(i_long_cond_1?ta.crossover(conversion_line,base_line):true)
and(i_long_cond_2?conversion_line>base_line:true)
and(i_long_cond_3?leading_span_A[i_displacement-1]>leading_span_B[i_displacement-1]:true)
and(i_long_cond_4?close>leading_span_A[i_displacement-1]andclose>leading_span_B[i_displacement-1]:true)
and(i_long_cond_5?close>nz(close[i_displacement+1],close):true)
and(i_long_cond_6?close>conversion_line:true)

short_entry=false
if(i_short_cond_1ori_short_cond_2ori_short_cond_3ori_short_cond_4ori_short_cond_5)
short_entry:=(i_short_cond_1?ta.crossunder(conversion_line,base_line):true)
and(i_short_cond_2?base_line>conversion_line:true)
and(i_short_cond_3?leading_span_A[i_displacement-1]<leading_span_B[i_displacement-1]:true)
and(i_short_cond_4?close<leading_span_A[i_displacement-1]andclose<leading_span_B[i_displacement-1]:true)
and(i_short_cond_5?close<nz(close[i_displacement+1],close):true)
and(i_short_cond_6?close<base_line:true)

long_exit=false
if(i_sell_long_cond_1ori_sell_long_cond_2)
long_exit:=(i_sell_long_cond_1?ta.crossunder(conversion_line,base_line):true)
and(i_sell_long_cond_2?close<nz(close[i_displacement+1],close):true)

short_exit=false
if(i_sell_short_cond_1ori_sell_short_cond_2)
short_exit:=(i_sell_short_cond_1?ta.crossover(conversion_line,base_line):true)
and(i_sell_short_cond_2?close>nz(close[i_displacement+1],close):true)
dateRange()=>
i_time_start<=timeandtime<=i_time_finish?true:false
//}
//EntriesandExits{
if(strategy.position_size<=0andlong_entryanddateRange())
strategy.entry("Long",strategy.long)
if(long_exitandnoti_use_SLTP)
strategy.close("Long")
elseif(i_use_SLTP)
strategy.exit("TP/SL","Long",stop=strategy.position_avg_price*(1-i_SL/100),limit=strategy.position_avg_price*(1+i_TP/100))
if(strategy.position_size>=0andshort_entryanddateRange())
strategy.entry("Short",strategy.short)
if(short_exitandnoti_use_SLTP)
strategy.close("Short")
elseif(i_use_SLTP)
strategy.exit("TP/SL","Short",stop=strategy.position_avg_price*(1+i_SL/100),limit=strategy.position_avg_price*(1-i_TP/100))
//}
//Plots{
plot(i_show_allori_show_conversion?conversion_line:na,"ConversionLine(TenkanSen)",color.new(#0496ff,0),2)
plot(i_show_allori_show_base?base_line:na,"BaseLine(KijunSen)",color.new(#991515,0),2)
plot(i_show_allori_show_lagging?close:na,"LaggingSpan(ChikouSpan)",color.new(color.yellow,0),2,offset=-i_displacement+1)
span_A=plot(i_show_allori_show_span_A?leading_span_A:na,"LeadingSpanA(SenkouSpanA)",color.new(color.green,0),offset=i_displacement-1)
span_B=plot(i_show_allori_show_span_B?leading_span_B:na,"LeadingSpanB(SenkouSpanB)",color.new(color.red,0),offset=i_displacement-1)
fill(span_A,span_B,leading_span_A>leading_span_B?color.new(color.green,90):color.new(color.red,90),"CloudColors")
bgcolor(i_long_cond_showandlong_entry?color.new(color.green,40):na)
bgcolor(i_short_cond_showandshort_entry?color.new(color.red,40):na)
bgcolor(i_sell_long_cond_showandlong_exit?color.new(color.purple,40):na)
bgcolor(i_sell_short_cond_showandshort_exit?color.new(color.aqua,40):na)
//}
Expand (130 lines)
