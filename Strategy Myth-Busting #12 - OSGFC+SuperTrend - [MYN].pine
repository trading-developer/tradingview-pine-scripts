Script Name: Strategy Myth-Busting #12 - OSGFC+SuperTrend - [MYN]
Author: myncrypto
Description: This is part of a new series we are calling "Strategy Myth-Busting" where we take open public manual trading strategies and automate them. The goal is to not only validate the authenticity of the claims but to provide an automated version for traders who wish to trade autonomously.

Our 12th one is an automated version of the "The Most Powerful Tradingview Buy...
PineScript code:

Pine Script™ strategy
Strategy Myth-Busting #12 - OSGFC+SuperTrend - [MYN]
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  myn
//@version=5
strategy('Strategy  Myth-Busting  #12  -  OSGFC+SuperTrend  -  [MYN]',  max_bars_back=5000,  overlay=true,  pyramiding=0,  initial_capital=1000,  currency='USD',  default_qty_type=strategy.percent_of_equity,  default_qty_value=10.0,  commission_value=0.075,  use_bar_magnifier  =  false)
/////////////////////////////////////
//*  Put  your  strategy  logic  below  *//
/////////////////////////////////////
//  5XVKG4ZzVvY
//  Trading  Rules:  15  mins,  Forex  /  Crypto
//  SuperTrend  and  OSGFC  generate  buy  signal
//  Close  Buy  on  Gaussian  generating  a  sell  signal
//  Gausian  generates  sell  signal  (close  signal)
//  One-Sided  Gaussian  Filter  w/  Channels  By  Loxx
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
import  loxx/loxxexpandedsourcetypes/4 as  loxxexpandedsourcetypes
greencolor  =  #2DD204
redcolor  =  #D2042D
//ehlers  2-pole  super  smoother
_twopoless(float  src,  int  len)=>
        a1  =  0.,  b1  =  0.
        coef1  =  0.,  coef2  =  0.,  coef3  =  0.
        filt  =  0.,  trig  =  0.
        a1  :=  math.exp(-1.414  *  math.pi  /  len)
        b1  :=  2  *  a1  *  math.cos(1.414  *  math.pi  /  len)
        coef2  :=  b1
coef3:=-a1*a1
coef1:=1-coef2-coef3
filt:=coef1*src+coef2*nz(filt[1])+coef3*nz(filt[2])
filt:=bar_index<3?src:filt
filt

_gaussian(size,x)=>
out=(math.exp(-x*x*9/((size+1)*(size+1))))
out
//calcfibonaccinumbers0,1,1,2,3,5,8,13,21...etc
_fiblevels(len)=>
arr_levels=array.new_float(len,0.)
t1=0,t2=1
nxt=t1+t2
fori=0tolen-1
array.set(arr_levels,i,nxt)
t1:=t2
t2:=nxt
nxt:=t1+t2
arr_levels

//calcweightsgivenfibonumbersandhowmanyfiboschosen
_gaussout(levels)=>
perin=array.size(levels)
arr_gauss=matrix.new<float>(perin,perin,0.)
fork=0toarray.size(levels)-1
sum=0.
fori=0toperin-1
if(i>=array.get(levels,k))
break
matrix.set(arr_gauss,i,k,_gaussian(array.get(levels,k),i))
sum+=matrix.get(arr_gauss,i,k)
fori=0toperin-1
if(i>=array.get(levels,k))
break
temp=matrix.get(arr_gauss,i,k)/sum
matrix.set(arr_gauss,i,k,temp)
arr_gauss
//calcmovingaverageapplyingfibonumbers
_smthMA(level,src,per)=>
sum=0.
lvltemp=_fiblevels(per)
gtemp=_gaussout(lvltemp)
fori=0tomatrix.rows(gtemp)-1
sum+=matrix.get(gtemp,i,level)*nz(src[i])
sum
smthtype=input.string("Kaufman","Heiken-AshiBetterSmoothing",options=["AMA","T3","Kaufman"],group="One-SidedGaussianFilterw/Channels")
srcoption=input.string("Close","Source",group="One-SidedGaussianFilterw/Channels",
options=
["Close","Open","High","Low","Median","Typical","Weighted","Average","AverageMedianBody","TrendBiased","TrendBiased(Extreme)",
"HAClose","HAOpen","HAHigh","HALow","HAMedian","HATypical","HAWeighted","HAAverage","HAAverageMedianBody","HATrendBiased","HATrendBiased(Extreme)",
"HABClose","HABOpen","HABHigh","HABLow","HABMedian","HABTypical","HABWeighted","HABAverage","HABAverageMedianBody","HABTrendBiased","HABTrendBiased(Extreme)"])

smthper=input.int(10,"GuassianLevelsDepth",maxval=100,group="BasicSettings")
extrasmthper=input.int(10,"ExtraSmoothing(2-PoleEhlersSuperSmoother)Period",group="BasicSettings")
atrper=input.int(21,"ATRPeriod",group="BasicSettings")
mult=input.float(.628,"ATRMultiplier",group="BasicSettings")
colorbars=input.bool(true,"Colorbars?",group="UIOptions")
showsignals=input.bool(true,"Showsignals?",group="UIOptions")
kfl=input.float(0.666,title="*Kaufman'sAdaptiveMA(KAMA)Only-FastEnd",group="MovingAverageInputs")
ksl=input.float(0.0645,title="*Kaufman'sAdaptiveMA(KAMA)Only-SlowEnd",group="MovingAverageInputs")
amafl=input.int(2,title="*AdaptiveMovingAverage(AMA)Only-Fast",group="MovingAverageInputs")
amasl=input.int(30,title="*AdaptiveMovingAverage(AMA)Only-Slow",group="MovingAverageInputs")
haclose=request.security(ticker.heikinashi(syminfo.tickerid),timeframe.period,close)
haopen=request.security(ticker.heikinashi(syminfo.tickerid),timeframe.period,open)
hahigh=request.security(ticker.heikinashi(syminfo.tickerid),timeframe.period,high)
halow=request.security(ticker.heikinashi(syminfo.tickerid),timeframe.period,low)
hamedian=request.security(ticker.heikinashi(syminfo.tickerid),timeframe.period,hl2)
hatypical=request.security(ticker.heikinashi(syminfo.tickerid),timeframe.period,hlc3)
haweighted=request.security(ticker.heikinashi(syminfo.tickerid),timeframe.period,hlcc4)
haaverage=request.security(ticker.heikinashi(syminfo.tickerid),timeframe.period,ohlc4)
floatsrc=switchsrcoption
"Close"=>loxxexpandedsourcetypes.rclose()
"Open"=>loxxexpandedsourcetypes.ropen()
"High"=>loxxexpandedsourcetypes.rhigh()
"Low"=>loxxexpandedsourcetypes.rlow()
"Median"=>loxxexpandedsourcetypes.rmedian()
"Typical"=>loxxexpandedsourcetypes.rtypical()
"Weighted"=>loxxexpandedsourcetypes.rweighted()
"Average"=>loxxexpandedsourcetypes.raverage()
"AverageMedianBody"=>loxxexpandedsourcetypes.ravemedbody()
"TrendBiased"=>loxxexpandedsourcetypes.rtrendb()
"TrendBiased(Extreme)"=>loxxexpandedsourcetypes.rtrendbext()
"HAClose"=>loxxexpandedsourcetypes.haclose(haclose)
"HAOpen"=>loxxexpandedsourcetypes.haopen(haopen)
"HAHigh"=>loxxexpandedsourcetypes.hahigh(hahigh)
"HALow"=>loxxexpandedsourcetypes.halow(halow)
"HAMedian"=>loxxexpandedsourcetypes.hamedian(hamedian)
"HATypical"=>loxxexpandedsourcetypes.hatypical(hatypical)
"HAWeighted"=>loxxexpandedsourcetypes.haweighted(haweighted)
"HAAverage"=>loxxexpandedsourcetypes.haaverage(haaverage)
"HAAverageMedianBody"=>loxxexpandedsourcetypes.haavemedbody(haclose,haopen)
"HATrendBiased"=>loxxexpandedsourcetypes.hatrendb(haclose,haopen,hahigh,halow)
"HATrendBiased(Extreme)"=>loxxexpandedsourcetypes.hatrendbext(haclose,haopen,hahigh,halow)
"HABClose"=>loxxexpandedsourcetypes.habclose(smthtype,amafl,amasl,kfl,ksl)
"HABOpen"=>loxxexpandedsourcetypes.habopen(smthtype,amafl,amasl,kfl,ksl)
"HABHigh"=>loxxexpandedsourcetypes.habhigh(smthtype,amafl,amasl,kfl,ksl)
"HABLow"=>loxxexpandedsourcetypes.hablow(smthtype,amafl,amasl,kfl,ksl)
"HABMedian"=>loxxexpandedsourcetypes.habmedian(smthtype,amafl,amasl,kfl,ksl)
"HABTypical"=>loxxexpandedsourcetypes.habtypical(smthtype,amafl,amasl,kfl,ksl)
"HABWeighted"=>loxxexpandedsourcetypes.habweighted(smthtype,amafl,amasl,kfl,ksl)
"HABAverage"=>loxxexpandedsourcetypes.habaverage(smthtype,amafl,amasl,kfl,ksl)
"HABAverageMedianBody"=>loxxexpandedsourcetypes.habavemedbody(smthtype,amafl,amasl,kfl,ksl)
"HABTrendBiased"=>loxxexpandedsourcetypes.habtrendb(smthtype,amafl,amasl,kfl,ksl)
"HABTrendBiased(Extreme)"=>loxxexpandedsourcetypes.habtrendbext(smthtype,amafl,amasl,kfl,ksl)
=>haclose
lmax=smthper+1
out1=_smthMA(smthper,src,lmax)
out=_twopoless(out1,extrasmthper)
sig=out[1]
colorout=out>sig?greencolor:redcolor
atr=ta.atr(atrper)
smax=out+atr*mult
smin=out-atr*mult
plot(smax,color=bar_index%2?color.silver:na,linewidth=1)
plot(smin,color=bar_index%2?color.silver:na,linewidth=1)
plot(out,"GMA",color=colorout,linewidth=4)
barcolor(colorbars?colorout:na)
goLong=ta.crossover(out,sig)
goShort=ta.crossunder(out,sig)
plotshape(goLongandshowsignals,title="Long",color=color.yellow,textcolor=color.yellow,text="L",style=shape.triangleup,location=location.belowbar,size=size.tiny)
plotshape(goShortandshowsignals,title="Short",color=color.fuchsia,textcolor=color.fuchsia,text="S",style=shape.triangledown,location=location.abovebar,size=size.tiny)
alertcondition(goLong,title="Long",message="One-SidedGaussianFilterw/Channels[Loxx]:Long\nSymbol:{{ticker}}\nPrice:{{close}}")
alertcondition(goShort,title="Short",message="One-SidedGaussianFilterw/Channels[Loxx]:Short\nSymbol:{{ticker}}\nPrice:{{close}}")
OSGFCLongEntry=goLong
OSGFCShortgEntry=goShort
i_numLookbackBarsOSGFC=input(0,title="NumberofbarstolookbacktovalidateTrend")
OSGFCLongEntryFinal=goLongandta.barssince(OSGFCShortgEntry)>i_numLookbackBarsOSGFC
OSGFCShortgEntryFinal=goShortandta.barssince(OSGFCLongEntry)>i_numLookbackBarsOSGFC
OSGFCLongClose=OSGFCShortgEntry
OSGFCShortClose=OSGFCLongEntry
//SuperTrend(TradingViewInteral)
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
atrPeriod1=input(10,"ATRLength",group="SuperTrend")
factor=input.float(3.0,"Factor",step=0.01)
[supertrend1,direction1]=ta.supertrend(factor,atrPeriod1)
bodyMiddle=plot((open+close)/2,display=display.none)
upTrend=plot(direction1<0?supertrend1:na,"UpTrend",color=color.green,style=plot.style_linebr)
downTrend=plot(direction1<0?na:supertrend1,"DownTrend",color=color.red,style=plot.style_linebr)
fill(bodyMiddle,upTrend,color.new(color.green,90),fillgaps=false)
fill(bodyMiddle,downTrend,color.new(color.red,90),fillgaps=false)
superTrendLongEntry=direction1<0
superTrendShortEntry=direction1>0
i_numLookbackBarsST=input(0,title="NumberofbarstolookbacktovalidateTrend")
superTrendLongEntryFinal=superTrendLongEntryandta.barssince(superTrendShortEntry)>i_numLookbackBarsST
superTrendShortEntryFinal=superTrendShortEntryandta.barssince(superTrendLongEntry)>i_numLookbackBarsST
//////////////////////////////////////
//*Putyourstrategyrulesbelow*//
/////////////////////////////////////
longCondition=OSGFCLongEntryFinalandsuperTrendLongEntryFinal
shortCondition=OSGFCShortgEntryFinalandsuperTrendShortEntryFinal
//defineas0ifdonotwanttouse
closeLongCondition=OSGFCLongClose
closeShortCondition=OSGFCShortClose
//ADX
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
adxEnabled=input.bool(defval=false,title="AverageDirectionalIndex(ADX)",tooltip="",group="ADX")
adxlen=input(14,title="ADXSmoothing",group="ADX")
adxdilen=input(14,title="DILength",group="ADX")
adxabove=input(25,title="ADXThreshold",group="ADX")
adxdirmov(len)=>
adxup=ta.change(high)
adxdown=-ta.change(low)
adxplusDM=na(adxup)?na:(adxup>adxdownandadxup>0?adxup:0)
adxminusDM=na(adxdown)?na:(adxdown>adxupandadxdown>0?adxdown:0)
adxtruerange=ta.rma(ta.tr,len)
adxplus=fixnan(100*ta.rma(adxplusDM,len)/adxtruerange)
adxminus=fixnan(100*ta.rma(adxminusDM,len)/adxtruerange)
[adxplus,adxminus]
adx(adxdilen,adxlen)=>
[adxplus,adxminus]=adxdirmov(adxdilen)
adxsum=adxplus+adxminus
adx=100*ta.rma(math.abs(adxplus-adxminus)/(adxsum==0?1:adxsum),adxlen)
adxsig=adxEnabled?adx(adxdilen,adxlen):na
isADXEnabledAndAboveThreshold=adxEnabled?(adxsig>adxabove):true
//BacktestingTimePeriod(Input.timenotworkingasexpectedasof03/30/2021.Givingoddstart/enddates
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
useStartPeriodTime=input.bool(true,'Start',group='DateRange',inline='StartPeriod')
startPeriodTime=input.time(timestamp('1Jan2019'),'',group='DateRange',inline='StartPeriod')
useEndPeriodTime=input.bool(true,'End',group='DateRange',inline='EndPeriod')
endPeriodTime=input.time(timestamp('31Dec2030'),'',group='DateRange',inline='EndPeriod')
start=useStartPeriodTime?startPeriodTime>=time:false
end=useEndPeriodTime?endPeriodTime<=time:false
calcPeriod=notstartandnotend
//TradeDirection
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
tradeDirection=input.string('LongandShort',title='TradeDirection',options=['LongandShort','LongOnly','ShortOnly'],group='TradeDirection')
//PercentasPoints
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
per(pcnt)=>
strategy.position_size!=0?math.round(pcnt/100*strategy.position_avg_price/syminfo.mintick):float(na)
//Takeprofit1
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
tp1=input.float(title='TakeProfit1-Target%',defval=100,minval=0.0,step=0.5,group='TakeProfit',inline='TakeProfit1')
q1=input.int(title='%OfPosition',defval=100,minval=0,group='TakeProfit',inline='TakeProfit1')
//Takeprofit2
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
tp2=input.float(title='TakeProfit2-Target%',defval=100,minval=0.0,step=0.5,group='TakeProfit',inline='TakeProfit2')
q2=input.int(title='%OfPosition',defval=100,minval=0,group='TakeProfit',inline='TakeProfit2')
//Takeprofit3
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
tp3=input.float(title='TakeProfit3-Target%',defval=100,minval=0.0,step=0.5,group='TakeProfit',inline='TakeProfit3')
q3=input.int(title='%OfPosition',defval=100,minval=0,group='TakeProfit',inline='TakeProfit3')
//Takeprofit4
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
tp4=input.float(title='TakeProfit4-Target%',defval=100,minval=0.0,step=0.5,group='TakeProfit')
///StopLoss
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
stoplossPercent=input.float(title='StopLoss(%)',defval=999,minval=0.01,group='StopLoss')*0.01
slLongClose=close<strategy.position_avg_price*(1-stoplossPercent)
slShortClose=close>strategy.position_avg_price*(1+stoplossPercent)
///Leverage
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
leverage=input.float(1,'Leverage',step=.5,group='Leverage')
contracts=math.min(math.max(.000001,strategy.equity/close*leverage),1000000000)
///TradeStateManagement
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
isInLongPosition=strategy.position_size>0
isInShortPosition=strategy.position_size<0
///ProfitViewAlertSyntaxStringGeneration
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
alertSyntaxPrefix=input.string(defval='CRYPTANEX_99FTX_Strategy-Name-Here',title='AlertSyntaxPrefix',group='ProfitViewAlertSyntax')
alertSyntaxBase=alertSyntaxPrefix+'\n#'+str.tostring(open)+','+str.tostring(high)+','+str.tostring(low)+','+str.tostring(close)+','+str.tostring(volume)+','
///TradeExecution
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
longConditionCalc=(longConditionandisADXEnabledAndAboveThreshold)
shortConditionCalc=(shortConditionandisADXEnabledAndAboveThreshold)
ifcalcPeriod
iflongConditionCalcandtradeDirection!='ShortOnly'andisInLongPosition==false
strategy.entry('Long',strategy.long,qty=contracts)
alert(message=alertSyntaxBase+'side:long',freq=alert.freq_once_per_bar_close)
ifshortConditionCalcandtradeDirection!='LongOnly'andisInShortPosition==false
strategy.entry('Short',strategy.short,qty=contracts)
alert(message=alertSyntaxBase+'side:short',freq=alert.freq_once_per_bar_close)

//InspiredfromMultiple%%profitexitsexamplebyadolgohttps://www.tradingview.com/script/kHhCik9f-Multiple-profit-exits-example/
strategy.exit('TP1',qty_percent=q1,profit=per(tp1))
strategy.exit('TP2',qty_percent=q2,profit=per(tp2))
strategy.exit('TP3',qty_percent=q3,profit=per(tp3))
strategy.exit('TP4',profit=per(tp4))
strategy.close('Long',qty_percent=100,comment='SLLong',when=slLongClose)
strategy.close('Short',qty_percent=100,comment='SLShort',when=slShortClose)
strategy.close_all(when=closeLongConditionorcloseShortCondition,comment='ClosePostion')
///Dashboard
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//Inspiredbyhttps://www.tradingview.com/script/uWqKX6A2/-ThanksVertMT
showDashboard=input.bool(group="Dashboard",title="ShowDashboard",defval=true)
f_fillCell(_table,_column,_row,_title,_value,_bgcolor,_txtcolor)=>
_cellText=_title+"\n"+_value
table.cell(_table,_column,_row,_cellText,bgcolor=_bgcolor,text_color=_txtcolor,text_size=size.auto)
//Drawdashboardtable
ifshowDashboard
varbgcolor=color.new(color.black,0)

//KeeptrackofWins/Lossesstreaks
newWin=(strategy.wintrades>strategy.wintrades[1])and(strategy.losstrades==strategy.losstrades[1])and(strategy.eventrades==strategy.eventrades[1])
newLoss=(strategy.wintrades==strategy.wintrades[1])and(strategy.losstrades>strategy.losstrades[1])and(strategy.eventrades==strategy.eventrades[1])
varipintwinRow=0
varipintlossRow=0
varipintmaxWinRow=0
varipintmaxLossRow=0
ifnewWin
lossRow:=0
winRow:=winRow+1
ifwinRow>maxWinRow
maxWinRow:=winRow

ifnewLoss
winRow:=0
lossRow:=lossRow+1
iflossRow>maxLossRow
maxLossRow:=lossRow
//Preparestatstable
vartabledashTable=table.new(position.bottom_right,1,15,border_width=1)


ifbarstate.islastconfirmedhistory
//Updatetable
dollarReturn=strategy.netprofit
f_fillCell(dashTable,0,0,"Start:",str.format("{0,date,long}",strategy.closedtrades.entry_time(0)),bgcolor,color.white)//+str.format("{0,time,HH:mm}",strategy.closedtrades.entry_time(0))
f_fillCell(dashTable,0,1,"End:",str.format("{0,date,long}",strategy.opentrades.entry_time(0)),bgcolor,color.white)//+str.format("{0,time,HH:mm}",strategy.opentrades.entry_time(0))
_profit=(strategy.netprofit/strategy.initial_capital)*100
f_fillCell(dashTable,0,2,"NetProfit:",str.tostring(_profit,'##.##')+"%",_profit>0?color.green:color.red,color.white)
_numOfDaysInStrategy=(strategy.opentrades.entry_time(0)-strategy.closedtrades.entry_time(0))/(1000*3600*24)
f_fillCell(dashTable,0,3,"PercentPerDay",str.tostring(_profit/_numOfDaysInStrategy,'#########################.#####')+"%",_profit>0?color.green:color.red,color.white)
_winRate=(strategy.wintrades/strategy.closedtrades)*100
f_fillCell(dashTable,0,4,"PercentProfitable:",str.tostring(_winRate,'##.##')+"%",_winRate<50?color.red:_winRate<75?#999900:color.green,color.white)
f_fillCell(dashTable,0,5,"ProfitFactor:",str.tostring(strategy.grossprofit/strategy.grossloss,'##.###'),strategy.grossprofit>strategy.grossloss?color.green:color.red,color.white)
f_fillCell(dashTable,0,6,"TotalTrades:",str.tostring(strategy.closedtrades),bgcolor,color.white)
f_fillCell(dashTable,0,8,"MaxWinsInARow:",str.tostring(maxWinRow,'######'),bgcolor,color.white)
f_fillCell(dashTable,0,9,"MaxLossesInARow:",str.tostring(maxLossRow,'######'),bgcolor,color.white)
Expand (394 lines)
