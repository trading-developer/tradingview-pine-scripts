Script Name: BT-SAR Ema, Squeeze, Volatility
Author: Credsonb
Description: Esse script foi criado para estudo de Backtest.

Ele usa o SAR PARABÓLICO como indicador de sinal de entrada, você também pode combinar 3 indicadores para filtrar as entradas: Média Móvel, Squeeze Momentum   e Volatility Oscilator  .
Existe duas entradas, quando o SAR Parabólico vira ou pelo Breakout (usando o último preço) do SAR Parabólico antes dele...
PineScript code:

Pine Script™ strategy
BT-SAR Ema, Squeeze, Volatility
//VERSION  =================================================================================================================
//@version=5
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  This  strategy  is  intended  to  study.
//  It  can  also  be  used  to  signal  a  bot  to  open  a  deal  by  providing  the  Bot  ID,  email  token  and  trading  pair  in  the  strategy  settings  screen.
//  As  currently  written,  this  strategy  uses  a  SAR  PARABOLIC  to  send  signal,  and  EMA,  Squeeze  Momentum,  Volatility  Oscilator  as  filter.
//  There  are  two  enter  point,  when  SAR  Flips,  or  Breakout  Point  -  the  last  SAR  Value  before  it  Flips.
//  There  are  tree  options  for  exit:  SAR  Flips,  Fixed  Stop  Loss  ande  Fixed  Take  Profit  in  %  and  Risk  Reward  tha  can  be  set,  0.5/1,  1/1  etc.
//Autor  M4TR1X_BR
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//STRATEGY  ================================================================================================================
strategy(title  =  'BT-SAR  Ema,  Squeeze,  Voltatility',
                  shorttitle  =  'SAR  ESV',
                  overlay  =  true,
                  pyramiding  =  0,
                  default_qty_type  =  strategy.cash,
                  default_qty_value  =  300,
                  initial_capital  =  1000,
                  max_lines_count  =  150,
                  process_orders_on_close=true,
                  max_labels_count  =  150)
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//  INPUTS  =================================================================================================================
//  TIME  INPUTS
usefromDate  =  input.bool(defval  =  true,  title  =  'Start  date',  inline  =  '0',  group  =  "Time  Filters")
initialDate  =  input.time(defval  =  timestamp('01  Jan  2022  00:00  UTC'),  title  =  '',  inline  =  "0",group  =  'Time  Filters',tooltip="This  start  date  is  in  the  time  zone  of  the  exchange  ")
usetoDate  =  input.bool(defval  =  true,  title  =  'End  date',  inline  =  '1',  group  =  "Time  Filters")
finalDate  =  input.time(defval  =  timestamp('31  Dec  2029  23:59  UTC'),  title  =  '',  inline  =  "1",group  =  'Time  Filters',tooltip="This  end  date  is  in  the  time  zone  of  the  exchange")
//  TIME  LOGIC
inTradeWindow  =  not  usefromDate  and  not  usetoDate  or  (time  >=  initialDate  and  time  <  finalDate)
//  SAR  PARABOLIC  INPUTS  ==================================================================================================
string  sargroup=    "SAR  PARABOLIC  ========================================="
start  =  input.float(defval=0.02,title='Start',inline='',group  =  sargroup)
increment  =  input.float(defval=0.02,title='Increment',inline='',group  =  sargroup)
maximum  =  input.float(defval=0.2,title='Maximo',inline='',group  =  sargroup)
//  SAR  PARABOLIC  LOGIC
out  =  ta.sar(start,  increment,  maximum)
//  SAR  FLIP  OR  BREAKOUT  OPTIONS
string  bkgroup  ='SAR  TRADE  SIGNAL  ======================================  '
sarTradeSignal  =input.string(defval='SAR  Flip',title='SAR  Trade  Signal',  options=  ['SAR  Flip','SAR  Breakout'],group=bkgroup,  tooltip='SAR  Flip:  Once  the  parabolic  SAR  flips  it  will  send  a  signal,  SAR  Breakout:  Will  wait  the  price  cross  last  Sar  Value  before  it  flips.')
nBars  =  input.int(defval=4,title='Bars',group=bkgroup,  tooltip  ='Define  the  number  of  bars  for  a  entry  when  the  price  cross  breakout  point')
float  sarBreakoutPoint=  ta.valuewhen((close[1]  <  out[1])    and  (close  >  out),out[1],0)      //Get  Sar  Breakout  Point
bool  check  =  (close[1]  <  out[1])    and  (close  >  out)                                                                          //Verify  when  sar  flips
bool  BreakoutPrice  =  sarTradeSignal=='SAR  Breakout'?  (ta.barssince(check)  <  nBars)  and  ((open  <  sarBreakoutPoint)  and  (close  >  sarBreakoutPoint)):  (ta.barssince(check)  <  nBars)  and  (close  >  out)
barcolor  (check?  color.yellow:na,title="Signal  Bar  color"  )
//  MOVING  AVERAGES  INPUTS  ================================================================================================
string  magroup  =    "Moving  Average  ========================================"
useEma  =  input.bool(defval  =  true,  title  =  'Moving  Average  Filter',inline='',  group=  magroup,tooltip='This  will  enable  or  disable  Exponential  Moving  Average  Filter  on  Strategy')
emaType=input.string  (defval='Ema',title='Type',options=['Ema','Sma'],inline='',  group=  magroup)
emaSource  =  input.source(defval=close,title="    Source",inline="",  group=  magroup)
emaLength  =  input.int(defval=100,title="Length",minval=0,inline='',  group=  magroup)
//  MOVING  AVERAGE  LOGIC
float  ema  =  emaType=='Ema'?  ta.ema(emaSource,emaLength):  ta.sma(emaSource,emaLength)
//  VOLATILITY  OSCILLATOR  =================================================================================================
string  vogroup  =    "VOLATILITY  OSCILLATOR  ================================="
useVltFilter=input.bool(defval=true,title="Volatility  Oscillator  Filter",inline='',group=  vogroup,tooltip='This  will  enable  or  disable  Volatility  Oscillator  filter  on  Strategy')
vltFilterLength  =  input.int(defval=100,title="Volatility  Oscillator",inline='',group=vogroup)
vltFilterSpike  =  close  -  open
vltFilterX  =  ta.stdev(vltFilterSpike,vltFilterLength)
vltFilterY  =  ta.stdev(vltFilterSpike,vltFilterLength)  *  -1
//  SQUEEZE  MOMENTUM  INPUTS  ==============================================================================================
string  sqzgroup  =  "SQUEEZE  MOMENTUM  ====================================="
useSqzFilter=input.bool(defval=true,title="Squeeze  Momentum  Filter",inline='',group=  sqzgroup,  tooltip='This  will  enable  or  disable  Squeeze  Momentum  filter  on  Strategy')
sqzFilterlength  =  input.int(defval=20,  title='Bollinger  Bands  Length',inline='',group=  sqzgroup)
sqzFiltermult  =  input.float(defval=2.0,  title='Boliinger  Bands  Mult',inline='',group=  sqzgroup)
keltnerLength  =  input.int(defval=20,  title='Keltner  Channel  Length',inline='',group=  sqzgroup)
keltnerMult  =  input.float(defval=1.5,  title='Keltner  Channel  Mult',inline='',group=  sqzgroup)
useTrueRange  =  input(true,  title='Use  TrueRange  (KC)',  inline='',group=  sqzgroup)
//  CALCULATE  BOLLINGER  BANDS
sqzFilterSrc  =  close
basis  =  ta.sma(sqzFilterSrc,  sqzFilterlength)
dev  =  keltnerMult  *  ta.stdev(sqzFilterSrc,  sqzFilterlength)
upperBB  =  basis  +  dev
lowerBB  =  basis  -  dev
//  CALCULATE  KELTNER  CHANNEL
sma  =  ta.sma(sqzFilterSrc,  keltnerLength)
range_1  =  useTrueRange  ?  ta.tr  :  high  -  low
rangema  =  ta.sma(range_1,  keltnerLength)
upperKC  =  sma  +  rangema  *  keltnerMult
lowerKC  =  sma  -  rangema  *  keltnerMult
//  CHECK  IF  BOLLINGER  BANDS  IS  IN  OR  OUT  OF  KELTNER  CHANNEL
sqzOn  =  lowerBB  >  lowerKC  and  upperBB  <  upperKC
sqzOff  =  lowerBB  <  lowerKC  and  upperBB  >  upperKC
noSqz  =  sqzOn  ==  false  and  sqzOff  ==  false
//  SQUEEZE  MOMENTUM  LOGIC
val  =  ta.linreg(sqzFilterSrc  -  math.avg(math.avg(ta.highest(high,  keltnerLength),  ta.lowest(low,  keltnerLength)),ta.sma(close,  keltnerLength)),  keltnerLength,  0)
//  ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//  TAKE  PROFIT  STOP  LOSS  INPUTS  =========================================================================================
string  tkpgroup='Take  Profit  =================================================='
tpType  =  input.string(defval  =  'SAR  Flip',  title='Take  Profit  and  Stop  Loss',  options=['SAR  Flip','Fixed  %  TP/SL',  'Risk  Reward  TP/SL'],  group=tkpgroup  )
longTakeProfitPerc  =  input.float(defval  =  1.5,  title  =  'Fixed  TP  %',  minval  =  0.05,  step  =  0.5,  group=tkpgroup,  tooltip  =  'The  percentage  increase  to  set  the  take  profit  price  target.')/100
longLossPerc  =  input.float(defval=1.0,  title="Fixed  Long  SL  %",  minval=0.1,  step=0.5,  group  =  tkpgroup,  tooltip  =  'The  percentage  increase  to  set  the  Long  Stop  Loss  price  target.')  *  0.01
//shortLossPerc  =  input.float(defval=1.5,  title="Fixed  Short  SL  (%)",  minval=0.1,  step=0.5,  group  =  tkpgroup,  tooltip  =  'The  percentage  increase  to  set  the  Short  Stop  Loss  price  target.')  *  0.01
longTakeProfitRR  =  input.float(defval  =  1,  title  =  'Risk  Reward  TP',  minval  =  0.25,  step  =  0.25,  group=tkpgroup,  tooltip  =  'The  Risk  Reward  parameter.')
var  plotStopLossRR  =  input.bool(defval=false,  title='Show  RR  Stop  Loss',  group=tkpgroup)
//enableStopLossRR  =  input.bool(defval  =  false,  title  =  'Enable  Risk  Reward  TP',group=tkpgroup,  tooltip  =  'Enable  Variable  Stop  Loss.')
string  trpgroup='Traling  Profit  ==============================================='
enableTrailing  =  input.bool(defval  =  false,  title  =  'Enable  Trailing',group=trpgroup,  tooltip='Enableordisablethetrailingfortakeprofit.')
trailingTakeProfitDeviationPerc=input.float(defval=0.1,title='TrailingTakeProfitDeviation%',minval=0.01,maxval=100,step=0.01,group=trpgroup,tooltip='Thesteptofollowthepricewhenthetakeprofitlimitisreached.')/100
//BOTMESSAGES
stringmsgroup='AlertMessageForBot========================================='
messageEntry=input.string("",title="StrategyEntryMessage",group=msgroup)
messageExit=input.string("",title="StrategyExitMessage",group=msgroup)
messageClose=input.string("",title="StrategyCloseMessage",group=msgroup)
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//POSITIONS=============================================================================================================
//VERIFYIFTHEBUYFILTERSAREONOROFF
boolemaFilterBuy=useEma?(close>ema):(close>=ema)or(close<=ema)
boolvolatilityFilterBuy=useVltFilter?(vltFilterSpike>vltFilterX):(vltFilterSpike>=0)or(vltFilterSpike<=0)
boolsqzFilterBuy=useSqzFilter?(val>val[1]):(val>=val[1]orval<=val[1])
boolsarflip=(close>out)
//LONG/SHORTPOSITIONSLOGIC
//Var'check'willverifyiftheSARflipsandiftheexitpriceoccursitwilllimitinbarsnumberanewentryonthesamesignal.
boollimitEntryNumbers=(ta.barssince(check)<nBars)
boolopenLongPosition=sarTradeSignal=='SARFlip'?(sarflipandemaFilterBuyandvolatilityFilterBuyandsqzFilterBuyandlimitEntryNumbers):sarTradeSignal=='SARBreakout'?(BreakoutPriceandemaFilterBuyandvolatilityFilterBuyandsqzFilterBuy):na
boolopenShortPosition=na
boolcloseLongPosition=tpType=='SARFlip'?(close<out):na
boolcloseShortPosition=na
//CHEKOPENPOSITONS=====================================================================================================
//opensignalwhennotalreadyintoaposition
boolvalidOpenLongPosition=openLongPositionandstrategy.opentrades.size(strategy.opentrades-1)<=0
boollongIsActive=validOpenLongPositionorstrategy.opentrades.size(strategy.opentrades-1)>0
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//TAKEPROFITSTOPLOSSCONFIG==========================================================================================
//FIXEDTAKEPROFITIN%
floatposSize=strategy.opentrades.entry_price(strategy.opentrades-1)//Gettheentryprice
varfloatlongTakeProfitPrice=na
longTakeProfitPrice:=if(longIsActive)
if(openLongPositionandnot(strategy.opentrades.size(strategy.opentrades-1)>0))
posSize*(1+longTakeProfitPerc)
else
nz(longTakeProfitPrice[1],close*(1+longTakeProfitPerc))
else
na
longTrailingTakeProfitStepTicks=longTakeProfitPrice*trailingTakeProfitDeviationPerc/syminfo.mintick
//FIXEDSTOPLOSSIN%
longStopPrice=strategy.position_avg_price*(1-longLossPerc)
//shortStopPrice=strategy.position_avg_price*(1+shortLossPerc)
//TAKEPROFITBYRISK/REWARD
//Setstoploss
tta=not(strategy.opentrades.size(strategy.opentrades-1)>0)
floatlastb=ta.valuewhen(checkandtta,ta.lowest(low,5),0)-(10*syminfo.mintick)
//TAKEPROFITCALCULATION
floatstopLossRisk=(posSize-lastb)
floattakeProfitRR=posSize+(longTakeProfitRR*stopLossRisk)
//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//POSITIONORDERS=====================================================================================================
//LOGIC===============================================================================================================
//gettingintoLONGposition
if(openLongPosition)and(inTradeWindow)
strategy.entry(id='LongEntry',direction=strategy.long,alert_message=messageEntry)
//submitexitordersfortrailingtakeprofitprice
if(longIsActive)and(inTradeWindow)
strategy.exit(id='LongTakeProfit',from_entry='LongEntry',limit=enableTrailing?na:tpType=='Fixed%TP/SL'?longTakeProfitPrice:tpType=='RiskRewardTP/SL'?takeProfitRR:na,trail_price=enableTrailing?longTakeProfitPrice:na,trail_offset=enableTrailing?longTrailingTakeProfitStepTicks:na,stop=tpType=='Fixed%TP/SL'?longStopPrice:tpType=='RiskRewardTP/SL'?lastb:na,alert_message=messageExit)
if(closeLongPosition)
strategy.close(id='LongEntry',alert_message=messageClose)

//▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
//PLOTS===============================================================================================================
//TRADEWINDOW========================================================================================================
bgcolor(color=inTradeWindow?color.new(#089981,90):na,title='TimeWindow')
//SARPARABOLIC
varsarColor=color.new(#00bcd4,0)
plot(out,"ParabolicSAR",color=sarColor,linewidth=1,style=plot.style_cross)
//BREAKOUTLINE
varplotBkPoint=input.bool(defval=false,title='ShowBreakoutPoint',group=bkgroup)
plot(series=(sarTradeSignal=='SARBreakout'andplotBkPoint==true)?sarBreakoutPoint:na,title='Breakoutline',color=color.new(#ffeb3b,50),linewidth=1,style=plot.style_linebr,offset=0)
//EMA/SMA
varemafilterColor=color.new(color.white,0)
plot(series=useEma?ema:na,title='EMAFilter',color=emafilterColor,linewidth=2,style=plot.style_line)
//ENTRYPRICE
varposColor=color.new(#2962ff,0)
plot(series=strategy.opentrades.entry_price(strategy.opentrades-1),title='Position',color=posColor,linewidth=1,style=plot.style_linebr,offset=0)
//FIXEDTAKEPROFIT
vartakeProfitColor=color.new(#ba68c8,0)
plot(series=tpType=='Fixed%TP/SL'?longTakeProfitPrice:na,title='FixedTP',color=takeProfitColor,linewidth=1,style=plot.style_linebr,offset=0)
//FIXEDSTOPLOSS
varstopLossColor=color.new(#ff0000,0)
plot(series=tpType=='Fixed%TP/SL'?longStopPrice:na,title='FixedSL',color=stopLossColor,linewidth=1,style=plot.style_linebr,offset=0)
//RISKREWARDTAKEPROFIT
vartakeProfitRRColor=color.new(#ba68c8,0)
plot(series=tpType=='RiskRewardTP/SL'?takeProfitRR:na,title='RiskRewardTP',color=takeProfitRRColor,linewidth=1,style=plot.style_linebr)
//STOPLOSSRISKREWARD
plot(series=(checkandplotStopLossRR)?lastb:na,title='LastBottom',color=color.new(#ff0000,0),linewidth=2,style=plot.style_linebr,offset=0)
//======================================================================================================================
Expand (269 lines)
