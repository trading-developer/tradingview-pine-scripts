Script Name: BTC and ETH Long strategy - version 2
Author: philipina
Description: I wrote my first article in May 2020.  See below

 BTC and ETH Long strategy - version1

After 6 months, it is now time to check the result of my script for the last 6 months.

XBTUSD (4H): 14/05/2020 --> 22/11/2020 = +78% in 4 trades
ETHXBT (4H): 14/05/2020 --> 22/11/2020 = +21% in 9 trades
ETHUSD (4H): 14/05/2020 --> 22/11/2020 = +90% in 6 trades

Using the...
PineScript code:

Pine Scriptâ„¢ strategy
BTC and ETH Long strategy - version 2
//@version=4
strategy(title="BTC_Long_Only_TV01_200507",  overlay=true,  max_bars_back=3000,  initial_capital=1000,  commission_value=0.1)
////////////  !!!!!!!!!!!!!!!!  WORK  BEST  IN  2  HOURS  for  BTC,  ETH  and  ETHXBT  !!!!!!!!!!!!!!!!!!!  /////////////////////
//280820  -  After  long  esting  this  is  the  best  script  for  ETHUSD  in  4  hours.  From  01/01/2020  til  28/08/2020
[macdLine,  macdSignalLine,  macdHist]  =  macd(close,  12,  26,  7)
//_rsi_len  =  input(14,  title="RSI  length")
_rsi_len  =  14

NewValue  =  0
PreviousValue  =  0
leverage  =  1
smaPercentageIncrease  =  0.0
SMA_PERCENT_INCREASE  =  0.0
float  atrValue  =  0
bool  bPositionOpened  =  false
float  stockPositionSize  =  0
float  volatilityPercentage  =  0.0
bool  bDisplayArrow  =  false
bool  bEMAIsRising  =  false
bool  bSMAIsRising  =  false
bool  bSMASlowIsRising  =  false
bool  bMACDIsRising  =  false
bool  bMACDHistIsRising  =  false
bool  bMACDSignalIsRising  =  false
float  stopLoss  =  input  (5,  "StopLoss  in  %",  type=input.float)  //StopLoss  associated  with  the  order
//Best  for  alt  versus  BTC  float  stopLoss  =  input  (3,  "StopLoss  in  %",  type=input.float)  //StopLoss  associated  with  the  order
float  positionSize  =  1000
float  currentPrice  =  close
float  stopLossPrice  =  0
float  entryPrice  =  0
//-----------------------------------------------------------
//  ===  INPUT  BACKTEST  RANGE  ONE  YEAR
//FromDay      =  input(defval  =  01,  title  =  "From  Day",  minval  =  1,  maxval  =  31)
//FromMonth  =  input(defval  =  01,  title  =  "From  Month",  minval  =  1,  maxval  =  12)
//FromYear    =  input(defval  =  2020,  title  =  "From  Year",  minval  =  2017)
FromDay      =  01
FromMonth  =  01
FromYear    =  2020
//ToDay          =  input(defval  =  01,  title  =  "To  Day",  minval  =  1,  maxval  =  31)
//ToMonth      =  input(defval  =  01,  title  =  "To  Month",  minval  =  1,  maxval  =  12)
//ToYear        =  input(defval  =  2023,  title  =  "To  Year",  minval  =  2017)
ToDay          =  14
ToMonth      =  05
ToYear        =  2029
//  ===  FUNCTION  EXAMPLE  ===
start          =  timestamp(FromYear,  FromMonth,  FromDay,  00,  00)    //  backtest  start  window
finish        =  timestamp(ToYear,  ToMonth,  ToDay,  23,  59)                //  backtest  finish  window
window()    =>  time  >=  start  and  time  <=  finish  ?  true  :  false  //  create  function  "within  window  of  time"
//FUNCTION  DEFINITIONS
//----------------------
IsRising(data,  loopBack)  =>
        bIsRising  =  true
        for  n  =  1  to  loopBack
                if  data[n]  >  data[n-1]
                        bIsRising  :=  false
                continue
        bIsRising

IsFalling(data,  loopBack)  =>
        bIsFalling  =  true
        for  n  =  1  to  loopBack
                if  data[n]  <  data[n-1]
                        bIsFalling  :=  false
                continue
        bIsFalling

//  END  OF  FUNCTION  DEFINITIONS  //
emaLength  =  20
smaLength  =  100
smaSlowLength  =  200

ema  =  ema(close,  emaLength)
sma  =  sma(close,  smaLength)
smaSlow  =  sma(close,  smaSlowLength)
plot(sma,  color=color.green)
plot(smaSlow,  color=color.orange)
plot(ema,  color=color.yellow)
//reload  previous  values
stopLossPrice  :=  na(stopLossPrice[1])  ?  0.0  :  stopLossPrice[1]
entryPrice  :=  na(entryPrice[1])  ?  0.0  :  entryPrice[1]
bPositionOpened  :=  na(bPositionOpened[1])  ?  false  :  bPositionOpened[1]
positionSize  :=  na(positionSize[1])  ?  1000  :  positionSize[1]
stockPositionSize  :=  na(stockPositionSize[1])  ?  0  :  stockPositionSize[1]
//leverage  :=  na(leverage[1])  ?  1  :  leverage[1]
bEMAIsRising  :=  IsRising(ema,  2)
bSMAIsRising  :=  IsRising(sma,  3)
bMACDIsRising  :=  IsRising(macdLine,  3)
bMACDHistIsRising  :=  IsRising(macdHist,  1)
bSMASlowIsRising  :=  IsRising(smaSlow,  10)
bMACDSignalIsRising  :=  IsRising(macdSignalLine,  3)
atrValue  :=  atr(14)
volatilityPercentage  :=  (atrValue/currentPrice)*100  //calcute  the  volatility.  Percentage  of  the  actual  price

if  (window())
        //Check  if  we  can  open  a  LONG
        if  (bPositionOpened  ==  false  and  bSMASlowIsRising  ==  true  and  bMACDIsRising  ==  true  and  bEMAIsRising  ==  true  and  bSMAIsRising  ==  true  and  ema[0]  >  sma[0]  and  sma[0]  <  currentPrice)
                //Enter  in  short  position
                stockPositionSize  :=  (positionSize*leverage)/currentPrice  //Calculate  the  position  size  based  on  the  actual  price  and  the  position  Size  (in  $)  configured.

                //calculate  exit  values
                stopLossPrice  :=  currentPrice*(1-stopLoss/100)
                strategy.entry("myPosition",  strategy.long,  qty=stockPositionSize,  comment="BUY  at  "  +  tostring(currentPrice))
                entryPrice  :=  currentPrice  //store  the  entry  price
                bPositionOpened  :=  true
                bDisplayArrow  :=  true

        if  (bPositionOpened  ==  true  and  (currentPrice  <=  stopLossPrice  or  crossunder(ema[1],  sma[1])))
                strategy.close("myPosition",  comment=""  +  tostring(currentPrice)  )  //Stop
                //uncomment  the  below  line  to  make  the  bot  investing  the  full  portfolio  amount  to  test  compounding  effect.
                //positionSize  :=  positionSize  +  ((stockPositionSize  *  currentPrice)  -  (positionSize*leverage))
                //reset  some  flags
                bPositionOpened  :=  false
                bDisplayArrow  :=  true
                entryPrice  :=  0.0

Expand (138 lines)
