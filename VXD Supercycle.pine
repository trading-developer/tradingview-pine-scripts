Script Name: VXD Supercycle
Author: Vvaz_
Description: VXD  is a brand new indicator and still developing. to minimize stop losses and overcome sideways market conditions, Higher Timeframe are recommended

 Trend lines
-using Rolling VWAP as trend line to determined if Volume related to a certain price.
-you can switch RVWAP to EMA in the setting

 ATR
-trailing 12*ATR and 2.4 Mutiplier

 Pivot point and Rejected...
PineScript code:

Pine Script™ strategy
VXD Supercycle
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  Vvaz_
//@version=5
//This  Strategy  Combined  the  following  indicators  and  conditioning  by  me
//Rolling  VWAP  ,  ATR  ,  RSI  ,  EMA  ,  SMA
//Subhag        form  Subhag  Ghosh
//OB  PPDD      Form  Super  OrderBlock  /  FVG  /  BoS  Tools  by  makuchaku  &  eFe
strategy("VXD  Supercycle",  "VXD",  overlay=true  ,  initial_capital=100  ,currency  =  currency.USD  ,  pyramiding  =  1  ,process_orders_on_close=  true)
//  Strategy  Setting
uselong          =  input.bool(title="Open  Buy?",  defval  =  true  ,  group='═══════════  Strategy  Setting  ═══════════')
useshort        =  input.bool(title="Open  Sell?",  defval  =  true  ,  group='═══════════  Strategy  Setting  ═══════════')
useRSIC          =input.bool(title="Use  RSI  Condition?",  defval  =  true  ,  group='═══════════  Strategy  Setting  ═══════════')
usefilter      =input.bool(title="Use  Filter  Condition?",  defval  =  true  ,  group='═══════════  Strategy  Setting  ═══════════',  tooltip  =  'Excute  Order  when  subhag  is  following  a  trend.')
riskPer          =  input.int(10,  "Lost  per  trade($)",  minval  =  1,  group='═══════════  Strategy  Setting  ═══════════',  tooltip  =  'เจ๊งได้เท่าไหร่?(ต่อ  1  ไม้นะ)')
useSL              =  input.bool(title="Use  TP/SL?",  defval  =  true  ,  inline='Set',  group='═══════════  Strategy  Setting  ═══════════')
usetpcl          =  input.color(defval=color.new(color.orange,0),  title='Color',  inline='Set',  group='═══════════  Strategy  Setting  ═══════════')
rrPer              =  input.float(3.00,  "Risk:Reward",  minval  =  1,  step=0.1,  group='═══════════  Strategy  Setting  ═══════════')
TPper              =  input.float(50,  "Equity  %  Take  Profit",  minval  =  0.1,  step=5,  group='═══════════  Strategy  Setting  ═══════════',  tooltip='Take  a  snack  and  let  profit  run.')
//  INPUT  BACKTEST  RANGE
var  string  BTR1                  =  '════════  INPUT  BACKTEST  TIME  RANGE  ════════'
i_startTime                          =  input.time(defval  =  timestamp("01  Jan  1945  00:00  +0000"),  title  =  "Start",  inline="timestart",  group=BTR1)
i_endTime                              =  input.time(defval  =  timestamp("01  Jan  2074  23:59  +0000"),  title  =  "End",  inline="timeend",  group=BTR1)
timeCond                                =  (time  >  i_startTime)  and  (time  <  i_endTime)
////////////////////////////////////  function  MA  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ma(source,  length,  type)  =>
        type  ==  "SMA"  ?  ta.sma(source,  length)  :
          type  ==  "EMA"  ?  ta.ema(source,  length)  :
          type  ==  "SMMA  (RMA)"  ?  ta.rma(source,  length)  :
          type  ==  "WMA"  ?  ta.wma(source,  length)  :
          type  ==  "VWMA"  ?  ta.vwma(source,  length)  :
          na
////////////////////////////////    RVWAP  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import  PineCoders/ConditionalAverages/1  as  pc
var  string  GRP2              =  '═══════════  VWAP  Setting  ═══════════'
var  string  TT_MINBARS  =  "The  minimum  number  of  last  values  to  keep  in  the  moving  window,  even  if  these  values  are  outside  the  time  period.  This  avoids  situations  where  a  large  time  gap  between  two  bars  would  cause  the  time  window  to  be  empty."
int  MS_IN_MIN      =  60  *  1000
int  MS_IN_HOUR    =  MS_IN_MIN    *  60
int  MS_IN_DAY      =  MS_IN_HOUR  *  24
float  srcInput                =  input.source(close,  "Source",  tooltip  =  "The  source  used  to  calculate  the  VWAP.  The  default  is  the  average  of  the  high,  low  and  close  prices.",  group  =  GRP2)
int    minBarsInput          =  input.int(21,  "Min  Bars",  group  =  GRP2,  tooltip  =  TT_MINBARS)
timeStep()  =>
        //  @function        Determines  a  time  period  from  the  chart's  timeframe.
        //  @returns          (int)  A  value  of  time  in  milliseconds  that  is  appropriate  for  the  current  chart  timeframe.  To  be  used  in  the  RVWAP  calculation.
        int  tfInMs  =  timeframe.in_seconds()  *  1000
        float  step  =
            switch
                tfInMs  <=  MS_IN_MIN                =>  MS_IN_HOUR
                tfInMs  <=  MS_IN_MIN  *  5        =>  MS_IN_HOUR  *  4
                tfInMs  <=  MS_IN_HOUR              =>  MS_IN_DAY  *  1
                tfInMs  <=  MS_IN_HOUR  *  4      =>  MS_IN_DAY  *  3
                tfInMs  <=  MS_IN_HOUR  *  12    =>  MS_IN_DAY  *  7
                tfInMs  <=  MS_IN_DAY                =>  MS_IN_DAY  *  30.4375
                tfInMs  <=  MS_IN_DAY  *  7        =>  MS_IN_DAY  *  90
                =>  MS_IN_DAY  *  365
        int  result  =  int(step)
//  RVWAP
float  rollingVWAP  =  pc.totalForTimeWhen(srcInput  *  volume,  timeStep(),  true,  minBarsInput)  /  pc.totalForTimeWhen(volume,  timeStep(),  true,  minBarsInput)
/////////////////////////    ATR    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Periods  =  input.int(title="ATR  Period",  defval=12  ,group='═══════════  ATR  Setting  ═══════════')
Multiplier  =  input.float(title="ATR  Multiplier",  step=0.1,  defval=2.4,group='═══════════  ATR  Setting  ═══════════')
[supertrend,  direction]  =  ta.supertrend(Multiplier,  Periods)
/////////////////////////    RSI    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
LengthRSI  =  input.int(25,'RSI',  minval=1,  group='═══════════  RSI  Setting  ═══════════')
LengthRSIMA  =  input.int(14,'RSI-MA',  minval=1,  group='═══════════  RSI  Setting  ═══════════',  tooltip  =  'RSI  MA  corss  50  Trigger  Order')
/////////////////////////    MA    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
useMA  =  input.bool(title="Use  VWAP?",  defval  =  true  ,  group='═══════════  MA  Setting  ═══════════',  tooltip  =  'Use  VWAP  trend  line')
LengthMA  =  input.int(21,'EMA',  minval=1,  group='═══════════  MA  Setting  ═══════════',  tooltip  =  'Act  as  Trend  line')
sma2cl                    =  input.color(defval=color.new(color.yellow,0),  title='EMA  Slow',  group='═══════════  MA  Setting  ═══════════'  ,inline  =  'sma200')
LengthMA2  =  input.int(200,'SMA',  minval=1,  group='═══════════  MA  Setting  ═══════════'  ,inline  =  'sma200')
float  MA_1  =  ta.ema(close,  LengthMA)
MA_2  =  ta.sma(close,  LengthMA2)
SourceOpen  =  (open  +  close[1])  /  2
Candleopen  =  ta.ema(SourceOpen,25)
Bodycolor  =  Candleopen  >  Candleopen[1]  ?  color.green  :  color.red
//////////////////////////  Subhag  form  Subhag  Ghosh  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
length  =  input.int(100,  minval=1,  group='═══════════  Subhag  Setting  ═══════════')
smoothing  =  input.int(17,  minval=1,  group='═══════════  Subhag  Setting  ═══════════')
//  Regression  Lines
linreg                                    =  ta.ema(ta.linreg(close,  length,  0),smoothing)
//COLOR  of  Regression  Line
hullColor  =  linreg  >  linreg[3]  ?  color.green  :linreg  <  linreg[3]  ?  color.red:color.yellow
///////////////////////////////definetrend/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
trendL=useMAandta.cum(nz(volume))!=0?rollingVWAP:MA_1
upTrend=direction<0?supertrend:linreg[3]
downTrend=direction<0?linreg:supertrend
fastl=ta.ema(close,2)
greenzone=(fastl>trendL)and(direction<0)and(close>linreg)and(Bodycolor==color.green)
redzone=(fastl<trendL)and(direction>0)and(close<linreg)and(Bodycolor==color.red)
greenzoneB=(fastl>trendL)and(direction<0)and(hullColor==color.green)and(Bodycolor==color.green)
redzoneB=(fastl<trendL)and(direction>0)and(hullColor==color.red)and(Bodycolor==color.red)
//plotMAandcandle
zonecl=greenzone?color.green:redzone?color.red:color.yellow
main1=plot(trendL,title="EMAFast",color=zonecl,linewidth=1)
main2=plot(MA_2,title="EMASlow",color=sma2cl,linewidth=2)
//-------------------------------NSDTHAMACandels
plotbar(linreg[3],upTrend,downTrend,linreg,color=color.new(hullColor,60),title='ConfigureBars')
//////////////////////////////////OBPPDDFormSuperOrderBlock/FVG/BoSToolsbymakuchaku&eFe//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
plotPVT=input.bool(defval=true,title='PlotPivots',group='═══════════Pivots═══════════')
pivotLookup=input.int(defval=5,minval=1,maxval=8,title='PivotLookup',group='═══════════Pivots═══════════',tooltip='Minimum=1,Maximum=8')
pivotsizing=input.int(defval=50,minval=1,maxval=100,title='Pivotbarsbackforsizing',group='═══════════Pivots═══════════',tooltip='Minimum=1,Maximum=100')
plotInThePast=input(false,"PlotWhenPivotisDetected",group='═══════════Pivots═══════════')
pvtTopColor=input.color(defval=color.new(color.lime,10),title='PivotTopColor',group='═══════════Pivots═══════════',inline='PVTTopColor')
pvtBottomColor=input.color(defval=color.new(color.red,10),title='PivotBottomColor',group='═══════════Pivots═══════════',inline='PVTTopColor')
plotRJB=input.bool(defval=true,title='PlotRJB',group='═══════════RejectionBlocks═══════════',inline='RJBsets')
bosBoxFlag=input.bool(title='BoxLengthManually',defval=false,group='═══════════RejectionBlocks═══════════',tooltip='IfactivatedtheBoSBoxeswillnotextendunitlcrossedbyprice.Insteadwillextendbytheamountofbarschooseninthe"SetBoSBoxLengthManually"option')
bosBoxLength=input.int(title='BoxLengthManually',defval=3,minval=1,maxval=5,group='═══════════RejectionBlocks═══════════',tooltip='If"SetBoSBoxLengthManually"ismarked,choosebyhowmanybars.Minimum=1,Maximum=5')
rjbBullColor=input.color(defval=color.new(color.green,70),title='BullishRJBColor',inline='SetCustomColor',group='═══════════RejectionBlocks═══════════')
rjbBearColor=input.color(defval=color.new(color.red,70),title='BearishRJBColor',inline='SetCustomColor',group='═══════════RejectionBlocks═══════════')
rjbBoxBorder=input.string(defval=line.style_solid,title='RJBBoxBorderStyle',options=[line.style_dashed,line.style_dotted,line.style_solid],group='═══════════RejectionBlocks═══════════',tooltip='Todisableborder,setBorderWidthbelowto0')
rjbBorderTransparency=input.int(defval=100,title='RJBBorderBoxTransparency',minval=0,maxval=100,group='═══════════RejectionBlocks═══════════')
rjbMaxBoxSet=input.int(defval=100,title='MaximumRJBBoxDisplayed',minval=1,maxval=100,group='═══════════RejectionBlocks═══════════',tooltip='Minimum=1,Maximum=100')
filterMitRJB=input.bool(defval=true,title='CustomColorMitigatedRJB',group='═══════════RejectionBlocks═══════════')
mitRJBColor=input.color(defval=color.new(color.gray,90),title='MitigatedRJBColor',group='═══════════RejectionBlocks═══════════',inline='SetCustomColorMitRJB',tooltip='Setto100tomakemitigatedRJBdisappear')
plotHVB=input.bool(defval=true,title='PlotHVB',group='═══════════HighVolumeBar═══════════',tooltip='Acandlewheretheaveragevolumeishigherthanlastfewbars.')
hvbBullColor=input.color(defval=color.new(color.green,0),title='BullishHVBColor',inline='SetCustomColor',group='═══════════HighVolumeBar═══════════')
hvbBearColor=input.color(defval=color.new(color.orange,0),title='BearishHVBColor',inline='SetCustomColor',group='═══════════HighVolumeBar═══════════')
hvbEMAPeriod=input.int(defval=6,minval=1,title='VolumeEMAPeriod',group='═══════════HighVolumeBar═══════════')
hvbMultiplier=input.float(defval=1.2,title='VolumeMultiplier',minval=1,maxval=100,group='═══════════HighVolumeBar═══════════')
plotPPDD=input.bool(defval=true,title="PlotPPDDOB's",group='═══════════Qualitativeindicators═══════════',tooltip='PremiumPremiumDiscountDiscount(PPDD)isanOBformedafterliquiditysweep.Itwillshowupbydefaultasacircle(Bullgreen/Bearred).AlsoPPDD1(bydeafultmakedwithax-cross⨯)whichisaweakOBformedafterliquiditysweep,thatfailstocompletelyengulfthehigh/low,butclosesbeyondthetrappedcandlesopenprice.')
ppddBullColor=input.color(defval=color.new(color.green,0),title="BullishPPDDOB'sColor",group='═══════════Qualitativeindicators═══════════',inline='PPDDBull')
ppddBearColor=input.color(defval=color.new(color.red,0),title="BearishPPDDOB'sColor",group='═══════════Qualitativeindicators═══════════',inline='PPDDBear')
//labels
plotLabelRJB=input.bool(defval=false,title='PlotRJBLabel',inline='RJBlabel',group='═══════════LabelOptions═══════════')
rjbLabelColor=input.color(defval=color.gray,title='Color',inline='RJBlabel',group='═══════════LabelOptions═══════════')
rjbLabelSize=input.string(defval=size.tiny,title="Size",options=[size.huge,size.large,size.small,size.tiny,size.auto,size.normal],inline='RJBlabel',group='═══════════LabelOptions═══════════')
//BoxTypes
varint_rjb=3
varint_bos=4
//BoxLabels
varstring_rjbLabel="RJB"
varstring_plus="+"
varstring_minus="-"
varstring_empty=""
//BoxArrays
varbox[]_bearBoxesRJB=array.new_box()
varbox[]_bullBoxesRJB=array.new_box()
//Functions
isUp(index)=>
close[index]>open[index]
isDown(index)=>
close[index]<open[index]
isObUp(index)=>
isDown(index+1)andisUp(index)andclose[index]>high[index+1]
isObDown(index)=>
isUp(index+1)andisDown(index)andclose[index]<low[index+1]
isFvgUp(index)=>
(low[index]>high[index+2])
isFvgDown(index)=>
(high[index]<low[index+2])
//FunctiontoCalculteBoxLength
_controlBox(_boxes,_high,_low,_type)=>
ifarray.size(_boxes)>0
fori=array.size(_boxes)-1to0by1
_box=array.get(_boxes,i)
_boxLow=box.get_bottom(_box)
_boxHigh=box.get_top(_box)
_boxRight=box.get_right(_box)
ifbosBoxFlagand_type==_bos
ifnaor(bar_index+bosBoxLength-1==_boxRightandnot((_high>_boxLowand_low<_boxLow)or(_high>_boxHighand_low<_boxHigh)))
box.set_right(_box,bar_index+bosBoxLength-1)
elseif(filterMitRJBand_type==_rjb)
ifnaor(bar_index==_boxRightandnot((_high>_boxLowand_low<_boxLow)or(_high>_boxHighand_low<_boxHigh)))
box.set_right(_box,bar_index+1)
else
if_type==_rjb
box.set_bgcolor(_box,mitRJBColor)
box.set_border_color(_box,mitRJBColor)
else
ifnaor(bar_index==_boxRightandnot((_high>_boxLowand_low<_boxLow)or(_high>_boxHighand_low<_boxHigh)))
box.set_right(_box,bar_index+1)
////////////////////RejectionBlock//////////////////
ifplotRJB
isDownRjbObCondition=isObDown(1)
isDownRjb1=isDownRjbObConditionand(high[1]<(close[2]+0.2*(high[2]-close[2])))//RJBisontrapped'swickand<50%ofthewickwascoveredbysignal
isDownRjb2=isDownRjbObConditionand(high[1]>high[2])//RJBisonsignal'swick
ifisDownRjb1andplotRJB
_bearboxRJB=box.new(left=bar_index-2,top=high[2],right=bar_index,bottom=close[2],bgcolor=rjbBearColor,border_color=color.new(rjbBearColor,rjbBorderTransparency),border_style=rjbBoxBorder,border_width=1,
text=plotLabelRJB?_rjbLabel+_minus:_empty,text_halign=text.align_right,text_valign=text.align_bottom,text_size=rjbLabelSize,text_color=rjbLabelColor)
ifarray.size(_bearBoxesRJB)>rjbMaxBoxSet
box.delete(array.shift(_bearBoxesRJB))
array.push(_bearBoxesRJB,_bearboxRJB)

ifisDownRjb2andplotRJB
_bearboxRJB=box.new(left=bar_index-1,top=high[1],right=bar_index,bottom=open[1],bgcolor=rjbBearColor,border_color=color.new(rjbBearColor,rjbBorderTransparency),border_style=rjbBoxBorder,border_width=1,
text=plotLabelRJB?_rjbLabel+_minus:_empty,text_halign=text.align_right,text_valign=text.align_bottom,text_size=rjbLabelSize,text_color=rjbLabelColor)
ifarray.size(_bearBoxesRJB)>rjbMaxBoxSet
box.delete(array.shift(_bearBoxesRJB))
array.push(_bearBoxesRJB,_bearboxRJB)
//BullishRJBBoxPlotting
ifplotRJB
isUpRjbObCondition=isObUp(1)
isUpRjb1=isUpRjbObConditionand(low[1]>(close[2]-0.2*(close[2]-low[2])))//RJBisontrapped'swickand<50%ofthewickwascoveredbysignal
isUpRjb2=isUpRjbObConditionand(low[1]<low[2])//RJBisonsignal'swick
ifisUpRjb1andplotRJB
_bullboxRJB=box.new(left=bar_index-2,top=close[2],right=bar_index,bottom=low[2],bgcolor=rjbBullColor,border_color=color.new(rjbBullColor,rjbBorderTransparency),border_style=rjbBoxBorder,border_width=1,
text=plotLabelRJB?_rjbLabel+_plus:_empty,text_halign=text.align_right,text_valign=text.align_bottom,text_size=rjbLabelSize,text_color=rjbLabelColor)
ifarray.size(_bullBoxesRJB)>rjbMaxBoxSet
box.delete(array.shift(_bullBoxesRJB))
array.push(_bullBoxesRJB,_bullboxRJB)

ifisUpRjb2andplotRJB
_bullboxRJB=box.new(left=bar_index-1,top=open[1],right=bar_index,bottom=low[1],bgcolor=rjbBullColor,border_color=color.new(rjbBullColor,rjbBorderTransparency),border_style=rjbBoxBorder,border_width=1,
text=plotLabelRJB?_rjbLabel+_plus:_empty,text_halign=text.align_right,text_valign=text.align_bottom,text_size=rjbLabelSize,text_color=rjbLabelColor)
ifarray.size(_bullBoxesRJB)>rjbMaxBoxSet
box.delete(array.shift(_bullBoxesRJB))
array.push(_bullBoxesRJB,_bullboxRJB)
ifplotRJB
_controlBox(_bearBoxesRJB,high,low,_rjb)
_controlBox(_bullBoxesRJB,high,low,_rjb)
////////////////////Pivots////////////////////
hih=ta.pivothigh(high,pivotLookup,pivotLookup)
lol=ta.pivotlow(low,pivotLookup,pivotLookup)
top=ta.valuewhen(hih,high[pivotLookup],0)
bottom=ta.valuewhen(lol,low[pivotLookup],0)
pvtop=plot(top,offset=plotInThePast?0:-pivotLookup,linewidth=1,color=(top!=top[1]?na:(plotPVT?pvtTopColor:na)),title="PivotTop")
pvdow=plot(bottom,offset=plotInThePast?0:-pivotLookup,linewidth=1,color=(bottom!=bottom[1]?na:(plotPVT?pvtBottomColor:na)),title="PivotBottom")
////////////////////PremiumPremium&DiscountDiscount//////////////////
premiumPremium=plotPPDDandisObDown(0)and((math.max(high,high[1])>topandclose<top)or(math.max(high,high[1])>top[1]andclose<top[1]))
discountDiscount=plotPPDDandisObUp(0)and((math.min(low,low[1])<bottomandclose>bottom)or(math.min(low,low[1])<bottom[1]andclose>bottom[1]))
plotshape(premiumPremium,"BearishPPDDOB",style=shape.circle,location=location.abovebar,color=ppddBearColor,size=size.tiny)
plotshape(discountDiscount,"BullishPPDDOB",style=shape.circle,location=location.belowbar,color=ppddBullColor,size=size.tiny)
premiumPremium1=plotPPDDand(isUp(1)andisDown(0)andclose[0]<open[1])and((math.max(high,high[1])>topandclose<top)or(math.max(high,high[1])>top[1]andclose<top[1]))andnotpremiumPremium
discountDiscount1=plotPPDDand(isDown(1)andisUp(0)andclose[0]>open[1])and((math.min(low,low[1])<bottomandclose>bottom)or(math.min(low,low[1])<bottom[1]andclose>bottom[1]))andnotdiscountDiscount
plotshape(premiumPremium1,"BearishPPDDWeakOB",style=shape.xcross,location=location.abovebar,color=ppddBearColor,size=size.tiny)
plotshape(discountDiscount1,"BullishPPDDWeakOB",style=shape.xcross,location=location.belowbar,color=ppddBullColor,size=size.tiny)
//////////////////HighVolumeBars//////////////////
volEma=ta.sma(volume,hvbEMAPeriod)
isHighVolume=volume>(hvbMultiplier*volEma)
barcolor(plotHVBandisUp(0)andisHighVolume?hvbBullColor:na,title="BullishHVB")
barcolor(plotHVBandisDown(0)andisHighVolume?hvbBearColor:na,title="BearishHVB")
//////////////////////////////////Strategycondition////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
openoncel=strategy.opentrades==0or(strategy.opentrades.entry_id(0)=='Short2')
openonces=strategy.opentrades==0or(strategy.opentrades.entry_id(0)=='long2')
exitshort=(fastl>trendL)and(direction<0)and(close>top)and(close>linreg)
exitlong=(fastl<trendL)and(direction>0)and(close<bottom)and(close<linreg)
//sizing
highest=ta.highest(top,pivotsizing)
lowest=ta.lowest(bottom,pivotsizing)
lotsbull=math.abs((riskPer)/(close-lowest))
lotsbear=math.abs((riskPer)/(highest-close))
////conditionforRSI
rsibb=ta.rsi(close,LengthRSI)
rsiMA=ma(rsibb,LengthRSIMA,"SMA")
rsibuy1=ta.crossover(rsiMA,50)and(rsibb>rsiMA)anduseRSICand(close>top)andgreenzoneandtimeCond
rsibuy2=ta.crossover(rsiMA,50)and(rsibb>rsiMA)anduseRSICand(close>top)andgreenzoneBandtimeCond
rsisell1=ta.crossunder(rsiMA,50)and(rsibb<rsiMA)anduseRSICand(close<bottom)andredzoneandtimeCond
rsisell2=ta.crossunder(rsiMA,50)and(rsibb<rsiMA)anduseRSICand(close<bottom)andredzoneBandtimeCond
//conditionfortrend
LongCondition=(close>supertrend)andopenonceland(close>top)andgreenzoneandtimeCond
ShortCondition=(close<supertrend)andopenoncesand(close<bottom)andredzoneandtimeCond
LongConditionB=(close>supertrend)andopenonceland(close>top)andgreenzoneBandtimeCond
ShortConditionB=(close<supertrend)andopenoncesand(close<bottom)andredzoneBandtimeCond
position_size=strategy.position_size
actionbull=usefilter==true?(rsibuy2orLongConditionB):(rsibuy1orLongCondition)
actionbear=usefilter==true?(rsisell2orShortConditionB):(ShortConditionorrsisell1)
changetbull=ta.change(actionbull),changetbear=ta.change(actionbear),buyprice=0.0,sellprice=0.0,mapast=0.0,slprice=0.0,openprice=strategy.opentrades.entry_price(0),sl_percent_bear=0.0,sl_percent_bull=0.0,onetrade=0
buyprice:=position_size>=0?changetbull?openprice:buyprice[1]:na
sellprice:=position_size<=0?changetbear?openprice:sellprice[1]:na
mapast:=changetbull?MA_2:changetbear?MA_2:mapast[1]
onetrade:=TPper==100?(changetbull?1:changetbear?-1:onetrade[1]):0
slprice:=changetbull?lowest:changetbear?highest:slprice[1]
sl_percent_bull:=changetbull?(buyprice-lowest)/buyprice:(position_size>0)?sl_percent_bull[1]:(position_size<0)?0.0:0.0
takeProfitBull=buyprice*(1+(sl_percent_bull*rrPer))
sl_percent_bear:=changetbear?(highest-sellprice)/sellprice:(position_size<0)?sl_percent_bear[1]:(position_size>0)?0.0:0.0
takeProfitBear=sellprice*(1-(sl_percent_bear*rrPer))
plot(useSLandchangetbull?takeProfitBull:useSLandchangetbear?takeProfitBear:na,'TP',usetpcl,style=plot.style_linebr,linewidth=1)
plot(useSLandchangetbull?slprice:useSLandchangetbear?slprice:na,'SL',usetpcl,style=plot.style_linebr,linewidth=1)
stringAlert_OpenLong='LongEntry!on'+syminfo.ticker+'\nBuy@'+str.tostring(close)+'\nSize='+str.tostring(lotsbull)+'\nSL='+str.tostring(slprice)
stringAlert_OpenShort='ShortEntry!on'+syminfo.ticker+'\nSell@'+str.tostring(close)+'\nSize='+str.tostring(lotsbear)+'\nSL='+str.tostring(slprice)
stringAlert_LongTP='TPLongon'+syminfo.ticker+'@'+str.tostring(takeProfitBull)+'Size='+str.tostring((position_size*(TPper/100)))
stringAlert_ShortTP='TPShorton'+syminfo.ticker+'@'+str.tostring(takeProfitBear)+'Size='+str.tostring((position_size*(TPper/100)))
varmessage_closelong='TailingStopLong!!!'
varmessage_closeshort='TailingStopShort!!!'
stringAlert_StopLosslong='StopLossLong!on'+syminfo.ticker+'@'+str.tostring(slprice)
stringAlert_StopLossshort='StopLossShort!on'+syminfo.ticker+'@'+str.tostring(slprice)
//exitorder
if(exitlong==true)
strategy.close('long2',comment='TailingStop-L',alert_message=message_closelong)
if(exitshort==true)
strategy.close('Short2',comment='TailingStop-S',alert_message=message_closeshort)
//long
if(uselong==true)andchangetbulland(onetrade[1]!=1)
strategy.entry('long2',strategy.long,qty=lotsbull,comment='Long',alert_message=Alert_OpenLong)
//Short
if(useshort==true)andchangetbearand(onetrade[1]!=-1)
strategy.entry('Short2',strategy.short,qty=lotsbear,comment='Short',alert_message=Alert_OpenShort)
//TPSL
if(position_size>0)anduseSLand(low<buyprice)
strategy.exit('TPSLB','long2',comment='SL',stop=slprice,alert_message=Alert_StopLosslong)
elseif(position_size>0)anduseSLand(low>buyprice)
strategy.exit('TPSLB','long2',comment='TP',limit=takeProfitBull,alert_message=Alert_LongTP,qty_percent=TPper)
else
strategy.cancel('TPSLB')
if(position_size<0)anduseSLand(high>sellprice)
strategy.exit('TPSLS','Short2',comment='SL',stop=slprice,alert_message=Alert_StopLossshort)
elseif(position_size<0)anduseSLand(high<sellprice)
strategy.exit('TPSLS','Short2',comment='TP',limit=takeProfitBear,alert_message=Alert_ShortTP,qty_percent=TPper)
else
strategy.cancel('TPSLS')
//////////////////////////////////ByVvaz_////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Expand (310 lines)
