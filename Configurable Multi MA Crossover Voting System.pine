Script Name: Configurable Multi MA Crossover Voting System
Author: levieux
Description: This strategy goes long when all fast moving averages that you have defined are above their counterpart slow moving averages.

Long position is closed when profit or loss target is hit and at least one of the fast moving averages is below its counterpart slow moving average.

The format of the config is simple. The format is : FASTxSLOW,FASTxSLOW,...
Example : If...
PineScript code:

Pine Script™ strategy
Configurable Multi MA Crossover Voting System
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  levieux
//@version=5
strategy(title='Configurable  Multi  MA  Crossover  Voting  System',  shorttitle='Configurable  Multi  MA  Crossover  Voting  System',  initial_capital=1000,  overlay=true,  default_qty_type=strategy.percent_of_equity,  default_qty_value=100,  commission_type=strategy.commission.percent,  commission_value=0.1)
crossoverConfig=  input.string(defval="2x4,3x5,4x6",  title="Crossover  Config")
source=  input.source(high)
maType=  input.string("WMA",  title="Moving  Average  Type",  options=["WMA","SMA","VWMA"])
atrPeriod=  input(14,  title="ATR  Period")
profitAtr  =  input(10,  title="Profit  ATR  x")
lossAtr  =  input(5,  title="Loss  ATR  x")
ma(src,length,type)  =>
        float  ma  =  switch  type
                "SMA"  =>  ta.sma(src,  length)
                "WMA"  =>  ta.wma(src,  length)
                "VWMA"  =>  ta.vwma(src,  length)
crossoverGroups=  str.split(crossoverConfig,  ",")
crossoverCount=  array.size(crossoverGroups)
crossovers=  array.new_string(crossoverCount)
positions=  array.new_int(crossoverCount,  0)
longVotes=  0
for  i=  0  to  crossoverCount-1
        crossover=  str.tostring(array.get(crossoverGroups,  i))
        crossoverBoundaries=  str.split(crossover,  "x")
        int  fastLength=  math.round(str.tonumber(array.get(crossoverBoundaries,  0)))
        int  slowLength=  math.round(str.tonumber(array.get(crossoverBoundaries,  1)))
        wmaFast=  ma(source,fastLength,maType)
        wmaSlow=  ma(source,slowLength,maType)
        if  wmaFast>wmaSlow
                longVotes:=  longVotes  +  1
                array.set(positions,  i,  1)
longCondition=  longVotes==crossoverCount  and  strategy.position_size==0
//profitTicks  =  profitAtr*ta.atr(atrPeriod)/syminfo.mintick
//lossTicks  =  lossAtr*ta.atr(atrPeriod)/syminfo.mintick
profitPrice=  close+profitAtr*ta.atr(atrPeriod)
lossPrice=  close-lossAtr*ta.atr(atrPeriod)
if  strategy.position_size>0
        profitPrice:=  profitPrice[1]
        lossPrice:=  lossPrice[1]
plot(profitPrice,  color=color.green)
plot(lossPrice,  color=color.red)
if  longCondition  and  profitPrice>0
        strategy.entry("Long",  strategy.long)
if  longVotes<crossoverCount  and  strategy.position_size>0  and  (high>profitPrice  or  low<lossPrice)
        strategy.close("Long")

longVotes:=  0
Expand (57 lines)
