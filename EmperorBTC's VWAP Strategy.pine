Script Name: EmperorBTC's VWAP Strategy
Author: vaidab
Description: EmperorBTC's VWAP Indicator & Strategy
             v2.1

     coded by Bogdan Vaida

This indicator was created after EmperorBTC's conditions.
Good timeframes for it: 30', 15', 5'
To convert from strategy to study switch the commented lines in the beginning
and at the end of the script and vice versa.

What this indicator does is to check if:
o Pivot Point was...
PineScript code:

Pine Scriptâ„¢ strategy
EmperorBTC's VWAP Strategy
//  EmperorBTC's  VWAP  Indicator  &  Strategy
//                            v2.1
//
//            coded  by  Bogdan  Vaida
//  This  indicator  was  created  after  EmperorBTC's  conditions  on  Twitter.
//  Good  timeframes  for  it:  30',  15',  5'
//  To  convert  from  strategy  to  study  switch  the  commented  lines  in  the  beginning
//  and  at  the  end  of  the  script  and  vice  versa.
//  What  this  indicator  does  is  to  check  if:
//  o  Pivot  Point  was  crossed
//  o  Stoch-RSI  and  VWAP  were  crossed  in  current  or  previous  candle
//  o  Candle  (or  previous  candle)  close  is  in  the  trend  direction
//  If  all  these  are  true  then  it  will  go  long  or  short  based  on  direction.
//  FUTURE  IDEAS:
//    -  Volume  Expansion
//    -  Candle  Stick  patterns
//@version=4
//  ðŸ”¥Uncomment  the  line  below  for  the  indicator  and  comment  the  strategy  lines
//  study(title="EmperorBTC's  VWAP  Indicator",  shorttitle="EMP-VWAP",  overlay=true)
//  ðŸ”¥  Uncomment  the  line  below  for  the  strategy  and  comment  the  above  line
strategy(title="EmperorBTC's  VWAP  Strategy",  shorttitle="EMP-VWAP",  overlay=true,  pyramiding=1)
plotAveragePriceCrossedPivotPoint  =  input(false,  title="Plot  Close  Price  Crossing  Pivot  Points?",  group="Pivot  Points")
plotPivotPoints  =  input(false,  title="Plot  Pivot  Points?",  group="Pivot  Points")
pivotPointsType  =  input(title="Pivot  Points  type",  defval="Fibonacci",  options=["Fibonacci",  "Traditional"],  group="Pivot  Points")
pivotPointCircleWidth  =  input(2,  title="Width  of  Pivot  Point  circles",  minval=1,  group="Pivot  Points")
plotVWAP  =  input(true,  title="Plot  VWAP?",  group="VWAP")
plotAvgPrice  =  input(true,  title="Plot  Average  Price?",  group="VWAP")
plotVWAPCrossPrice  =  input(false,  title="Plot  Price  Crossing  VWAP?",  group="VWAP")
reso  =  input(title="Period",  type=input.resolution,  defval="D",  group="VWAP")
cumulativePeriod  =  input(14,  "VWAP  Cumulative  Period",  group="VWAP")
plotStochRSICross  =  input(false,  title="Plot  StochRSI  Cross?",  group="StochRSI")
smoothK  =  input(3,  "K",  minval=1,  group="StochRSI",  inline="K&D")
smoothD  =  input(3,  "D",  minval=1,  group="StochRSI",  inline="K&D")
lengthRSI  =  input(14,  "RSI  Length",  minval=1,  group="Stochastic-RSI",  inline="length")
lengthStoch  =  input(14,  "Stochastic  Length",  minval=1,  group="Stochastic-RSI",  inline="length")
rsiSrc  =  input(close,  title="RSI  Source",  group="Stochastic-RSI")
plotLong  =  input(true,  title="Plot  Long  Opportunity?",  group="Strategy  only")
plotShort  =  input(true,  title="Plot  Short  Opportunity?",  group="Strategy  only")
tradingDirection  =  input(title="Strategy  trading  Direction:  ",  defval="L&S",  options=["L&S",  "L",  "S"],  group="Strategy  only")
takeProfit  =  input(1.0,  title='Take  Profit  %',  group="Strategy  only")  /  100
plotTP  =  input(true,  title="Plot  Take  Profit?",  group="Strategy  only")
startDate  =  input(title="Start  Date",  type=input.integer,
          defval=1,  minval=1,  maxval=31,  group="Backtesting  range",  inline="Start  Date")
startMonth  =  input(title="Start  Month",  type=input.integer,
          defval=1,  minval=1,  maxval=12,  group="Backtesting  range",  inline="Start  Date")
startYear  =  input(title="Start  Year",  type=input.integer,
          defval=2017,  minval=1800,  maxval=2100,  group="Backtesting  range",  inline="Start  Date")
endDate  =  input(title="End  Date",  type=input.integer,
          defval=31,  minval=1,  maxval=31,  group="Backtesting  range",  inline="End  Date")
endMonth  =  input(title="End  Month",  type=input.integer,
          defval=12,  minval=1,  maxval=12,  group="Backtesting  range",  inline="End  Date")
endYear  =  input(title="End  Year",  type=input.integer,
          defval=2050,  minval=1800,  maxval=2100,  group="Backtesting  range",  inline="End  Date")
//  PivotPoint  code  (PVTvX  by  DGT  has  some  nice  code  on  PP)
candleHigh    =  security(syminfo.tickerid,"D",  high[1],  lookahead=barmerge.lookahead_on)
candleLow      =  security(syminfo.tickerid,"D",  low[1],  lookahead=barmerge.lookahead_on)
candleClose  =  security(syminfo.tickerid,"D",  close[1],  lookahead=barmerge.lookahead_on)
pivotPoint  =  (candleHigh+candleLow+candleClose)  /  3
float  resistance1  =  na
float  resistance2  =  na
float  resistance3  =  na
float  support1  =  na
float  support2  =  na
float  support3  =  na
if  pivotPointsType  ==  "Fibonacci"
        resistance1  :=  pivotPoint  +  0.382  *  (candleHigh  -  candleLow)
        resistance2  :=  pivotPoint  +  0.618  *  (candleHigh  -  candleLow)
        resistance3  :=  pivotPoint  +  (candleHigh  -  candleLow)
        support1  :=  pivotPoint  -  0.382  *  (candleHigh  -  candleLow)
        support2  :=  pivotPoint  -  0.618  *  (candleHigh  -  candleLow)
        support3  :=  pivotPoint  -  (candleHigh  -  candleLow)
else  if  pivotPointsType  ==  "Traditional"
        resistance1  :=  2  *  pivotPoint  -  candleLow
        resistance2  :=  pivotPoint  +  (candleHigh  -  candleLow)
        resistance3  :=  candleHigh  +  2  *  (pivotPoint  -  candleLow)
        support1  :=  2  *  pivotPoint  -  candleHigh
        support2  :=  pivotPoint  -  (candleHigh  -  candleLow)
        support3  :=  candleLow  -  2  *  (candleHigh  -  pivotPoint)
plot(series  =  plotPivotPoints  ?  support1  :  na,  color=#ff0000,  title="S1",  style  =  plot.style_circles,  linewidth  =  pivotPointCircleWidth)
plot(series  =  plotPivotPoints  ?  support2  :  na,  color=#800000,  title="S2",  style  =  plot.style_circles,  linewidth  =  pivotPointCircleWidth)
plot(series  =  plotPivotPoints  ?  support3  :  na,  color=#330000,  title="S3",  style  =  plot.style_circles,  linewidth  =  pivotPointCircleWidth)
plot(series  =  plotPivotPoints  ?  pivotPoint  :  na,  color=#FFA500,  title="PP",  style  =  plot.style_circles,  linewidth  =  pivotPointCircleWidth)
plot(series  =  plotPivotPoints  ?  resistance1  :  na,  color=#00FF00,  title="R1",  style  =  plot.style_circles,  linewidth  =  pivotPointCircleWidth)
plot(series  =  plotPivotPoints  ?  resistance2  :  na,  color=#008000,  title="R2",  style  =  plot.style_circles,  linewidth  =  pivotPointCircleWidth)
plot(series  =  plotPivotPoints  ?  resistance3  :  na,  color=#003300,  title="R3",  style  =  plot.style_circles,  linewidth  =  pivotPointCircleWidth)
pivotPointCrossedUp  =  ((low  <  support3)  and  (close  >  support3))  or  ((low  <  support2)  and  (close  >  support2))  or  ((low  <  support1)  and  (close  >  support1))  or    ((low  <  pivotPoint)  and  (close  >  pivotPoint))
pivotPointCrossedDown  =  ((high  >  support3)  and  (close  <  support3))  or  ((high  >  support2)  and  (close  <  support2))  or  ((high  >  support1)  and  (close  <  support1))  or    ((high  >  pivotPoint)  and(close<pivotPoint))
plotPPColor=pivotPointCrossedUp?color.green:
pivotPointCrossedDown?color.red:
na
plotshape(series=plotAveragePriceCrossedPivotPoint?(pivotPointCrossedUporpivotPointCrossedDown):na,title="PPCross",style=shape.triangleup,location=location.belowbar,color=plotPPColor,text="PP",size=size.small)
//VWAP(takenfromtheTVcode)
//TherearefivestepsincalculatingVWAP:
//
//1.CalculatetheTypicalPricefortheperiod.[(High+Low+Close)/3)]
//2.MultiplytheTypicalPricebytheperiodVolume(TypicalPricexVolume)
//3.CreateaCumulativeTotalofTypicalPrice.Cumulative(TypicalPricexVolume)
//4.CreateaCumulativeTotalofVolume.Cumulative(Volume)
//5.DividetheCumulativeTotals.
//
//VWAP=Cumulative(TypicalPricexVolume)/Cumulative(Volume)
//Emperor'sEdition
t=time(reso)
debut=na(t[1])ort>t[1]
addsource=ohlc4*volume
addvol=volume
addsource:=debut?addsource:addsource+addsource[1]
addvol:=debut?addvol:addvol+addvol[1]
vwapValue=addsource/addvol
pVWAP=plot(series=plotVWAP?vwapValue:na,color=color.purple,title="VWAP")
pAvgPrice=plot(series=plotAvgPrice?ohlc4:na,color=color.blue,title="PRICE")
fill(pVWAP,pAvgPrice,color=ohlc4>vwapValue?color.red:color.green,title="VWAPPRICEFILL")
vwapCrossUp=(low<vwapValue)and(vwapValue<high)and(close>open)//addedgreencandlecheck
vwapCrossDown=(high>vwapValue)and(vwapValue>low)and(close<open)//addedredcandlecheck
plotVWAPColor=vwapCrossUp?color.green:
vwapCrossDown?color.red:
na
plotshape(series=plotVWAPCrossPrice?(vwapCrossUporvwapCrossDown):na,title="VWAPCrossPrice",style=shape.triangleup,location=location.belowbar,color=plotVWAPColor,text="VWAP",size=size.small)
//StochasticRSI
rsi1=rsi(rsiSrc,lengthRSI)
k=sma(stoch(rsi1,rsi1,rsi1,lengthStoch),smoothK)
d=sma(k,smoothD)
sRsiCrossUp=k[1]<d[1]andk>d
sRsiCrossDown=k[1]>d[1]andk<d
plotColor=sRsiCrossUp?color.green:
sRsiCrossDown?color.red:
na
plotshape(series=plotStochRSICross?(sRsiCrossUporsRsiCrossDown):na,title="StochRSICrossUp",style=shape.triangleup,location=location.belowbar,color=plotColor,text="StochRSI",size=size.small)
//LongTrades
sRsiCrossedUp=sRsiCrossUporsRsiCrossUp[1]
vwapCrossedUp=vwapCrossUporvwapCrossUp[1]
//longCond1=(sRsiCrossandvwapCross)or(sRsiCross[1]andvwapCross)or(sRsiCrossandvwapCross[1])
longCond1=(sRsiCrossedUp[1]andvwapCrossedUp[1])
longCond2=pivotPointCrossedUp[1]
longCond3=(close[1]>open[1])and(close>open)//checkthis
longCond=longCond1andlongCond2andlongCond3
plotshape(series=plotLong?longCond:na,title="Long",style=shape.triangleup,location=location.belowbar,color=color.green,text="Long",size=size.normal)
//ShortTrades
sRsiCrossedDown=sRsiCrossDownorsRsiCrossDown[1]
vwapCrossedDown=vwapCrossDownorvwapCrossDown[1]
shortCond1=(sRsiCrossedDown[1]andvwapCrossedDown[1])
shortCond2=pivotPointCrossedDown[1]
shortCond3=(close[1]<open[1])and(close<open)
shortCond=shortCond1andshortCond2andshortCond3
plotshape(series=plotShort?shortCond:na,title="Short",style=shape.triangledown,location=location.abovebar,color=color.red,text="Short",size=size.normal)
//alertcondition(condition=longCond,title="Long",message="Goinglong")
//alertcondition(condition=shortCond,title="Short",message="Goingshort")
//ðŸ”¥Uncommentthelinesbelowforthestrategyandrevertforthestudy
takeProfitLong=strategy.position_avg_price*(1+takeProfit)
takeProfitShort=strategy.position_avg_price*(1-takeProfit)
exitTp=((strategy.position_size>0)and(close>takeProfitLong))or((strategy.position_size<0)and(close<takeProfitShort))
strategy.risk.allow_entry_in(tradingDirection=="L"?strategy.direction.long:tradingDirection=="S"?strategy.direction.short:strategy.direction.all)
plot(series=(plotTPandstrategy.position_size>0)?takeProfitLong:na,title="TPLevel",color=color.green,style=plot.style_linebr,linewidth=2)
plot(series=(plotTPandstrategy.position_size<0)?takeProfitShort:na,title="TPLevel",color=color.red,style=plot.style_linebr,linewidth=2)
inDateRange=(time>=timestamp(syminfo.timezone,startYear,
startMonth,startDate,0,0))and(time<timestamp(syminfo.timezone,endYear,endMonth,endDate,0,0))
strategy.entry("VWAP",strategy.long,comment="Long",when=longCondandinDateRange)
strategy.entry("VWAP",strategy.short,comment="Short",when=shortCondandinDateRange)
strategy.close(id="VWAP",when=exitTp)
if(notinDateRange)
strategy.close_all()
Expand (196 lines)
