Script Name: Volatility Stop with Vwap Strategy
Author: exlux99
Description: First the credits goes to @TradingView for their release of the volatility stop mtf indicator.

I have took it, and inside I have added a weekly vwap for a better trend direction and at the same time I have added a dynamic risk managment which is calculated from the distance between the volatility line to the close of the candle.

The rules for entry are...
PineScript code:

Pine Script™ strategy
Volatility Stop with Vwap Strategy
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  TradingView
//  @  exlux99
//@version=5
//  Volatility  Stop  MTF
//  v3,  2022.05.29
//  This  code  was  written  using  the  recommendations  from  the  Pine  Script™  User  Manual's  styleInput  Guide:
//      https://www.tradingview.com/pine-script-docs/en/v5/writing/Style_guide.html
strategy("Volatility  Stop  with  Vwap  Strategy",  "VStop    Vwap",  true)
import  PineCoders/Time/1  as  pcTimeLib
string  GRP1                      =  "═════════  Stop  Calculations  ═════════"
float    srcInput              =  input.source(close,  "Source",          group  =  GRP1)
int        lenInput              =  input.int(20,              "Length",          group  =  GRP1,  minval  =  2)
float    atrInput              =  input.float(2.0,        "ATR  Factor",  group  =  GRP1,  minval  =  0.25,  step  =  0.25)
vwap_weekly  =  request.security(syminfo.tickerid,  'W',  ta.vwap)
//  ————————————————————  Functions  {
//  @function                Calculates  a  value  from  the  ATR,  which  is  offset  from  price  action  to  use  as  a  stop  loss  or  trend  detection.
//  @param  source        (series  int/float)  The  source  to  calculate  the  stop  value  from.
//  @param  atrLength  (simple  int)  The  length  over  which  to  calcualte  the  RMA  of  the  true  range.  (number  of  bars  back).
//  @param  atrInput  (series  int/float)  A  multiplier  to  allow  adjustment  of  the  stop  as  a  function  of  the  ATR  value.  Example:  1  is  100%  of  the  calculated  ATR  value.
//  @param  offset        (series  int)  The  first  half  of  the  offset  calculations  required  to  achieve  repainting/non-repainting  data  when  used  in  `request.security()`.
//  @returns                  ([float,  bool])  A  tuple  of  the  volatility  stop  value  and  the  trend  direction  as  a  bool.
vStop(series  float  source,  simple  int  atrLength,  series  float  atrInput,  series  int  offset  =  0)  =>
        float  src  =  nz(source,  close)
        var  bool    trendUp  =  true
        var  float  max  =  src
        var  float  min  =  src
        var  float  stop  =  0.0
        float  atrM    =  nz(ta.atr(atrLength)  *  atrInput,  ta.tr)
        max    :=  math.max(max,  src)
        min    :=  math.min(min,  src)
        stop  :=  nz(trendUp  ?  math.max(stop,  max  -atrM):math.min(stop,min+atrM),src)
trendUp:=src-stop>=0.0
iftrendUp!=nz(trendUp[1],true)
max:=src
min:=src
stop:=trendUp?max-atrM:min+atrM
[stop[offset],trendUp[offset]]
//—————Stopcalcs
[stopChartTf,trendUpChartTf]=vStop(srcInput,lenInput,atrInput,0)
floatstop=stopChartTf
booltrendUp=trendUpChartTf
varboolinLimbo=false
//Getconditionsforcolors,plotting,andalerts.
booltrendReversal=trendUp!=trendUp[1]
booltrendChangeToUp=trendUpandnottrendUp[1]
booltrendChangeToDn=nottrendUpandtrendUp[1]
inLimbo:=inLimboandtrendUp==trendUp[1]
plot(stop)
long=trendUpandclose>stopandclose>vwap_weekly
short=nottrendUpandclose<stopandclose<vwap_weekly
distance_long=close+(close-stop)
distance_short=close-(stop-close)
varlongOpened=false
varinttimeOfBuyLong=na
varfloattpLong_long=na
varfloatslLong_long=na
varboollongEntry=na
longEntry:=longandnotlongOpenedandnotlong[1]
iflongEntry
longOpened:=true
tpLong_long:=distance_long
slLong_long:=distance_short

tpLong_trigger=longOpened[1]and(ta.crossover(close,tpLong_long)orta.crossover(high,tpLong_long))//orhigh>lowest_low_var_tp
slLong_Trigger=longOpened[1]and(ta.crossunder(close,slLong_long)orta.crossover(low,slLong_long))//orlow<lowest_low_var_sl
longExitSignal=tpLong_triggerorslLong_Triggerorshort
longExit=longOpened[1]andlongExitSignal
iflongExit
longOpened:=false
timeOfBuyLong:=na
tpLong_long:=na
slLong_long:=na
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
varshortOpened=false
varinttimeOfBuyShort=na
varfloattp_short=na
varfloatsl_short=na
varboolshortEntry=na
shortEntry:=shortandnotshortOpenedandnotshort[1]
ifshortEntry
shortOpened:=true
timeOfBuyShort:=time
tp_short:=distance_short
sl_short:=distance_long
tpShort_trigger=shortOpened[1]and(ta.crossunder(close,tp_short)orta.crossunder(low,tp_short))//orlow<highest_high_var_tp
slShort_Trigger=shortOpened[1]and(ta.crossover(close,sl_short)orta.crossover(high,sl_short))//orhigh>highest_high_var_sl
shortExitSignal=longortpShort_triggerorslShort_Trigger
shortExit=shortOpened[1]andshortExitSignal
ifshortExit
shortOpened:=false
timeOfBuyShort:=na
timeOfBuyShort
tp_short:=na
sl_short:=na
strategy.entry("long",strategy.long,when=longEntry)
strategy.close("long",when=longExit)
strategy.entry("short",strategy.short,when=shortEntry)
strategy.close('short',when=shortExit)
Expand (152 lines)
