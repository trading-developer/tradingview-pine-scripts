Script Name: SSL Hybrid Strategy
Author: kevinmck100
Description: Strategy based on the SSL Hybrid indicator by Mihkel00
Designed for the purpose of back testing

Strategy:

  Enters both long and short trades based on SSL1 crossing the baseline
  Stop Loss calculated based on ATR multiplier
  Option to allow moving of Stop Loss to break even on TP1
  Option to turn off Stop Loss and Take Profit which will rely on indicator...
PineScript code:

Pine Script™ strategy
SSL Hybrid Strategy
//@version=5
//  Strategy  based  on  the  SSL  Hybrid  indicator  by  Mihkel00
//  Designed  for  the  purpose  of  back  testing
//  Strategy:
//    -  Enters  both  long  and  short  trades  based  on  SSL1  crossing  the  baseline
//    -  Stop  Loss  calculated  based  on  ATR  multiplier
//    -  Take  Profit  calculated  based  on  2  ATR  multipliers  and  exits  percentage  of  position  on  TP1  and  TP2
//
//  Credits:
//  SSL  Hybrid  Mihkel00  https://www.tradingview.com/u/Mihkel00/
//  --------------------------------  SSL  HYBRID  ---------------------------------
strategy('SSL  Hybrid  Strategy',  overlay=true,  initial_capital=5000,  default_qty_value=10,  default_qty_type=strategy.percent_of_equity,  commission_type='percent',  commission_value=0.04,  max_labels_count=500,  calc_on_every_tick=true,  pyramiding=10)
show_Baseline  =  input.bool(title='Show  Baseline',  defval=true,  group='SSL  Hybrid  Indicator  Settings')
show_SSL1  =  input.bool(title='Show  SSL1',  defval=true,  group='SSL  Hybrid  Indicator  Settings')
show_atr  =  input.bool(title='Show  ATR  bands',  defval=false,  group='SSL  Hybrid  Indicator  Settings')
//ATR
atrlen  =  input.int(14,  'ATR  Period',  group='SSL  Hybrid  Indicator  Settings')
mult  =  input.float(1,  'ATR  Multi',  step=0.1,  group='SSL  Hybrid  Indicator  Settings')
smoothing  =  input.string(title='ATR  Smoothing',  defval='WMA',  options=['RMA',  'SMA',  'EMA',  'WMA'],  group='SSL  Hybrid  Indicator  Settings')
ma_function(source,  atrlen)  =>
        if  smoothing  ==  'RMA'
                ta.rma(source,  atrlen)
        else
                if  smoothing  ==  'SMA'
                        ta.sma(source,  atrlen)
                else
                        if  smoothing  ==  'EMA'
                                ta.ema(source,  atrlen)
                        else
                                ta.wma(source,  atrlen)
atr_slen  =  ma_function(ta.tr(true),  atrlen)
////ATR  Up/Low  Bands
upper_band  =  atr_slen  *  mult  +  close
lower_band  =  close  -  atr_slen  *  mult
////BASELINE  /  SSL1  /  SSL2  /  EXIT  MOVING  AVERAGE  VALUES
maType  =  input.string(title='SSL1  /  Baseline  Type',  defval='HMA',  options=['SMA',  'EMA',  'DEMA',  'TEMA',  'LSMA',  'WMA',  'MF',  'VAMA',  'TMA',  'HMA',  'JMA',  'Kijun  v2',  'EDSMA',  'McGinley'],  group='SSL  Hybrid  Indicator  Settings')
len  =  input.int(title='SSL1  /  Baseline  Length',  defval=60,  group='SSL  Hybrid  Indicator  Settings')
SSL2Type  =  input.string(title='SSL2  /  Continuation  Type',  defval='JMA',  options=['SMA',  'EMA',  'DEMA',  'TEMA',  'WMA',  'MF',  'VAMA',  'TMA',  'HMA',  'JMA',  'McGinley'],  group='SSL  Hybrid  Indicator  Settings')
len2  =  input.int(title='SSL  2  Length',  defval=5,  group='SSL  Hybrid  Indicator  Settings')
//
SSL3Type  =  input.string(title='EXIT  Type',  defval='HMA',  options=['DEMA',  'TEMA',  'LSMA',  'VAMA',  'TMA',  'HMA',  'JMA',  'Kijun  v2',  'McGinley',  'MF'],  group='SSL  Hybrid  Indicator  Settings')
len3  =  input.int(title='EXIT  Length',  defval=15,  group='SSL  Hybrid  Indicator  Settings')
src  =  input.source(title='Source',  defval=close,  group='SSL  Hybrid  Indicator  Settings')
//
tema(src,  len)  =>
        ema1  =  ta.ema(src,  len)
        ema2  =  ta.ema(ema1,  len)
        ema3  =  ta.ema(ema2,  len)
        3  *  ema1  -  3  *  ema2  +  ema3
kidiv  =  input.int(defval=1,  maxval=4,  title='Kijun  MOD  Divider',  group='SSL  Hybrid  Indicator  Settings')
jurik_phase  =  input.int(title='*  Jurik  (JMA)  Only  -  Phase',  defval=3,  group='SSL  Hybrid  Indicator  Settings')
jurik_power  =  input.int(title='*  Jurik  (JMA)  Only  -  Power',  defval=1,  group='SSL  Hybrid  Indicator  Settings')
volatility_lookback  =  input.int(10,  title='*  Volatility  Adjusted  (VAMA)  Only  -  Volatility  lookback  length',  group='SSL  Hybrid  Indicator  Settings')
//MF
beta  =  input.float(0.8,  minval=0,  maxval=1,  step=0.1,  title='Modular  Filter,  General  Filter  Only  -  Beta',  group='SSL  Hybrid  Indicator  Settings')
feedback  =  input.bool(false,  title='Modular  Filter  Only  -  Feedback',  group='SSL  Hybrid  Indicator  Settings')
z  =  input.float(0.5,  title='Modular  Filter  Only  -  Feedback  Weighting',  step=0.1,  minval=0,  maxval=1,  group='SSL  Hybrid  Indicator  Settings')
//EDSMA
ssfLength  =  input.int(title='EDSMA  -  Super  Smoother  Filter  Length',  minval=1,  defval=20,  group='SSL  Hybrid  Indicator  Settings')
ssfPoles  =  input.int(title='EDSMA  -  Super  Smoother  Filter  Poles',  defval=2,  options=[2,  3],  group='SSL  Hybrid  Indicator  Settings')
//----
//EDSMA
get2PoleSSF(src,  length)  =>
        PI  =  2  *  math.asin(1)
        arg  =  math.sqrt(2)  *  PI  /  length
        a1  =  math.exp(-arg)
        b1  =  2  *  a1  *  math.cos(arg)
        c2  =  b1
        c3  =  -math.pow(a1,  2)
        c1  =  1  -  c2  -  c3
        ssf  =  0.0
        ssf  :=  c1  *  src  +  c2  *  nz(ssf[1])  +  c3  *  nz(ssf[2])
        ssf
get3PoleSSF(src,  length)  =>
        PI  =  2  *  math.asin(1)
        arg  =  PI  /  length
        a1  =  math.exp(-arg)
        b1  =  2  *  a1  *  math.cos(1.738  *  arg)
        c1  =  math.pow(a1,  2)
        coef2  =  b1  +  c1
        coef3  =  -(c1  +  b1  *  c1)
        coef4  =  math.pow(c1,  2)
        coef1  =  1  -  coef2  -  coef3  -  coef4
        ssf  =  0.0
        ssf  :=  coef1  *  src  +  coef2  *  nz(ssf[1])  +  coef3  *  nz(ssf[2])  +  coef4  *  nz(ssf[3])
        ssf
ma(type,  src,  len)  =>
        float  result  =  0
        if  type  ==  'TMA'
                result  :=  ta.sma(ta.sma(src,  math.ceil(len  /  2)),  math.floor(len  /  2)  +  1)
                result
        if  type  ==  'MF'
                ts  =  0.
                b  =  0.
                c  =  0.
                os  =  0.
  //----
alpha=2/(len+1)
a=feedback?z*src+(1-z)*nz(ts[1],src):src
//----
b:=a>alpha*a+(1-alpha)*nz(b[1],a)?a:alpha*a+(1-alpha)*nz(b[1],a)
c:=a<alpha*a+(1-alpha)*nz(c[1],a)?a:alpha*a+(1-alpha)*nz(c[1],a)
os:=a==b?1:a==c?0:os[1]
//----
upper=beta*b+(1-beta)*c
lower=beta*c+(1-beta)*b
ts:=os*upper+(1-os)*lower
result:=ts
result
iftype=='LSMA'
result:=ta.linreg(src,len,0)
result
iftype=='SMA'//Simple
result:=ta.sma(src,len)
result
iftype=='EMA'//Exponential
result:=ta.ema(src,len)
result
iftype=='DEMA'//DoubleExponential
e=ta.ema(src,len)
result:=2*e-ta.ema(e,len)
result
iftype=='TEMA'//TripleExponential
e=ta.ema(src,len)
result:=3*(e-ta.ema(e,len))+ta.ema(ta.ema(e,len),len)
result
iftype=='WMA'//Weighted
result:=ta.wma(src,len)
result
iftype=='VAMA'//VolatilityAdjusted
///Copyright©2019topresent,JorisDuyck(JD)
mid=ta.ema(src,len)
dev=src-mid
vol_up=ta.highest(dev,volatility_lookback)
vol_down=ta.lowest(dev,volatility_lookback)
result:=mid+math.avg(vol_up,vol_down)
result
iftype=='HMA'//Hull
result:=ta.wma(2*ta.wma(src,len/2)-ta.wma(src,len),math.round(math.sqrt(len)))
result
iftype=='JMA'//Jurik
///Copyright©2018AlexOrekhov(everget)
///Copyright©2017JurikResearchandConsulting.
phaseRatio=jurik_phase<-100?0.5:jurik_phase>100?2.5:jurik_phase/100+1.5
beta=0.45*(len-1)/(0.45*(len-1)+2)
alpha=math.pow(beta,jurik_power)
jma=0.0
e0=0.0
e0:=(1-alpha)*src+alpha*nz(e0[1])
e1=0.0
e1:=(src-e0)*(1-beta)+beta*nz(e1[1])
e2=0.0
e2:=(e0+phaseRatio*e1-nz(jma[1]))*math.pow(1-alpha,2)+math.pow(alpha,2)*nz(e2[1])
jma:=e2+nz(jma[1])
result:=jma
result
iftype=='Kijunv2'
kijun=math.avg(ta.lowest(len),ta.highest(len))//,(open+close)/2)
conversionLine=math.avg(ta.lowest(len/kidiv),ta.highest(len/kidiv))
delta=(kijun+conversionLine)/2
result:=delta
result
iftype=='McGinley'
mg=0.0
ema=ta.ema(src,len)
mg:=na(mg[1])?ema:mg[1]+(src-mg[1])/(len*math.pow(src/mg[1],4))
result:=mg
result
iftype=='EDSMA'
zeros=src-nz(src[2])
avgZeros=(zeros+zeros[1])/2
//EhlersSuperSmootherFilter
ssf=ssfPoles==2?get2PoleSSF(avgZeros,ssfLength):get3PoleSSF(avgZeros,ssfLength)
//RescalefilterintermsofStandardDeviations
stdev=ta.stdev(ssf,len)
scaledFilter=stdev!=0?ssf/stdev:0
alpha=5*math.abs(scaledFilter)/len
edsma=0.0
edsma:=alpha*src+(1-alpha)*nz(edsma[1])
result:=edsma
result
result
///SSL1andSSL2
emaHigh=ma(maType,high,len)
emaLow=ma(maType,low,len)
maHigh=ma(SSL2Type,high,len2)
maLow=ma(SSL2Type,low,len2)
///EXIT
ExitHigh=ma(SSL3Type,high,len3)
ExitLow=ma(SSL3Type,low,len3)
///KeltnerBaselineChannel
BBMC=ma(maType,close,len)
useTrueRange=input.bool(true,group='SSLHybridIndicatorSettings')
multy=input.float(0.2,step=0.05,title='BaseChannelMultiplier',group='SSLHybridIndicatorSettings')
Keltma=ma(maType,src,len)
range_1=useTrueRange?ta.tr:high-low
rangema=ta.ema(range_1,len)
upperk=Keltma+rangema*multy
lowerk=Keltma-rangema*multy
//BaselineViolationCandle
open_pos=open*1
close_pos=close*1
difference=math.abs(close_pos-open_pos)
atr_violation=difference>atr_slen
InRange=upper_band>BBMCandlower_band<BBMC
candlesize_violation=atr_violationandInRange
plotshape(candlesize_violation,color=color.new(color.white,transp=0),size=size.tiny,style=shape.diamond,location=location.top,title='CandleSize>1xATR')
//SSL1VALUES
Hlv=int(na)
Hlv:=close>emaHigh?1:close<emaLow?-1:Hlv[1]
sslDown=Hlv<0?emaHigh:emaLow
//SSL2VALUES
Hlv2=int(na)
Hlv2:=close>maHigh?1:close<maLow?-1:Hlv2[1]
sslDown2=Hlv2<0?maHigh:maLow
//EXITVALUES
Hlv3=int(na)
Hlv3:=close>ExitHigh?1:close<ExitLow?-1:Hlv3[1]
sslExit=Hlv3<0?ExitHigh:ExitLow
base_cross_Long=ta.crossover(close,sslExit)
base_cross_Short=ta.crossover(sslExit,close)
codiff=base_cross_Long?1:base_cross_Short?-1:na
//COLORS
show_color_bar=input.bool(title='ColorBars',defval=true,group='SSLHybridIndicatorSettings')
color_bar=close>upperk?#00c3ff:close<lowerk?#ff0062:color.gray
color_ssl1=close>sslDown?#00c3ff:close<sslDown?#ff0062:na
//PLOTS
plotarrow(codiff,colorup=color.rgb(0,195,255,transp=0),colordown=color.rgb(255,0,98,transp=0),title='ExitArrows',maxheight=20,offset=0,display=display.none)
p1=plot(show_Baseline?BBMC:na,color=color.new(color_bar,transp=0),linewidth=4,title='MABaseline')
DownPlot=plot(show_SSL1?sslDown:na,title='SSL1',linewidth=3,color=color.new(color_ssl1,transp=10))
barcolor(show_color_bar?color_bar:na)
up_channel=plot(show_Baseline?upperk:na,color=color_bar,title='BaselineUpperChannel')
low_channel=plot(show_Baseline?lowerk:na,color=color_bar,title='BasilineLowerChannel')
fill(up_channel,low_channel,color=color.new(color_bar,transp=90))
////SSL2ContiniuationfromATR
atr_crit=input.float(0.9,step=0.1,title='ContinuationATRCriteria',group='SSLHybridIndicatorSettings')
upper_half=atr_slen*atr_crit+close
lower_half=close-atr_slen*atr_crit
buy_inatr=lower_half<sslDown2
sell_inatr=upper_half>sslDown2
sell_cont=close<BBMCandclose<sslDown2
buy_cont=close>BBMCandclose>sslDown2
sell_atr=sell_inatrandsell_cont
buy_atr=buy_inatrandbuy_cont
atr_fill=buy_atr?color.green:sell_atr?color.purple:color.white
LongPlot=plot(sslDown2,title='SSL2',linewidth=2,color=color.new(atr_fill,transp=0),style=plot.style_circles,display=display.none)
u=plot(show_atr?upper_band:na,'+ATR',color=color.new(color.white,transp=80),display=display.none)
l=plot(show_atr?lower_band:na,'-ATR',color=color.new(color.white,transp=80),display=display.none)
//-----------------------CFULTIMATEMAMTFINDICATOR------------------------
//inputs
source=close
useCurrentRes=input.bool(true,title='UseCurrentChartResolution?',group='CFUltimateMAMTFSettings')
resCustom=input.timeframe(title='UseDifferentTimeframe?UncheckBoxAbove',defval='D',group='CFUltimateMAMTFSettings')
length=input.int(20,title='MovingAverageLength-LookBackPeriod',group='CFUltimateMAMTFSettings')
//periodT3=input(defval=7,title="TilsonT3Period",minval=1)
factorT3=input.int(defval=7,title='TilsonT3Factor-*.10-so7=.7etc.',minval=0,group='CFUltimateMAMTFSettings')
atype=input.int(1,minval=1,maxval=8,title='1=SMA,2=EMA,3=WMA,4=HullMA,5=VWMA,6=RMA,7=TEMA,8=TilsonT3',group='CFUltimateMAMTFSettings')
spc=input.bool(false,title='ShowPriceCrossing1stMovAvg-HighlightBar?',group='CFUltimateMAMTFSettings')
cc=input.bool(true,title='ChangeColorBasedOnDirection?',group='CFUltimateMAMTFSettings')
smoothe=input.int(2,minval=1,maxval=10,title='ColorSmoothing-Setting1=NoSmoothing',group='CFUltimateMAMTFSettings')
doma2=input.bool(false,title='Optional2ndMovingAverage',group='CFUltimateMAMTFSettings')
spc2=input.bool(false,title='ShowPriceCrossing2ndMovAvg?',group='CFUltimateMAMTFSettings')
length2=input.int(50,title='MovingAverageLength-Optional2ndMA',group='CFUltimateMAMTFSettings')
sfactorT3=input.int(defval=7,title='TilsonT3Factor-*.10-so7=.7etc.',minval=0,group='CFUltimateMAMTFSettings')
atype2=input.int(1,minval=1,maxval=8,title='1=SMA,2=EMA,3=WMA,4=HullMA,5=VWMA,6=RMA,7=TEMA,8=TilsonT3',group='CFUltimateMAMTFSettings')
cc2=input.bool(true,title='ChangeColorBasedOnDirection2ndMA?',group='CFUltimateMAMTFSettings')
warn=input.bool(false,title='***YouCanTurnOnTheShowDotsParameterBelowWithoutPlotting2ndMAtoSeeCrosses***',group='CFUltimateMAMTFSettings')
warn2=input.bool(false,title='***IfUsingCrossFeatureW/OPlotting2ndMA-MakeSure2ndMAParametersareSetCorrectly***',group='CFUltimateMAMTFSettings')
sd=input.bool(false,title='ShowDotsonCrossofBothMA\'s',group='CFUltimateMAMTFSettings')
res=useCurrentRes?timeframe.period:resCustom
//hullmadefinition
hullma=ta.wma(2*ta.wma(source,length/2)-ta.wma(source,length),math.round(math.sqrt(length)))
//TEMAdefinition
ema1=ta.ema(source,length)
ema2=ta.ema(ema1,length)
ema3=ta.ema(ema2,length)
t_ema=3*(ema1-ema2)+ema3
//TilsonT3
factor=factorT3*.10
gd(source,length,factor)=>
ta.ema(source,length)*(1+factor)-ta.ema(ta.ema(source,length),length)*factor
t3(source,length,factor)=>
gd(gd(gd(source,length,factor),length,factor),length,factor)
tilT3=t3(source,length,factor)
avg=atype==1?ta.sma(source,length):atype==2?ta.ema(source,length):atype==3?ta.wma(source,length):atype==4?hullma:atype==5?ta.vwma(source,length):atype==6?ta.rma(source,length):atype==7?3*(ema1-ema2)+ema3:tilT3
//2ndMa-hullmadefinition
hullma2=ta.wma(2*ta.wma(source,length2/2)-ta.wma(source,length2),math.round(math.sqrt(length2)))
//2ndMATEMAdefinition
sema1=ta.ema(source,length2)
sema2=ta.ema(sema1,length2)
sema3=ta.ema(sema2,length2)
stema=3*(sema1-sema2)+sema3
//2ndMATilsonT3
sfactor=sfactorT3*.10
sgd(source,length2,sfactor)=>
ta.ema(source,length2)*(1+sfactor)-ta.ema(ta.ema(source,length2),length2)*sfactor
st3(source,length2,sfactor)=>
sgd(sgd(gd(source,length2,sfactor),length2,sfactor),length2,sfactor)
stilT3=st3(source,length2,sfactor)
avg2=atype2==1?ta.sma(source,length2):atype2==2?ta.ema(source,length2):atype2==3?ta.wma(source,length2):atype2==4?hullma2:atype2==5?ta.vwma(source,length2):atype2==6?ta.rma(source,length2):atype2==7?3*(ema1-ema2)+ema3:stilT3
out=avg
out_two=avg2
out1=request.security(syminfo.tickerid,res,out)
out2=request.security(syminfo.tickerid,res,out_two)
//FormulaforPriceCrossingMovingAverage#1
cr_up=open<out1andclose>out1
cr_Down=open>out1andclose<out1
//FormulaforPriceCrossingMovingAverage#2
cr_up2=open<out2andclose>out2
cr_Down2=open>out2andclose<out2
//barcolorCriteriaforPriceCrossingMovingAverage#1
isPriceCrossUpMa()=>
cr_up
isPriceCrossDownMa()=>
cr_Down
//barcolorCriteriaforPriceCrossingMovingAverage#2
isPriceCrossUpMa2()=>
cr_up2
isPriceCrossDownMa2()=>
cr_Down2
ma_up=out1>=out1[smoothe]
ma_down=out1<out1[smoothe]
plotchar(ma_up,'MAUP','',location=location.top)
plotchar(ma_down,'MADOWN','',location=location.top)
col=cc?ma_up?color.lime:ma_down?color.red:color.aqua:color.aqua
col2=cc2?ma_up?color.lime:ma_down?color.red:color.aqua:color.white
circleYPosition=out2
use_cf_ultimate=input.bool(title='UseCFUltimateMAMTF',defval=false,inline='2',group='StrategyBackTestSettings')
plot(use_cf_ultimate?out1:na,title='Multi-TimeframeMovingAvg',style=plot.style_line,linewidth=4,color=col,display=display.none)
plot(use_cf_ultimateanddoma2andout2?out2:na,title='2ndMulti-TimeFrameMovingAverage',style=plot.style_circles,linewidth=4,color=col2)
plot(use_cf_ultimateandsdandta.cross(out1,out2)?circleYPosition:na,style=plot.style_circles,linewidth=15,color=color.new(color.aqua,0))
//barcolorPlotforPriceCrossingMovingAverage#1
barcolor(use_cf_ultimateandspcandisPriceCrossUpMa()?isPriceCrossUpMa()?color.yellow:na:na)
barcolor(use_cf_ultimateandspcandisPriceCrossDownMa()?isPriceCrossDownMa()?color.yellow:na:na)
//barcolorPlotforPriceCrossingMovingAverage#2
barcolor(use_cf_ultimateandspc2andisPriceCrossUpMa2()?isPriceCrossUpMa2()?color.yellow:na:na)
barcolor(use_cf_ultimateandspc2andisPriceCrossDownMa2()?isPriceCrossDownMa2()?color.yellow:na:na)
//----------------------------------STRATEGY----------------------------------
atr_length=input.int(title='ATRLength',defval=14,inline='1',group='StrategyBackTestSettings')
atr=ta.atr(atr_length)
//Backtesttimerange
from_date=input.time(title='From',defval=timestamp('01Aug202100:00+0100'),inline='1',group='DateRange')
to_date=input.time(title='To',defval=timestamp('01Oct203000:00+0100'),inline='1',group='DateRange')
in_date=time>=from_dateandtime<=to_date
//Strategyexitsettings
//Stop-LossSettings
use_tp_sl=input.bool(title='UseTP&SL',defval=true,inline='1',group='ExitSettings')
sl_atr_multiplier=input.float(title='SLATRMultiplier',defval=1.8,step=0.1,inline='2',group='ExitSettings')
move_sl_on_tp=input.bool(title='MoveSLonTP1',defval=true,inline='2',group='ExitSettings')
//TakeProfitSettings
tp1_atr_multiplier=input.float(title='TP1ATRMultiplier',defval=1.8,step=0.1,inline='3',group='ExitSettings')
tp1_exit_percentage=input.int(title='TP1ExitPercentage',defval=20,step=1,maxval=100,inline='3',group='ExitSettings')
tp2_atr_multiplier=input.float(title='TP2ATRMultiplier',defval=2.2,step=0.1,inline='4',group='ExitSettings')
tp2_exit_percentage=input.int(title='TP2ExitPercentage',defval=30,step=1,maxval=100,inline='4',group='ExitSettings')
tp3_atr_multiplier=input.float(title='TP3ATRMultiplier',defval=2.6,step=0.1,inline='5',group='ExitSettings')
tp3_exit_percentage=input.int(title='TP3ExitPercentage',defval=30,step=1,maxval=100,inline='5',group='ExitSettings')
tp4_atr_multiplier=input.float(title='TP4ATRMultiplier',defval=4,step=0.1,inline='6',group='ExitSettings')
tp4_exit_percentage=input.int(title='TP4ExitPercentage',defval=10,step=1,maxval=100,inline='6',group='ExitSettings')
tp5_atr_multiplier=input.float(title='TP5ATRMultiplier',defval=8,step=0.1,inline='7',group='ExitSettings')
tp5_exit_percentage=input.int(title='TP5ExitPercentage',defval=10,step=1,maxval=100,inline='7',group='ExitSettings')
varlong_sl=close-atr*sl_atr_multiplier
varlong_tp1=close+atr*tp1_atr_multiplier
varlong_tp2=close+atr*tp2_atr_multiplier
varlong_tp3=close+atr*tp3_atr_multiplier
varlong_tp4=close+atr*tp4_atr_multiplier
varlong_tp5=close+atr*tp5_atr_multiplier
varshort_sl=close+atr*sl_atr_multiplier
varshort_tp1=close-atr*tp1_atr_multiplier
varshort_tp2=close-atr*tp2_atr_multiplier
varshort_tp3=close-atr*tp3_atr_multiplier
varshort_tp4=close-atr*tp4_atr_multiplier
varshort_tp5=close-atr*tp5_atr_multiplier
varis_long_sl_moved=false
varis_short_sl_moved=false
is_open_long=strategy.position_size>0
is_open_short=strategy.position_size<0
varin_ssl_long=false
varin_ssl_short=false
varssl_long_entry=false
varssl_short_entry=false
vardid_prev_bar_ssl_flip=false
//Ensurecrossoveroccurrsbeforeenteringfirstposition.Thisensuresfirstentryafterchosenstartdateisanactualentryandnotjustenteringonstartdate
ifnotssl_long_entryandnotssl_short_entryandin_date
ssl_long_entry:=ta.crossover(close,sslDown)
ssl_short_entry:=ta.crossunder(close,sslDown)
ssl_short_entry
elseifin_date
ssl_long_entry:=close>sslDown
ssl_short_entry:=close<sslDown
ssl_short_entry
cf_ultimate_long_entry=use_cf_ultimate?ma_up:true
cf_ultimate_short_entry=use_cf_ultimate?ma_down:true
remaining_percent=100
vartotal_tokens=float(na)
total_tokens:=strategy.equity*0.10/close
tp1_percent=tp1_exit_percentage<=remaining_percent?tp1_exit_percentage:remaining_percent
remaining_percent-=tp1_percent
entry_1=total_tokens*(tp1_percent/100)
tp2_percent=tp2_exit_percentage<=remaining_percent?tp2_exit_percentage:remaining_percent
remaining_percent-=tp2_percent
entry_2=total_tokens*(tp2_percent/100)
tp3_percent=tp3_exit_percentage<=remaining_percent?tp3_exit_percentage:remaining_percent
remaining_percent-=tp3_percent
entry_3=total_tokens*(tp3_percent/100)
tp4_percent=tp4_exit_percentage<=remaining_percent?tp4_exit_percentage:remaining_percent
remaining_percent-=tp4_percent
entry_4=total_tokens*(tp4_percent/100)
tp5_percent=tp5_exit_percentage<=remaining_percent?tp5_exit_percentage:remaining_percent
remaining_percent-=tp5_percent
entry_5=total_tokens*(tp5_percent/100)
ifnotis_long_sl_movedandhigh>=long_tp1andmove_sl_on_tpanduse_tp_sl
is_long_sl_moved:=true
strategy.exit('LongExit2','LongEntry2',stop=strategy.position_avg_price,limit=long_tp2)
strategy.exit('LongExit3','LongEntry3',stop=strategy.position_avg_price,limit=long_tp3)
strategy.exit('LongExit4','LongEntry4',stop=strategy.position_avg_price,limit=long_tp4)
strategy.exit('LongExit5','LongEntry5',stop=strategy.position_avg_price,limit=long_tp5)
ifnotis_short_sl_movedandlow<=short_tp1andmove_sl_on_tpanduse_tp_sl
is_short_sl_moved:=true
strategy.exit('ShortExit2','ShortEntry2',stop=strategy.position_avg_price,limit=short_tp2)
strategy.exit('ShortExit3','ShortEntry3',stop=strategy.position_avg_price,limit=short_tp3)
strategy.exit('ShortExit4','ShortEntry4',stop=strategy.position_avg_price,limit=short_tp4)
strategy.exit('ShortExit5','ShortEntry5',stop=strategy.position_avg_price,limit=short_tp5)
ifdid_prev_bar_ssl_flip
did_prev_bar_ssl_flip:=false
position_value=math.abs(strategy.position_size*close)
ifin_ssl_long
label.new(x=bar_index,y=close,xloc=xloc.bar_index,yloc=yloc.abovebar,text=str.tostring(position_value),style=label.style_label_down,size=size.tiny)
else
label.new(x=bar_index,y=close,xloc=xloc.bar_index,yloc=yloc.belowbar,text=str.tostring(position_value),style=label.style_label_up,size=size.tiny)
ifssl_long_entryandcf_ultimate_long_entryandin_dateandnotin_ssl_long
in_ssl_long:=true
in_ssl_short:=false
did_prev_bar_ssl_flip:=true
long_sl:=close-atr*sl_atr_multiplier
long_tp1:=close+atr*tp1_atr_multiplier
long_tp2:=close+atr*tp2_atr_multiplier
long_tp3:=close+atr*tp3_atr_multiplier
long_tp4:=close+atr*tp4_atr_multiplier
long_tp5:=close+atr*tp5_atr_multiplier
strategy.entry('LongEntry1',strategy.long,qty=entry_1)
strategy.entry('LongEntry2',strategy.long,qty=entry_2)
strategy.entry('LongEntry3',strategy.long,qty=entry_3)
strategy.entry('LongEntry4',strategy.long,qty=entry_4)
strategy.entry('LongEntry5',strategy.long,qty=entry_5)
ifuse_tp_sl
strategy.exit('LongExit1','LongEntry1',stop=long_sl,limit=long_tp1)
strategy.exit('LongExit2','LongEntry2',stop=long_sl,limit=long_tp2)
strategy.exit('LongExit3','LongEntry3',stop=long_sl,limit=long_tp3)
strategy.exit('LongExit4','LongEntry4',stop=long_sl,limit=long_tp4)
strategy.exit('LongExit5','LongEntry5',stop=long_sl,limit=long_tp5)
is_long_sl_moved:=false
is_long_sl_moved
ifssl_short_entryandcf_ultimate_short_entryandin_dateandnotin_ssl_short
in_ssl_short:=true
in_ssl_long:=false
did_prev_bar_ssl_flip:=true
short_sl:=close+atr*sl_atr_multiplier
short_tp1:=close-atr*tp1_atr_multiplier
short_tp2:=close-atr*tp2_atr_multiplier
short_tp3:=close-atr*tp3_atr_multiplier
short_tp4:=close-atr*tp4_atr_multiplier
short_tp5:=close-atr*tp5_atr_multiplier
strategy.entry('ShortEntry1',strategy.short,qty=entry_1)
strategy.entry('ShortEntry2',strategy.short,qty=entry_2)
strategy.entry('ShortEntry3',strategy.short,qty=entry_3)
strategy.entry('ShortEntry4',strategy.short,qty=entry_4)
strategy.entry('ShortEntry5',strategy.short,qty=entry_5)
ifuse_tp_sl
strategy.exit('ShortExit1','ShortEntry1',stop=short_sl,limit=short_tp1)
strategy.exit('ShortExit2','ShortEntry2',stop=short_sl,limit=short_tp2)
strategy.exit('ShortExit3','ShortEntry3',stop=short_sl,limit=short_tp3)
strategy.exit('ShortExit4','ShortEntry4',stop=short_sl,limit=short_tp4)
strategy.exit('ShortExit5','ShortEntry5',stop=short_sl,limit=short_tp5)
is_short_sl_moved:=false
is_short_sl_moved
Expand (559 lines)
