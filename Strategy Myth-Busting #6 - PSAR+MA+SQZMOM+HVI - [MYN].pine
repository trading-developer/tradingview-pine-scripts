Script Name: Strategy Myth-Busting #6 - PSAR+MA+SQZMOM+HVI - [MYN]
Author: myncrypto
Description: This is part of a new series we are calling "Strategy Myth-Busting" where we take open public manual trading strategies and automate them. The goal is to not only validate the authenticity of the claims but to provide an automated version for traders who wish to trade autonomously.

Our sixth one we are automating is " I Tested ''7% Profit Per Day" Scalping...
PineScript code:

Pine Script™ strategy
Strategy Myth-Busting #6 - PSAR+MA+SQZMOM+HVI - [MYN]
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  myn
//@version=5
strategy('Strategy  Myth-Busting  #6  -  PSAR+MA+SQZMOM+HVI  -  [MYN]',  max_bars_back=5000,  overlay=true,  pyramiding=0,  initial_capital=20000,  currency='USD',  default_qty_type=strategy.percent_of_equity,  default_qty_value=100.0,  commission_value=0.075,  use_bar_magnifier  =  false)
/////////////////////////////////////
//*  Put  your  strategy  logic  below  *//
/////////////////////////////////////
//  dOg28adjYWY
//Trading  Strategies  Used
//  Parabolic  Sar
//  10  in  1  MA's
//  Squeeze  Momentum
//  HawkEYE  Volume  Indicator
//  Long  Condition
//  Parabolic  Sar  shift  below  price  at  last  dot  above  and  then  previous  bar  needs  to  breach  above  that.
//  Price  action  has  to  be  below  both  MA's  and  50MA  needs  to  be  above  200MA
//  Squeeze  Momentum  needsd  to  be  in  green  or  close  to  going  green
//  HawkEYE  Volume  Indicator  needs  to  be  show  a  green  bar  on  the  histagram
//  Short  Condition
//  Parabolic  Sar  shift  above  price  at  last  dot  below  and  then  previous  bar  needs  to  breach  below  that.
//  Price  action  needs  to  be  above  both  MA's  and  50MA  needs  to  be  below  200MA
//  Squeeze  Momentum  needsd  to  be  in  red  or  close  to  going  red
//  HawkEYE  Volume  Indicator  needs  to  be  show  a  red  bar  on  the  histagram
//  Parabolic  SAR
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//  Functions
//  Dynamic  Max  based  on  trendcode
int  trendCodeAdaptive  =  switch  timeframe.multiplier
        1  =>  1
        3  =>  1
        5  =>  1
        10  =>  2
        15  =>  3
        30  =>  5
        45  =>  5
        60  =>  7
        120  =>  9
        180  =>  9
        240  =>  13
        300  =>  14
        360  =>  15
        =>
                int(4)
bool  overrideAdaptiveSar  =  input(false,  title="Override  Adaptive  PSAR",  group="Adaptive  Parabolic  Sar")
TrendCodeOverRide  =  input(5,  title='Trend  Code  (If  Overriding  Adaptive  PSAR)')
startPSAR  =  0.02
increment  =  0.02
maximum  =  overrideAdaptiveSar  ?  TrendCodeOverRide  *  0.005  :    trendCodeAdaptive  *  0.005
psar  =  ta.sar(startPSAR,  increment,  maximum)
dir  =  psar  <  close  ?  1  :  -1
psarColor  =  dir  ==  1  ?  #00c3ff  :  #ff0062
psarPlot  =  plot(psar,  title='PSAR',  style=plot.style_circles,  linewidth=3,  color=psarColor,  transp=0)
var  color  longColor  =  color.green
var  color  shortColor  =  color.red
PSARLongEntry  =  dir  ==  1  and  dir[1]  ==  -1
PSARShortEntry  =  dir  ==  -1  and  dir[1]  ==  1
//  Squeeze  Momentum
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//@version=5
//  @author  LazyBear
//  List  of  all  my  indicators:  https://www.tradingview.com/v/4IneGo8h/
//
//indicator(shorttitle='SQZMOM_LB',  title='Squeeze  Momentum  Indicator  [LazyBear]',  overlay=false)
lengthBB  =  input(20,  title='BB  Length',  group="Squeeze  Momentum")
mult  =  input(2.0,  title='BB  MultFactor')
lengthKC  =  input(20,  title='KC  Length')
multKC  =  input(1.5,  title='KC  MultFactor')
useTrueRange  =  input(true,  title='Use  TrueRange  (KC)')
//  Calculate  BB
source  =  close
basis  =  ta.sma(source,  lengthBB)
dev  =  multKC  *  ta.stdev(source,  lengthBB)
upperBB  =  basis  +  dev
lowerBB  =  basis  -  dev
//  Calculate  KC
ma  =  ta.sma(source,  lengthKC)
range_1  =  useTrueRange  ?  ta.tr  :  high  -  low
rangema  =  ta.sma(range_1,  lengthKC)
upperKC  =  ma  +  rangema  *  multKC
lowerKC  =  ma  -  rangema  *  multKC
sqzOn  =  lowerBB  >  lowerKC  and  upperBB  <  upperKC
sqzOff  =  lowerBB  <  lowerKC  and  upperBB  >  upperKC
noSqz  =  sqzOn  ==  false  and  sqzOff  ==  false
val  =  ta.linreg(source  -  math.avg(math.avg(ta.highest(high,  lengthKC),  ta.lowest(low,  lengthKC)),  ta.sma(close,  lengthKC)),  lengthKC,  0)
iff_1  =  val  >  nz(val[1])  ?  color.lime  :  color.green
iff_2  =  val  <  nz(val[1])  ?  color.red  :  color.maroon
bcolor  =  val  >  0  ?  iff_1  :  iff_2
scolor  =  noSqz  ?  color.blue  :  sqzOn  ?  color.black  :  color.gray
//plot(val,  color=bcolor,  style=plot.style_histogram,  linewidth=4)
//plot(0,  color=scolor,  style=plot.style_cross,  linewidth=2)
SQZMOMLongEntry  =  val  >  0
SQZMOMShortEntry  =  val  <  0
//  10  in  1  Different  Moving  Averages
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//  ©  hiimannshu
//@version=5
//  This  indicator  is  just  a  simple  indicator  which  plot  any  kind  of  multiple  (atmost  10)  moving  everage  (sma/ema/wma/rma/hma/vwma)  on  chart.
//  Enjoy  the  new  update
//indicator(title='10  in  1  Different  Moving  Averages  (  SMA/EMA/WMA/RMA/HMA/VWMA  )',  shorttitle='  10  in  1  MAs',  overlay=true)
bool  plot_ma_1  =  input.bool(true,  '',  inline='MA  1',group=  "Multi  Timeframe  Moving  Averages")
string  ma_1_type  =  input.string(defval='EMA',  title='MA  1',  options=['RMA',  'SMA',  'EMA',  'WMA','HMA','VWMA'],  inline='MA  1',group=  "Multi  Timeframe  Moving  Averages")
int  ma_1_val  =  input.int(200,  '',  minval=1,  inline='MA  1',group=  "Multi  Timeframe  Moving  Averages")
ma1_tf  =  input.timeframe(title='',  defval='',  inline='MA  1',group=  "Multi  Timeframe  Moving  Averages")
color  ma_1_colour  =  input.color(color.green,  '',  inline='MA  1',group=  "Multi  Timeframe  Moving  Averages")
bool  plot_ma_2  =  input.bool(true,  '',  inline='MA  2',group=  "Multi  Timeframe  Moving  Averages")
string  ma_2_type  =  input.string(defval='SMA',  title='MA  2  ',  options=['RMA',  'SMA',  'EMA',  'WMA','HMA','VWMA'],  inline='MA  2',group=  "Multi  Timeframe  Moving  Averages")
int  ma_2_val  =  input.int(50,  '',  minval=1,  inline='MA  2',group=  "Multi  Timeframe  Moving  Averages")
ma2_tf  =  input.timeframe(title='',  defval='',  inline='MA  2',group=  "Multi  Timeframe  Moving  Averages")
color  ma_2_colour  =  input.color(color.yellow,  '',  inline='MA  2',group=  "Multi  Timeframe  Moving  Averages")
bool  plot_ma_3  =  input.bool(false,  '',  inline='MA  3',group=  "Multi  Timeframe  Moving  Averages")
string  ma_3_type  =  input.string(defval='SMA',  title='MA  3  ',  options=['RMA',  'SMA',  'EMA',  'WMA','HMA','VWMA'],  inline='MA  3',group=  "Multi  Timeframe  Moving  Averages")
int  ma_3_val  =  input.int(1,  '',  minval=1,  inline='MA  3',group=  "Multi  Timeframe  Moving  Averages")
ma3_tf  =  input.timeframe(title='',  defval='',  inline='MA  3',group=  "Multi  Timeframe  Moving  Averages")
color  ma_3_colour  =  input.color(color.black,  '',  inline='MA  3',group=  "Multi  Timeframe  Moving  Averages")
bool  plot_ma_4  =  input.bool(false,  '',  inline='MA  4',group=  "Multi  Timeframe  Moving  Averages")
string  ma_4_type  =  input.string(defval='SMA',  title='MA  4  ',  options=['RMA',  'SMA',  'EMA',  'WMA','HMA','VWMA'],  inline='MA  4',group=  "Multi  Timeframe  Moving  Averages")
int  ma_4_val  =  input.int(1,  '',  minval=1,  inline='MA  4',group=  "Multi  Timeframe  Moving  Averages")
ma4_tf  =  input.timeframe(title='',  defval='',  inline='MA  4',group=  "Multi  Timeframe  Moving  Averages")
color  ma_4_colour  =  input.color(color.black,  '',  inline='MA  4',group=  "Multi  Timeframe  Moving  Averages")
bool  plot_ma_5  =  input.bool(false,  '',  inline='MA  5',group=  "Multi  Timeframe  Moving  Averages")
string  ma_5_type  =  input.string(defval='SMA',  title='MA  5  ',  options=['RMA',  'SMA',  'EMA',  'WMA','HMA','VWMA'],  inline='MA  5',group=  "Multi  Timeframe  Moving  Averages")
int  ma_5_val  =  input.int(1,  '',  minval=1,  inline='MA  5',group=  "Multi  Timeframe  Moving  Averages")
ma5_tf  =  input.timeframe(title='',  defval='',  inline='MA  5',group=  "Multi  Timeframe  Moving  Averages")
color  ma_5_colour  =  input.color(color.black,  '',  inline='MA  5',group=  "Multi  Timeframe  Moving  Averages")
bool  plot_ma_6  =  input.bool(false,  '',  inline='MA  6',group=  "Normal  Moving  Averages")
string  ma_6_type  =  input.string(defval='SMA',  title='MA  6  ',  options=['RMA',  'SMA',  'EMA',  'WMA','HMA','VWMA'],  inline='MA  6',group=  "Normal  Moving  Averages")
int  ma_6_val  =  input.int(1,  '',  minval=1,  inline='MA  6',group=  "Normal  Moving  Averages")
ma_6_src  =  input.source(defval=close,  title='',  inline='MA  6',group=  "Normal  Moving  Averages")
color  ma_6_colour  =  input.color(color.black,  '',  inline='MA  6',group=  "Normal  Moving  Averages")
bool  plot_ma_7  =  input.bool(false,  '',  inline='MA  7',group=  "Normal  Moving  Averages")
string  ma_7_type  =  input.string(defval='SMA',  title='MA  7  ',  options=['RMA',  'SMA',  'EMA',  'WMA','HMA','VWMA'],  inline='MA  7',group=  "Normal  Moving  Averages")
int  ma_7_val  =  input.int(1,  '',  minval=1,  inline='MA  7',group=  "Normal  Moving  Averages")
ma_7_src  =  input.source(defval=close,  title='',  inline='MA  7',group=  "Normal  Moving  Averages")
color  ma_7_colour  =  input.color(color.black,  '',  inline='MA  7',group=  "Normal  Moving  Averages")
bool  plot_ma_8  =  input.bool(false,  '',  inline='MA  8',group=  "Normal  Moving  Averages")
string  ma_8_type  =  input.string(defval='SMA',  title='MA  8',  options=['RMA',  'SMA',  'EMA',  'WMA','HMA','VWMA'],  inline='MA  8',group=  "Normal  Moving  Averages")
int  ma_8_val  =  input.int(1,  '',  minval=1,  inline='MA  8',group=  "Normal  Moving  Averages")
ma_8_src  =  input.source(defval=close,  title='',  inline='MA  8',group=  "Normal  Moving  Averages")
color  ma_8_colour  =  input.color(color.black,  '',  inline='MA  8',group=  "Normal  Moving  Averages")
bool  plot_ma_9  =  input.bool(false,  '',  inline='MA  9',group=  "Normal  Moving  Averages")
string  ma_9_type  =  input.string(defval='SMA',  title='MA  9  ',  options=['RMA',  'SMA',  'EMA',  'WMA','HMA','VWMA'],  inline='MA  9',group=  "Normal  Moving  Averages")
int  ma_9_val  =  input.int(1,  '',  minval=1,  inline='MA  9',group=  "Normal  Moving  Averages")
ma_9_src  =  input.source(defval=close,  title='',  inline='MA  9',group=  "Normal  Moving  Averages")
color  ma_9_colour  =  input.color(color.black,  '',  inline='MA  9',group=  "Normal  Moving  Averages")
bool  plot_ma_10  =  input.bool(false,  '',  inline='MA  10',group=  "Normal  Moving  Averages")
string  ma_10_type  =  input.string(defval='SMA',  title='MA  10',  options=['RMA',  'SMA',  'EMA',  'WMA','HMA','VWMA'],  inline='MA  10',group=  "Normal  Moving  Averages")
int  ma_10_val  =  input.int(1,  '',  minval=1,  inline='MA  10',group=  "Normal  Moving  Averages")
ma_10_src  =  input.source(defval=close,  title='',  inline='MA  10',group=  "Normal  Moving  Averages")
color  ma_10_colour  =  input.color(color.black,  '',  inline='MA  10',group=  "Normal  Moving  Averages")
ma_function(source,  length,  type)  =>
        if  type  ==  'RMA'
                ta.rma(source,  length)
        else  if  type  ==  'SMA'
                ta.sma(source,  length)
        else  if  type  ==  'EMA'
                ta.ema(source,  length)
        else  if  type  ==  'WMA'
                ta.wma(source,  length)
        else  if  type  ==  'HMA'
                if(length<2)
                        ta.hma(source,2)
else
ta.hma(source,length)
else
ta.vwma(source,length)


ma_1=plot_ma_1?request.security(syminfo.tickerid,ma1_tf,ma_function(close,ma_1_val,ma_1_type)):0
ma_2=plot_ma_2?request.security(syminfo.tickerid,ma2_tf,ma_function(close,ma_2_val,ma_2_type)):0
ma_3=plot_ma_3?request.security(syminfo.tickerid,ma3_tf,ma_function(close,ma_3_val,ma_3_type)):0
ma_4=plot_ma_4?request.security(syminfo.tickerid,ma4_tf,ma_function(close,ma_4_val,ma_4_type)):0
ma_5=plot_ma_5?request.security(syminfo.tickerid,ma5_tf,ma_function(close,ma_5_val,ma_5_type)):0
ma_6=plot_ma_6?ma_function(ma_6_src,ma_6_val,ma_6_type):0
ma_7=plot_ma_7?ma_function(ma_7_src,ma_7_val,ma_7_type):0
ma_8=plot_ma_8?ma_function(ma_8_src,ma_8_val,ma_8_type):0
ma_9=plot_ma_9?ma_function(ma_9_src,ma_9_val,ma_9_type):0
ma_10=plot_ma_10?ma_function(ma_10_src,ma_10_val,ma_10_type):0
plot(plot_ma_1?ma_1:na,'MA1',ma_1_colour)
plot(plot_ma_2?ma_2:na,'MA2',ma_2_colour)
plot(plot_ma_3?ma_3:na,'MA3',ma_3_colour)
plot(plot_ma_4?ma_4:na,'MA4',ma_4_colour)
plot(plot_ma_5?ma_5:na,'MA5',ma_5_colour)
plot(plot_ma_6?ma_6:na,'MA6',ma_6_colour)
plot(plot_ma_7?ma_7:na,'MA7',ma_7_colour)
plot(plot_ma_8?ma_8:na,'MA8',ma_8_colour)
plot(plot_ma_9?ma_9:na,'MA9',ma_9_colour)
plot(plot_ma_10?ma_10:na,'MA10',ma_10_colour)
//Longentry-PricehastobebelowbothMA'sand50MAneedstobeabove200MA
MALongEntry=(close>ma_1andclose>ma_2)and(ma_2>ma_1)
//ShortEntry-PricehastobeabovebothMA'sand50MAneedstobebelow200MA
MAShortEntry=(close<ma_1andclose<ma_2)and(ma_2<ma_1)
//HawkEYEVolumeIndicator
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//@version=5
//@authorLazyBear
//Ifyouusethiscode,initsoriginalormodifiedform,dodropmeanote.Thx.
//
//indicator('HawkEyeVolumeIndicator[LazyBear]',shorttitle='HVI_LB')
lengthhvi=input(200,group="HawkEyeVolumeIndicator")
range_1HVI=high-low
rangeAvg=ta.sma(range_1HVI,lengthhvi)
volumeA=ta.sma(volume,lengthhvi)
divisor=input(1)
high1=high[1]
low1=low[1]
mid1=hl2[1]
u1=mid1+(high1-low1)/divisor
d1=mid1-(high1-low1)/divisor
r_enabled1=range_1HVI>rangeAvgandclose<d1andvolume>volumeA
r_enabled2=close<mid1
r_enabled=r_enabled1orr_enabled2
g_enabled1=close>mid1
g_enabled2=range_1HVI>rangeAvgandclose>u1andvolume>volumeA
g_enabled3=high>high1andrange_1HVI<rangeAvg/1.5andvolume<volumeA
g_enabled4=low<low1andrange_1HVI<rangeAvg/1.5andvolume>volumeA
g_enabled=g_enabled1org_enabled2org_enabled3org_enabled4
gr_enabled1=range_1HVI>rangeAvgandclose>d1andclose<u1andvolume>volumeAandvolume<volumeA*1.5andvolume>volume[1]
gr_enabled2=range_1HVI<rangeAvg/1.5andvolume<volumeA/1.5
gr_enabled3=close>d1andclose<u1
gr_enabled=gr_enabled1orgr_enabled2orgr_enabled3
v_color=gr_enabled?color.gray:g_enabled?color.green:r_enabled?color.red:color.blue
//plot(volume,style=plot.style_histogram,color=v_color,linewidth=5)
HVILongEntry=g_enabled
HVIShortEntry=r_enabled
//////////////////////////////////////
//*Putyourstrategyrulesbelow*//
/////////////////////////////////////
longCondition=PSARLongEntryandMALongEntryandHVILongEntryandSQZMOMLongEntry
shortCondition=PSARShortEntryandMAShortEntryandHVIShortEntryandSQZMOMShortEntry
//defineas0ifdonotwanttouse
closeLongCondition=0
closeShortCondition=0
//ADX
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
adxEnabled=input.bool(defval=false,title="AverageDirectionalIndex(ADX)",tooltip="",group="ADX")
adxlen=input(14,title="ADXSmoothing",group="ADX")
adxdilen=input(14,title="DILength",group="ADX")
adxabove=input(25,title="ADXThreshold",group="ADX")
adxdirmov(len)=>
adxup=ta.change(high)
adxdown=-ta.change(low)
adxplusDM=na(adxup)?na:(adxup>adxdownandadxup>0?adxup:0)
adxminusDM=na(adxdown)?na:(adxdown>adxupandadxdown>0?adxdown:0)
adxtruerange=ta.rma(ta.tr,len)
adxplus=fixnan(100*ta.rma(adxplusDM,len)/adxtruerange)
adxminus=fixnan(100*ta.rma(adxminusDM,len)/adxtruerange)
[adxplus,adxminus]
adx(adxdilen,adxlen)=>
[adxplus,adxminus]=adxdirmov(adxdilen)
adxsum=adxplus+adxminus
adx=100*ta.rma(math.abs(adxplus-adxminus)/(adxsum==0?1:adxsum),adxlen)
adxsig=adxEnabled?adx(adxdilen,adxlen):na
isADXEnabledAndAboveThreshold=adxEnabled?(adxsig>adxabove):true
//BacktestingTimePeriod(Input.timenotworkingasexpectedasof03/30/2021.Givingoddstart/enddates
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
useStartPeriodTime=input.bool(true,'Start',group='DateRange',inline='StartPeriod')
startPeriodTime=input.time(timestamp('1Jan2019'),'',group='DateRange',inline='StartPeriod')
useEndPeriodTime=input.bool(true,'End',group='DateRange',inline='EndPeriod')
endPeriodTime=input.time(timestamp('31Dec2030'),'',group='DateRange',inline='EndPeriod')
start=useStartPeriodTime?startPeriodTime>=time:false
end=useEndPeriodTime?endPeriodTime<=time:false
calcPeriod=notstartandnotend
//TradeDirection
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
tradeDirection=input.string('LongandShort',title='TradeDirection',options=['LongandShort','LongOnly','ShortOnly'],group='TradeDirection')
//PercentasPoints
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
per(pcnt)=>
strategy.position_size!=0?math.round(pcnt/100*strategy.position_avg_price/syminfo.mintick):float(na)
//Takeprofit1
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
tp1=input.float(title='TakeProfit1-Target%',defval=100,minval=0.0,step=0.5,group='TakeProfit',inline='TakeProfit1')
q1=input.int(title='%OfPosition',defval=100,minval=0,group='TakeProfit',inline='TakeProfit1')
//Takeprofit2
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
tp2=input.float(title='TakeProfit2-Target%',defval=100,minval=0.0,step=0.5,group='TakeProfit',inline='TakeProfit2')
q2=input.int(title='%OfPosition',defval=100,minval=0,group='TakeProfit',inline='TakeProfit2')
//Takeprofit3
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
tp3=input.float(title='TakeProfit3-Target%',defval=100,minval=0.0,step=0.5,group='TakeProfit',inline='TakeProfit3')
q3=input.int(title='%OfPosition',defval=100,minval=0,group='TakeProfit',inline='TakeProfit3')
//Takeprofit4
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
tp4=input.float(title='TakeProfit4-Target%',defval=100,minval=0.0,step=0.5,group='TakeProfit')
///StopLoss
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
stoplossPercent=input.float(title='StopLoss(%)',defval=999,minval=0.01,group='StopLoss')*0.01
slLongClose=close<strategy.position_avg_price*(1-stoplossPercent)
slShortClose=close>strategy.position_avg_price*(1+stoplossPercent)
///Leverage
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
leverage=input.float(1,'Leverage',step=.5,group='Leverage')
contracts=math.min(math.max(.000001,strategy.equity/close*leverage),1000000000)
///TradeStateManagement
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
isInLongPosition=strategy.position_size>0
isInShortPosition=strategy.position_size<0
///ProfitViewAlertSyntaxStringGeneration
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
alertSyntaxPrefix=input.string(defval='CRYPTANEX_99FTX_Strategy-Name-Here',title='AlertSyntaxPrefix',group='ProfitViewAlertSyntax')
alertSyntaxBase=alertSyntaxPrefix+'\n#'+str.tostring(open)+','+str.tostring(high)+','+str.tostring(low)+','+str.tostring(close)+','+str.tostring(volume)+','
///TradeExecution
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
longConditionCalc=(longConditionandisADXEnabledAndAboveThreshold)
shortConditionCalc=(shortConditionandisADXEnabledAndAboveThreshold)
ifcalcPeriod
iflongConditionCalcandtradeDirection!='ShortOnly'andisInLongPosition==false
strategy.entry('Long',strategy.long,qty=contracts)
alert(message=alertSyntaxBase+'side:long',freq=alert.freq_once_per_bar_close)
ifshortConditionCalcandtradeDirection!='LongOnly'andisInShortPosition==false
strategy.entry('Short',strategy.short,qty=contracts)
alert(message=alertSyntaxBase+'side:short',freq=alert.freq_once_per_bar_close)

//InspiredfromMultiple%%profitexitsexamplebyadolgohttps://www.tradingview.com/script/kHhCik9f-Multiple-profit-exits-example/
strategy.exit('TP1',qty_percent=q1,profit=per(tp1))
strategy.exit('TP2',qty_percent=q2,profit=per(tp2))
strategy.exit('TP3',qty_percent=q3,profit=per(tp3))
strategy.exit('TP4',profit=per(tp4))
strategy.close('Long',qty_percent=100,comment='SLLong',when=slLongClose)
strategy.close('Short',qty_percent=100,comment='SLShort',when=slShortClose)
strategy.close_all(when=closeLongConditionorcloseShortCondition,comment='ClosePostion')
///Dashboard
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//Inspiredbyhttps://www.tradingview.com/script/uWqKX6A2/-ThanksVertMT
showDashboard=input.bool(group="Dashboard",title="ShowDashboard",defval=true)
f_fillCell(_table,_column,_row,_title,_value,_bgcolor,_txtcolor)=>
_cellText=_title+"\n"+_value
table.cell(_table,_column,_row,_cellText,bgcolor=_bgcolor,text_color=_txtcolor,text_size=size.auto)
//Drawdashboardtable
ifshowDashboard
varbgcolor=color.new(color.black,0)

//KeeptrackofWins/Lossesstreaks
newWin=(strategy.wintrades>strategy.wintrades[1])and(strategy.losstrades==strategy.losstrades[1])and(strategy.eventrades==strategy.eventrades[1])
newLoss=(strategy.wintrades==strategy.wintrades[1])and(strategy.losstrades>strategy.losstrades[1])and(strategy.eventrades==strategy.eventrades[1])
varipintwinRow=0
varipintlossRow=0
varipintmaxWinRow=0
varipintmaxLossRow=0
ifnewWin
lossRow:=0
winRow:=winRow+1
ifwinRow>maxWinRow
maxWinRow:=winRow

ifnewLoss
winRow:=0
lossRow:=lossRow+1
iflossRow>maxLossRow
maxLossRow:=lossRow
//Preparestatstable
vartabledashTable=table.new(position.bottom_right,1,15,border_width=1)


ifbarstate.islastconfirmedhistory
//Updatetable
dollarReturn=strategy.netprofit
f_fillCell(dashTable,0,0,"Start:",str.format("{0,date,long}",strategy.closedtrades.entry_time(0)),bgcolor,color.white)//+str.format("{0,time,HH:mm}",strategy.closedtrades.entry_time(0))
f_fillCell(dashTable,0,1,"End:",str.format("{0,date,long}",strategy.opentrades.entry_time(0)),bgcolor,color.white)//+str.format("{0,time,HH:mm}",strategy.opentrades.entry_time(0))
_profit=(strategy.netprofit/strategy.initial_capital)*100
f_fillCell(dashTable,0,2,"NetProfit:",str.tostring(_profit,'##.##')+"%",_profit>0?color.green:color.red,color.white)
_numOfDaysInStrategy=(strategy.opentrades.entry_time(0)-strategy.closedtrades.entry_time(0))/(1000*3600*24)
f_fillCell(dashTable,0,3,"PercentPerDay",str.tostring(_profit/_numOfDaysInStrategy,'#########################.#####')+"%",_profit>0?color.green:color.red,color.white)
_winRate=(strategy.wintrades/strategy.closedtrades)*100
f_fillCell(dashTable,0,4,"PercentProfitable:",str.tostring(_winRate,'##.##')+"%",_winRate<50?color.red:_winRate<75?#999900:color.green,color.white)
f_fillCell(dashTable,0,5,"ProfitFactor:",str.tostring(strategy.grossprofit/strategy.grossloss,'##.###'),strategy.grossprofit>strategy.grossloss?color.green:color.red,color.white)
f_fillCell(dashTable,0,6,"TotalTrades:",str.tostring(strategy.closedtrades),bgcolor,color.white)
f_fillCell(dashTable,0,8,"MaxWinsInARow:",str.tostring(maxWinRow,'######'),bgcolor,color.white)
f_fillCell(dashTable,0,9,"MaxLossesInARow:",str.tostring(maxLossRow,'######'),bgcolor,color.white)
Expand (494 lines)
