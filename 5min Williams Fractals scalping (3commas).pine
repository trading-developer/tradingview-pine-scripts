Script Name: 5min Williams Fractals scalping (3commas)
Author: Zippy111
Description: Another strategy I'm learning Pine Script on. It is inspired by a MoneyZG youtube strategy called "Easy 5 Minute Scalping Strategy (Simple to Follow Scalping Trading Strategy)".

Again this is a one order per trade strategy compatible with the 3commas bot (works also with the free 3commas subscription). This strategy is based on the signals from Williams Fractals,...
PineScript code:

Pine Scriptâ„¢ strategy
5min Williams Fractals scalping (3commas)
//@version=5
strategy("5min  Williams  Fractals  scalping  (3commas)",  shorttitle="5min  WF  scalp",  format=format.price,  precision=0,  overlay=true)
//  Define  "n"  as  the  number  of  periods  and  keep  a  minimum  value  of  2  for  error  handling.
import  ZenAndTheArtOfTrading/ZenLibrary/2  as  l_zen
var  g_strategy            =  "Strategy"
i_chkLong                      =  input.bool(true,  title  =  'Long',  inline  =  '1',  group  =  g_strategy)
i_chkShort                    =  input.bool(true,  title  =  'Short',  inline  =  '1',  group  =  g_strategy)
i_startTime                  =  input.time(title  =  'Start  Date',  defval  =  timestamp('01  Jan  2020  00:00  +0100'),  group  =  g_strategy,  tooltip  =  'Date  &  time  to  begin  trading  from')
i_endTime                      =  input.time(title  =  'End  Date',  defval  =  timestamp('1  Jan  2099  00:00  +0100'),  group  =  g_strategy,  tooltip  =  'Date  &  time  to  stop  trading')
i_longProfitPerc        =  input.float(title  ='Long  Target  Profit  R:R',  minval  =  1.1,  step  =  0.1,  defval  =  1.5,  inline  ='2',  group  =  g_strategy,  tooltip  =  "Times  the  Stop  Loss  which  is  always  the  current  Ema  slow  value")
i_shortProfitPerc      =  input.float(title  =  'Short  Target  Profit  R:R',  minval  =  1.1,  step  =  0.1,  defval  =  1.5,  inline  =  '3',  group  =  g_strategy,  tooltip  =  "Times  the  Stop  Loss  which  is  always  the  current  Ema  slow  value")
i_tradeDontClose        =  input.int(title  =  "Stop  loss  not  sooner  than",  defval  =  0,  minval  =  0,  group  =  g_strategy,  tooltip  =  "If  an  open  trade  hits  the  Stop  loss  sooner  than  the  expected  amount  of  bars  have  passed,  then  SL  will  not  trigger  (eg.  for  thight  stop  losses)")
var  g_wf                        =  "Williams  Fractals"
i_wf                                =  input.int(title="Periods",  defval=2,  minval=2,  group  =  g_wf)
i_wfBarsBack                =  input.bool(defval  =  true,  title  =  "Evaluate  WF  bar",  group  =  g_wf,  tooltip  =  "By  default  it  evaluates  the  bar  for  which  the  WF  signal  triggers  so  when  turned  off  it  evaluates  the  current  bar")
var  g_ema                      =  "EMA  trend"
i_emaFast                      =  input.int(title  =  "Ema  fast  lenght",  defval  =  20,  step  =  1,  group  =  g_ema)
i_emaSlow                      =  input.int(title  =  "Ema  slow  lenght",  defval  =  50,  step  =  1,  group  =  g_ema)
i_emaGapUse                  =  input.bool(title  =  "Use  Ema  Gap",  defval  =  false,  group  =  g_ema,  tooltip  =  "Gap  between  Emas  must  be  greater  than  %  of  the  whole  security  price,\neg.  0.1  =  0.1%  of  the  security  price  which  is  the  minimum  gap  tolerated  for  an  entry")
i_emaGap                        =  input.float(title  =  "Ema  Gap  %",  defval  =  0.2,  step  =  0.05,  group  =  g_ema)
var  g_rsi                      =  "RSI  filter"
i_rsiChk                        =  input.bool(false,  "Use  RSI  Filter",  group  =  g_rsi)
i_rsiRes                        =  input.timeframe("",  "TimeFrame",  group  =  g_rsi)
i_rsiLen                        =  input.int(14,  "Lenght",  group  =  g_rsi)
i_rsiMinLong                =  input.float(0.0,  "Min  for  Long",  minval  =  0.0,  maxval  =  100.0,  step  =  0.5,  group  =  g_rsi,  inline  =  "4")
i_rsiMaxLong                =  input.float(70.0,  "Max  for  Long",  minval  =  0.0,  maxval  =  100.0,  step  =  0.5,  group  =  g_rsi,  inline  =  "4")
i_rsiMinShort              =  input.float(30.0,  "Min  for  Short",  minval  =  0.0,  maxval  =  100.0,  step  =  0.5,  group  =  g_rsi,  inline  =  "5")
i_rsiMaxShort              =  input.float(100.0,  "Max  for  Short",  minval  =  0.0,  maxval  =  100.0,  step  =  0.5,  group  =  g_rsi,  inline  =  "5")
i_rsiDirectChk            =  input.bool(false,  "RSI  direction  confirmation",  group  =  g_rsi,  tooltip  =  "Long  only  if  its  supported  by  rising  RSI  and  Short  only  if  its  supported  by  falling  RSI\nWorks  only  if  Use  RSI  is  ON")
i_rsiDirectLen            =  input.int(1,  "Bars  back  for  direction",  minval  =  1,  group  =  g_rsi,  tooltip  =  "Lookback  period  for  RSI  values")
var  g_additional        =  "Pullback  filter"
i_usePullbackChk        =  input.bool(false,  title  =  'Use  Pullback',  group  =  g_additional,  tooltip  =  "Checks  if  the  amount  of  oposite  candles  (bearish  when  long)  in  the  lookback  period  (counts  from  second  history  candle)is  smaller  than  the  NOT  bigger  count  and  vice  versa")
i_pullbackCount          =  input.int(title="Lookback  period",  defval=2,  minval  =  1,  group  =  g_additional)
i_pullbackNotBigger  =  input.int(title="NOT  bigger  than",  defval=1,  minval  =  0,  group  =  g_additional)
var  g_tester                =  'Back  tester  table'
i_drawTester                =  input.bool(title='Show  back  tester',  defval=true,  group=g_tester,  tooltip='Turn  on/off  inbuilt  backtester  display',  inline  =  "backtester1")
i_testerPosition        =  input.string(title='',  defval="Top  right",  options  =  ["Top  right",  "Top  left",  "Bottom  right",  "Bottom  left"],  group=g_tester,  tooltip='Position  of  the  backtester  table',  inline  =  "backtester1")
i_rr                                =  input.float(title='R:R',  defval=1.0,  group=g_tester,  tooltip='Risk:Reward  profile')
startBalance                =  input.float(title='Starting  Balance',  defval=100.0,  group=g_tester,  tooltip='Your  starting  balance  for  the  custom  inbuilt  tester  system')
riskPerTrade                =  input.float(title='Risk  Per  Trade',  defval=1.0,  group=g_tester,  tooltip='Your  desired  %  risk  per  trade  (as  a  whole  number)')
var  i_3Commas              =  '3Commas  bot  settings'
i_useComments              =  input.bool(false,  "Show  3Commas  bot  comments",  group  =  i_3Commas)
i_botIDLong                  =  input(title="Long  Bot  ID",  defval="",  group  =  i_3Commas)
i_botIDShort                =  input(title="Short  Bot  ID",  defval="",  group  =  i_3Commas)
i_tokenID                      =  input(title="Email  Token",  defval="",  group  =  i_3Commas)
//  Get  strategy  direction  and  set  time
strategy.risk.allow_entry_in(i_chkLong  and  i_chkShort  ?  strategy.direction.all  :  i_chkLong  ?  strategy.direction.long  :  strategy.direction.short)
c_dateFilter  =  time  >=  i_startTime  and  time  <=  i_endTime  //  See  if  this  bar's  time  happened  within  date  filter
//  Get  Ema  trend  and  conditions
c_emaFast  =  ta.ema(close[barstate.isrealtime  ?  1  :  0],  i_emaFast)
c_emaSlow  =  ta.ema(close[barstate.isrealtime  ?  1  :  0],  i_emaSlow)
c_emaCrossBull  =  c_emaFast  >=  c_emaSlow
c_emaCrossBear  =  c_emaFast  <  c_emaSlow
c_emaLong  =  i_wfBarsBack  ?
  close[i_wf]  <  c_emaFast[i_wf]  and  close[i_wf]  >  c_emaSlow[i_wf]  :
  close[barstate.isrealtime  ?  1  :  0]  <  c_emaFast  and  close[barstate.isrealtime  ?  1  :  0]  >  c_emaSlow
c_emaShort  =    i_wfBarsBack  ?
  (close[i_wf]  >  c_emaFast[i_wf]  and  close[i_wf]  <  c_emaSlow[i_wf])  :
    close[barstate.isrealtime  ?  1  :  0]  >  c_emaFast  and  close[barstate.isrealtime  ?  1  :  0]  <  c_emaSlow
c_emaGap  =  math.abs(c_emaFast  -  c_emaSlow)  >=  ((close[barstate.isrealtime  ?  1  :  0]  /  100)  *  i_emaGap)
c_tradesOpen  =  ta.barssince(strategy.opentrades  !=  0)
//  Get  RSI  values
f_rpSecurity(_symbol,  _res,  _src)  =>
        request.security(_symbol,  _res,  _src[barstate.isrealtime  ?  1  :  0])

c_rsiSrc  =  f_rpSecurity("",  i_rsiRes,  close)
c_rsi  =  ta.rsi(c_rsiSrc,  i_rsiLen)
c_rsiRising  =  ta.rising(c_rsi,  i_rsiDirectLen)
c_rsiFalling  =  ta.falling(c_rsi,  i_rsiDirectLen)
//  Get  pullback  filter
c_pullbackCountGreen  =  l_zen.getPullbackBarCount(i_pullbackCount,  1)
c_pullbackCountRed  =  l_zen.getPullbackBarCount(i_pullbackCount,  -1)
//  Get  Williams  Fractals
bool  c_upflagDownFrontier  =  true
bool  c_upflagUpFrontier0  =  true
bool  c_upflagUpFrontier1  =  true
boolc_upflagUpFrontier2=true
boolc_upflagUpFrontier3=true
boolc_upflagUpFrontier4=true
fori=1toi_wf
c_upflagDownFrontier:=c_upflagDownFrontierand(high[i_wf-i]<high[i_wf])
c_upflagUpFrontier0:=c_upflagUpFrontier0and(high[i_wf+i]<high[i_wf])
c_upflagUpFrontier1:=c_upflagUpFrontier1and(high[i_wf+1]<=high[i_wf]andhigh[i_wf+i+1]<high[i_wf])
c_upflagUpFrontier2:=c_upflagUpFrontier2and(high[i_wf+1]<=high[i_wf]andhigh[i_wf+2]<=high[i_wf]andhigh[i_wf+i+2]<high[i_wf])
c_upflagUpFrontier3:=c_upflagUpFrontier3and(high[i_wf+1]<=high[i_wf]andhigh[i_wf+2]<=high[i_wf]andhigh[i_wf+3]<=high[i_wf]andhigh[i_wf+i+3]<high[i_wf])
c_upflagUpFrontier4:=c_upflagUpFrontier4and(high[i_wf+1]<=high[i_wf]andhigh[i_wf+2]<=high[i_wf]andhigh[i_wf+3]<=high[i_wf]andhigh[i_wf+4]<=high[i_wf]andhigh[i_wf+i+4]<high[i_wf])
c_flagUpFrontier=c_upflagUpFrontier0orc_upflagUpFrontier1orc_upflagUpFrontier2orc_upflagUpFrontier3orc_upflagUpFrontier4
c_upFractal=(c_upflagDownFrontierandc_flagUpFrontier)
boolc_downflagDownFrontier=true
boolc_downflagUpFrontier0=true
boolc_downflagUpFrontier1=true
boolc_downflagUpFrontier2=true
boolc_downflagUpFrontier3=true
boolc_downflagUpFrontier4=true
fori=1toi_wf
c_downflagDownFrontier:=c_downflagDownFrontierand(low[i_wf-i]>low[i_wf])
c_downflagUpFrontier0:=c_downflagUpFrontier0and(low[i_wf+i]>low[i_wf])
c_downflagUpFrontier1:=c_downflagUpFrontier1and(low[i_wf+1]>=low[i_wf]andlow[i_wf+i+1]>low[i_wf])
c_downflagUpFrontier2:=c_downflagUpFrontier2and(low[i_wf+1]>=low[i_wf]andlow[i_wf+2]>=low[i_wf]andlow[i_wf+i+2]>low[i_wf])
c_downflagUpFrontier3:=c_downflagUpFrontier3and(low[i_wf+1]>=low[i_wf]andlow[i_wf+2]>=low[i_wf]andlow[i_wf+3]>=low[i_wf]andlow[i_wf+i+3]>low[i_wf])
c_downflagUpFrontier4:=c_downflagUpFrontier4and(low[i_wf+1]>=low[i_wf]andlow[i_wf+2]>=low[i_wf]andlow[i_wf+3]>=low[i_wf]andlow[i_wf+4]>=low[i_wf]andlow[i_wf+i+4]>low[i_wf])
c_flagDownFrontier=c_downflagUpFrontier0orc_downflagUpFrontier1orc_downflagUpFrontier2orc_downflagUpFrontier3orc_downflagUpFrontier4
c_downFractal=(c_downflagDownFrontierandc_flagDownFrontier)
c_sinceLastTrade=ta.barssince(strategy.closedtrades>strategy.closedtrades[1])
c_sinceLastLossTrade=ta.barssince(strategy.losstrades>strategy.losstrades[1])
varfloatc_longExitPrice=0.0
varfloatc_shortExitPrice=0.0
varfloatc_longStopPrice=0.0
varfloatc_shortStopPrice=0.0
c_longCondition=c_dateFilterand(c_downFractal)and
c_emaLongandc_emaCrossBulland(i_emaGapUse?c_emaGap:true)and
(i_rsiChk?(c_rsi>=i_rsiMinLongandc_rsi<=i_rsiMaxLongand(i_rsiDirectChk?c_rsiRising:true)):true)and
(i_usePullbackChk?c_pullbackCountGreen:true)
c_shortCondition=c_dateFilterand(c_upFractal)and
c_emaShortandc_emaCrossBearand(i_emaGapUse?c_emaGap:true)and
(i_rsiChk?(c_rsi>=i_rsiMinShortandc_rsi<=i_rsiMaxShortand(i_rsiDirectChk?c_rsiFalling:true)):true)and
(i_usePullbackChk?c_pullbackCountRed:true)
ifc_longConditionandstrategy.opentrades==0
strategy.entry(
id="LONGopen",
direction=strategy.long,
comment=i_useComments?'{\n"action":"start_bot_and_start_deal",\n"message_type":"bot",\n"bot_id":'+str.tostring(i_botIDLong)+',\n"email_token":"'+str.tostring(i_tokenID)+'",\n"delay_seconds":0}':na)
c_longStopPrice:=c_emaSlow
c_longExitPrice:=close+((close-c_emaSlow)*i_longProfitPerc)
ifta.barssince(strategy.opentrades==0)>=i_tradeDontClose
strategy.exit(
id="Longclose",
from_entry="LONGopen",
limit=c_longExitPrice,
stop=c_longStopPrice,
comment=i_useComments?'{\n"action":"close_at_market_price_all_and_stop_bot",\n"message_type":"bot",\n"bot_id":'+str.tostring(i_botIDLong)+',\n"email_token":"'+str.tostring(i_tokenID)+'",\n"delay_seconds":0}':na)
ifc_shortConditionandstrategy.opentrades==0
strategy.entry(
id="SHORTopen",
direction=strategy.short,
comment=i_useComments?'{\n"action":"start_bot_and_start_deal",\n"message_type":"bot",\n"bot_id":'+str.tostring(i_botIDShort)+',\n"email_token":"'+str.tostring(i_tokenID)+'",\n"delay_seconds":0}':na)
c_shortStopPrice:=c_emaSlow
c_shortExitPrice:=close-((c_emaSlow-close)*i_shortProfitPerc)
ifta.barssince(strategy.opentrades==0)>=i_tradeDontClose
strategy.exit(
id="Shortclose",
from_entry="SHORTopen",
limit=c_shortExitPrice,
stop=c_shortStopPrice,
comment=i_useComments?'{\n"action":"close_at_market_price_all_and_stop_bot",\n"message_type":"bot",\n"bot_id":'+str.tostring(i_botIDShort)+',\n"email_token":"'+str.tostring(i_tokenID)+'",\n"delay_seconds":0}':na)
//Plot
plot(c_emaFast,"Emafast",color=color.new(#4db6ac,40),linewidth=2,display=display.none)
plot(c_emaSlow,"Emaslow",color=color.new(#f57c00,40),linewidth=2,display=display.none)
plotshape(c_downFractal,title="Longshape",style=shape.triangleup,location=location.belowbar,offset=-i_wf,color=#009688,size=size.tiny,display=display.none)
plotshape(c_upFractal,title="Shortshape",style=shape.triangledown,location=location.abovebar,offset=-i_wf,color=#F44336,size=size.tiny,display=display.none)
//---BEGINTESTERCODE---//
//Declareperformancetrackingvariables
varbalance=startBalance
varmaxBalance=0.0
vartotalWins=0
vartotalLoss=0
//Detectwinningtrades
ifstrategy.wintrades!=strategy.wintrades[1]
balance:=balance+riskPerTrade/100*balance*i_rr
totalWins:=totalWins+1
ifbalance>maxBalance
maxBalance:=balance
maxBalance
//Detectlosingtrades
ifstrategy.losstrades!=strategy.losstrades[1]
balance:=balance-riskPerTrade/100*balance
totalLoss:=totalLoss+1

//Preparestatstable
vartabletestTable=table.new(i_testerPosition=="Topright"?position.top_right:i_testerPosition=="Topleft"?position.top_left:i_testerPosition=="Bottomright"?position.bottom_right:position.bottom_left,5,2,border_width=2)
f_fillCell(_table,_column,_row,_title,_value,_bgcolor,_txtcolor)=>
_cellText=_title+'\n'+_value
table.cell(_table,_column,_row,_cellText,bgcolor=_bgcolor,text_color=_txtcolor)
//Drawstatstable
varbgcolor=color.new(color.black,0)
ifi_drawTester
ifbarstate.islastconfirmedhistory
//Updatetable
dollarReturn=balance-startBalance
f_fillCell(testTable,0,0,'TotalTrades:',str.tostring(strategy.closedtrades),bgcolor,color.white)
f_fillCell(testTable,0,1,'WinRate:',str.tostring(l_zen.truncate(strategy.wintrades/strategy.closedtrades*100,2))+'%',(strategy.wintrades/strategy.closedtrades*100)>=50?color.green:bgcolor,color.white)
f_fillCell(testTable,1,0,'Starting:','$'+str.tostring(startBalance),bgcolor,color.white)
f_fillCell(testTable,1,1,'Ending:','$'+str.tostring(l_zen.truncate(balance,2)),balance>startBalance?color.green:bgcolor,color.white)
//---ENDBACKTESTERCODE---//
Expand (219 lines)
