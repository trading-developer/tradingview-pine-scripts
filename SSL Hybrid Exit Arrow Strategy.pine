Script Name: SSL Hybrid Exit Arrow Strategy
Author: kevinmck100
Description: Basic concept: Use the SSL Hybrid indicator's EXIT ARROWS to determine trade entry and exit points.

Rules:

  Enter LONG trades on BLUE exit arrows
  Enter SHORT trades on RED exit arrows
  Uses up to 3 DCA orders for trade entry
  Sets a stop loss
  Does not set any take profit. Relies on opposing arrow to exit current position
  When filters are set it affects...
PineScript code:

Pine Script™ strategy
SSL Hybrid Exit Arrow Strategy
//@version=5
//  Strategy  based  on  the  SSL  Hybrid  indicator  by  Mihkel00
//  Designed  for  the  purpose  of  back  testing
//  Strategy:
//    -  Enters  both  long  and  short  trades  based  on  SSL1  crossing  the  baseline
//    -  Stop  Loss  calculated  based  on  ATR  multiplier
//    -  Take  Profit  calculated  based  on  2  ATR  multipliers  and  exits  percentage  of  position  on  TP1  and  TP2
//
//  Credits:
//  SSL  Hybrid  Mihkel00  https://www.tradingview.com/u/Mihkel00/
//  --------------------------------  SSL  HYBRID  ---------------------------------
strategy('SSL  Exit  Arrow  Strategy',  overlay=true,  initial_capital=5000,  default_qty_value=10,  default_qty_type=strategy.percent_of_equity,  commission_type='percent',  commission_value=0.04,  max_labels_count=500,  calc_on_every_tick=true,  pyramiding=10)
show_Baseline  =  input.bool(title='Show  Baseline',  defval=true,  group='SSL  Hybrid  Indicator  Settings')
show_SSL1  =  input.bool(title='Show  SSL1',  defval=true,  group='SSL  Hybrid  Indicator  Settings')
show_atr  =  input.bool(title='Show  ATR  bands',  defval=false,  group='SSL  Hybrid  Indicator  Settings')
//ATR
atrlen  =  input.int(14,  'ATR  Period',  group='SSL  Hybrid  Indicator  Settings')
mult  =  input.float(1,  'ATR  Multi',  step=0.1,  group='SSL  Hybrid  Indicator  Settings')
smoothing  =  input.string(title='ATR  Smoothing',  defval='WMA',  options=['RMA',  'SMA',  'EMA',  'WMA'],  group='SSL  Hybrid  Indicator  Settings')
ma_function(source,  atrlen)  =>
        if  smoothing  ==  'RMA'
                ta.rma(source,  atrlen)
        else
                if  smoothing  ==  'SMA'
                        ta.sma(source,  atrlen)
                else
                        if  smoothing  ==  'EMA'
                                ta.ema(source,  atrlen)
                        else
                                ta.wma(source,  atrlen)
atr_slen  =  ma_function(ta.tr(true),  atrlen)
////ATR  Up/Low  Bands
upper_band  =  atr_slen  *  mult  +  close
lower_band  =  close  -  atr_slen  *  mult
////BASELINE  /  SSL1  /  SSL2  /  EXIT  MOVING  AVERAGE  VALUES
maType  =  input.string(title='SSL1  /  Baseline  Type',  defval='HMA',  options=['SMA',  'EMA',  'DEMA',  'TEMA',  'LSMA',  'WMA',  'MF',  'VAMA',  'TMA',  'HMA',  'JMA',  'Kijun  v2',  'EDSMA',  'McGinley'],  group='SSL  Hybrid  Indicator  Settings')
len  =  input.int(title='SSL1  /  Baseline  Length',  defval=60,  group='SSL  Hybrid  Indicator  Settings')
SSL2Type  =  input.string(title='SSL2  /  Continuation  Type',  defval='JMA',  options=['SMA',  'EMA',  'DEMA',  'TEMA',  'WMA',  'MF',  'VAMA',  'TMA',  'HMA',  'JMA',  'McGinley'],  group='SSL  Hybrid  Indicator  Settings')
len2  =  input.int(title='SSL  2  Length',  defval=5,  group='SSL  Hybrid  Indicator  Settings')
//
SSL3Type  =  input.string(title='EXIT  Type',  defval='HMA',  options=['DEMA',  'TEMA',  'LSMA',  'VAMA',  'TMA',  'HMA',  'JMA',  'Kijun  v2',  'McGinley',  'MF'],  group='SSL  Hybrid  Indicator  Settings')
len3  =  input.int(title='EXIT  Length',  defval=15,  group='SSL  Hybrid  Indicator  Settings')
src  =  input.source(title='Source',  defval=close,  group='SSL  Hybrid  Indicator  Settings')
//
tema(src,  len)  =>
        ema1  =  ta.ema(src,  len)
        ema2  =  ta.ema(ema1,  len)
        ema3  =  ta.ema(ema2,  len)
        3  *  ema1  -  3  *  ema2  +  ema3
kidiv  =  input.int(defval=1,  maxval=4,  title='Kijun  MOD  Divider',  group='SSL  Hybrid  Indicator  Settings')
jurik_phase  =  input.int(title='*  Jurik  (JMA)  Only  -  Phase',  defval=3,  group='SSL  Hybrid  Indicator  Settings')
jurik_power  =  input.int(title='*  Jurik  (JMA)  Only  -  Power',  defval=1,  group='SSL  Hybrid  Indicator  Settings')
volatility_lookback  =  input.int(10,  title='*  Volatility  Adjusted  (VAMA)  Only  -  Volatility  lookback  length',  group='SSL  Hybrid  Indicator  Settings')
//MF
beta  =  input.float(0.8,  minval=0,  maxval=1,  step=0.1,  title='Modular  Filter,  General  Filter  Only  -  Beta',  group='SSL  Hybrid  Indicator  Settings')
feedback  =  input.bool(false,  title='Modular  Filter  Only  -  Feedback',  group='SSL  Hybrid  Indicator  Settings')
z  =  input.float(0.5,  title='Modular  Filter  Only  -  Feedback  Weighting',  step=0.1,  minval=0,  maxval=1,  group='SSL  Hybrid  Indicator  Settings')
//EDSMA
ssfLength  =  input.int(title='EDSMA  -  Super  Smoother  Filter  Length',  minval=1,  defval=20,  group='SSL  Hybrid  Indicator  Settings')
ssfPoles  =  input.int(title='EDSMA  -  Super  Smoother  Filter  Poles',  defval=2,  options=[2,  3],  group='SSL  Hybrid  Indicator  Settings')
//----
//EDSMA
get2PoleSSF(src,  length)  =>
        PI  =  2  *  math.asin(1)
        arg  =  math.sqrt(2)  *  PI  /  length
        a1  =  math.exp(-arg)
        b1  =  2  *  a1  *  math.cos(arg)
        c2  =  b1
        c3  =  -math.pow(a1,  2)
        c1  =  1  -  c2  -  c3
        ssf  =  0.0
        ssf  :=  c1  *  src  +  c2  *  nz(ssf[1])  +  c3  *  nz(ssf[2])
        ssf
get3PoleSSF(src,  length)  =>
        PI  =  2  *  math.asin(1)
        arg  =  PI  /  length
        a1  =  math.exp(-arg)
        b1  =  2  *  a1  *  math.cos(1.738  *  arg)
        c1  =  math.pow(a1,  2)
        coef2  =  b1  +  c1
        coef3  =  -(c1  +  b1  *  c1)
        coef4  =  math.pow(c1,  2)
        coef1  =  1  -  coef2  -  coef3  -  coef4
        ssf  =  0.0
        ssf  :=  coef1  *  src  +  coef2  *  nz(ssf[1])  +  coef3  *  nz(ssf[2])  +  coef4  *  nz(ssf[3])
        ssf
ma(type,  src,  len)  =>
        float  result  =  0
        if  type  ==  'TMA'
                result  :=  ta.sma(ta.sma(src,  math.ceil(len  /  2)),  math.floor(len  /  2)  +  1)
                result
        if  type  ==  'MF'
                ts  =  0.
                b  =  0.
                c  =  0.
                os  =  0.
                //----
                alpha  =  2  /  (len  +  1)
                a  =  feedback  ?  z  *  src  +  (1  -  z)  *  nz(ts[1],  src)  :  src
                //----
                b  :=  a  >  alpha  *  a  +  (1  -  alpha)  *  nz(b[1],  a)  ?  a  :  alpha  *  a  +  (1  -  alpha)  *  nz(b[1],  a)
                c  :=  a  <  alpha  *  a  +  (1  -  alpha)  *  nz(c[1],  a)  ?  a  :  alpha  *  a  +  (1  -  alpha)  *  nz(c[1],  a)
                os  :=  a  ==  b  ?  1  :  a  ==  c  ?  0  :  os[1]
                //----
                upper  =  beta  *  b  +  (1  -  beta)  *  c
                lower  =  beta  *  c  +  (1  -  beta)  *  b
                ts  :=  os  *  upper  +  (1  -  os)  *  lower
                result  :=  ts
                result
        if  type  ==  'LSMA'
                result  :=  ta.linreg(src,  len,  0)
                result
        if  type  ==  'SMA'    //  Simple
                result  :=  ta.sma(src,  len)
                result
        if  type  ==  'EMA'    //  Exponential
                result  :=  ta.ema(src,  len)
                result
        if  type  ==  'DEMA'    //  Double  Exponential
                e  =  ta.ema(src,  len)
                result  :=  2  *  e  -  ta.ema(e,  len)
                result
        if  type  ==  'TEMA'    //  Triple  Exponential
                e  =  ta.ema(src,  len)
                result  :=  3  *  (e  -  ta.ema(e,  len))  +  ta.ema(ta.ema(e,  len),  len)
                result
        if  type  ==  'WMA'    //  Weighted
                result  :=  ta.wma(src,  len)
                result
        if  type  ==  'VAMA'    //  Volatility  Adjusted
                ///  Copyright  ©  2019  to  present,  Joris  Duyck  (JD)
            mid=ta.ema(src,len)
dev=src-mid
vol_up=ta.highest(dev,volatility_lookback)
vol_down=ta.lowest(dev,volatility_lookback)
result:=mid+math.avg(vol_up,vol_down)
result
iftype=='HMA'//Hull
result:=ta.wma(2*ta.wma(src,len/2)-ta.wma(src,len),math.round(math.sqrt(len)))
result
iftype=='JMA'//Jurik
///Copyright©2018AlexOrekhov(everget)
///Copyright©2017JurikResearchandConsulting.
phaseRatio=jurik_phase<-100?0.5:jurik_phase>100?2.5:jurik_phase/100+1.5
beta=0.45*(len-1)/(0.45*(len-1)+2)
alpha=math.pow(beta,jurik_power)
jma=0.0
e0=0.0
e0:=(1-alpha)*src+alpha*nz(e0[1])
e1=0.0
e1:=(src-e0)*(1-beta)+beta*nz(e1[1])
e2=0.0
e2:=(e0+phaseRatio*e1-nz(jma[1]))*math.pow(1-alpha,2)+math.pow(alpha,2)*nz(e2[1])
jma:=e2+nz(jma[1])
result:=jma
result
iftype=='Kijunv2'
kijun=math.avg(ta.lowest(len),ta.highest(len))//,(open+close)/2)
conversionLine=math.avg(ta.lowest(len/kidiv),ta.highest(len/kidiv))
delta=(kijun+conversionLine)/2
result:=delta
result
iftype=='McGinley'
mg=0.0
ema=ta.ema(src,len)
mg:=na(mg[1])?ema:mg[1]+(src-mg[1])/(len*math.pow(src/mg[1],4))
result:=mg
result
iftype=='EDSMA'
zeros=src-nz(src[2])
avgZeros=(zeros+zeros[1])/2
//EhlersSuperSmootherFilter
ssf=ssfPoles==2?get2PoleSSF(avgZeros,ssfLength):get3PoleSSF(avgZeros,ssfLength)
//RescalefilterintermsofStandardDeviations
stdev=ta.stdev(ssf,len)
scaledFilter=stdev!=0?ssf/stdev:0
alpha=5*math.abs(scaledFilter)/len
edsma=0.0
edsma:=alpha*src+(1-alpha)*nz(edsma[1])
result:=edsma
result
result
///SSL1andSSL2
emaHigh=ma(maType,high,len)
emaLow=ma(maType,low,len)
maHigh=ma(SSL2Type,high,len2)
maLow=ma(SSL2Type,low,len2)
///EXIT
ExitHigh=ma(SSL3Type,high,len3)
ExitLow=ma(SSL3Type,low,len3)
///KeltnerBaselineChannel
BBMC=ma(maType,close,len)
useTrueRange=input.bool(true,group='SSLHybridIndicatorSettings')
multy=input.float(0.2,step=0.05,title='BaseChannelMultiplier',group='SSLHybridIndicatorSettings')
Keltma=ma(maType,src,len)
range_1=useTrueRange?ta.tr:high-low
rangema=ta.ema(range_1,len)
upperk=Keltma+rangema*multy
lowerk=Keltma-rangema*multy
//BaselineViolationCandle
open_pos=open*1
close_pos=close*1
difference=math.abs(close_pos-open_pos)
atr_violation=difference>atr_slen
InRange=upper_band>BBMCandlower_band<BBMC
candlesize_violation=atr_violationandInRange
plotshape(candlesize_violation,color=color.new(color.white,transp=0),size=size.tiny,style=shape.diamond,location=location.top,title='CandleSize>1xATR')
//SSL1VALUES
Hlv=int(na)
Hlv:=close>emaHigh?1:close<emaLow?-1:Hlv[1]
sslDown=Hlv<0?emaHigh:emaLow
//SSL2VALUES
Hlv2=int(na)
Hlv2:=close>maHigh?1:close<maLow?-1:Hlv2[1]
sslDown2=Hlv2<0?maHigh:maLow
//EXITVALUES
Hlv3=int(na)
Hlv3:=close>ExitHigh?1:close<ExitLow?-1:Hlv3[1]
sslExit=Hlv3<0?ExitHigh:ExitLow
base_cross_Long=ta.crossover(close,sslExit)
base_cross_Short=ta.crossover(sslExit,close)
codiff=base_cross_Long?1:base_cross_Short?-1:na
//COLORS
show_color_bar=input.bool(title='ColorBars',defval=true,group='SSLHybridIndicatorSettings')
color_bar=close>upperk?#00c3ff:close<lowerk?#ff0062:color.gray
color_ssl1=close>sslDown?#00c3ff:close<sslDown?#ff0062:na
//PLOTS
plotarrow(codiff,colorup=color.rgb(0,195,255,transp=0),colordown=color.rgb(255,0,98,transp=0),title='ExitArrows',maxheight=20,offset=0)
p1=plot(show_Baseline?BBMC:na,color=color.new(color_bar,transp=0),linewidth=4,title='MABaseline')
DownPlot=plot(show_SSL1?sslDown:na,title='SSL1',linewidth=3,color=color.new(color_ssl1,transp=10))
barcolor(show_color_bar?color_bar:na)
up_channel=plot(show_Baseline?upperk:na,color=color_bar,title='BaselineUpperChannel')
low_channel=plot(show_Baseline?lowerk:na,color=color_bar,title='BasilineLowerChannel')
fill(up_channel,low_channel,color=color.new(color_bar,transp=90))
////SSL2ContiniuationfromATR
atr_crit=input.float(0.9,step=0.1,title='ContinuationATRCriteria',group='SSLHybridIndicatorSettings')
upper_half=atr_slen*atr_crit+close
lower_half=close-atr_slen*atr_crit
buy_inatr=lower_half<sslDown2
sell_inatr=upper_half>sslDown2
sell_cont=close<BBMCandclose<sslDown2
buy_cont=close>BBMCandclose>sslDown2
sell_atr=sell_inatrandsell_cont
buy_atr=buy_inatrandbuy_cont
atr_fill=buy_atr?color.green:sell_atr?color.purple:color.white
LongPlot=plot(sslDown2,title='SSL2',linewidth=2,color=color.new(atr_fill,transp=0),style=plot.style_circles,display=display.none)
u=plot(show_atr?upper_band:na,'+ATR',color=color.new(color.white,transp=80),display=display.none)
l=plot(show_atr?lower_band:na,'-ATR',color=color.new(color.white,transp=80),display=display.none)
//----------------------------QQEMODINDICATOR------------------------------
RSI_Period=input(6,title='RSILength')
SF=input(5,title='RSISmoothing')
QQE=input(3,title='FastQQEFactor')
ThreshHold=input(3,title='Thresh-hold')
rsi_src=input(close,title='RSISource')
Wilders_Period=RSI_Period*2-1
Rsi=ta.rsi(rsi_src,RSI_Period)
RsiMa=ta.ema(Rsi,SF)
AtrRsi=math.abs(RsiMa[1]-RsiMa)
MaAtrRsi=ta.ema(AtrRsi,Wilders_Period)
dar=ta.ema(MaAtrRsi,Wilders_Period)*QQE
longband=0.0
shortband=0.0
trend=0
DeltaFastAtrRsi=dar
RSIndex=RsiMa
newshortband=RSIndex+DeltaFastAtrRsi
newlongband=RSIndex-DeltaFastAtrRsi
longband:=RSIndex[1]>longband[1]andRSIndex>longband[1]?math.max(longband[1],newlongband):newlongband
shortband:=RSIndex[1]<shortband[1]andRSIndex<shortband[1]?math.min(shortband[1],newshortband):newshortband
cross_1=ta.cross(longband[1],RSIndex)
trend:=ta.cross(RSIndex,shortband[1])?1:cross_1?-1:nz(trend[1],1)
FastAtrRsiTL=trend==1?longband:shortband
////////////////////
length=input.int(50,minval=1,title='BollingerLength')
bb_mult=input.float(0.35,minval=0.001,maxval=5,step=0.1,title='BBMultiplier')
basis=ta.sma(FastAtrRsiTL-50,length)
dev=bb_mult*ta.stdev(FastAtrRsiTL-50,length)
upper=basis+dev
lower=basis-dev
rsi_ma_color_bar=RsiMa-50>upper?#00c3ff:RsiMa-50<lower?#ff0062:color.gray
//Zerocross
QQEzlong=0
QQEzlong:=nz(QQEzlong[1])
QQEzshort=0
QQEzshort:=nz(QQEzshort[1])
QQEzlong:=RSIndex>=50?QQEzlong+1:0
QQEzshort:=RSIndex<50?QQEzshort+1:0
////////////////////////////////////////////////////////////////
RSI_Period2=input(6,title='RSILength')
SF2=input(5,title='RSISmoothing')
QQE2=input(1.61,title='FastQQE2Factor')
ThreshHold2=input(3,title='Thresh-hold')
src2=input(close,title='RSISource')
Wilders_Period2=RSI_Period2*2-1
Rsi2=ta.rsi(src2,RSI_Period2)
RsiMa2=ta.ema(Rsi2,SF2)
AtrRsi2=math.abs(RsiMa2[1]-RsiMa2)
MaAtrRsi2=ta.ema(AtrRsi2,Wilders_Period2)
dar2=ta.ema(MaAtrRsi2,Wilders_Period2)*QQE2
longband2=0.0
shortband2=0.0
trend2=0
DeltaFastAtrRsi2=dar2
RSIndex2=RsiMa2
newshortband2=RSIndex2+DeltaFastAtrRsi2
newlongband2=RSIndex2-DeltaFastAtrRsi2
longband2:=RSIndex2[1]>longband2[1]andRSIndex2>longband2[1]?math.max(longband2[1],newlongband2):newlongband2
shortband2:=RSIndex2[1]<shortband2[1]andRSIndex2<shortband2[1]?math.min(shortband2[1],newshortband2):newshortband2
cross_2=ta.cross(longband2[1],RSIndex2)
trend2:=ta.cross(RSIndex2,shortband2[1])?1:cross_2?-1:nz(trend2[1],1)
FastAtrRsi2TL=trend2==1?longband2:shortband2
//Zerocross
QQE2zlong=0
QQE2zlong:=nz(QQE2zlong[1])
QQE2zshort=0
QQE2zshort:=nz(QQE2zshort[1])
QQE2zlong:=RSIndex2>=50?QQE2zlong+1:0
QQE2zshort:=RSIndex2<50?QQE2zshort+1:0
hcolor2=RsiMa2-50>ThreshHold2?color.silver:RsiMa2-50<0-ThreshHold2?color.silver:na
Greenbar1=RsiMa2-50>ThreshHold2
Greenbar2=RsiMa-50>upper
Redbar1=RsiMa2-50<0-ThreshHold2
Redbar2=RsiMa-50<lower
qqe_line=FastAtrRsi2TL-50
qqe_blue_bar=Greenbar1andGreenbar2==1
qqe_red_bar=Redbar1andRedbar2==1
//----------------------------------STRATEGY----------------------------------
atr_length=input.int(title='ATRLength',defval=14,inline='1',group='StrategyBackTestSettings')
atr=ta.atr(atr_length)
//Backtesttimerange
from_date=input.time(title='From',defval=timestamp('01Aug202100:00+0100'),inline='1',group='DateRange')
to_date=input.time(title='To',defval=timestamp('01Sep210000:00+0100'),inline='1',group='DateRange')
in_date=time>=from_dateandtime<=to_date
//Strategyentryandexitsettings
//ShoulduseSSLasafilterforpositionside
use_ssl_filter=input.bool(title='SSLFlipasFilter',defval=false,inline='1',group='EntrySettings')
//ShoulduseSSLasafilterforpositionside
use_qqe_filter=input.bool(title='QQEMODasFilter(PleaseaddQQEMODindicatortoyourchartseparately)',defval=false,inline='2',group='EntrySettings')
//DCASettings
dca1_atr_multiplier=input.float(title='DCA1ATRMultiplier',defval=0.1,step=0.1,inline='3',group='EntrySettings')
dca1_exit_percentage=input.int(title='DCA1ExitPercentage',defval=20,step=1,maxval=100,inline='3',group='EntrySettings')
dca2_atr_multiplier=input.float(title='DCA2ATRMultiplier',defval=0.3,step=0.1,inline='4',group='EntrySettings')
dca2_exit_percentage=input.int(title='DCA2ExitPercentage',defval=40,step=1,maxval=100,inline='4',group='EntrySettings')
dca3_atr_multiplier=input.float(title='DCA3ATRMultiplier',defval=0.7,step=0.1,inline='5',group='EntrySettings')
dca3_exit_percentage=input.int(title='DCA3ExitPercentage',defval=40,step=1,maxval=100,inline='5',group='EntrySettings')
//Stop-LossSettings
sl_atr_multiplier=input.float(title='SLATRMultiplier',defval=1.8,step=0.1,inline='2',group='ExitSettings')
varlong_sl=float(na)
varlong_dca1=float(na)
varlong_dca2=float(na)
varlong_dca3=float(na)
varshort_sl=float(na)
varshort_dca1=float(na)
varshort_dca2=float(na)
varshort_dca3=float(na)
is_open_long=strategy.position_size>0
is_open_short=strategy.position_size<0
varin_ssl_long=false
varin_ssl_short=false
varssl_long_entry=false
varssl_short_entry=false
varssl_long_exit=false
varssl_short_exit=false
vardid_prev_bar_ssl_flip=false
ssl_long=use_ssl_filter?close>sslDown:true
ssl_short=use_ssl_filter?close<sslDown:true
qqe_long=use_qqe_filter?qqe_blue_barandqqe_line>0:true
qqe_short=use_qqe_filter?qqe_red_barandqqe_line<0:true
ssl_long_entry:=ssl_longandqqe_longandcodiff==1
ssl_short_entry:=ssl_shortandqqe_shortandcodiff==-1
ssl_long_exit:=codiff==-1
ssl_short_exit:=codiff==1
remaining_percent=100
vartotal_tokens=strategy.equity*0.10/close
dca1_percent=dca1_exit_percentage<=remaining_percent?dca1_exit_percentage:remaining_percent
remaining_percent-=dca1_percent
entry_1=total_tokens*(dca1_percent/100)
dca2_percent=dca2_exit_percentage<=remaining_percent?dca2_exit_percentage:remaining_percent
remaining_percent-=dca2_percent
entry_2=total_tokens*(dca2_percent/100)
dca3_percent=dca3_exit_percentage<=remaining_percent?dca3_exit_percentage:remaining_percent
remaining_percent-=dca3_percent
entry_3=total_tokens*(dca3_percent/100)
ifdid_prev_bar_ssl_flip
did_prev_bar_ssl_flip:=false
position_value=math.abs(strategy.position_size*close)
ifin_ssl_long
label.new(x=bar_index,y=close,xloc=xloc.bar_index,yloc=yloc.abovebar,text=str.tostring(position_value),style=label.style_label_down,size=size.tiny)
else
label.new(x=bar_index,y=close,xloc=xloc.bar_index,yloc=yloc.belowbar,text=str.tostring(position_value),style=label.style_label_up,size=size.tiny)
ifssl_long_exit
strategy.cancel('LongEntry1')
strategy.cancel('LongEntry2')
strategy.cancel('LongEntry3')
strategy.close(id='LongEntry1',comment='CloseLong1')
strategy.close(id='LongEntry2',comment='CloseLong2')
strategy.close(id='LongEntry3',comment='CloseLong3')
in_ssl_long:=false
in_ssl_short:=false
in_ssl_short
ifssl_short_exit
strategy.cancel('ShortEntry1')
strategy.cancel('ShortEntry2')
strategy.cancel('ShortEntry3')
strategy.close(id='ShortEntry1',comment='CloseShort1')
strategy.close(id='ShortEntry2',comment='CloseShort2')
strategy.close(id='ShortEntry3',comment='CloseShort3')
in_ssl_long:=false
in_ssl_short:=false
in_ssl_short
ifssl_long_entryandin_dateandnotin_ssl_long
strategy.cancel('LongEntry1')
strategy.cancel('LongEntry2')
strategy.cancel('LongEntry3')
strategy.cancel('ShortEntry1')
strategy.cancel('ShortEntry2')
strategy.cancel('ShortEntry3')
ifin_ssl_short
strategy.close(id='ShortEntry1',comment='CloseShort1')
strategy.close(id='ShortEntry2',comment='CloseShort2')
strategy.close(id='ShortEntry3',comment='CloseShort3')
in_ssl_long:=true
in_ssl_short:=false
did_prev_bar_ssl_flip:=true
long_sl:=close-atr*sl_atr_multiplier
long_dca1:=close-atr*dca1_atr_multiplier
long_dca2:=close-atr*dca2_atr_multiplier
long_dca3:=close-atr*dca3_atr_multiplier
strategy.entry('LongEntry1',strategy.long,limit=long_dca1)
strategy.entry('LongEntry2',strategy.long,limit=long_dca2)
strategy.entry('LongEntry3',strategy.long,limit=long_dca3)
strategy.exit('LongExit1','LongEntry1',stop=long_sl)
strategy.exit('LongExit2','LongEntry2',stop=long_sl)
strategy.exit('LongExit3','LongEntry3',stop=long_sl)

alert(message="SSLExitArrowStratLONG",freq=alert.freq_once_per_bar_close)
ifssl_short_entryandin_dateandnotin_ssl_short
strategy.cancel('LongEntry1')
strategy.cancel('LongEntry2')
strategy.cancel('LongEntry3')
strategy.cancel('ShortEntry1')
strategy.cancel('ShortEntry2')
strategy.cancel('ShortEntry3')
ifin_ssl_long
strategy.close(id='LongEntry1',comment='CloseLong1')
strategy.close(id='LongEntry2',comment='CloseLong2')
strategy.close(id='LongEntry3',comment='CloseLong3')
in_ssl_short:=true
in_ssl_long:=false
did_prev_bar_ssl_flip:=true
short_sl:=close+atr*sl_atr_multiplier
short_dca1:=close+atr*dca1_atr_multiplier
short_dca2:=close+atr*dca2_atr_multiplier
short_dca3:=close+atr*dca3_atr_multiplier
strategy.entry('ShortEntry1',strategy.short,limit=short_dca1)
strategy.entry('ShortEntry2',strategy.short,limit=short_dca2)
strategy.entry('ShortEntry3',strategy.short,limit=short_dca3)
strategy.exit('ShortExit1','ShortEntry1',stop=short_sl)
strategy.exit('ShortExit2','ShortEntry2',stop=short_sl)
strategy.exit('ShortExit3','ShortEntry3',stop=short_sl)

alert(message="SSLExitArrowStratSHORT",freq=alert.freq_once_per_bar_close)
Expand (553 lines)
