Script Name: EMA-ADX-VOL-CRYPTO KILLER [15M]
Author: Babehdyo
Description: A tester indicators for BTC and all alt coin. This is a start. If anyone can make an alert for this sript, i'll be happy though..
PineScript code:

Pine Script™ strategy
EMA/ADX/VOL-CRYPTO KILLER [15M]
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  BabehDyo
//@version=4
strategy("EMA/ADX/VOL-CRYPTO  KILLER  [15M]",  overlay  =  true,  pyramiding=1,initial_capital  =  10000,  default_qty_type=  strategy.percent_of_equity,  default_qty_value  =  100,  calc_on_order_fills=false,  slippage=0,commission_type=strategy.commission.percent,commission_value=0.03)
//SOURCE  =============================================================================================================================================================================================================================================================================================================
src                                  =                                      input(open,                                                          title="  Source")
//  Inputs  ========================================================================================================================================================================================================================================================================================================
//ADX  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ADX_options                  =                                      input("MASANAKAMURA",                                      title="  Adx  Type",                                                                              options  =  ["CLASSIC",  "MASANAKAMURA"],                                                                                        group="ADX")
ADX_len                          =                                      input(21,                                                              title="  Adx  Length",                                                                          type=input.integer,  minval  =  1,                                                                                            group="ADX")
th=input(20,title="  AdxTreshold",type=input.float,minval=0,step=0.5,group="ADX")
//EMA--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Length_ema1=input(8,title="  1-EMALength",minval=1)
Length_ema2=input(13,title="  2-EMALength",minval=1)
Length_ema3=input(21,title="  3-EMALength",minval=1)
Length_ema4=input(34,title="  4-EMALength",minval=1)
Length_ema5=input(55,title="  5-EMALength",minval=1)
//RangeFilter---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
per_=input(15,title="  Period",minval=1,group="RangeFilter")
mult=input(2.6,title="  mult.",minval=0.1,step=0.1,group="RangeFilter")
//Volume------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
volume_f=input(3.2,title="  Volumemult.",minval=0,step=0.1,group="Volume")
sma_length=input(20,title="  Volumelenght",minval=1,group="Volume")
volume_f1=input(1.9,title="  Volumemult.1",minval=0,step=0.1,group="Volume")
sma_length1=input(22,title="  Volumelenght1",minval=1,group="Volume")
//TPPLOTSHAPE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
tp_long0=input(0.9,title="  %TPLong",type=input.float,minval=0,step=0.1,group="TargetPoint")
tp_short0=input(0.9,title="  %TPShort",type=input.float,minval=0,step=0.1,group="TargetPoint")
//SLPLOTSHAPE---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
sl0=input(4.2,title="  %Stoploss",type=input.float,minval=0,step=0.1,group="StopLoss")
//INDICATORS=======================================================================================================================================================================================================================================================================================================
//ADX-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
calcADX(_len)=>
up=change(high)
down=-change(low)
plusDM=na(up)?na:(up>downandup>0?up:0)
minusDM=na(down)?na:(down>upanddown>0?down:0)
truerange=rma(tr,_len)
_plus=fixnan(100*rma(plusDM,_len)/truerange)
_minus=fixnan(100*rma(minusDM,_len)/truerange)
sum=_plus+_minus
_adx=100*rma(abs(_plus-_minus)/(sum==0?1:sum),_len)
[_plus,_minus,_adx]
calcADX_Masanakamura(_len)=>
SmoothedTrueRange=0.0
SmoothedDirectionalMovementPlus=0.0
SmoothedDirectionalMovementMinus=0.0
TrueRange=max(max(high-low,abs(high-nz(close[1]))),abs(low-nz(close[1])))
DirectionalMovementPlus=high-nz(high[1])>nz(low[1])-low?max(high-nz(high[1]),0):0
DirectionalMovementMinus=nz(low[1])-low>high-nz(high[1])?max(nz(low[1])-low,0):0
SmoothedTrueRange:=nz(SmoothedTrueRange[1])-(nz(SmoothedTrueRange[1])/_len)+TrueRange
SmoothedDirectionalMovementPlus:=nz(SmoothedDirectionalMovementPlus[1])-(nz(SmoothedDirectionalMovementPlus[1])/_len)+DirectionalMovementPlus
SmoothedDirectionalMovementMinus:=nz(SmoothedDirectionalMovementMinus[1])-(nz(SmoothedDirectionalMovementMinus[1])/_len)+DirectionalMovementMinus
DIP=SmoothedDirectionalMovementPlus/SmoothedTrueRange*100
DIM=SmoothedDirectionalMovementMinus/SmoothedTrueRange*100
DX=abs(DIP-DIM)/(DIP+DIM)*100
adx=sma(DX,_len)
[DIP,DIM,adx]
[DIPlusC,DIMinusC,ADXC]=calcADX(ADX_len)
[DIPlusM,DIMinusM,ADXM]=calcADX_Masanakamura(ADX_len)
DIPlus=ADX_options=="CLASSIC"?DIPlusC:DIPlusM
DIMinus=ADX_options=="CLASSIC"?DIMinusC:DIMinusM
ADX=ADX_options=="CLASSIC"?ADXC:ADXM
L_adx=DIPlus>DIMinusandADX>th
S_adx=DIPlus<DIMinusandADX>th
//EMA-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
xPrice=close
EMA1=ema(xPrice,Length_ema1)
EMA2=ema(xPrice,Length_ema2)
EMA3=ema(xPrice,Length_ema3)
EMA4=ema(xPrice,Length_ema4)
EMA5=ema(xPrice,Length_ema5)
L_ema=EMA1<closeandEMA2<closeandEMA3<closeandEMA4<closeandEMA5<close
S_ema=EMA1>closeandEMA2>closeandEMA3>closeandEMA4>closeandEMA5>close
//RangeFilter----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
varboolL_RF=na,varboolS_RF=na
Range_filter(_src,_per_,_mult)=>
varfloat_upward=0.0
varfloat_downward=0.0
wper=(_per_*2)-1
avrng=ema(abs(_src-_src[1]),_per_)
_smoothrng=ema(avrng,wper)*_mult
_filt=_src
_filt:=_src>nz(_filt[1])?((_src-_smoothrng)<nz(_filt[1])?nz(_filt[1]):(_src-_smoothrng)):((_src+_smoothrng)>nz(_filt[1])?nz(_filt[1]):(_src+_smoothrng))
_upward:=_filt>_filt[1]?nz(_upward[1])+1:_filt<_filt[1]?0:nz(_upward[1])
_downward:=_filt<_filt[1]?nz(_downward[1])+1:_filt>_filt[1]?0:nz(_downward[1])
[_smoothrng,_filt,_upward,_downward]
[smoothrng,filt,upward,downward]=Range_filter(src,per_,mult)
hband=filt+smoothrng
lband=filt-smoothrng
L_RF:=high>hbandandupward>0
S_RF:=low<lbandanddownward>0
//Volume-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Volume_condt=volume>sma(volume,sma_length)*volume_f
Volume_condt1=volume>sma(volume,sma_length1)*volume_f1
//STRATEGY==========================================================================================================================================================================================================================================================================================================
varboollongCond=na,varboolshortCond=na
varintCondIni_long=0,varintCondIni_short=0
varbool_Final_longCondition=na,varbool_Final_shortCondition=na
varfloatlast_open_longCondition=na,varfloatlast_open_shortCondition=na
varintlast_longCondition=na,varintlast_shortCondition=na
varintlast_Final_longCondition=na,varintlast_Final_shortCondition=na
varintnLongs=na,varintnShorts=na
L_1=L_adxandVolume_condtandL_RFandL_ema
S_1=S_adxandVolume_condtandS_RFandS_ema
L_2=L_adxandL_RFandL_emaandVolume_condt1
S_2=S_adxandS_RFandS_emaandVolume_condt1
L_basic_condt=L_1orL_2
S_basic_condt=S_1orS_2
longCond:=L_basic_condt
shortCond:=S_basic_condt
CondIni_long:=longCond[1]?1:shortCond[1]?-1:nz(CondIni_long[1])
CondIni_short:=longCond[1]?1:shortCond[1]?-1:nz(CondIni_short[1])
longCondition=(longCond[1]andnz(CondIni_long[1])==-1)
shortCondition=(shortCond[1]andnz(CondIni_short[1])==1)
//POSITIONPRICE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
varfloatsum_long=0.0,varfloatsum_short=0.0
varfloatPosition_Price=0.0
last_open_longCondition:=longCondition?close[1]:nz(last_open_longCondition[1])
last_open_shortCondition:=shortCondition?close[1]:nz(last_open_shortCondition[1])
last_longCondition:=longCondition?time:nz(last_longCondition[1])
last_shortCondition:=shortCondition?time:nz(last_shortCondition[1])
in_longCondition=last_longCondition>last_shortCondition
in_shortCondition=last_shortCondition>last_longCondition
last_Final_longCondition:=longCondition?time:nz(last_Final_longCondition[1])
last_Final_shortCondition:=shortCondition?time:nz(last_Final_shortCondition[1])
nLongs:=nz(nLongs[1])
nShorts:=nz(nShorts[1])
iflongCondition
nLongs:=nLongs+1
nShorts:=0
sum_long:=nz(last_open_longCondition)+nz(sum_long[1])
sum_short:=0.0
ifshortCondition
nLongs:=0
nShorts:=nShorts+1
sum_short:=nz(last_open_shortCondition)+nz(sum_short[1])
sum_long:=0.0

Position_Price:=nz(Position_Price[1])
Position_Price:=longCondition?sum_long/nLongs:shortCondition?sum_short/nShorts:na
//TP---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
varboollong_tp=na,varboolshort_tp=na
varintlast_long_tp=na,varintlast_short_tp=na
varboolFinal_Long_tp=na,varboolFinal_Short_tp=na
varboolFinal_Long_sl0=na,varboolFinal_Short_sl0=na
varboolFinal_Long_sl=na,varboolFinal_Short_sl=na
varintlast_long_sl=na,varintlast_short_sl=na
tp_long=((nLongs>1)?tp_long0/nLongs:tp_long0)/100
tp_short=((nShorts>1)?tp_short0/nShorts:tp_short0)/100
long_tp:=high>(fixnan(Position_Price)*(1+tp_long))andin_longCondition
short_tp:=low<(fixnan(Position_Price)*(1-tp_short))andin_shortCondition
last_long_tp:=long_tp?time:nz(last_long_tp[1])
last_short_tp:=short_tp?time:nz(last_short_tp[1])
Final_Long_tp:=(long_tpandlast_longCondition>nz(last_long_tp[1])andlast_longCondition>nz(last_long_sl[1]))
Final_Short_tp:=(short_tpandlast_shortCondition>nz(last_short_tp[1])andlast_shortCondition>nz(last_short_sl[1]))
L_tp=iff(Final_Long_tp,fixnan(Position_Price)*(1+tp_long),na)
S_tp=iff(Final_Short_tp,fixnan(Position_Price)*(1-tp_short),na)
//TPSIGNALS--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
tplLevel=(in_longConditionand
(last_longCondition>nz(last_long_tp[1]))and
(last_longCondition>nz(last_long_sl[1]))andnotFinal_Long_sl[1])?
(nLongs>1)?
(fixnan(Position_Price)*(1+tp_long)):(last_open_longCondition*(1+tp_long)):na
tpsLevel=(in_shortConditionand
(last_shortCondition>nz(last_short_tp[1]))and
(last_shortCondition>nz(last_short_sl[1]))andnotFinal_Short_sl[1])?
(nShorts>1)?
(fixnan(Position_Price)*(1-tp_short)):(last_open_shortCondition*(1-tp_short)):na
//SL---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Risk=sl0
Percent_Capital=99
sl=in_longCondition?min(sl0,(((Risk)*100)/(Percent_Capital*max(1,nLongs)))):
in_shortCondition?min(sl0,(((Risk)*100)/(Percent_Capital*max(1,nShorts)))):sl0

Normal_long_sl=((in_longConditionandlow<=((1-(sl/100))*(fixnan(Position_Price)))))
Normal_short_sl=((in_shortConditionandhigh>=((1+(sl/100))*(fixnan(Position_Price)))))
last_long_sl:=Normal_long_sl?time:nz(last_long_sl[1])
last_short_sl:=Normal_short_sl?time:nz(last_short_sl[1])
Final_Long_sl:=Normal_long_slandlast_longCondition>nz(last_long_sl[1])andlast_longCondition>nz(last_long_tp[1])andnotFinal_Long_tp
Final_Short_sl:=Normal_short_slandlast_shortCondition>nz(last_short_sl[1])andlast_shortCondition>nz(last_short_tp[1])andnotFinal_Short_tp
//RE-ENTRYONTP-HIT-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ifFinal_Long_tporFinal_Long_sl
CondIni_long:=-1
sum_long:=0.0
nLongs:=na

ifFinal_Short_tporFinal_Short_sl
CondIni_short:=1
sum_short:=0.0
nShorts:=na
//Colors----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Bar_color=in_longCondition?#009688:in_shortCondition?#f06292:color.orange
barcolor(color=Bar_color)
//PLOTS==============================================================================================================================================================================================================================================================================================================
plot(L_tp,title="TP_L",style=plot.style_cross,color=color.fuchsia,linewidth=7)
plot(S_tp,title="TP_S",style=plot.style_cross,color=color.fuchsia,linewidth=7)
//Priceplots------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
plot((nLongs>1)or(nShorts>1)?Position_Price:na,title="Price",color=in_longCondition?color.aqua:color.orange,linewidth=2,style=plot.style_cross)
plot(tplLevel,title="LongTP",style=plot.style_cross,color=color.fuchsia,linewidth=1)
plot(tpsLevel,title="ShortTP",style=plot.style_cross,color=color.fuchsia,linewidth=1)
//PLOTSHAPES----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
plotshape(Final_Long_tp,title="TPLongSignal",style=shape.triangledown,location=location.abovebar,color=color.red,size=size.tiny,text="TP",textcolor=color.red,transp=0)
plotshape(Final_Short_tp,title="TPShortSignal",style=shape.triangleup,location=location.belowbar,color=color.green,size=size.tiny,text="TP",textcolor=color.green,transp=0)
plotshape(longCondition,title="Long",style=shape.triangleup,location=location.belowbar,color=color.blue,size=size.tiny,transp=0)
plotshape(shortCondition,title="Short",style=shape.triangledown,location=location.abovebar,color=color.red,size=size.tiny,transp=0)
//Backtest==================================================================================================================================================================================================================================================================================================================================
ifL_basic_condt
strategy.entry("LONG",strategy.long)
ifS_basic_condt
strategy.entry("SHORT",strategy.short)


strategy.exit("TP_L","LONG",profit=(abs((last_open_longCondition*(1+tp_long))-last_open_longCondition)/syminfo.mintick),limit=nLongs>=1?strategy.position_avg_price*(1+tp_long):na,loss=(abs((last_open_longCondition*(1-(sl/100)))-last_open_longCondition)/syminfo.mintick))
strategy.exit("TP_S","SHORT",profit=(abs((last_open_shortCondition*(1-tp_short))-last_open_shortCondition)/syminfo.mintick),limit=nShorts>=1?strategy.position_avg_price*(1-(tp_short)):na,loss=(abs((last_open_shortCondition*(1+(sl/100)))-last_open_shortCondition)/syminfo.mintick))
//ByBabehDyo
Expand (302 lines)
