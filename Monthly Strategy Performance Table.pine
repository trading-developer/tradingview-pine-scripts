Script Name: Monthly Strategy Performance Table
Author: ZenAndTheArtOfTrading
Description: What Is This?

This script code adds a Monthly Strategy Performance Table to your Pine Script strategy scripts so you can see a month-by-month and year-by-year breakdown of your P&L as a percentage of your account balance.

The table is based on realized equity rather than open equity, so it only updates the metrics when a trade is closed.

That's why some...
PineScript code:

Pine Script™ strategy
Monthly Strategy Performance Table
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  ZenAndTheArtOfTrading
//  Version  2  (Last  Updated  29th  June,  2023)
//  Huge  thanks  to  Marc  (https://www.tradingview.com/u/Mrcrbw/)  for  providing
//  major  improvements  and  fixes  to  the  code  that  made  this  script  much  better!
//  @version=5
//////////////////////////////////////////////////////////////////////////
//  EXAMPLE  STRATEGY  (REPLACE  THIS  CODE  WITH  YOUR  OWN)                                      //
//  Replace  lines  15  ->  69  with  your  own  strategy  script  code!                      //
//  This  example  system  is  my  Simple  Pullback  Strategy                                      //
//  Check  my  TradingView  profile  for  more  info  about  this  script                  //
//////////////////////////////////////////////////////////////////////////
strategy("Monthly  Performance  Table",
          overlay=true,
          initial_capital=100000,
          default_qty_type=strategy.percent_of_equity,
          default_qty_value=100,
          commission_type=strategy.commission.cash_per_contract,
          commission_value=0.005)
//  Get  user  input
i_ma1                      =  input.int(title="MA  1  Length",  defval=200,  step=10,  group="Strategy  Parameters",  tooltip="Long-term  MA")
i_ma2                      =  input.int(title="MA  2  Length",  defval=10,  step=10,  group="Strategy  Parameters",  tooltip="Short-term  MA")
i_stopPercent      =  input.float(title="Stop  Loss  Percent",  defval=0.10,  step=0.1,  group="Strategy  Parameters",  tooltip="Failsafe  Stop  Loss  Percent  Decline")
i_lowerClose        =  input.bool(title="Exit  On  Lower  Close",  defval=false,  group="Strategy  Parameters",  tooltip="Wait  for  a  lower-close  before  exiting  above  MA2")
i_startTime          =  input.time(title="Start  Filter",  defval=timestamp("01  Jan  1995  13:30  +0000"),  group="Time  Filter",  tooltip="Start  date  &  time  to  begin  searching  for  setups")
i_endTime              =  input.time(title="End  Filter",  defval=timestamp("1  Jan  2099  19:30  +0000"),  group="Time  Filter",  tooltip="End  date  &  time  to  stop  searching  for  setups")
//  Get  indicator  values
ma1  =  ta.sma(close,  i_ma1)
ma2  =  ta.sma(close,  i_ma2)
//  Check  filter(s)
f_dateFilter  =  time  >=  i_startTime  and  time  <=  i_endTime
//  Check  buy/sell  conditions
var  float  buyPrice  =  0
buyCondition        =  close  >  ma1  and  close  <  ma2  and  strategy.position_size  ==  0  and  f_dateFilter
sellCondition      =  close  >  ma2  and  strategy.position_size  >  0  and  (not  i_lowerClose  or  close  <  low[1])
stopDistance        =  strategy.position_size  >  0  ?  ((buyPrice  -  close)  /  close)  :  na
stopPrice              =  strategy.position_size  >  0  ?  buyPrice  -  (buyPrice  *  i_stopPercent)  :  na
stopCondition      =  strategy.position_size  >  0  and  stopDistance  >  i_stopPercent
//  Enter  positions
if  buyCondition
        strategy.entry(id="Long",  direction=strategy.long,  comment="Equity  =  $"  +  str.tostring(strategy.equity,  "#.##"))
if  buyCondition[1]
        buyPrice  :=  strategy.position_avg_price
//  Exit  positions
if  sellCondition  or  stopCondition
        strategy.close(id="Long",  comment="Exit"  +  (stopCondition  ?  "SL=true"  :  ""))
        buyPrice  :=  na
//  Draw  pretty  colors
plot(buyPrice,  color=color.lime,  style=plot.style_linebr)
plot(stopPrice,  color=color.red,  style=plot.style_linebr,  offset=-1)
plot(ma1,  color=color.blue)
plot(ma2,  color=color.orange)
////////////////////////////////////////////////////////////
//  END  EXAMPLE  STRATEGY  (REPLACE  THIS  CODE  WITH  YOUR  OWN)  //
////////////////////////////////////////////////////////////
//-------------------------------------------------------------------------//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  MONTHLY  TABLE  based  on  the  script  written  by  QuantNomad  -  Copy  &  Paste  code  from  here  down  into  your  strategy  script  /{
//  Original  Script:  https://tradingview.com/script/kzp8e4X3-Monthly-Returns-in-PineScript-Strategies/                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var  string  GROUP_PERFORMANCE_TABLE  =  "Monthly  Performance  Table"
mptable_on  =  input.bool(title="Turn  On  |",  defval=true,  display=display.none,  group=GROUP_PERFORMANCE_TABLE,  inline="MPT_Toggles")
mptable_debug  =  input.bool(title="Debug  Mode  |",  defval=false,  display=display.none,  group=GROUP_PERFORMANCE_TABLE,  inline="MPT_Toggles")
mptable_precision  =  input.int(title="Decimal  Precision",  defval=2,  minval=1,  display=display.none,  group=GROUP_PERFORMANCE_TABLE,  inline="MPT_Toggles",  tooltip="Decimal  precision  of  each  cell")
mptable_titleColor  =  input.color(title="Title  Cell  Color",  defval=#cccccc,  display=display.none,  group=GROUP_PERFORMANCE_TABLE,  inline="MPT_Colors")
mptable_titleTextColor  =  input.color(title="Title  Text  Color",  defval=#363a45,  display=display.none,  group=GROUP_PERFORMANCE_TABLE,  inline="MPT_Colors")
mptable_textColor  =  input.color(title="Cell  Text  Color",  defval=color.white,  display=display.none,  group=GROUP_PERFORMANCE_TABLE,  inline="MPT_Colors")
mptable_ProfitColor  =  input.color(title="Year  Profit  Color",  defval=color.new(color.green,  50),  display=display.none,  group=GROUP_PERFORMANCE_TABLE,  inline="MPT_Colors")
mptable_LossColor  =  input.color(title="Year  Loss  Color",  defval=color.new(color.red,  50),  display=display.none,  group=GROUP_PERFORMANCE_TABLE,  inline="MPT_Colors")
mptable_BreakEvenColor  =  input.color(title="Year  B/E  Color",  defval=color.new(color.white,  50),  display=display.none,  group=GROUP_PERFORMANCE_TABLE,  inline="MPT_Colors")
mptable_pageNumber  =  input.int(title="Page  Number",  defval=1,  minval=1,  step=1,  maxval=10,  display=display.none,  group=GROUP_PERFORMANCE_TABLE,  tooltip="Which  page  of  results  to  display")  -  1  //  -1  is  for  corection  for  arrays.  Aaray  index  start  with  0
mptable_pageSize  =  input.int(title="Page  Size  (Rows)",  defval=20,  minval=1,  display=display.none,  group=GROUP_PERFORMANCE_TABLE,  tooltip="How  many  rows  to  display")  -  1    //  9  is  used  to  show  10  rows  of  data  due  to  array  start  from  0
mptable_tableTextSize  =  input.string(title="Text  Size",  defval="Small",  options=["Auto",    "Huge",    "Large",  "Normal",  "Small",  "Tiny"],  display=display.none,  group=GROUP_PERFORMANCE_TABLE)
//  Custom  function  for  getting  table  text  sized  based  on  user  input
table_text_size(_size)  =>
        switch  _size
                "Auto"      =>  size.auto
                "Huge"      =>  size.huge
                "Large"    =>  size.large
                "Normal"  =>  size.normal
                "Small"    =>  size.small
                =>  size.tiny
tableTextSize  =  table_text_size(mptable_tableTextSize)
//  Custom  function  for  getting  decimal  precision  based  on  given  number
//  (eg.  if  number  is  >  0  but  <  0.05  or  <  0  and  >  -0.05,  set  precision  to  3  to  avoid  rounding  to  0  which  is  misleading)
GetRoundingPrecision(float  num)  =>
        if  (num  >  0  and  num  <  0.05)  or  (num  <  0  and  num  >  -0.05)
                3
        else
                mptable_precision
//  Define  an  open  trade's  cost  (used  to  calculate  commission  cost)
type  TradeCost
        int  entryTime
        float  entryPrice
        float  cost
//  Define  a  monthly/yearly  return  type
type  StrategyReturn
        float  profit
        float  drawdown
        float  peak
        inttimestamp
//StoreaccumulatedP&Lvalues
varfloataccumulatedMonthlyPL=0
varfloataccumulatedYearlyPL=0
varfloatbestAccumulatedMonthlyPL=0
varfloatbestAccumulatedYearlyPL=0
//Storedrawdownvalues
varfloatequityPeak=strategy.initial_capital
varfloatyearlyEquityHigh=0
varfloatcurrentYearlyDrawdown=0
varfloatyearlyMaxDrawdown=0
varfloatworstDrawdown=0
varfloatmonthlyEquityHigh=0
varfloatcurrentMonthlyDrawdown=0
varfloatmonthlyMaxDrawdown=0
varintcurrentDrawdownBars=0
varintmaxDrawdownBars=0
//Storestatarrays
vartotalDrawdownBars=array.new<int>(0)
vartotalDrawdowns=array.new<float>(0)
//Storelong&shorttradecount
varinttotalBreakEvenTrades=0
varinttotalLongTrades=0
varinttotalLongTradeWins=0
varinttotalShortTrades=0
varinttotalShortTradeWins=0
//Storeopentradecommissioncostsinarray
varcostOfOpenTrades=array.new<TradeCost>(0)
//Detectopenedtradeandsavecostoftrade(ItriedmanymethodstogetmynumberstomatchtheCumulativeProfitlistintheStrategyTester,noideawhy,butnoneofthemworkedwithoutdoingthis)
ifstrategy.opentrades!=strategy.opentrades[1]andstrategy.closedtrades==strategy.closedtrades[1]
costOfTrade=strategy.grossloss-strategy.grossloss[1]
costOfOpenTrades.push(TradeCost.new(strategy.opentrades.entry_time(strategy.opentrades-1),strategy.opentrades.entry_price(strategy.opentrades-1),costOfTrade))
//Detectaclosedtrade
//TVDocumentation:TradeList'sCumulativeProfit%Formula=TradeProfit/(InitialCapital+CumulativeProfitoftheprevioustrades)*100%
ifstrategy.closedtrades!=strategy.closedtrades[1]

//Retrievetradecostfortheclosedtrade
floattradeCost=0
intremoveIdx=-1
ifcostOfOpenTrades.size()>0
fori=0tocostOfOpenTrades.size()-1
TradeCosttc=costOfOpenTrades.get(i)
iftc.entryTime==strategy.closedtrades.entry_time(strategy.closedtrades-1)andtc.entryPrice==strategy.closedtrades.entry_price(strategy.closedtrades-1)
tradeCost:=tc.cost
removeIdx:=i
break

//Removecost
ifremoveIdx!=-1
costOfOpenTrades.remove(removeIdx)
//Calculateequitybeforetradeclosed(strategy.equitywillnotdo,becauseitchangesbar-by-barbasedonopenP&LnotrealizedP&L)
floatpreEquity=strategy.initial_capital+strategy.netprofit[1]
//CalculateP&L+costofthistrade
floatprofitLoss=0
ifstrategy.losstrades>strategy.losstrades[1]
profitLoss:=(strategy.grossloss-(strategy.grossloss[1]-tradeCost))*-1
else
profitLoss:=strategy.grossprofit-strategy.grossprofit[1]

//Checkifthiswasalongorshorttradeandifitwonorlost
ifstrategy.position_size[1]>0
totalLongTrades:=totalLongTrades+1
ifprofitLoss>0
totalLongTradeWins:=totalLongTradeWins+1
elseifstrategy.position_size[1]<0
totalShortTrades:=totalShortTrades+1
ifprofitLoss>0
totalShortTradeWins:=totalShortTradeWins+1

//Checkifthetradebrokeeven
ifprofitLoss==0
totalBreakEvenTrades:=totalBreakEvenTrades+1
//Calculatecumulativeprofit%forthistrade
floatcumulativeProfitPercent=(profitLoss/preEquity)*100
//Storehighestpeakvalueofequity(wecannowusestrategy.equitysinceequityhasupdatedtorealizedP&Lonthisbar)
ifstrategy.equity>equityPeak
equityPeak:=strategy.equity
//Calculatetotalsystemdrawdown%
floatequityDD=((strategy.equity-equityPeak)/equityPeak)*100
ifequityDD<worstDrawdown
worstDrawdown:=equityDD
//Storeaccumulatedmonthly+yearlyP&L
accumulatedMonthlyPL:=cumulativeProfitPercent+accumulatedMonthlyPL[1]
accumulatedYearlyPL:=accumulatedYearlyPL+cumulativeProfitPercent
//Savemaxfavourableexcursionforthismonth(ie.peakreturnas%)
ifaccumulatedMonthlyPL>bestAccumulatedMonthlyPL
bestAccumulatedMonthlyPL:=accumulatedMonthlyPL
//Savemaxfavourableexcursionforthisyear(ie.peakreturnas%)
ifaccumulatedYearlyPL>bestAccumulatedYearlyPL
bestAccumulatedYearlyPL:=accumulatedYearlyPL
//Trackmaxequityhighovercurrentyearformaxyearlydrawdowncalculation
ifaccumulatedYearlyPL>yearlyEquityHigh
yearlyEquityHigh:=accumulatedYearlyPL

//Checkifouryearlyrealizedequityhighminuscurrentrealizedequityexceedsourstoredmaxdrawdownfortheyear,updateifnecessary,andsaveworstdrawdown
ifaccumulatedYearlyPL-yearlyEquityHigh<0
currentYearlyDrawdown:=accumulatedYearlyPL-yearlyEquityHigh
ifcurrentYearlyDrawdown<yearlyMaxDrawdown
yearlyMaxDrawdown:=currentYearlyDrawdown
currentDrawdownBars:=currentDrawdownBars+1

//Trackmaxequityhighovercurrentmonthformaxmonthlydrawdowncalculation
ifaccumulatedMonthlyPL>monthlyEquityHigh
monthlyEquityHigh:=accumulatedMonthlyPL

//Checkifourmonthlyrealizedequityhighminuscurrentrealizedequityexceedsourstoredmaxdrawdownforthemonth,updateifnecessary,andsaveworstdrawdown
ifaccumulatedMonthlyPL-monthlyEquityHigh<0
currentMonthlyDrawdown:=accumulatedMonthlyPL-monthlyEquityHigh
ifcurrentMonthlyDrawdown<monthlyMaxDrawdown
monthlyMaxDrawdown:=currentMonthlyDrawdown

//Debuglabel
ifmptable_debug
stringdebugTip="Equity=$"+str.tostring(strategy.equity,"#.##")+
"\nP&L="+str.tostring(cumulativeProfitPercent)+"%"+
"\nAccumMonthlyP&L="+str.tostring(math.round(accumulatedMonthlyPL,GetRoundingPrecision(accumulatedMonthlyPL)))+"%"+
"\nAccumYearlyP&L="+str.tostring(math.round(accumulatedYearlyPL,GetRoundingPrecision(accumulatedYearlyPL)))+"%"+
"\nMonthlyMaxDD="+str.tostring(math.round(monthlyMaxDrawdown,GetRoundingPrecision(monthlyMaxDrawdown)))+"%"+
"\nYearlyMaxDD="+str.tostring(math.round(yearlyMaxDrawdown,GetRoundingPrecision(yearlyMaxDrawdown)))+"%"+
"\nTotalMaxDD="+str.tostring(math.round(worstDrawdown,GetRoundingPrecision(worstDrawdown)))+"%"+
"\nCurrentDDBars="+str.tostring(currentDrawdownBars)+
"\nMaxDDBars="+str.tostring(maxDrawdownBars)+
"\nTotalBreakEven="+str.tostring(totalBreakEvenTrades)+
"\nTotalLongs="+str.tostring(totalLongTrades)+
"\nTotalLongWins="+str.tostring(totalLongTradeWins)+
"\nTotalShorts="+str.tostring(totalShortTrades)+
"\nTotalShortWins="+str.tostring(totalShortTradeWins)
label.new(bar_index,high+(high*0.01),"P&L"+str.tostring(math.round(cumulativeProfitPercent,GetRoundingPrecision(cumulativeProfitPercent)))+"%",tooltip=debugTip,textcolor=color.white)
//Calculatedrawdownsincelastequityhigh(NOTmaxdrawdown,justthecurrentmaxDDsincewewereoutofDD)
floatt_equityDD=((strategy.equity-equityPeak)/equityPeak)*100
varfloatcurrentMaxDrawdownSinceLast=0
//UpdateMaxDrawdownbarcountandcurrentDDifequityisunderwater,checkisconfirmedtopreventdouble-countingbarswithrecalc_on_order_fillson
ifstrategy.equity<equityPeakandbarstate.isconfirmed
currentDrawdownBars:=currentDrawdownBars+1
ifcurrentDrawdownBars>maxDrawdownBars
maxDrawdownBars:=currentDrawdownBars
ift_equityDD<currentMaxDrawdownSinceLast
currentMaxDrawdownSinceLast:=t_equityDD
else
ifcurrentDrawdownBars>0
totalDrawdownBars.push(currentDrawdownBars)
totalDrawdowns.push(currentMaxDrawdownSinceLast)
currentDrawdownBars:=0
currentMaxDrawdownSinceLast:=0
//PreparearraystostoreYearlyandMonthlyP&Ls
varmonthlyReturns=array.new<StrategyReturn>(0)
varyearlyReturns=array.new<StrategyReturn>(0)
varboolfirstEntryTime=false
//Retrieveentrytimeofinitialentryinopenposition
ifnotfirstEntryTimeandstrategy.opentrades.entry_time(0)
firstEntryTime:=true
//Detectnewmonthandyear
new_month=month(time)!=month(time[1])
new_year=year(time)!=year(time[1])
//Detectanewmonthandstoreitsreturnprofile
ifnotbarstate.isfirstandnew_monthandfirstEntryTimeorbarstate.islastconfirmedhistory
StrategyReturnmr=StrategyReturn.new(accumulatedMonthlyPL,monthlyMaxDrawdown,bestAccumulatedMonthlyPL,time[1])//time)
monthlyReturns.push(mr)
accumulatedMonthlyPL:=0
monthlyMaxDrawdown:=0
monthlyEquityHigh:=0
currentMonthlyDrawdown:=0
bestAccumulatedMonthlyPL:=0
//Detectanewyearandresettrackingvariables
ifnotbarstate.isfirstandnew_yearandfirstEntryTimeorbarstate.islastconfirmedhistory
StrategyReturnyr=StrategyReturn.new(accumulatedYearlyPL,yearlyMaxDrawdown,bestAccumulatedYearlyPL,time[1])
yearlyReturns.push(yr)
accumulatedYearlyPL:=0
yearlyMaxDrawdown:=0
yearlyEquityHigh:=0
currentYearlyDrawdown:=0
bestAccumulatedYearlyPL:=0
//DEBUGcode
bgcolor(mptable_debugandnew_month?color.lime:na,title="NewMonth",display=display.none)
bgcolor(mptable_debugandnew_year?color.red:na,title="NewYear",display=display.none)
//ENDDEBUGCODE
//DefineMonthlyP&LTable
vartableperformance_table=table(na)
//Adjustmptable_pageSizeiftheyearsarelessthanthemptable_pageSize
ifyearlyReturns.size()<mptable_pageSize
mptable_pageSize:=yearlyReturns.size()
//Caluclatethestartandendofpagetodisplay
startIndex=math.max(math.min(yearlyReturns.size()-1,yearlyReturns.size()-1-(mptable_pageSize+1)*mptable_pageNumber),mptable_pageSize-1)
endIndex=math.max(startIndex-mptable_pageSize,0)
mptable_pageSize:=endIndex<=mptable_pageSize?endIndex:mptable_pageSize
//Ifthisisthelastbaronourchart,displaytheperformancetable
varintEXTRA_STAT_ROWS=5//ThisensurestableincludesenoughrowsforCAGRetc
ifmptable_onandmonthlyReturns.size()>0andbarstate.islastconfirmedhistory
//Createtable(100rows=100yearsofdata,shouldbeplentyforallmarkets!)
performance_table:=table.new(position.bottom_right,columns=17,rows=yearlyReturns.size()+EXTRA_STAT_ROWS,border_width=1)
//Setcolumnheaders
performance_table.cell(0,0,"Year",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(1,0,"Jan",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(2,0,"Feb",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(3,0,"Mar",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(4,0,"Apr",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(5,0,"May",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(6,0,"Jun",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(7,0,"Jul",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(8,0,"Aug",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(9,0,"Sep",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(10,0,"Oct",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(11,0,"Nov",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(12,0,"Dec",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(13,0,"TOTAL",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(14,0,"MaxDD",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
//Setyearlyvalues
foryear_index=startIndextoyearlyReturns.size()==0?na:endIndex

//Getyearlyreturnforthisloop,setyearnumberinfirstcolumn,determinecolorofcell
StrategyReturnyearlyReturn=yearlyReturns.get(year_index)
//Setyeartitleanddeterminecolor
performance_table.cell(0,year_index+1,str.tostring(year(yearlyReturn.timestamp)),bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
colory_color=yearlyReturn.profit>0?mptable_ProfitColor:yearlyReturn.profit==0?mptable_BreakEvenColor:mptable_LossColor
//Populateyearlycellvalues
stringyearlyTip="MaxDD:"+str.tostring(math.round(yearlyReturn.drawdown,GetRoundingPrecision(yearlyReturn.drawdown)))+"%"+
"\nMFE:"+str.tostring(math.round(yearlyReturn.peak,GetRoundingPrecision(yearlyReturn.peak)))+"%"
performance_table.cell(13,year_index+1,(yearlyReturn.profit>0?"+":"")+str.tostring(math.round(yearlyReturn.profit,GetRoundingPrecision(yearlyReturn.profit)))+"%",bgcolor=y_color,text_color=color.white,text_size=tableTextSize,tooltip=yearlyTip)
performance_table.cell(14,year_index+1,str.tostring(math.round(yearlyReturn.drawdown,GetRoundingPrecision(yearlyReturn.drawdown)))+"%",bgcolor=mptable_BreakEvenColor,text_color=color.white,text_size=tableTextSize)
//Setmonthlyvalues
formonth_index=0tomonthlyReturns.size()-1
//Getmonthlyreturnforthisloop,getcurrentyearforthisloop,thencalculatethecorrespondingtablecolumnandrow
StrategyReturnmonthlyReturn=monthlyReturns.get(month_index)
intyearOfMonth=year(monthlyReturn.timestamp)
intmonthCol=month(monthlyReturn.timestamp)

//populatemonthlyprofitonlyiftheyearsoftheyearlyreturnmatchwiththemonthlyreturn.
ifyearOfMonth==year(yearlyReturn.timestamp)
//DeterminecolorformonthlyP&L
colorm_color=monthlyReturn.profit>0?color.new(mptable_ProfitColor,color.t(mptable_ProfitColor)+20):monthlyReturn.profit==0?color.new(mptable_BreakEvenColor,color.t(mptable_BreakEvenColor)+20):color.new(mptable_LossColor,color.t(mptable_LossColor)+20)

//SetmonthlyP&Lcell
stringmonthlyTip="MaxDD:"+str.tostring(math.round(monthlyReturn.drawdown,GetRoundingPrecision(monthlyReturn.drawdown)))+"%"+
"\nMFE:"+str.tostring(math.round(monthlyReturn.peak,GetRoundingPrecision(monthlyReturn.peak)))+"%"
performance_table.cell(monthCol,year_index+1,str.tostring(math.round(monthlyReturn.profit,GetRoundingPrecision(monthlyReturn.profit))),bgcolor=m_color,text_color=color.white,text_size=tableTextSize,tooltip=monthlyTip)
floatpercentReturn=(strategy.netprofit/strategy.initial_capital)*100
floatcagr=(math.pow((strategy.netprofit+strategy.initial_capital)/strategy.initial_capital,1/yearlyReturns.size())-1)*100
floatmar=cagr/math.abs(worstDrawdown)
lastMonthRowIndex=startIndex<5?5:startIndex
//Populatetabledata
floattotalWinRate=(strategy.wintrades/strategy.closedtrades)*100
floatlongWinRate=nz((totalLongTradeWins/totalLongTrades)*100)
floatshortWinRate=nz((totalShortTradeWins/totalShortTrades)*100)
stringreturnTip="Basedonatotalof"+str.tostring(strategy.closedtrades)+"trades"+
"\nWinRate="+str.tostring(math.round(totalWinRate,GetRoundingPrecision(totalWinRate)))+"%"+
"\nLongTrades="+str.tostring(totalLongTrades)+"(Win"+str.tostring(math.round(longWinRate,GetRoundingPrecision(longWinRate)))+"%)"+
"\nShortTrades="+str.tostring(totalShortTrades)+"(Win"+str.tostring(math.round(shortWinRate,GetRoundingPrecision(shortWinRate)))+"%)"
performance_table.cell(15,lastMonthRowIndex,"Return:"+(percentReturn>0?"+":"")+str.tostring(math.round(percentReturn,GetRoundingPrecision(percentReturn)))+"%",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_font_family=font.family_monospace,text_size=tableTextSize,tooltip=returnTip)
performance_table.cell(15,lastMonthRowIndex-1,"MAR:"+str.tostring(mar,"#.##"),bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_font_family=font.family_monospace,text_size=tableTextSize,tooltip="Measureofreturnadjustedforrisk:CAGRdividedbyMaxDrawdown.Indicateshowcomfortablethesystemmightbetotrade.Higherthan0.5isideal,1.0andaboveisverygood,andanything3.0oraboveshouldbeconsideredsuspicious.")
performance_table.cell(15,lastMonthRowIndex-2,"DDBars:"+str.tostring(maxDrawdownBars),bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_font_family=font.family_monospace,text_size=tableTextSize,tooltip="AverageDrawdownBars:"+str.tostring(totalDrawdownBars.avg(),"#.#")+"\n\nThisishowmanybarsittooktorecoverthelongestdrawdown(note:thisisdifferenttotheMAXdrawdown,andrepresentstimedrawdown)")
performance_table.cell(15,lastMonthRowIndex-3,"MaxDD:"+str.tostring(math.round(worstDrawdown,GetRoundingPrecision(worstDrawdown)))+"%",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_font_family=font.family_monospace,text_size=tableTextSize,tooltip="AverageDrawdown:"+str.tostring(totalDrawdowns.avg(),"#.##")+"%\n\nThisnumberisdifferenttotheStrategyTesterbecausethisnumberisbasedonclosedtradeequitywhiletheTester'sMaxDDisbasedonopenequity.")
performance_table.cell(15,lastMonthRowIndex-4,"CAGR:"+(cagr>0?"+":"")+str.tostring(math.round(cagr,GetRoundingPrecision(cagr)))+"%",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_font_family=font.family_monospace,text_size=tableTextSize,tooltip="Compoundedannualgrowthrate")
performance_table.cell(15,lastMonthRowIndex-5,"REALIZEDP&L",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_font_family=font.family_monospace,text_size=tableTextSize,tooltip="ThesenumbersarebasedonRealizedequity(closedtrades)")
//}ENDMONTHLYTABLE
///////////ENDOFPERFORMANCETABLECODE.///////////
Expand (410 lines)
