Script Name: Mean Reversion Strategy v2 [KL]
Author: DojiEmoji
Description: Description :
This strategy will enter a position when the following conditions are met:
a) Main signal: When source data (ATR) diverts from its moving average value, and
b) Confirmation: If predicted direction of trend is favorable.

 Assumptions :
During periods of high price volatility, ATR diverts from its moving average value. Eventually, ATR should...
PineScript code:

Pine Script™ strategy
Mean Reversion Strategy v2 [KL]
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  DojiEmoji
//@version=5
strategy("Mean  Reversion  (ATR)  Strategy  v2  [KL]  ",  overlay=true,  pyramiding=1,  initial_capital=1000000000)
var  string  ENUM_LONG  =  "Long"
var  string  GROUP_TEST  =  "Hypothesis  testing"
var  string  GROUP_TSL  =  "Stop  loss"
var  string  GROUP_TREND  =  "Trend  prediction"
var  string  GROUP_ORDER  =  "Order  size  and  Profit  taking"
backtest_timeframe_start  =  input.time(defval=timestamp("01  Apr  2000  13:30  +0000"),  title="Backtest  Start  Time")
within_timeframe  =  time  >=  backtest_timeframe_start
//  TSL:  calculate  the  stop  loss  price.  {
_multiple              =  input(2.0,  title="ATR  Multiplier  for  trailing  stop  loss",  group=GROUP_TSL)
ATR_TSL                  =  ta.atr(input(14,  title="Length  of  ATR  for  trailing  stop  loss",  group=GROUP_TSL,  tooltip="Initial  risk  amount  =  atr(this  length)  x  multiplier"))  *  _multiple
TSL_source            =  low
TSL_line_color    =  color.green
TSL_transp            =  100
var  stop_loss_price  =  float(0)
var  float  initial_entry_p        =  float(0)
var  float  risk_amt                      =  float(0)
var  float  initial_order_size  =  float(0)
if  strategy.position_size  ==  0  or  not  within_timeframe
        TSL_line_color  :=  color.black
        stop_loss_price  :=  TSL_source  -  ATR_TSL
else  if  strategy.position_size  >  0
        stop_loss_price  :=  math.max(stop_loss_price,  TSL_source  -  ATR_TSL)
        TSL_transp  :=  0
plot(stop_loss_price,  color=color.new(TSL_line_color,  TSL_transp))
//  }  end  of  "TSL"  block
//  Order  size  and  profit  taking  {
pcnt_alloc  =  input.int(5,  title="Allocation  (%)  of  portfolio  into  this  security",  tooltip="Size  of  positions  is  based  on  this  %  of  undrawn  capital.  This  is  fixed  throughout  the  backtest  period.",  minval=0,  maxval=100,  group=GROUP_ORDER)  /  100
//  Taking  profits  at  user  defined  target  levels  relative  to  risked  amount  (i.e  1R,  2R,  3R)
var  bool    tp_mode  =  input(true,  title="Take  profit  and  different  levels",  group=GROUP_ORDER)
var  float  FIRST_LVL_PROFIT  =  input.float(1,  title="First  level  profit",tooltip="Relativetorisk.Example:entryat$10andinitalstoplossat$9.Takingfirstlevelprofitat1Rmeanstakingprofitsat$11",group=GROUP_ORDER)
varfloatSECOND_LVL_PROFIT=input.float(2,title="Secondlevelprofit",tooltip="Relativetorisk.Example:entryat$10andinitalstoplossat$9.Takingsecondlevelprofitat2Rmeanstakingprofitsat$12",group=GROUP_ORDER)
varfloatTHIRD_LVL_PROFIT=input.float(3,title="Thirdlevelprofit",tooltip="Relativetorisk.Example:entryat$10andinitalstoplossat$9.Takingthirdlevelprofitat3Rmeanstakingprofitsat$13",group=GROUP_ORDER)
//}
//ATRdiversiontest{
//Hypothesistesting(2-tailed):
//
//Nullhypothesis(H0)andAlternativehypothesis(Ha):
//H0:atr_fastequalsatr_slow
//Ha:atr_fastnotequalstoatr_slow;impliesatr_fastiseithertoolowortoohigh
len_fast=input(5,title="LengthofATR(fast)fordiversiontest",group=GROUP_TEST)
atr_fast=ta.atr(len_fast)
atr_slow=ta.atr(input(50,title="LengthofATR(slow)fordiversiontest",group=GROUP_TEST,tooltip="ThisneedstobelargerthanFast"))
//Calculateteststatistic(test_stat)
std_error=ta.stdev(ta.tr,len_fast)/math.pow(len_fast,0.5)
test_stat=(atr_fast-atr_slow)/std_error
//Comparetest_statagainstcriticalvaluedefinedbyuserinsettings
//critical_value=input.float(1.645,title="Criticalvalue",tooltip="Strategyuses2-tailedtesttocompareatr_fastvsatr_slow.Nullhypothesis(H0)isthatbothshouldequal.Basedonthecomputedteststatisticvalue,ifabsolutevalueofitis+/-thiscriticalvalue,thenH0willberejected.",group=GROUP_TEST)
conf_interval=input.string(title="ConfidenceInterval",defval="95%",options=["90%","95%","99%"],tooltip="Criticalvaluesof1.645,1.96,2.58,forCI=90%/95%/99%,respectively;Under2-tailedtesttocompareatr_fastvsatr_slow.Nullhypothesis(H0)isthatbothshouldequal.Basedonthecomputedteststatisticvalue,ifabsolutevalueofitis+/-criticalvalue,thenH0willberejected.")
critical_value=conf_interval=="90%"?1.645:conf_interval=="95%"?1.96:2.58
reject_H0=math.abs(test_stat)>critical_value
//}endof"ATRdiversiontest"block
//Entrysignals{
//mainentrysignal(ifreject_H0==true);getspassedontothenextbarbecausestrategyneedstocheckforconfirmation
var_entry_signal_triggered=false
ifnot_entry_signal_triggered
_entry_signal_triggered:=reject_H0
//Confirmationsignal:Trendpredictionbasedonexpectedlogreturns
_prcntge_chng=math.log(close/close[1])
len_drift=input(14,title="Lengthofdrift",group=GROUP_TREND,tooltip="ForcalculationofDrift,whereDrift=movingaverageofLog(close/prev_close)+0.5*itsvariance;Ifthiscurveisupwardsloping,strategypredictspricetotrendupward")
_drift=ta.sma(_prcntge_chng,len_drift)-math.pow(ta.stdev(_prcntge_chng,len_drift),2)*0.5//Expectedreturn(drift)=averagepercentagechange+halfvarianceoverthelookbackperiod
_confirmation=_drift>_drift[1]
entry_signal_all=_entry_signal_triggeredand_confirmation//Puttingittogether,Entrysignal=mainsignal+confirmationsignal
ifentry_signal_all
_entry_signal_triggered:=false//reset
//}endof"Entrysignals"block
//MAIN{
//Updatethestoplimitifstrategyholdsaposition.
ifstrategy.position_size>0
strategy.exit(ENUM_LONG,comment="SL",stop=stop_loss_price)
//Entry
ifwithin_timeframeandentry_signal_allandstrategy.position_size==0
initial_entry_p:=close
risk_amt:=ATR_TSL
initial_order_size:=math.floor(pcnt_alloc*strategy.equity/close)
strategy.entry(ENUM_LONG,strategy.long,qty=initial_order_size)
varintTP_taken_count=0
iftp_modeandclose>strategy.position_avg_price
ifclose>=initial_entry_p+THIRD_LVL_PROFIT*risk_amtandTP_taken_count==2
strategy.close(ENUM_LONG,comment="TPLvl3",qty=math.floor(initial_order_size/3))
TP_taken_count:=TP_taken_count+1
elseifclose>=initial_entry_p+SECOND_LVL_PROFIT*risk_amtandTP_taken_count==1
strategy.close(ENUM_LONG,comment="TPLvl2",qty=math.floor(initial_order_size/3))
TP_taken_count:=TP_taken_count+1
elseifclose>=initial_entry_p+FIRST_LVL_PROFIT*risk_amtandTP_taken_count==0
strategy.close(ENUM_LONG,comment="TPLvl1",qty=math.floor(initial_order_size/3))
TP_taken_count:=TP_taken_count+1

//Alerts
_atr=ta.atr(14)
alert_helper(msg)=>
prefix="["+syminfo.root+"]"
suffix="(P="+str.tostring(close,"#.##")+";atr="+str.tostring(_atr,"#.##")+")"
alert(str.tostring(prefix)+str.tostring(msg)+str.tostring(suffix),alert.freq_once_per_bar)
ifstrategy.position_size>0andta.change(strategy.position_size)
ifstrategy.position_size>strategy.position_size[1]
alert_helper("BUY")
elseifstrategy.position_size<strategy.position_size[1]
alert_helper("SELL")
//Cleanup-setthevariablesbacktodefaultvaluesoncenolongerinuse
ifta.change(strategy.position_size)andstrategy.position_size==0
TP_taken_count:=0
initial_entry_p:=float(0)
risk_amt:=float(0)
initial_order_size:=float(0)
stop_loss_price:=float(0)
//}endofMAINblock
Expand (133 lines)
