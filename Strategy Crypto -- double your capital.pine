Script Name: Strategy Crypto -- double your capital
Author: maxencetajet
Description: BTCUSD -- 5 min

 BUY POSITION

 1 : The price is above the hull suite indicator
2 : The hull suite indicator is green
3 : The volume oscillator indicator is above 0
4 : A new blue candle should appear on the QQE MOD indicator

 SELL POSITION

 1 : The price is bellow the hull suite indicator
2 : The hull suite indicator is red
3 : The volume oscillator...
PineScript code:

Pine Script™ strategy
Strategy Crypto -- double your capital
//  ©  maxencetajet
//@version=5
strategy("Strategy  Crypto",  overlay=true,  initial_capital=1000,  default_qty_type=strategy.fixed,  default_qty_value=0.5,  slippage=25)
src1  =  input.source(close,  title="Source")
target_stop_ratio  =  input.float(title='Risk/Reward',  defval=1.5,  minval=0.5,  maxval=100,  group="Money  Management",  step=0.1)
security  =  input.float(50,  title='min  of  pips  (00001.00)  for  each  position',  group="Money  Management")
_x  =  input.bool(false,  title="do  not  take  too  small  positions",  group="Money  Management",  tooltip="This  parameter  is  used  to  avoid  positions  that  have  a  stoploss  that  is  too  short  and  that  the  spreads  of  the  broker  take  all  the  gains")
risk  =  input.float(2,  title="Risk  per  Trade  %",  group="Money  Management")
riskt  =  risk  /  100  +  1
multitarget  =  input.bool(true,  title="Multi  Target  (Breakeven  Target  1)",  group="Money  Management",  tooltip="This  parameter  is  used  to  create  2  targets.  When  target  1  is  reached,  he  closes  the  half  position.  When  target  2  hits,  it  closes  the  other  half")
target1  =  input.float(1,  title='Target  1  (R:R)',  group="Money  Management",  step=0.1)
target2  =  input.float(2,  title='Target  2  (R:R)',  group="Money  Management",  step=0.1)
useDateFilter  =  input.bool(true,  title="Filter  Date  Range  of  Backtest",
          group="Backtest  Time  Period")
backtestStartDate  =  input.time(timestamp("1  June  2022"),
          title="Start  Date",  group="Backtest  Time  Period",
          tooltip="This  start  date  is  in  the  time  zone  of  the  exchange  "  +
          "where  the  chart's  instrument  trades.  It  doesn't  use  the  time  "  +
          "zone  of  the  chart  or  of  your  computer.")
backtestEndDate  =  input.time(timestamp("1  July  2022"),
          title="End  Date",  group="Backtest  Time  Period",
          tooltip="This  end  date  is  in  the  time  zone  of  the  exchange  "  +
          "where  the  chart's  instrument  trades.  It  doesn't  use  the  time  "  +
          "zone  of  the  chart  or  of  your  computer.")
inTradeWindow  =  not  useDateFilter  or  (time  >=  backtestStartDate  and
          time  <  backtestEndDate)
swingHighV  =  input.int(7,  title="Swing  High",  group="Stop  Loss",  tooltip="Number  of  candles  in  which  the  parameter  targets  the  highest")
swingLowV  =  input.int(7,  title="Swing  Low",  group="Stop  Loss",  tooltip="Number  of  candles  in  which  the  parameter  targets  the  lowest  point")
//Hull  Suite
modeSwitch  =  input.string("Hma",  title="Hull  Variation",  options=["Hma",  "Thma",  "Ehma"],  group="Hull  Suite")
length  =  input(60,  title="Length",  group="Hull  Suite")
lengthMult  =  input(3,  title="Length  multiplier",  group="Hull  Suite")
HMA(_src1,  _length)  =>
        ta.wma(2  *  ta.wma(_src1,  _length  /  2)  -  ta.wma(_src1,  _length),  math.round(math.sqrt(_length)))
EHMA(_src1,  _length)  =>
        ta.ema(2  *  ta.ema(_src1,  _length  /  2)  -  ta.ema(_src1,  _length),  math.round(math.sqrt(_length)))
THMA(_src1,  _length)  =>
        ta.wma(ta.wma(_src1,  _length  /  3)  *  3  -  ta.wma(_src1,  _length  /  2)  -  ta.wma(_src1,  _length),  _length)
Mode(modeSwitch,  src1,  len)  =>
        modeSwitch  ==  'Hma'  ?  HMA(src1,  len)  :  modeSwitch  ==  'Ehma'  ?  EHMA(src1,  len)  :  modeSwitch  ==  'Thma'  ?  THMA(src1,  len  /  2)  :  na
_hull  =  Mode(modeSwitch,  src1,  int(length  *  lengthMult))
HULL  =  _hull
MHULL  =  HULL[0]
SHULL  =  HULL[2]
hullColor  =  HULL  >  HULL[2]  ?  #00ff00  :  #ff0000
Fi1  =  plot(MHULL,  title='MHULL',  color  =  color.new(hullColor,40),  linewidth=1)
Fi2  =  plot(SHULL,  title='SHULL',  color  =  color.new(hullColor,40),  linewidth=1)
fill(Fi1,  Fi2,  title='Band  Filler',  color  =  color.new(hullColor,40))
//QQE  MOD
RSI_Period  =  input(6,  title='RSI  Length',  group="QQE  MOD")
SF  =  input(5,  title='RSI  Smoothing',  group="QQE  MOD")
QQE  =  input(3,  title='Fast  QQE  Factor',  group="QQE  MOD")
ThreshHold  =  input(3,  title='Thresh-hold',  group="QQE  MOD")
src  =  input(close,  title='RSI  Source',  group="QQE  MOD")
Wilders_Period  =  RSI_Period  *  2  -  1
Rsi  =  ta.rsi(src,  RSI_Period)
RsiMa  =  ta.ema(Rsi,  SF)
AtrRsi  =  math.abs(RsiMa[1]  -  RsiMa)
MaAtrRsi  =  ta.ema(AtrRsi,  Wilders_Period)
dar  =  ta.ema(MaAtrRsi,  Wilders_Period)  *  QQE
longband  =  0.0
shortband  =  0.0
trend  =  0
DeltaFastAtrRsi  =  dar
RSIndex  =  RsiMa
newshortband  =  RSIndex  +  DeltaFastAtrRsi
newlongband  =  RSIndex  -  DeltaFastAtrRsi
longband  :=  RSIndex[1]  >  longband[1]  and  RSIndex  >  longband[1]  ?  math.max(longband[1],  newlongband)  :  newlongband
shortband  :=  RSIndex[1]  <  shortband[1]  and  RSIndex  <  shortband[1]  ?  math.min(shortband[1],  newshortband)  :  newshortband
cross_1  =  ta.cross(longband[1],  RSIndex)
trend  :=  ta.cross(RSIndex,  shortband[1])  ?  1  :  cross_1  ?  -1  :  nz(trend[1],  1)
FastAtrRsiTL  =  trend  ==  1  ?  longband  :  shortband
length1  =  input.int(50,  minval=1,  title='Bollinger  Length',  group="QQE  MOD")
mult  =  input.float(0.35,  minval=0.001,  maxval=5,  step=0.1,  title='BB  Multiplier',  group="QQE  MOD")
basis  =  ta.sma(FastAtrRsiTL  -  50,  length1)
dev  =  mult  *  ta.stdev(FastAtrRsiTL  -  50,  length1)
upper  =  basis  +  dev
lower  =  basis  -  dev
color_bar  =  RsiMa  -  50  >  upper  ?  #00c3ff  :  RsiMa  -  50  <  lower  ?  #ff0062  :  color.gray
QQEzlong  =  0
QQEzlong  :=  nz(QQEzlong[1])
QQEzshort  =  0
QQEzshort  :=  nz(QQEzshort[1])
QQEzlong  :=  RSIndex  >=  50  ?  QQEzlong  +  1  :  0
QQEzshort  :=  RSIndex  <  50  ?  QQEzshort  +  1  :  0
RSI_Period2  =  input(6,  title='RSI  Length',  group="QQE  MOD")
SF2  =  input(5,  title='RSI  Smoothing',  group="QQE  MOD")
QQE2  =  input(1.61,  title='Fast  QQE2  Factor',  group="QQE  MOD")
ThreshHold2  =  input(3,  title='Thresh-hold',  group="QQE  MOD")
src2  =  input(close,  title='RSI  Source',  group="QQE  MOD")
Wilders_Period2  =  RSI_Period2  *  2  -  1
Rsi2  =  ta.rsi(src2,  RSI_Period2)
RsiMa2  =  ta.ema(Rsi2,  SF2)
AtrRsi2  =  math.abs(RsiMa2[1]  -  RsiMa2)
MaAtrRsi2  =  ta.ema(AtrRsi2,  Wilders_Period2)
dar2  =  ta.ema(MaAtrRsi2,  Wilders_Period2)  *  QQE2
longband2  =  0.0
shortband2  =  0.0
trend2  =  0
DeltaFastAtrRsi2  =  dar2
RSIndex2  =  RsiMa2
newshortband2  =  RSIndex2  +  DeltaFastAtrRsi2
newlongband2  =  RSIndex2  -  DeltaFastAtrRsi2
longband2  :=  RSIndex2[1]  >  longband2[1]  and  RSIndex2  >  longband2[1]  ?  math.max(longband2[1],  newlongband2)  :  newlongband2
shortband2  :=  RSIndex2[1]  <  shortband2[1]  and  RSIndex2  <  shortband2[1]  ?  math.min(shortband2[1],  newshortband2)  :  newshortband2
cross_2  =  ta.cross(longband2[1],  RSIndex2)
trend2  :=  ta.cross(RSIndex2,  shortband2[1])  ?  1  :  cross_2  ?  -1  :  nz(trend2[1],  1)
FastAtrRsi2TL  =  trend2  ==  1  ?  longband2  :  shortband2
QQE2zlong  =  0
QQE2zlong  :=  nz(QQE2zlong[1])
QQE2zshort  =  0
QQE2zshort  :=  nz(QQE2zshort[1])
QQE2zlong  :=  RSIndex2  >=  50  ?  QQE2zlong  +  1  :  0
QQE2zshort  :=  RSIndex2  <  50  ?  QQE2zshort  +  1  :  0
hcolor2  =  RsiMa2  -  50  >  ThreshHold2  ?  color.silver  :  RsiMa2  -  50  <  0  -  ThreshHold2  ?  color.silver  :  na
Greenbar1  =  RsiMa2  -  50  >  ThreshHold2
Greenbar2  =  RsiMa  -  50  >  upper
Redbar1  =  RsiMa2  -  50  <  0  -  ThreshHold2
Redbar2  =  RsiMa  -  50  <  lower
//Volume  Oscillator
var  cumVol  =  0.
cumVol  +=  nz(volume)
if  barstate.islast  and  cumVol  ==  0
        runtime.error("No  volume  is  provided  by  the  data  vendor.")
shortlen  =  input.int(5,  minval=1,  title  =  "Short  Length",  group="Volume  Oscillator")
longlen  =  input.int(10,  minval=1,  title  =  "Long  Length",  group="Volume  Oscillator")
short  =  ta.ema(volume,  shortlen)
long  =  ta.ema(volume,  longlen)
osc  =  100  *  (short  -  long)  /  long
//strategy
longcondition  =  close  >  MHULL  and  HULL  >  HULL[2]  and  osc  >  0  and  Greenbar1  and  Greenbar2  and  not  Greenbar1[1]  and  not  Greenbar2[1]
shortcondition  =  close  <  SHULL  and  HULL  <  HULL[2]  and  osc  >  0  and  Redbar1  and  Redbar2  and  not  Redbar1[1]  and  not  Redbar2[1]
float  risk_long  =  na
float  risk_short  =  na
float  stopLoss  =  na
float  takeProfit1  =  na
float  takeProfit2  =  na
float  entry_price  =  na
risk_long  :=  risk_long[1]
risk_short  :=  risk_short[1]
swingHigh  =  ta.highest(high,  swingHighV)
swingLow  =  ta.lowest(low,  swingLowV)
lotB  =  (strategy.equity*riskt-strategy.equity)/(close  -  swingLow)
lotS  =  (strategy.equity*riskt-strategy.equity)/(swingHigh  -  close)
if  strategy.position_size  ==  0  and  longcondition  and  inTradeWindow
        risk_long  :=  (close  -  swingLow)  /  close
        minp  =  close  -  swingLow
        if  _x
                if  minp  >  security
                        strategy.entry("long",  strategy.long,  qty=lotB,  comment="Buy  "  +  str.tostring(close)  +  "")
        else
                strategy.entry("long",  strategy.long,  qty=lotB,  comment="Buy  "  +  str.tostring(close)  +  "")

if  strategy.position_size  ==  0  and  shortcondition  and  inTradeWindow
        risk_short  :=  (swingHigh  -  close)  /  close
        minp  =  swingHigh  -  close
        if  _x
                if  minp  >  security
                        strategy.entry("short",  strategy.short,  qty=lotS,  comment="Sell  "  +  str.tostring(close)  +  "")
        else
                strategy.entry("short",  strategy.short,  qty=lotS,  comment="Sell  "  +  str.tostring(close)  +  "")

if  multitarget
        if  strategy.position_size  >  0
                stopLoss  :=  strategy.position_avg_price  *  (1  -  risk_long)
                takeProfit1  :=  strategy.position_avg_price  *  (1  +  target1  *  risk_long)
                takeProfit2  :=  strategy.position_avg_price  *  (1  +  target2  *  risk_long)
                entry_price  :=  strategy.position_avg_price
                strategy.exit("Exit  1",  "long",  qty_percent=50,  stop  =  stopLoss,  limit  =  takeProfit1)

                if  high  >=  takeProfit1
                        strategy.exit("Exit  2",  "long",  stop  =  entry_price,  limit  =  takeProfit2,  qty_percent  =  100)
                else
            strategy.exit("Exit1","long",stop=stopLoss,qty_percent=100)

ifstrategy.position_size<0
stopLoss:=strategy.position_avg_price*(1+risk_short)
takeProfit1:=strategy.position_avg_price*(1-target1*risk_short)
takeProfit2:=strategy.position_avg_price*(1-target2*risk_short)
entry_price:=strategy.position_avg_price
strategy.exit("Exit1","short",stop=stopLoss,limit=takeProfit1,qty_percent=50)

iflow<=takeProfit1
strategy.exit("Exit2","short",stop=entry_price,limit=takeProfit2,qty_percent=100)
else
strategy.exit("Exit1","short",stop=stopLoss,qty_percent=100)
else
ifstrategy.position_size>0
stopLoss:=strategy.position_avg_price*(1-risk_long)
takeProfit1:=strategy.position_avg_price*(1+target_stop_ratio*risk_long)
entry_price:=strategy.position_avg_price
strategy.exit("exitlong","long",stop=stopLoss,limit=takeProfit1)

ifstrategy.position_size<0
stopLoss:=strategy.position_avg_price*(1+risk_short)
takeProfit1:=strategy.position_avg_price*(1-target_stop_ratio*risk_short)
entry_price:=strategy.position_avg_price
strategy.exit("exitshort","short",stop=stopLoss,limit=takeProfit1)

p_ep=plot(entry_price,color=color.new(color.white,0),linewidth=2,style=plot.style_linebr,title='entryprice')
p_sl=plot(stopLoss,color=color.new(color.red,0),linewidth=2,style=plot.style_linebr,title='stopLoss')
p_tp2=plot(takeProfit2,color=color.new(color.green,0),linewidth=2,style=plot.style_linebr,title='takeProfit1')
p_tp1=plot(takeProfit1,color=color.new(#52F071,0),linewidth=1,style=plot.style_linebr,title='takeProfit2')
fill(p_sl,p_ep,color.new(color.red,transp=85))
fill(p_tp2,p_ep,color.new(color.green,transp=85))
fill(p_tp1,p_ep,color.new(#52F071,transp=85))
colorresult=strategy.netprofit>0?color.green:color.red
profitprc=strategy.netprofit/strategy.initial_capital*100
periodzone=(backtestEndDate-backtestStartDate)/3600/24/1000
vartbl=table.new(position.top_right,4,2,border_width=3)
table.cell(tbl,0,0,"Symbole",bgcolor=#9B9B9B,width=6,height=6)
table.cell(tbl,1,0,"NetProfit",bgcolor=#9B9B9B,width=6,height=6)
table.cell(tbl,2,0,"Trades",bgcolor=#9B9B9B,width=6,height=6)
table.cell(tbl,3,0,"Period",bgcolor=#9B9B9B,width=6,height=6)

table.cell(tbl,0,1,str.tostring(syminfo.ticker),bgcolor=#E8E8E8,width=6,height=6)
table.cell(tbl,1,1,str.tostring(profitprc,format.mintick)+"%",bgcolor=colorresult,width=6,height=6)
table.cell(tbl,2,1,str.tostring(strategy.closedtrades),bgcolor=colorresult,width=6,height=6)
table.cell(tbl,3,1,str.tostring(periodzone)+"day",bgcolor=colorresult,width=6,height=6)
Expand (273 lines)
