Script Name: 888 BOT #backtest
Author: UnknownUnicorn2151907
Description: â–ˆ 888 BOT #backtest (open source)

This is an Expert Advisor 'EA' or Automated trading script for â€˜longsâ€™ and â€˜shortsâ€™, which uses only a Take Profit or, in the worst case, a Stop Loss to close the trade.
It's a much improved version of the previous â€˜Repanochaâ€™. It doesn`t use 'Trailing Stop' or 'security()' functions (although using a security function doesn`t...
PineScript code:

Pine Scriptâ„¢ strategy
888 BOT #backtest
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  Â©  Xaviz
//@version=4
strategy(title  =  "888  BOT  #backtest",  shorttitle  =  "888ðŸ’¹",  overlay  =  true,  initial_capital  =  10000,  pyramiding  =  10,  currency  =  "USD",
      default_qty_type  =  strategy.percent_of_equity,  default_qty_value  =  0,  commission_value  =  0.04)
//  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  //
//  â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”  Inputs
//  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  //
//  â€”â€”â€”â€”â€”  Source  input
src                                  =  input(hlc3,              title  =  "â€ƒâ€ƒSOURCE",                                                          type  =  input.source)
//  â€”â€”â€”â€”â€”  JMA  inputs
Act_JMA                          =  input(true,              title  =  "JURIK  MOVING  AVERAGE",                                  type  =  input.bool)
JMA_length                    =  input(30,                  title  =  "â€ƒâ€ƒJMA  LENGTH",                                                  type  =  input.integer,      minval  =  0)
phase                              =  input(40,                  title  =  "â€ƒâ€ƒJMA  PHASE",                                                    type  =  input.integer,      minval  =  0)
power                              =  input(2.5,                title  =  "â€ƒâ€ƒJMA  POWER",                                                    type  =  input.float,          minval  =  0,          step  =  0.5)
//  â€”â€”â€”â€”â€”  RangeFilterinputs
Act_RF=input(true,title="RANGEFILTER",type=input.bool)
per=input(20,title="â€ƒâ€ƒSAMPLINGPERIOD",type=input.integer,minval=1)
mult=input(1.7,title="â€ƒâ€ƒRANGEMULTIPLIER",type=input.float,minval=0.1,step=0.1)
//â€”â€”â€”â€”â€”ADXinputs
Act_ADX=input(true,title="AVERAGEDIRECTIONALINDEX",type=input.bool)
ADX_options=input("CLASSIC",title="â€ƒâ€ƒADXOPTION",options=["CLASSIC","MASANAKAMURA"])
ADX_len=input(22,title="â€ƒâ€ƒADXLENGTH",type=input.integer,minval=1)
th=input(20,title="â€ƒâ€ƒADXTHRESHOLD",type=input.float,minval=0,step=0.5)
//â€”â€”â€”â€”â€”SARinputs
Act_SAR=input(true,title="PARABOLICSAR",type=input.bool)
Sst=input(0.25,title="â€ƒâ€ƒSARSTAR",type=input.float,minval=0.01,step=0.01)
Sinc=input(0.25,title="â€ƒâ€ƒSARINC",type=input.float,minval=0.01,step=0.01)
Smax=input(0.13,title="â€ƒâ€ƒSARMAX",type=input.float,minval=0.01,step=0.01)
//â€”â€”â€”â€”â€”RSIwithvolumeinputs
Act_RSI=input(true,title="RSIVOLUMEWEIGHTED",type=input.bool)
RSI_len=input(34,title="â€ƒâ€ƒRSILENGHT",type=input.integer,minval=1)
RSI_obos=input(45,title="â€ƒâ€ƒRSICENTERLINE",type=input.integer,minval=1)
//â€”â€”â€”â€”â€”MACD/MAC-Zinputs
Act_MACD=input(true,title="MACONVERGENCE/DIVERGENCE",type=input.bool)
MACD_options=input("MAC-Z",title="â€ƒâ€ƒMACDOPTION",options=["MACD","MAC-Z"])
fastLength=input(45,title="â€ƒâ€ƒMACDFASTMALENGTH",type=input.integer,minval=1)
slowLength=input(47,title="â€ƒâ€ƒMACDSLOWMALENGTH",type=input.integer,minval=1)
signalLength=input(13,title="â€ƒâ€ƒMACDSIGNALLENGTH",type=input.integer,minval=1)
lengthz=input(9,title="â€ƒâ€ƒZ-VWAPLENGTH",type=input.integer,minval=1)
lengthStdev=input(14,title="â€ƒâ€ƒSTDEVLENGTH",type=input.integer,minval=1)
//â€”â€”â€”â€”â€”Volumeinputsforentriesconditionandforcalculatequantitieslater
Act_Vol=input(true,title="VOLUMECONDITION",type=input.bool)
volume_f=input(1.4,title="â€ƒâ€ƒVOLUMEFACTOR",type=input.float,minval=0,step=0.1)
sma_length=input(61,title="â€ƒâ€ƒSMAVOLUMELENGTH",type=input.integer,minval=1)
//â€”â€”â€”â€”â€”Firsttakeprofitinput
tp_long0=input(1.7,title="â€ƒâ€ƒTAKEPROFITLONG%",type=input.float,minval=0,step=0.1)
tp_short0=input(1.8,title="â€ƒâ€ƒTAKEPROFITSHORT%",type=input.float,minval=0,step=0.1)
//â€”â€”â€”â€”â€”StopLossinput
Act_sl=input(true,title="ACTIVATESTOPLOSSðŸ§»",type=input.bool)
SL_options=input("NORMAL",title="â€ƒâ€ƒSTOPLOSSOPTION",options=["NORMAL","ATR","BOTH"])
sl0=input(3.7,title="â€ƒâ€ƒSTOPLOSS%",type=input.float,minval=0,step=0.1)
//â€”â€”â€”â€”â€”ATRInputs
atrPeriod=input(13,title="â€ƒâ€ƒATRSLPERIOD",type=input.integer,minval=0)
multiplierPeriod=input(7.0,title="â€ƒâ€ƒATRSLMULTIPLIER",type=input.float,minval=0,step=0.1)
//â€”â€”â€”â€”â€”Riskinput
Risk=input(3.5,title="â€ƒâ€ƒ%RISKALLOWED",type=input.float,minval=0,step=0.5)
//â€”â€”â€”â€”â€”ConfirmedStoploss
Act_Conf_SL=input(false,title="STOPLOSSCONFIRMED",type=input.bool)
//â€”â€”â€”â€”â€”BollingerBandsinputs
Act_BB=input(true,title="ACTIVATEBOLLINGERBANDSRE-ENTRYðŸš€",type=input.bool)
BB_length=input(20,title="â€ƒâ€ƒBBLENGTH",type=input.integer,minval=1)
BB_mult=input(1.9,title="â€ƒâ€ƒBBMULTIPLIER",type=input.float,minval=0.001,step=0.1)
bbBetterPrice=input(0.5,title="â€ƒâ€ƒ%MINIMUMBETTERPRICE",type=input.float,minval=0.1,step=0.1)
Act_divide=input(false,title="ACTIVATEDIVIDETP",type=input.bool)
//â€”â€”â€”â€”â€”Backtestinput
Act_BT=input(true,title="BACKTESTðŸ’¹",type=input.bool)
backtest_time=input(180,title="â€ƒâ€ƒBACKTESTDAYS",type=input.integer,minval=1)*24*60*60*1000
entry_Type=input("%EQUITY",title="â€ƒâ€ƒENTRYTYPE",options=["CONTRACTS","CASH","%EQUITY"])
et_Factor=(entry_Type=="CONTRACTS")?1:(entry_Type=="%EQUITY")?(100/(strategy.equity/close)):close
quanTity=input(8.0,title="â€ƒâ€ƒQUANTITY(LEVERAGE1X)",type=input.float,minval=0,step=0.5)/et_Factor
Max_Lev=input(8,title="â€ƒâ€ƒMAXIMUMLEVERAGE",type=input.integer,minval=1,maxval=8)
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Variables
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”Long/Short
varboollongCond=na,varboolshortCond=na
varintCondIni_long=0,varintCondIni_short=0
varbool_Final_longCondition=na,varbool_Final_shortCondition=na
varfloatlast_open_longCondition=na,varfloatlast_open_shortCondition=na
varfloatlast_dynamic_Leverage_long=na,varfloatlast_dynamic_Leverage_short=na
varintlast_longCondition=na,varintlast_shortCondition=na
varintlast_Final_longCondition=na,varintlast_Final_shortCondition=na
varintnLongs=na,varintnShorts=na
//â€”â€”â€”â€”â€”Takeprofit
varboollong_tp=na,varboolshort_tp=na
varintlast_long_tp=na,varintlast_short_tp=na
varboolFinal_Long_tp=na,varboolFinal_Short_tp=na
//â€”â€”â€”â€”â€”StopLoss
varintCondIni_long_sl=0,varintCondIni_short_sl=0
varboolFinal_Long_sl0=na,varboolFinal_Short_sl0=na
varboolFinal_Long_sl=na,varboolFinal_Short_sl=na
varintlast_long_sl=na,varintlast_short_sl=na
//â€”â€”â€”â€”â€”Indicators
varboolJMA_longCond=na,varboolJMA_shortCond=na
varboolRF_longCond=na,varboolRF_shortCond=na
varboolADX_longCond=na,varboolADX_shortCond=na
varboolSAR_longCond=na,varboolSAR_shortCond=na
varboolRSI_longCond=na,varboolRSI_shortCond=na
varboolMACD_longCond=na,varboolMACD_shortCond=na
varboolVOL_longCond=na,varboolVOL_shortCond=na
varboolJMA_XlongCond=na,varboolJMA_XshortCond=na
varboolRF_XlongCond=na,varboolRF_XshortCond=na
varboolADX_XlongCond=na,varboolADX_XshortCond=na
varboolSAR_XlongCond=na,varboolSAR_XshortCond=na
varintCondIni_long_BB=0,varintCondIni_short_BB=0
varboolFinal_long_BB=na,varboolFinal_short_BB=na
varintlast_long_BB=na,varintlast_short_BB=na
//â€”â€”â€”â€”â€”AveragePrice
varfloatsum_long=0.0,varfloatsum_short=0.0
varfloatPosition_Price=0.0
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”JurikMovingAverage
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”JMAcalculation
JMA(_JMA_length,_phase,_power,_src)=>
phaseRatio=_phase<-100?0.5:_phase>100?2.5:_phase/100+1.5
beta=0.45*(_JMA_length-1)/(0.45*(_JMA_length-1)+2)
alpha=pow(beta,_power)
jma=0.0
e0=0.0
e0:=(1-alpha)*_src+alpha*nz(e0[1])
e1=0.0
e1:=(_src-e0)*(1-beta)+beta*nz(e1[1])
e2=0.0
e2:=(e0+phaseRatio*e1-nz(jma[1]))*pow(1-alpha,2)+pow(alpha,2)*nz(e2[1])
jma:=e2+nz(jma[1])

//â€”â€”â€”â€”â€”DefiningJMAtrend
JMA_Rising=JMA(JMA_length,phase,power,src)>JMA(JMA_length,phase,power,src)[1]
JMA_Falling=JMA(JMA_length,phase,power,src)<JMA(JMA_length,phase,power,src)[1]
//â€”â€”â€”â€”â€”JMAPlotting
JMA_color=JMA_Rising?color.lime:JMA_Falling?#e91e63:color.orange
plot(Act_JMA?JMA(JMA_length,phase,power,src):na,color=JMA_color,linewidth=2,title="JMA")
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”RangeFilter
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”RangeFiltercalculation
Range_filter(_src,_per,_mult)=>
float_upward=0.0
float_downward=0.0
wper=(_per*2)-1
avrng=ema(abs(_src-_src[1]),_per)
_smoothrng=ema(avrng,wper)*_mult
_filt=_src
_filt:=_src>nz(_filt[1])?((_src-_smoothrng)<nz(_filt[1])?nz(_filt[1]):(_src-_smoothrng)):((_src+_smoothrng)>nz(_filt[1])?nz(_filt[1]):(_src+_smoothrng))
_upward:=_filt>_filt[1]?nz(_upward[1])+1:_filt<_filt[1]?0:nz(_upward[1])
_downward:=_filt<_filt[1]?nz(_downward[1])+1:_filt>_filt[1]?0:nz(_downward[1])
[_smoothrng,_filt,_upward,_downward]

//â€”â€”â€”â€”â€”Definingvariablesforincludeinfutureconditions
[smoothrng,filt,upward,downward]=Range_filter(src,per,mult)
//â€”â€”â€”â€”â€”Defininghighandlowbands
hband=filt+smoothrng
lband=filt-smoothrng
//â€”â€”â€”â€”â€”RangeFilterPlotting
filtcolor=upward>0?color.lime:downward>0?color.red:color.orange
filtplot=plot(Act_RF?filt:na,color=filtcolor,linewidth=1,title="RF")
hbandplot=plot(Act_RF?hband:na,color=filtcolor,transp=50,title="RFHighTarget")
lbandplot=plot(Act_RF?lband:na,color=filtcolor,transp=50,title="RFLowTarget")
fill(hbandplot,lbandplot,color=filtcolor,title="RFTargetRange")
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”ADX
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”ClassicADXcalculating
calcADX(_len)=>
up=change(high)
down=-change(low)
plusDM=na(up)?na:(up>downandup>0?up:0)
minusDM=na(down)?na:(down>upanddown>0?down:0)
truerange=rma(tr,_len)
_plus=fixnan(100*rma(plusDM,_len)/truerange)
_minus=fixnan(100*rma(minusDM,_len)/truerange)
sum=_plus+_minus
_adx=100*rma(abs(_plus-_minus)/(sum==0?1:sum),_len)
[_plus,_minus,_adx]
//â€”â€”â€”â€”â€”MasanakamuraADXcalculating
calcADX_Masanakamura(_len)=>
SmoothedTrueRange=0.0
SmoothedDirectionalMovementPlus=0.0
SmoothedDirectionalMovementMinus=0.0
TrueRange=max(max(high-low,abs(high-nz(close[1]))),abs(low-nz(close[1])))
DirectionalMovementPlus=high-nz(high[1])>nz(low[1])-low?max(high-nz(high[1]),0):0
DirectionalMovementMinus=nz(low[1])-low>high-nz(high[1])?max(nz(low[1])-low,0):0
SmoothedTrueRange:=nz(SmoothedTrueRange[1])-(nz(SmoothedTrueRange[1])/_len)+TrueRange
SmoothedDirectionalMovementPlus:=nz(SmoothedDirectionalMovementPlus[1])-(nz(SmoothedDirectionalMovementPlus[1])/_len)+DirectionalMovementPlus
SmoothedDirectionalMovementMinus:=nz(SmoothedDirectionalMovementMinus[1])-(nz(SmoothedDirectionalMovementMinus[1])/_len)+DirectionalMovementMinus
DIP=SmoothedDirectionalMovementPlus/SmoothedTrueRange*100
DIM=SmoothedDirectionalMovementMinus/SmoothedTrueRange*100
DX=abs(DIP-DIM)/(DIP+DIM)*100
adx=sma(DX,_len)
[DIP,DIM,adx]
//â€”â€”â€”â€”â€”Definingvariablesforincludeinfutureconditions
[DIPlusC,DIMinusC,ADXC]=calcADX(ADX_len)
[DIPlusM,DIMinusM,ADXM]=calcADX_Masanakamura(ADX_len)
DIPlus=ADX_options=="CLASSIC"?DIPlusC:DIPlusM
DIMinus=ADX_options=="CLASSIC"?DIMinusC:DIMinusM
ADX=ADX_options=="CLASSIC"?ADXC:ADXM
//â€”â€”â€”â€”â€”PlottingADXbarcolors
ADX_color=DIPlus>DIMinusandADX>th?color.green:DIPlus<DIMinusandADX>th?color.red:color.orange
barcolor(color=Act_ADX?ADX_color:na,title="ADX")
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”SAR
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”SARcalculationfromTV
SAR=sar(Sst,Sinc,Smax)
//â€”â€”â€”â€”â€”SARPlotting
plot(Act_SAR?SAR:na,color=ADX_color,style=plot.style_circles,title="SAR")
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”RSIwithVolume
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”RSIwithvolumecalculation
WiMA(_src,W_length)=>
varfloatMA_s=0.0
MA_s:=(_src+nz(MA_s[1]*(W_length-1)))/W_length
MA_s
RSI_Volume(fv,_length)=>
up=iff(fv>fv[1],abs(fv-fv[1])*volume,0)
dn=iff(fv<fv[1],abs(fv-fv[1])*volume,0)
upt=WiMA(up,_length)
dnt=WiMA(dn,_length)
100*(upt/(upt+dnt))
//â€”â€”â€”â€”â€”Definingvariableforincludeinconditions
RSI_V=RSI_Volume(src,RSI_len)
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”MACD
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”MAC-Zcalculation
calc_zvwap(pds)=>
mean=sum(volume*close,pds)/sum(volume,pds)
vwapsd=sqrt(sma(pow(close-mean,2),pds))
(close-mean)/vwapsd
zscore=calc_zvwap(lengthz)
fastMA=sma(src,fastLength)
slowMA=sma(src,slowLength)
macd=fastMA-slowMA
macz=zscore+macd/stdev(src,lengthStdev)
signal=sma(macz,signalLength)
histmacz=macz-signal
//â€”â€”â€”â€”â€”MACDcalculation
[_,_,histmacd]=macd(src,fastLength,slowLength,signalLength)
hist=MACD_options=="MACD"?histmacd:histmacz
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Strategy
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”Allindicatorswithlongconditionsandenable/disableoption
JMA_longCond:=(Act_JMA?(JMA_Rising):VOL_longCond)
RF_longCond:=(Act_RF?(high>hbandandupward>0):JMA_longCond)
ADX_longCond:=(Act_ADX?(DIPlus>DIMinusandADX>th):RF_longCond)
SAR_longCond:=(Act_SAR?(SAR<close):ADX_longCond)
RSI_longCond:=(Act_RSI?(RSI_V>RSI_obos):SAR_longCond)
MACD_longCond:=(Act_MACD?(hist>0):RSI_longCond)
VOL_longCond:=(Act_Vol?(volume>sma(volume,sma_length)*volume_f):MACD_longCond)
//â€”â€”â€”â€”â€”Allindicatorswithshortconditionsandenable/disableoption
JMA_shortCond:=(Act_JMA?(JMA_Falling):VOL_shortCond)
RF_shortCond:=(Act_RF?(low<lbandanddownward>0):JMA_shortCond)
ADX_shortCond:=(Act_ADX?(DIPlus<DIMinusandADX>th):RF_shortCond)
SAR_shortCond:=(Act_SAR?(SAR>close):ADX_shortCond)
RSI_shortCond:=(Act_RSI?(RSI_V<RSI_obos):SAR_shortCond)
MACD_shortCond:=(Act_MACD?(hist<0):RSI_shortCond)
VOL_shortCond:=(Act_Vol?(volume>sma(volume,sma_length)*volume_f):MACD_shortCond)
//â€”â€”â€”â€”â€”Defininglong/shortconditionfromindicators+volume
longCond:=JMA_longCondandRF_longCondandADX_longCondandSAR_longCondandRSI_longCondandMACD_longCondandVOL_longCond
shortCond:=JMA_shortCondandRF_shortCondandADX_shortCondandSAR_shortCondandRSI_shortCondandMACD_shortCondandVOL_shortCond
//â€”â€”â€”â€”â€”Avoidingconfirmedlong/shortsimultaneity
CondIni_long:=longCond[1]?1:shortCond[1]?-1:nz(CondIni_long[1])
CondIni_short:=longCond[1]?1:shortCond[1]?-1:nz(CondIni_short[1])
//â€”â€”â€”â€”â€”Confirmedlong/shortconditions
longCondition=(longCond[1]andnz(CondIni_long[1])==-1)
shortCondition=(shortCond[1]andnz(CondIni_short[1])==1)
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”PositionPrice
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”Lastopenedlong/shortpriceonunconfirmed/confirmedconditions
last_open_longCondition:=longConditionorFinal_long_BB[1]?close[1]:nz(last_open_longCondition[1])
last_open_shortCondition:=shortConditionorFinal_short_BB[1]?close[1]:nz(last_open_shortCondition[1])
//â€”â€”â€”â€”â€”Checkifyourlastpositionwasaconfirmedlongorashort
last_longCondition:=longConditionorFinal_long_BB[1]?time:nz(last_longCondition[1])
last_shortCondition:=shortConditionorFinal_short_BB[1]?time:nz(last_shortCondition[1])
in_longCondition=last_longCondition>last_shortCondition
in_shortCondition=last_shortCondition>last_longCondition
//â€”â€”â€”â€”â€”CheckifyourlastpositionwasaconfirmedfinallongorshortwithoutBB
last_Final_longCondition:=longCondition?time:nz(last_Final_longCondition[1])
last_Final_shortCondition:=shortCondition?time:nz(last_Final_shortCondition[1])
//â€”â€”â€”â€”â€”Countinglong&shortiterations
nLongs:=nz(nLongs[1])
nShorts:=nz(nShorts[1])
//â€”â€”â€”â€”â€”LongsCounter
iflongConditionorFinal_long_BB
nLongs:=nLongs+1
nShorts:=0
sum_long:=nz(last_open_longCondition)+nz(sum_long[1])
sum_short:=0.0

//â€”â€”â€”â€”â€”ShortsCounter
ifshortConditionorFinal_short_BB
nLongs:=0
nShorts:=nShorts+1
sum_short:=nz(last_open_shortCondition)+nz(sum_short[1])
sum_long:=0.0
//â€”â€”â€”â€”â€”CalculatingandPlottingthepriceaverage
Position_Price:=nz(Position_Price[1])
Position_Price:=longConditionorFinal_long_BB?sum_long/nLongs:shortConditionorFinal_short_BB?sum_short/nShorts:na
plot((nLongs>1)or(nShorts>1)?Position_Price:na,title="AveragePrice",color=in_longCondition?color.aqua:color.orange,linewidth=2,style=plot.style_cross)

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”TakeProfit
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”TakeProfitdividedbynentries
tp_long=(Act_divideand(nLongs>1)?tp_long0/nLongs:tp_long0)/100
tp_short=(Act_divideand(nShorts>1)?tp_short0/nShorts:tp_short0)/100
//â€”â€”â€”â€”â€”FirstTPConditions
long_tp:=high>(fixnan(Position_Price)*(1+tp_long))andin_longCondition
short_tp:=low<(fixnan(Position_Price)*(1-tp_short))andin_shortCondition
//â€”â€”â€”â€”â€”Getthetimeofthelasttpclose
last_long_tp:=long_tp?time:nz(last_long_tp[1])
last_short_tp:=short_tp?time:nz(last_short_tp[1])
//â€”â€”â€”â€”â€”FinalTakeprofitcondition(neverafterthestoploss)
Final_Long_tp:=(long_tpandlast_longCondition>nz(last_long_tp[1])andlast_longCondition>nz(last_long_sl[1]))
Final_Short_tp:=(short_tpandlast_shortCondition>nz(last_short_tp[1])andlast_shortCondition>nz(last_short_sl[1]))
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”StopLoss
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”StopLossATRcalculation
ATR_SL_Long=low-atr(atrPeriod)*multiplierPeriod
ATR_SL_Short=high+atr(atrPeriod)*multiplierPeriod
longStopPrev=nz(ATR_SL_Long[1],ATR_SL_Long)
shortStopPrev=nz(ATR_SL_Short[1],ATR_SL_Short)
ATR_SL_Long:=close[1]>longStopPrev?max(ATR_SL_Long,longStopPrev):ATR_SL_Long
ATR_SL_Short:=close[1]<shortStopPrev?min(ATR_SL_Short,shortStopPrev):ATR_SL_Short
//â€”â€”â€”â€”â€”CalculatingSlaccordingRiskandInitialCapital
sl=in_longCondition?
min(sl0,(((Risk/(100/(strategy.equity/close)))*100)/(quanTity*max(1,last_dynamic_Leverage_long)*max(1,nLongs)))):
min(sl0,(((Risk/(100/(strategy.equity/close)))*100)/(quanTity*max(1,last_dynamic_Leverage_short)*max(1,nShorts))))

//â€”â€”â€”â€”â€”StopLosslongconditions
Normal_long_sl=Act_Conf_SL?((SL_options=="NORMAL")?((Act_slandin_longConditionandclose<=((1-(sl/100))*(fixnan(Position_Price))))):na):
((SL_options=="NORMAL")?((Act_slandin_longConditionandlow<=((1-(sl/100))*(fixnan(Position_Price))))):na)
ATR_long_sl=Act_Conf_SL?((SL_options=="ATR")?((Act_slandin_longConditionandclose<=(ATR_SL_Long))):na):
((SL_options=="ATR")?((Act_slandin_longConditionandlow<=(ATR_SL_Long))):na)
Both_long_sl=Act_Conf_SL?((SL_options=="BOTH")?((Act_slandin_longConditionandclose<=((1-(sl/100))*(fixnan(Position_Price))))or
((Act_slandin_longConditionandclose<=(ATR_SL_Long)))):na):
((SL_options=="BOTH")?((Act_slandin_longConditionandlow<=((1-(sl/100))*(fixnan(Position_Price))))or
((Act_slandin_longConditionandlow<=(ATR_SL_Long)))):na)
//â€”â€”â€”â€”â€”StopLossshortconditions
Normal_short_sl=Act_Conf_SL?((SL_options=="NORMAL")?((Act_slandin_shortConditionandclose>=((1+(sl/100))*(fixnan(Position_Price))))):na):
((SL_options=="NORMAL")?((Act_slandin_shortConditionandhigh>=((1+(sl/100))*(fixnan(Position_Price))))):na)
ATR_short_sl=Act_Conf_SL?((SL_options=="ATR")?((Act_slandin_shortConditionandclose>=(ATR_SL_Short))):na):
((SL_options=="ATR")?((Act_slandin_shortConditionandhigh>=(ATR_SL_Short))):na)
Both_short_sl=Act_Conf_SL?((SL_options=="BOTH")?((Act_slandin_shortConditionandclose>=((1+(sl/100))*(fixnan(Position_Price))))or
((Act_slandin_shortConditionandclose>=(ATR_SL_Short)))):na):
((SL_options=="BOTH")?((Act_slandin_shortConditionandhigh>=((1+(sl/100))*(fixnan(Position_Price))))or
((Act_slandin_shortConditionandhigh>=(ATR_SL_Short)))):na)
//â€”â€”â€”â€”â€”Getthetimeofthelastslclose
last_long_sl:=Normal_long_slorATR_long_slorBoth_long_sl?time:nz(last_long_sl[1])
last_short_sl:=Normal_short_slorATR_short_slorBoth_short_sl?time:nz(last_short_sl[1])
//â€”â€”â€”â€”â€”FinalStopLosscondition
Final_Long_sl:=(Normal_long_slorATR_long_slorBoth_long_sl)andlast_longCondition>nz(last_long_sl[1])andlast_longCondition>nz(last_long_tp[1])andnotFinal_Long_tp
Final_Short_sl:=(Normal_short_slorATR_short_slorBoth_short_sl)andlast_shortCondition>nz(last_short_sl[1])andlast_shortCondition>nz(last_short_tp[1])andnotFinal_Short_tp
//PlottinATRSL
plot(Act_sland(SL_options!="NORMAL")?in_longCondition?ATR_SL_Long[1]:ATR_SL_Short[1]:na,title="ATRSL",color=color.purple)
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”BollingerBandsRe-entry
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
BB_basis=sma(src,BB_length)
BB_dev=BB_mult*stdev(src,BB_length)
BB_upper=BB_basis+BB_dev
BB_lower=BB_basis-BB_dev
u_BB=plot(Act_BB?BB_upper:na,title="UpperBollingerBand",color=#009688,linewidth=2)
l_BB=plot(Act_BB?BB_lower:na,title="LowerBollingerBand",color=#f06292,linewidth=2)
fill(u_BB,l_BB,title="BollingerBandBackground",color=in_longCondition?#009688:#f06292,transp=95)
//â€”â€”â€”â€”â€”InitialBollingerBandsconditions
BB_long=Act_BBandin_longConditionandnot(DIPlus<DIMinusandADX>th)and(close<=BB_lower)and(close<last_open_longCondition*(1-(bbBetterPrice/100)))
BB_short=Act_BBandin_shortConditionandnot(DIPlus>DIMinusandADX>th)and(close>=BB_upper)and(close>last_open_shortCondition*(1+(bbBetterPrice/100)))
//â€”â€”â€”â€”â€”GetthetimeofthelastBBclose
last_long_BB:=BB_long?time:nz(last_long_BB[1])
last_short_BB:=BB_short?time:nz(last_short_BB[1])
//â€”â€”â€”â€”â€”FinalBollingerBandsconditionforlong
Final_long_BB:=BB_longandlast_Final_longCondition>nz(last_long_BB[1])and
last_longCondition>nz(last_long_tp[1])and
last_longCondition>nz(last_long_sl[1])andnotFinal_Long_sl
//â€”â€”â€”â€”â€”FinalBollingerBandsconditionforshort
Final_short_BB:=BB_shortandlast_Final_shortCondition>nz(last_short_BB[1])and
last_shortCondition>nz(last_short_tp[1])and
last_shortCondition>nz(last_short_sl[1])andnotFinal_Short_sl
//â€”â€”â€”â€”â€”FinalconfirmedRe-entriesonlong&shortconditions
Final_Long_BB=Final_long_BB[1]
Final_Short_BB=Final_short_BB[1]
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”SignalPlotting
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”TPLongLevels
tplLevel=(in_longConditionand
(last_longCondition>nz(last_long_tp[1]))and
(last_longCondition>nz(last_long_sl[1]))andnotFinal_Long_sl[1])?
(nLongs>1)?
(fixnan(Position_Price)*(1+tp_long)):(last_open_longCondition*(1+tp_long)):na
plot(tplLevel,title="LongTPLevel",style=plot.style_circles,color=color.lime,linewidth=2)
tpsLevel=(in_shortConditionand
(last_shortCondition>nz(last_short_tp[1]))and
(last_shortCondition>nz(last_short_sl[1]))andnotFinal_Short_sl[1])?
(nShorts>1)?
(fixnan(Position_Price)*(1-tp_short)):(last_open_shortCondition*(1-tp_short)):na
plot(tpsLevel,title="ShortTPLevel",style=plot.style_circles,color=color.red,linewidth=2)
//â€”â€”â€”â€”â€”Weekend
W_color=(dayofweek==dayofweek.sundayordayofweek==dayofweek.saturday)?color.white:na
bgcolor(W_color,title="Weekend",transp=95)
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Re-entryConditions
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”Re-entryonlongaftertp,slorXlong
ifFinal_Long_tporFinal_Long_sl
CondIni_long:=-1
sum_long:=0.0
nLongs:=na

//â€”â€”â€”â€”â€”Re-entryonshortaftertp,slorXshort
ifFinal_Short_tporFinal_Short_sl
CondIni_short:=1
sum_short:=0.0
nShorts:=na

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Backtest
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”Definingnewfinalunconfirmedlongconditions
_longCondition=(longCondandnotin_longCondition)or
(longCondandFinal_Long_tp)or
(longCondandFinal_Long_sl)or
(longCondandnotlongConditionand(last_long_tp>=nz(last_longCondition)))or
(longCondandnotlongConditionand(last_long_sl>=nz(last_longCondition)))

//â€”â€”â€”â€”â€”Definingnewfinalunconfirmedshortconditions
_shortCondition=(shortCondandnotin_shortCondition)or
(shortCondandFinal_Short_tp)or
(shortCondandFinal_Short_sl)or
(shortCondandnotshortConditionand(last_short_tp>=nz(last_shortCondition)))or
(shortCondandnotshortConditionand(last_short_sl>=nz(last_shortCondition)))
//â€”â€”â€”â€”â€”Testperioddeclaration
testPeriod=time>=timenow-backtest_time
//â€”â€”â€”â€”â€”VolumeFactorfordeterminequantities
Volume_Factor_Leverage=min(Max_Lev,max(1,round(volume/sma(volume,sma_length))))
last_dynamic_Leverage_long:=_longCondition?Volume_Factor_Leverage:nz(last_dynamic_Leverage_long[1])
last_dynamic_Leverage_short:=_shortCondition?Volume_Factor_Leverage:nz(last_dynamic_Leverage_short[1])
//â€”â€”â€”â€”â€”Enteringlongpositions
if(_longCondition)
strategy.entry("long",strategy.long,qty=Volume_Factor_Leverage*quanTity,when=Act_BTandtestPeriod)
if(Final_long_BB)
strategy.entry("long",strategy.long,qty=last_dynamic_Leverage_long*quanTity,when=Act_BTandtestPeriod)

//â€”â€”â€”â€”â€”Enteringshortpositions
if(_shortCondition)
strategy.entry("short",strategy.short,qty=Volume_Factor_Leverage*quanTity,when=Act_BTandtestPeriod)
if(Final_short_BB)
strategy.entry("short",strategy.short,qty=last_dynamic_Leverage_short*quanTity,when=Act_BTandtestPeriod)
//â€”â€”â€”â€”â€”ClosingpositionswithfirstlongTP
strategy.exit("Tpl","long",
profit=(abs((last_open_longCondition*(1+tp_long))-last_open_longCondition)/syminfo.mintick),
limit=nLongs>=1?strategy.position_avg_price*(1+tp_long):na,
loss=Act_Conf_SL==false?
(iff(Act_sland(SL_options=="NORMAL"),(abs((last_open_longCondition*(1-(sl/100)))-last_open_longCondition)/syminfo.mintick),
iff(Act_sland(SL_options=="ATR"),(abs(ATR_SL_Long-last_open_longCondition)/syminfo.mintick),
iff(Act_sland(SL_options=="BOTH")and((abs((last_open_longCondition*(1-(sl/100)))-last_open_longCondition)/syminfo.mintick)<
(abs(ATR_SL_Long-last_open_longCondition)/syminfo.mintick)),(abs((last_open_longCondition*(1-(sl/100)))-last_open_longCondition)/syminfo.mintick),
iff(Act_sland(SL_options=="BOTH")and((abs((last_open_longCondition*(1-(sl/100)))-last_open_longCondition)/syminfo.mintick)>
(abs(ATR_SL_Long-last_open_longCondition)/syminfo.mintick)),(abs(ATR_SL_Long-last_open_longCondition)/syminfo.mintick),na))))):na,
stop=Act_Conf_SL==falseandnLongs>=1?
(iff(Act_sland(SL_options=="NORMAL"),((1-(sl/100))*strategy.position_avg_price),
iff(Act_sland(SL_options=="ATR"),ATR_SL_Long,
iff(Act_sland(SL_options=="BOTH")and(((1-(sl/100))*strategy.position_avg_price)>ATR_SL_Long),((1-(sl/100))*strategy.position_avg_price),
iff(Act_sland(SL_options=="BOTH")and(((1-(sl/100))*strategy.position_avg_price)<ATR_SL_Long),ATR_SL_Long,na))))):na)
//Cancelinglongexitorderstoavoidsimultaneitywithre-entry
strategy.cancel("Tpl",when=Final_long_BB)
//â€”â€”â€”â€”â€”ClosingpositionswithfirstshortTP
strategy.exit("Tps","short",
profit=(abs((last_open_shortCondition*(1-tp_short))-last_open_shortCondition)/syminfo.mintick),
limit=nShorts>=1?strategy.position_avg_price*(1-(tp_short)):na,
loss=Act_Conf_SL==false?
(iff(Act_sland(SL_options=="NORMAL"),(abs((last_open_shortCondition*(1+(sl/100)))-last_open_shortCondition)/syminfo.mintick),
iff(Act_sland(SL_options=="ATR"),(abs(ATR_SL_Short-last_open_shortCondition)/syminfo.mintick),
iff(Act_sland(SL_options=="BOTH")and((abs((last_open_shortCondition*(1+(sl/100)))-last_open_shortCondition)/syminfo.mintick)<
(abs(ATR_SL_Short-last_open_shortCondition)/syminfo.mintick)),(abs((last_open_shortCondition*(1+(sl/100)))-last_open_shortCondition)/syminfo.mintick),
iff(Act_sland(SL_options=="BOTH")and((abs((last_open_shortCondition*(1+(sl/100)))-last_open_shortCondition)/syminfo.mintick)>
(abs(ATR_SL_Short-last_open_shortCondition)/syminfo.mintick)),(abs(ATR_SL_Short-last_open_shortCondition)/syminfo.mintick),na))))):na,
stop=Act_Conf_SL==falseandnShorts>=1?
(iff(Act_sland(SL_options=="NORMAL"),((1+(sl/100))*strategy.position_avg_price),
iff(Act_sland(SL_options=="ATR"),ATR_SL_Short,
iff(Act_sland(SL_options=="BOTH")and(((1+(sl/100))*strategy.position_avg_price)<ATR_SL_Short),((1+(sl/100))*strategy.position_avg_price),
iff(Act_sland(SL_options=="BOTH")and(((1+(sl/100))*strategy.position_avg_price)>ATR_SL_Short),ATR_SL_Short,na))))):na)
//Cancelingshortexitorderstoavoidsimultaneitywithre-entry
strategy.cancel("Tps",when=Final_short_BB)
//â€”â€”â€”â€”â€”ClosingallpositionswithXlong/Xshort
strategy.close_all(when=(Final_Long_slandAct_Conf_SL)or(Final_Short_slandAct_Conf_SL))
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”byXaviz
Expand (598 lines)
