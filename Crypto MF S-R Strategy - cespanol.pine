Script Name: Crypto MF S-R Strategy - cespanol
Author: cespanol
Description: This strategy uses the Crypto_MF SR indicator to autogenerate horizontal support/resistance lines. The strategy involves alerts for buying when price tests support lines and selling when price tests resistance lines. The time filter was added to backtest specific dates and fine tune the inputs for best results.


Credit to Crypto_MF for original source code and...
PineScript code:

Pine Script™ strategy
Crypto MF S/R Strategy - cespanol
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  cespanol
//Credit  to  CryptoMF  for  the  source  code.
//Credit  to  rouxam  for  the  3commas  backtesting  template.
//This  strategy  uses  CryptoMF's  indicator  to  autogenerate  horizontal  support/resistance  lines.
//Buy  signals  are  generated  on  support  tests  and  sell  signals  are  generated  on  resistance  tests.
//Rouxam's  code  is  used  to  include  3commas  input  settings.
//Suggestions/code  clean-up  are  appreciated!
//@version=4
strategy("Cespanol  S/R  V3  Strategy",  overlay=true,  pyramiding=99,  process_orders_on_close=true,  commission_type=strategy.commission.percent,  commission_value=0.05,  initial_capital=10000)
//  Crypto  MF  Inputs
ln  =  input(1,    title="Pivot  Length",  type=input.integer)            //  Number  of  bars  to  use  to  calculate  pivot
mb  =  input(1,    title="Max  Breaks",  type=input.integer)                //  Maximum  number  of  times  a  line  can  be  broken  before  it's  invalidated
//md  =  input(50,  title="Max  Distance  %",  type=input.integer)    //  Maximum  distance  PA  can  move  away  from  line  before  it's  invalidated
//fo  =  input(2,    title="Frontrun/Overshoot  Threshold  %",  type=input.float,  step=0.1)    //  If  PA  reverses  within  this  distance  of  an  existing  S&R  line,  consider  it  a  frontrun  /  overshoot
fo  =  ((atr(20)  /  close)  *  100)  /  2                                                        //  Dynamic  fo  using  ATR
md  =  fo  *  30                                                                                                    //  Dynamic  md
alt  =  input(true,  title="Show  Level  Test",  type=input.bool)                                      //  Show  arrow  when  level  is  tested
mtm  =  input(3,  title="Level  Test  Sensitivity",  minval=0,  type=input.integer)    //  (this  value  *  10  *  mintick  <>  level  to  trigger  test)
alb  =  input(false,  title="Show  Level  Break",  type=input.bool)                                  //  Colourise  candle  if  a  level  is  broken
//  Line  colors
lc  =  input(color.blue,    title="Line  Colour",  type=input.color)                                //  Default  line  color
//  Important  Note  :  Initial  Capital  above  is  written  to  match  the  default  value  based  on  bot  parameters.
//                                    It  is  expected  the  user  will  update  the  initial_capital  via  the  GUI  Parameters  >  Properties  tab
//                                    A  warning  will  displayed  in  case  initial  capital  and  max  amount  for  bot  usage  do  not  match.
//  ----------------------------------
//  Rouxam  Strategy  Inputs
//  ----------------------------------
dsc                                          =  input(defval="Cespanol  S/R",                  title="Deal  Start  Condition",  options=["Cespanol  S/R",  "Start  ASAP",  "RSI-7",  "TV  presets"])
base_order                            =  input(100.0,  type=input.float,title="Base  Order")
safe_order                            =  input(7.0,  type=input.float,title="Safety  Order")
order_size_type                  =  input(defval="%  of  equity",                  title="Order  Size  Type",  options=["Fixed",  "%  of  equity"])
max_safe_order                    =  input(0,                                            title="Max  Safety  Trades  Count",  minval=0,  maxval=99,  step=1)
price_deviation                  =  input(1,  type=input.float,    title="Price  deviation  to  open  safety  order  (%)",  minval=0.0,  step=0.1)/100
safe_order_volume_scale  =  input(1,  type=input.float,    title="Safety  Order  Volume  Scale",  step=0.1)
safe_order_step_scale      =  input(1,  type=input.float,    title="Safety  Order  Step  Scale",  step=0.1)
start_time                            =  input(defval=timestamp("01  Sept  2021  06:00"),      title="Start  Time",          type=input.time)
end_time                                =  input(defval=timestamp("31  Dec  2021  20:00"),      title="End  Time",              type=input.time)
take_profit                          =  input(999,  type=input.float,    title="Take  Profit  (%)",  minval=0.0,  step=0.1)/100
take_profit_type                =  input(defval="%  from  total  volume",  title="Take  Profit  Type",  options=["%  from  total  volume",  "%  from  base  order"])
ttp                                          =  input(0.0,  type=input.float,    title="Trailing  Take  Profit  (%)  [0  =  Disabled]",  minval=0.0,  step=0.1)/100
stop_loss                              =  input(0.0,  type=input.float,    title="Stop  Loss  (%)  [0  =  Disabled]",  minval=0.0,  step=0.1)/100
dsc_rsi_threshold              =  input(defval=30,                            title="[RSI-7  only]  RSI  Threshold",  minval=1,  maxval=99)
dsc_technicals                    =  input(defval="Strong",                title="[TV  presets  only]  Strength",  options=["Strong",  "Weak"])
dsc_res                                  =  input("",                                          title="[RSI-7  and  TV  presets  Only]  Indicator  Timeframe",  type=input.resolution)
bot_direction                      =  input(defval="Long",                    title="Bot  Direction",  options=["Long",  "Short"])
//  CryptoMF  Array  definitions
var  sr  =  array.new_float(15,  na)                //  SR  levels
var  br  =  array.new_int(15,  0)                      //  Amount  of  times  an  S&R  line  has  been  broken
var  li  =  array.new_line(15,  na)                  //  Lines
//  Check  if  a  pivot  is  actually  just  a  swing  failure  off  an  existing  S&R  level
issfp(level)  =>
        ((open[ln]  <  level)  and  (high[ln]  >  level)  and  (close[ln]  <  level))  or  ((open[ln]  >  level)  and  (low[ln]  <  level)  and  (close[ln]  >  level))  or  ((open[ln+1]  <  level)  and  (high[ln+1]  >  level)  and  (close[ln+1]  <  level))  or  ((open[ln+1]  >  level)  and  (low[ln+1]  <  level)  and  (close[ln+1]  >  level))
//  Check  if  pivot  is  actually  just  a  frontrun  or  overshoot  of  an  existing  S&R  level  (<fo%  diff)
isfros(level)  =>
        ((open[ln]  <  level)  and  ((abs(level  -  high[ln])  /  level)  *  100  <  fo)  and  (close[ln]  <  level))  or  ((open[ln]  >  level)  and  ((abs(low[ln]  -  level)  /  level)  *  100  <  fo)  and  (close[ln]  >  level))  or  ((open[ln-1]  <  level)  and  ((abs(level  -  high[ln-1])  /  level)  *  100  <  fo)  and  (close[ln-1]  <  level))  or  ((open[ln-1]  >  level)  and  ((abs(low[ln-1]  -  level)  /  level)  *  100  <  fo)  and  (close[ln-1]  >  level))
//  Check  for  S&R  level  break
isbreak(level)  =>
        ((open  <  level)  and  (close  >  level))  or  ((open  >  level)  and  (close  <  level))
//  Check  potential  pivot  to  see  it  if  just  a  break  failure  of  exisitng  S&R  level  (frontrun  or  sfp)
isbreakfailure()  =>
        bf  =  array.new_int(15,  0)
        for  i  =  0  to  14
                level  =  array.get(sr,  i)
                array.set(bf,  i,  (issfp(level)  or  isfros(level))  ?  1  :  0)
        array.max(bf)  ==  1  ?  true  :  false
//  Check  if  candle  breaks  a  level
lvlbreak()  =>
        result  =  0
        for  i  =  0  to  14
                level  =array.get(sr,i)
if(open<levelandclose>level)
result:=1
if(open>levelandclose<level)
result:=-1
result
//Checkifcandleisatestoflevel
lvltest()=>
result=0
fori=0to14
level=array.get(sr,i)
if(open<levelandhigh>level-(syminfo.mintick*10*mtm)andclose<level)
result:=-1
if(open>levelandlow<level+(syminfo.mintick*10*mtm)andclose>level)
result:=1
result
//Getlevels%distancefromcurrentclose
pctfromclose(level)=>
(abs(level-close)/close)*100

//CustomPivotFunction
pv()=>
c=close
bl=ln*2+1
m=c[ln]
ph=m==highest(c,bl)?true:false
pl=m==lowest(c,bl)?true:false
(phorpl)andnotisbreakfailure()?c[ln]:na
p=pv()//Getpivot
lb=ln//Offsetofpivotline
//Findanunusedpivotlevelanduseit
ifnotna(p)
fori=0to14
ifna(array.get(sr,i))
array.set(li,i,line.new(bar_index-lb,p,bar_index,p,extend=extend.right,color=lc))
array.set(sr,i,p)
break
//CountnumberoftimesaS&Rlinehasbeenbroken
fori=0to14
ifisbreak(array.get(sr,i))
array.set(br,i,array.get(br,i)+1)
//ChecknumberoftimesanS&Rlinehasbeenbroken,orcalculatedistancetocurrentPAandinvalidatetheS&Rlevelifnecessary
fori=0to14
ifarray.get(br,i)>=mborpctfromclose(array.get(sr,i))>=md
array.set(sr,i,na)
array.set(br,i,0)
line.delete(array.get(li,i))
array.set(li,i,na)
//LevelTestPlots
lts=lvltest()==1//LevelTest(Support)
ltr=lvltest()==-1//LevelTest(Resistance)
plotshape(altandlts,style=shape.cross,location=location.belowbar,color=color.green,offset=0,title="LevelTest(Support)",transp=0)
plotshape(altandltr,style=shape.cross,location=location.abovebar,color=color.red,offset=0,title="LevelTest(Resistance)",transp=0)
//LevelBreakPlots
lbr=lvlbreak()==1//LevelBreak(Resistance)
lbs=lvlbreak()==-1//LevelBreak(Support)
barcolor(albandlbr?color.green:(albandlbs?color.red:na),title="LevelBreak")
//Alerts
alertcondition(ltsorltrorlbrorlbs,"LevelTestorBreak","LevelTestorBreak")
alertcondition(ltsorltr,"LevelTest","LevelTest")
alertcondition(lts,"LevelTest(Support)","LevelTest(Support)")
alertcondition(ltr,"LevelTest(Resistance)","LevelTest(Resistance)")
alertcondition(lbrorlbs,"LevelBreak","LevelBreak")
alertcondition(lbs,"LevelBreak(Support)","LevelBreak(Support)")
alertcondition(lbr,"LevelBreak(Resistance)","LevelBreak(Resistance)")
//EndCryptoMF
//CespanolStrategy-Longsonly
isLong=(strategy.position_size>0)
strategy.risk.allow_entry_in(strategy.direction.long)
//Rouxamcodes
//----------------------------------
//Declarations
//----------------------------------
varbo_level=0.0
varlast_so_level=0.0
varso_level=0.0
varttp_active=false
varttp_extremum=0.0
varttp_level=0.0
varstop_level=0.0
vartake_profit_level=0.0
vardeal_counter=0
varstop_loss_counter=0
varstop_loss_on_bar=false
varlatest_price=close
vardeal_start_condition=false
varstart_time_actual=start_time
varend_time_actual=start_time
//CONSTANTS
varfloatinit_price=na
varIS_LONG=bot_direction=="Long"
//----------------------------------
//Utilitiesfunctions
//----------------------------------
pretty_date(t)=>tostring(dayofmonth(t))+"/"+tostring(month(t))+"/"+tostring(year(t))
within_window()=>time>=start_timeandtime<=end_time
base_order_size()=>order_size_type=="Fixed"?base_order:base_order/100*strategy.equity
safe_order_size()=>order_size_type=="Fixed"?safe_order:safe_order/100*strategy.equity
safety_order_deviation(index)=>price_deviation*pow(safe_order_step_scale,index-1)
safety_order_price(index,last_safety_order_price)=>
ifIS_LONG
last_safety_order_price*(1-safety_order_deviation(index))
else
last_safety_order_price*(1+safety_order_deviation(index))
safety_order_qty(index)=>safe_order_size()*pow(safe_order_volume_scale,index-1)
max_amount_for_bot_usage()=>
vartotal_qty=0.0
varlast_order_qty=0.0
total_qty:=base_order_size()
last_order_qty:=safe_order_size()
ifmax_safe_order>0
forindex=1tomax_safe_order
total_qty:=total_qty+safety_order_qty(index)
total_qty//returnedvalue
max_deviation()=>
vartotal_deviation=0.0
total_deviation:=0.0
forindex=1tomax_safe_order
total_deviation:=total_deviation+safety_order_deviation(index)
currency_format()=>
ifsyminfo.currency=="USDT"orsyminfo.currency=="USD"orsyminfo.currency=="TUSD"orsyminfo.currency=="BUSD"orsyminfo.currency=="USDC"orsyminfo.currency=="EUR"orsyminfo.currency=="AUD"
"#.##"
elseifsyminfo.currency=="BTC"
"#.########"
else
//TODO(rouxam)listmoreoptions
"#.####"
//***********************************
//DealStartConditionStrategies
//***********************************
//RSI-7
//***********************************
rsi_signal()=>
//Regularstratwouldbecrossoverbutnotfor3CDCABot
rsi7=rsi(close,7)
ifIS_LONG
[rsi7<dsc_rsi_threshold,close]
else
[rsi7>dsc_rsi_threshold,close]
//TVpresets
//***********************************
//ThiswholesectionisfromtheTradingView"TechnicalRatings"code.
//AddingtheTechnicalRatings"indicator"asinputtothis"strategy"isnotsufficientforourpurpose,
//Thereforethecodeiscopy-pasted.
//***********************************
//AwesomeOscillator
AO()=>
sma(hl2,5)-sma(hl2,34)
//StochasticRSI
StochRSI()=>
rsi1=rsi(close,14)
K=sma(stoch(rsi1,rsi1,rsi1,14),3)
D=sma(K,3)
[K,D]
//UltimateOscillator
tl()=>close[1]<low?close[1]:low
uo(ShortLen,MiddlLen,LongLen)=>
Value1=sum(tr,ShortLen)
Value2=sum(tr,MiddlLen)
Value3=sum(tr,LongLen)
Value4=sum(close-tl(),ShortLen)
Value5=sum(close-tl(),MiddlLen)
Value6=sum(close-tl(),LongLen)
floatUO=na
ifValue1!=0andValue2!=0andValue3!=0
var0=LongLen/ShortLen
var1=LongLen/MiddlLen
Value7=(Value4/Value1)*(var0)
Value8=(Value5/Value2)*(var1)
Value9=(Value6/Value3)
UO:=(Value7+Value8+Value9)/(var0+var1+1)
UO
//IchimokuCloud
donchian(len)=>avg(lowest(len),highest(len))
ichimoku_cloud()=>
conversionLine=donchian(9)
baseLine=donchian(26)
leadLine1=avg(conversionLine,baseLine)
leadLine2=donchian(52)
[conversionLine,baseLine,leadLine1,leadLine2]
calcRatingMA(ma,src)=>na(ma)orna(src)?na:(ma==src?0:(ma<src?1:-1))
calcRating(buy,sell)=>buy?1:(sell?-1:0)
ta_presets_signal()=>
//==============MA=================
SMA10=sma(close,10)
SMA20=sma(close,20)
SMA30=sma(close,30)
SMA50=sma(close,50)
SMA100=sma(close,100)
SMA200=sma(close,200)

EMA10=ema(close,10)
EMA20=ema(close,20)
EMA30=ema(close,30)
EMA50=ema(close,50)
EMA100=ema(close,100)
EMA200=ema(close,200)

HullMA9=hma(close,9)

//VolumeWeightedMovingAverage(VWMA)
VWMA=vwma(close,20)

[IC_CLine,IC_BLine,IC_Lead1,IC_Lead2]=ichimoku_cloud()

//=======Other=============
//RelativeStrengthIndex,RSI
RSI=rsi(close,14)

//Stochastic
lengthStoch=14
smoothKStoch=3
smoothDStoch=3
kStoch=sma(stoch(close,high,low,lengthStoch),smoothKStoch)
dStoch=sma(kStoch,smoothDStoch)

//CommodityChannelIndex,CCI
CCI=cci(close,20)

//AverageDirectionalIndex
floatadxValue=na,floatadxPlus=na,floatadxMinus=na
[P,M,V]=dmi(14,14)
adxValue:=V
adxPlus:=P
adxMinus:=M
//AwesomeOscillator
ao=AO()

//Momentum
Mom=mom(close,10)
//MovingAverageConvergence/Divergence,MACD
[macdMACD,signalMACD,_]=macd(close,12,26,9)
//StochasticRSI
[Stoch_RSI_K,Stoch_RSI_D]=StochRSI()
//WilliamsPercentRange
WR=wpr(14)

//Bull/BearPower
BullPower=high-ema(close,13)
BearPower=low-ema(close,13)
//UltimateOscillator
UO=uo(7,14,28)
ifnotna(UO)
UO:=UO*100
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

PriceAvg=ema(close,50)
DownTrend=close<PriceAvg
UpTrend=close>PriceAvg
//calculatetradingrecommendationbasedonSMA/EMA
floatratingMA=0
floatratingMAC=0

ifnotna(SMA10)
ratingMA:=ratingMA+calcRatingMA(SMA10,close)
ratingMAC:=ratingMAC+1
ifnotna(SMA20)
ratingMA:=ratingMA+calcRatingMA(SMA20,close)
ratingMAC:=ratingMAC+1
ifnotna(SMA30)
ratingMA:=ratingMA+calcRatingMA(SMA30,close)
ratingMAC:=ratingMAC+1
ifnotna(SMA50)
ratingMA:=ratingMA+calcRatingMA(SMA50,close)
ratingMAC:=ratingMAC+1
ifnotna(SMA100)
ratingMA:=ratingMA+calcRatingMA(SMA100,close)
ratingMAC:=ratingMAC+1
ifnotna(SMA200)
ratingMA:=ratingMA+calcRatingMA(SMA200,close)
ratingMAC:=ratingMAC+1
ifnotna(EMA10)
ratingMA:=ratingMA+calcRatingMA(EMA10,close)
ratingMAC:=ratingMAC+1
ifnotna(EMA20)
ratingMA:=ratingMA+calcRatingMA(EMA20,close)
ratingMAC:=ratingMAC+1
ifnotna(EMA30)
ratingMA:=ratingMA+calcRatingMA(EMA30,close)
ratingMAC:=ratingMAC+1
ifnotna(EMA50)
ratingMA:=ratingMA+calcRatingMA(EMA50,close)
ratingMAC:=ratingMAC+1
ifnotna(EMA100)
ratingMA:=ratingMA+calcRatingMA(EMA100,close)
ratingMAC:=ratingMAC+1
ifnotna(EMA200)
ratingMA:=ratingMA+calcRatingMA(EMA200,close)
ratingMAC:=ratingMAC+1

ifnotna(HullMA9)
ratingHullMA9=calcRatingMA(HullMA9,close)
ratingMA:=ratingMA+ratingHullMA9
ratingMAC:=ratingMAC+1

ifnotna(VWMA)
ratingVWMA=calcRatingMA(VWMA,close)
ratingMA:=ratingMA+ratingVWMA
ratingMAC:=ratingMAC+1

floatratingIC=na
ifnot(na(IC_Lead1)orna(IC_Lead2)orna(close)orna(close[1])orna(IC_BLine)orna(IC_CLine))
ratingIC:=calcRating(
IC_Lead1>IC_Lead2andclose>IC_Lead1andclose<IC_BLineandclose[1]<IC_CLineandclose>IC_CLine,
IC_Lead2>IC_Lead1andclose<IC_Lead2andclose>IC_BLineandclose[1]>IC_CLineandclose<IC_CLine)
ifnotna(ratingIC)
ratingMA:=ratingMA+ratingIC
ratingMAC:=ratingMAC+1

ratingMA:=ratingMAC>0?ratingMA/ratingMAC:na

floatratingOther=0
floatratingOtherC=0

ratingRSI=RSI
ifnot(na(ratingRSI)orna(ratingRSI[1]))
ratingOtherC:=ratingOtherC+1
ratingOther:=ratingOther+calcRating(ratingRSI<30andratingRSI[1]<ratingRSI,ratingRSI>70andratingRSI[1]>ratingRSI)

ifnot(na(kStoch)orna(dStoch)orna(kStoch[1])orna(dStoch[1]))
ratingOtherC:=ratingOtherC+1
ratingOther:=ratingOther+calcRating(kStoch<20anddStoch<20andkStoch>dStochandkStoch[1]<dStoch[1],kStoch>80anddStoch>80andkStoch<dStochandkStoch[1]>dStoch[1])

ratingCCI=CCI
ifnot(na(ratingCCI)orna(ratingCCI[1]))
ratingOtherC:=ratingOtherC+1
ratingOther:=ratingOther+calcRating(ratingCCI<-100andratingCCI>ratingCCI[1],ratingCCI>100andratingCCI<ratingCCI[1])

ifnot(na(adxValue)orna(adxPlus[1])orna(adxMinus[1])orna(adxPlus)orna(adxMinus))
ratingOtherC:=ratingOtherC+1
ratingOther:=ratingOther+calcRating(adxValue>20andadxPlus[1]<adxMinus[1]andadxPlus>adxMinus,adxValue>20andadxPlus[1]>adxMinus[1]andadxPlus<adxMinus)

ifnot(na(ao)orna(ao[1]))
ratingOtherC:=ratingOtherC+1
ratingOther:=ratingOther+calcRating(crossover(ao,0)or(ao>0andao[1]>0andao>ao[1]andao[2]>ao[1]),crossunder(ao,0)or(ao<0andao[1]<0andao<ao[1]andao[2]<ao[1]))

ifnot(na(Mom)orna(Mom[1]))
ratingOtherC:=ratingOtherC+1
ratingOther:=ratingOther+calcRating(Mom>Mom[1],Mom<Mom[1])

ifnot(na(macdMACD)orna(signalMACD))
ratingOtherC:=ratingOtherC+1
ratingOther:=ratingOther+calcRating(macdMACD>signalMACD,macdMACD<signalMACD)

floatratingStoch_RSI=na
ifnot(na(DownTrend)orna(UpTrend)orna(Stoch_RSI_K)orna(Stoch_RSI_D)orna(Stoch_RSI_K[1])orna(Stoch_RSI_D[1]))
ratingStoch_RSI:=calcRating(
DownTrendandStoch_RSI_K<20andStoch_RSI_D<20andStoch_RSI_K>Stoch_RSI_DandStoch_RSI_K[1]<Stoch_RSI_D[1],
UpTrendandStoch_RSI_K>80andStoch_RSI_D>80andStoch_RSI_K<Stoch_RSI_DandStoch_RSI_K[1]>Stoch_RSI_D[1])
ifnotna(ratingStoch_RSI)
ratingOtherC:=ratingOtherC+1
ratingOther:=ratingOther+ratingStoch_RSI

floatratingWR=na
ifnot(na(WR)orna(WR[1]))
ratingWR:=calcRating(WR<-80andWR>WR[1],WR>-20andWR<WR[1])
ifnotna(ratingWR)
ratingOtherC:=ratingOtherC+1
ratingOther:=ratingOther+ratingWR

floatratingBBPower=na
ifnot(na(UpTrend)orna(DownTrend)orna(BearPower)orna(BearPower[1])orna(BullPower)orna(BullPower[1]))
ratingBBPower:=calcRating(
UpTrendandBearPower<0andBearPower>BearPower[1],
DownTrendandBullPower>0andBullPower<BullPower[1])
ifnotna(ratingBBPower)
ratingOtherC:=ratingOtherC+1
ratingOther:=ratingOther+ratingBBPower

floatratingUO=na
ifnot(na(UO))
ratingUO:=calcRating(UO>70,UO<30)
ifnotna(ratingUO)
ratingOtherC:=ratingOtherC+1
ratingOther:=ratingOther+ratingUO

ratingOther:=ratingOtherC>0?ratingOther/ratingOtherC:na

floatratingTotal=0
floatratingTotalC=0
ifnotna(ratingMA)
ratingTotal:=ratingTotal+ratingMA
ratingTotalC:=ratingTotalC+1
ifnotna(ratingOther)
ratingTotal:=ratingTotal+ratingOther
ratingTotalC:=ratingTotalC+1
ratingTotal:=ratingTotalC>0?ratingTotal/ratingTotalC:na

//littlepieceof@rouxamlogic
varboolstart_condition=false
floatbound=dsc_technicals=="Strong"?0.5:0.1
ifIS_LONG
start_condition:=ratingTotal>bound
else
start_condition:=ratingTotal<-bound
[start_condition,close]

//----------------------------------
//(Re-)Initialize
//----------------------------------
varmax_amount=max_amount_for_bot_usage()
varmax_dev=max_deviation()
init_price:=na(init_price)andwithin_window()?open:init_price
latest_price:=within_window()?close:latest_price
//Actualizethestartandendtimeofthebacktestingwindowbecausenumberofbarsislimited.
//NOTE:limitsonnumberofavailablebars:
//TradingViewFREEaccount:5000barsavailable,
//TradingViewPRO/PRO+account:10000barsavailable,
//TradingViewPREMIUMaccount:20000barsavailable.
start_time_actual:=barstate.isfirstandtime>start_time_actual?time:start_time_actual
end_time_actual:=time>end_time_actualandtime<=end_time?time:end_time_actual
ifstrategy.position_size==0.0
ttp_extremum:=0.0
ttp_active:=false
deal_start_condition:=false
//----------------------------------
//OpendealwithBaseOrderonDealStartCondition
//----------------------------------
[dsc_rsi,bo_level_rsi]=security(syminfo.tickerid,dsc_res,rsi_signal())
[dsc_ta,bo_level_ta]=security(syminfo.tickerid,dsc_res,ta_presets_signal())
if(strategy.opentrades==0andwithin_window()andclose>0andstrategy.equity>0.0)
//Computedealstartcondition
ifdsc=="StartASAP"
deal_start_condition:=true
bo_level:=close
ifdsc=="RSI-7"
deal_start_condition:=dsc_rsi
bo_level:=bo_level_rsi
ifdsc=="TVpresets"
deal_start_condition:=dsc_ta
bo_level:=bo_level_ta
ifdsc=="CespanolS/R"
deal_start_condition:=lts
bo_level:=close
//PlaceBuyOrder
ifdeal_start_condition
deal_counter:=deal_counter+1
ifIS_LONG
strategy.entry("Buy",limit=bo_level,long=strategy.long,qty=base_order_size()/bo_level)
else
strategy.entry("Buy",limit=bo_level,long=strategy.short,qty=base_order_size()/bo_level)
last_so_level:=bo_level
//PlaceSafetyOrders
ifmax_safe_order>0
forindex=1tomax_safe_order
so_level:=safety_order_price(index,last_so_level)
so_name="SO"+tostring(index)
ifIS_LONG
strategy.entry(so_name,long=strategy.long,limit=so_level,qty=safety_order_qty(index)/so_level)
else
strategy.entry(so_name,long=strategy.short,limit=so_level,qty=safety_order_qty(index)/so_level)
last_so_level:=so_level
//----------------------------------
//CloseDealonSL,TP,TTP,orResistanceTest
//----------------------------------
ifabs(strategy.position_size)>0
take_profit_factor=IS_LONG?(1+take_profit):(1-take_profit)
stop_loss_factor=IS_LONG?(1-stop_loss):(1+stop_loss)
ttp_factor=IS_LONG?(1-ttp):(1+ttp)
stop_level:=bo_level*stop_loss_factor
iftake_profit_type=="%fromtotalvolume"
take_profit_level:=strategy.position_avg_price*take_profit_factor
else
take_profit_level:=bo_level*take_profit_factor
//StopLoss
stop_loss_on_bar:=false
ifstop_loss>max_devandnotttp_active
ifIS_LONGandlow<stop_level
stop_loss_counter:=stop_loss_counter+1
strategy.exit(id="x",stop=stop_level,comment="SL")
stop_loss_on_bar:=true
elseifnotIS_LONGandhigh>stop_level
stop_loss_counter:=stop_loss_counter+1
strategy.exit(id="x",stop=stop_level,comment="SL")
stop_loss_on_bar:=true
ifnotstop_loss_on_bar
ifttp==0.0
//Simpletakeprofit
strategy.exit(id="x",limit=take_profit_level,comment="TP")
else
//Trailingtakeprofit
ifIS_LONGandhigh>=take_profit_level
ttp_extremum:=max(high,ttp_extremum)
ttp_active:=true
ifnotIS_LONGandlow<=take_profit_level
ttp_extremum:=min(low,ttp_extremum)
ttp_active:=true
ifttp_active
ttp_level:=ttp_extremum*ttp_factor
strategy.exit(id="x",stop=ttp_level,comment="TTP")
ifisLongandltr
strategy.entry("Sell",strategy.short)
//Cleanup
if(crossunder(strategy.opentrades,0.5))
strategy.close_all()
strategy.cancel_all()
//----------------------------------
//Results
//----------------------------------
profit=max(strategy.equity,0.0)-strategy.initial_capital
profit_pct=profit/strategy.initial_capital
add_line(the_table,the_row,the_label,the_value,is_warning)=>
//ifprovidingavalue,therowisshownas:the_label|the_value
//else:the_labelisconsideredtobeatitle
is_even=(the_row%2)==1
is_title=na(the_value)?true:false
text=is_title?"":tostring(the_value)
bg_color=is_title?color.black:is_warning?color.red:is_even?color.silver:color.white
text_color=is_title?color.white:color.black
left_cell_align=is_title?text.align_right:text.align_left
table.cell(the_table,0,the_row,the_label,bgcolor=bg_color,text_color=text_color,text_size=size.auto,text_halign=left_cell_align)
table.cell(the_table,1,the_row,text,bgcolor=bg_color,text_color=text_color,text_size=size.auto,text_halign=text.align_right)
varstringwarnings_text=""
varwarnings=array.new_string(0,"")
if(max_amount/strategy.initial_capital>1.005ormax_amount/strategy.initial_capital<0.995)
iforder_size_type=="Fixed"
array.push(warnings,"StrategyInitialCapital(currently"+tostring(strategy.initial_capital,currency_format())+""+syminfo.currency
+")mustmatchMaxAmountForBotUsage("+tostring(max_amount,currency_format())+""+syminfo.currency+")")
else
array.push(warnings,"PleaseadjustBaseOrderandSafeOrderpercentagetoreach100%ofusageofcapital.Currentlyusing"+tostring(max_amount/strategy.initial_capital,"#.##%"))
if(max_dev>=1.0)
array.push(warnings,"MaxPriceDeviation("+tostring(max_dev,"#.##%")+")cannotbe>=100.0%")
if(stop_loss>0.0andstop_loss<=max_dev)
array.push(warnings,"StopLoss("+tostring(stop_loss,"#.##%")+")shouldbegreaterthanMaxPriceDeviation("+tostring(max_dev,"#.##%")+")")
if((timeframe.isminutesandnot(tonumber(timeframe.period)<30))ortimeframe.isdwm)
array.push(warnings,"Backtestingmaybeinaccurate.Recommendedtousetimeframeof15morless")
if(ttp>=take_profit)
array.push(warnings,"TrailingTakeProfit("+tostring(ttp,"#.##%")+")cannotbegreaterthanTakeProfit("+tostring(take_profit,"#.##%")+")")
//Makingtheresultstable
varresults_table=table.new(position.top_right,2,20,frame_color=color.black)
curr_row=-1
None=int(na)
curr_row+=1,add_line(results_table,curr_row,"Botsetup",None,false)
if(array.size(warnings)>0)
forindex=1toarray.size(warnings)
curr_row+=1
add_line(results_table,curr_row,"Pleasereviewyourstrategysettings",array.pop(warnings),true)
curr_row+=1,add_line(results_table,curr_row,"Dates",pretty_date(start_time_actual)+"to"+pretty_date(end_time_actual),false)
curr_row+=1,add_line(results_table,curr_row,"DealStartCondition",dsc,false)
curr_row+=1,add_line(results_table,curr_row,"BaseandSafetyOrders","BO:"+tostring(base_order,currency_format())+""+(order_size_type=="Fixed"?"":"%")+syminfo.currency+"/"+"SO:"+tostring(safe_order,currency_format())+""+(order_size_type=="Fixed"?"":"%")+syminfo.currency,false)
curr_row+=1,add_line(results_table,curr_row,"PriceDeviation",tostring(price_deviation,"#.##%"),false)
curr_row+=1,add_line(results_table,curr_row,"SafeOrderScale","Volume:"+tostring(safe_order_volume_scale)+"/Scale:"+tostring(safe_order_step_scale),false)
curr_row+=1,add_line(results_table,curr_row,"TakeProfit/StopLoss",tostring(take_profit,"#.##%")+(ttp>0.0?"(Trailing:"+tostring(ttp,"#.##%")+")":"")+"/"+(stop_loss>0.0?tostring(stop_loss,"#.##%"):"NoStopLoss"),false)
curr_row+=1,add_line(results_table,curr_row,"MaxAmountForBotUsage",tostring(max_amount,currency_format())+""+syminfo.currency,false)
curr_row+=1,add_line(results_table,curr_row,"MaxCoverage",tostring(max_safe_order)+"SafetyOrders/"+tostring(max_dev,"#.##%"),false)
curr_row+=1,add_line(results_table,curr_row,"Summary",None,false)
curr_row+=1,add_line(results_table,curr_row,"InitialCapital",tostring(strategy.initial_capital,currency_format())+""+syminfo.currency,false)
curr_row+=1,add_line(results_table,curr_row,"FinalCapital",tostring(max(strategy.equity,0.0),currency_format())+""+syminfo.currency,false)
curr_row+=1,add_line(results_table,curr_row,"NetResult",tostring(profit,currency_format())+""+syminfo.currency+"("+tostring(profit_pct,"#.##%")+")",false)
curr_row+=1,add_line(results_table,curr_row,"TotalDeals",tostring(deal_counter),false)
ifstop_loss>0.0
curr_row+=1,add_line(results_table,curr_row,"DealsClosedonStopLoss",tostring(stop_loss_counter),false)
ifIS_LONG
buy_hold_profit=(latest_price-init_price)/init_price*strategy.initial_capital
buy_hold_profit_pct=buy_hold_profit/strategy.initial_capital
ratio=profit_pct/buy_hold_profit_pct
curr_row+=1,add_line(results_table,curr_row,"ComparisontoBuy-And-Hold",None,false)
curr_row+=1,add_line(results_table,curr_row,"NetResultforBuy-and-hold",tostring(buy_hold_profit,currency_format())+""+syminfo.currency+"("+tostring(buy_hold_profit_pct,"#.##%")+")",false)
curr_row+=1,add_line(results_table,curr_row,"(BotPerformance)/(Buy-and-holdPerformance)",tostring(ratio,"#.###"),false)
//EndRouxam
Expand (735 lines)
