Script Name: Lorentzian Classification Strategy
Author: StrategiesForEveryone
Description: Based in the model of Machine learning: Lorentzian Classification by @jdehorty, you will be able to get into trending moves and get interesting entries in the market with this strategy. I also put some new features for better backtesting results!

 Backtesting context: 2022-07-19 to 2023-04-14 of US500 1H by PEPPERSTONE. Commissions: 0.03% for each entry, 0.03%...
PineScript code:

Pine Script™ strategy
Lorentzian Classification Strategy
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//
//  Please,  visit  the  main  script  that  strategy  is  based  in  :)  Machine  Learning:  Lorentzian  Classification/<<<<  ==============================================
//  Indicator  developed  by  ©jdehorty
//  Strategy  devoleped  by  ©StrategiesForEVeryone
//  @version=5
strategy('Machine  Learning:  Lorentzian  Classification',  'Lorentzian  Classification  Strategy',  true,  precision=2,  initial_capital  =  100000,  process_orders_on_close  =  true,  calc_on_every_tick  =  true,  commission_value  =  0.03)
import  jdehorty/MLExtensions/2  as  ml
import  jdehorty/KernelFunctions/2  as  kernels
initial_message  =  input.bool(defval  =  true,  title  =  "Show  initial  message",  group  =  "Initial  message")
if  barstate.islast  and  initial_message
        label.new(bar_index,  0,  "Please,  read  the  entire  post  "  +  "\nfor  a  better  understanding."  +  "\nDo  not  forget  to  visit  the  original"  +  "\nindicator  from  ©jdehorty  and  leave  your  boost!",  xloc  =  xloc.bar_index,  yloc  =  yloc.abovebar,  textcolor  =  color.white,  color  =  color.rgb(76,  175,  255,  4))
//  ======================
//  ====  Custom  Types  ====
//  ======================
//  This  section  uses  PineScript's  new  Type  syntax  to  define  important  data  structures
//  used  throughout  the  script.
type  Settings
        float  source
        int  neighborsCount
        int  maxBarsBack
        int  featureCount
        int  colorCompression
        bool  showExits
        bool  useDynamicExits
type  Label
        int  long
        int  short
        int  neutral
type  FeatureArrays
        array<float>  f1
        array<float>  f2
        array<float>  f3
        array<float>  f4
        array<float>  f5
type  FeatureSeries
        float  f1
        float  f2
        float  f3
        float  f4
        float  f5
type  MLModel
        int  firstBarIndex
        array<int>  trainingLabels
        int  loopSize
        float  lastDistance
        array<float>  distancesArray
        array<int>  predictionsArray
        int  prediction
type  FilterSettings
        bool  useVolatilityFilter
        bool  useRegimeFilter
        bool  useAdxFilter
        float  regimeThreshold
        int  adxThreshold
type  Filter
        bool  volatility
        bool  regime
        bool  adx
//  ==========================
//  ====  Helper  Functions  ====
//  ==========================
series_from(feature_string,  _close,  _high,  _low,  _hlc3,  f_paramA,  f_paramB)  =>
        switch  feature_string
                "RSI"  =>  ml.n_rsi(_close,  f_paramA,  f_paramB)
                "WT"  =>  ml.n_wt(_hlc3,  f_paramA,  f_paramB)
                "CCI"  =>  ml.n_cci(_close,  f_paramA,  f_paramB)
                "ADX"  =>  ml.n_adx(_high,  _low,  _close,  f_paramA)
get_lorentzian_distance(int  i,  int  featureCount,  FeatureSeries  featureSeries,  FeatureArrays  featureArrays)  =>
        switch  featureCount
                5  =>  math.log(1+math.abs(featureSeries.f1  -  array.get(featureArrays.f1,  i)))  +
                          math.log(1+math.abs(featureSeries.f2  -  array.get(featureArrays.f2,  i)))  +
                          math.log(1+math.abs(featureSeries.f3  -  array.get(featureArrays.f3,  i)))  +
                          math.log(1+math.abs(featureSeries.f4  -  array.get(featureArrays.f4,  i)))  +
                          math.log(1+math.abs(featureSeries.f5  -  array.get(featureArrays.f5,  i)))
                4  =>  math.log(1+math.abs(featureSeries.f1  -  array.get(featureArrays.f1,  i)))  +
                          math.log(1+math.abs(featureSeries.f2  -  array.get(featureArrays.f2,  i)))  +
                          math.log(1+math.abs(featureSeries.f3  -  array.get(featureArrays.f3,  i)))  +
                          math.log(1+math.abs(featureSeries.f4  -  array.get(featureArrays.f4,  i)))
                3  =>  math.log(1+math.abs(featureSeries.f1  -  array.get(featureArrays.f1,  i)))  +
                          math.log(1+math.abs(featureSeries.f2  -  array.get(featureArrays.f2,  i)))  +
                          math.log(1+math.abs(featureSeries.f3  -  array.get(featureArrays.f3,  i)))
                2  =>  math.log(1+math.abs(featureSeries.f1  -  array.get(featureArrays.f1,  i)))  +
                          math.log(1+math.abs(featureSeries.f2  -  array.get(featureArrays.f2,  i)))
//  ================
//  ====  Inputs  ====
//  ================
//  Settings  Object:  General  User-Defined  Inputs
Settings  settings  =
  Settings.new(
      input.source(title='Source',  defval=close,  group="General  Settings",  tooltip="Source  of  the  input  data"),
      input.int(title='Neighbors  Count',  defval=8,  group="General  Settings",  minval=1,  maxval=100,  step=1,  tooltip="Number  of  neighbors  to  consider"),
      input.int(title="Max  Bars  Back",  defval=2000,  group="General  Settings",  tooltip  =  "Use  this  to  increase  or  reduce  the  range  of  backtesting.  If  script  use  much  time  to  load,  reduce  this"),
      input.int(title="Feature  Count",  defval=5,  group="Feature  Engineering",  minval=2,  maxval=5,  tooltip="Number  of  features  to  use  for  ML  predictions."),
      input.int(title="Color  Compression",  defval=1,  group="General  Settings",  minval=1,  maxval=10,  tooltip="Compression  factor  for  adjusting  the  intensity  of  the  color  scale."),
      input.bool(title="Show  Default  Exits",  defval=false,  group="General  Settings",  tooltip="Default  exits  occur  exactly  4  bars  after  an  entry  signal.  This  corresponds  to  the  predefined  length  of  a  trade  during  the  model's  training  process.",  inline="exits"),
      input.bool(title="Use  Dynamic  Exits",  defval=false,  group="General  Settings",  tooltip="Dynamic  exits  attempt  to  let  profits  ride  by  dynamically  adjusting  the  exit  threshold  based  on  kernel  regression  logic.",  inline="exits")
  )

//  Trade  Stats  Settings
//  Note:  The  trade  stats  section  is  NOT  intended  to  be  used  as  a  replacement  for  proper  backtesting.  It  is  intended  to  be  used  for  calibration  purposes  only.
//  showTradeStats  =  input.bool(false,  'Show  Trade  Stats',  tooltip='Displays  the  trade  stats  for  a  given  configuration.  Useful  for  optimizing  the  settings  in  the  Feature  Engineering  section.  This  should  NOT  replace  backtesting  and  should  be  used  for  calibration  purposes  only.  Early  Signal  Flips  represent  instances  where  the  model  changes  signals  before  4  bars  elapses;  high  values  can  indicate  choppy  (ranging)  market  conditions.',  group="General  Settings")
//  useWorstCase  =  input.bool(false,  "Use  Worst  Case  Estimates",  tooltip="Whether  to  use  the  worst  case  scenario  for  backtesting.  This  option  can  be  useful  forcreatingaconservativeestimatethatisbasedonclosepricesonly,thusavoidingtheeffectsofintrabarrepainting.Thisoptionassumesthattheuserdoesnotenterwhenthesignalfirstappearsandinsteadwaitsforthebartocloseasconfirmation.Onlargertimeframes,thiscanmeanenteringafteralargemovehasalreadyoccurred.Leavingthisoptiondisabledisgenerallybetterforthosethatusethisindicatorasasourceofconfluenceandpreferestimatesthatdemonstratediscretionarymid-barentries.Leavingthisoptionenabledmaybemoreconsistentwithtraditionalbacktestingresults.",group="GeneralSettings")
//Settingsobjectforuser-definedsettings
FilterSettingsfilterSettings=
FilterSettings.new(
input.bool(title="UseVolatilityFilter",defval=true,tooltip="Whethertousethevolatilityfilter.",group="Filters"),
input.bool(title="UseRegimeFilter",defval=true,group="Filters",inline="regime"),
input.bool(title="UseADXFilter",defval=false,group="Filters",inline="adx"),
input.float(title="Threshold",defval=-0.1,minval=-10,maxval=10,step=0.1,tooltip="Whethertousethetrenddetectionfilter.ThresholdfordetectingTrending/Rangingmarkets.",group="Filters",inline="regime"),
input.int(title="Threshold",defval=20,minval=0,maxval=100,step=1,tooltip="WhethertousetheADXfilter.ThresholdfordetectingTrending/Rangingmarkets.",group="Filters",inline="adx")
)
//FilterobjectforfilteringtheMLpredictions
Filterfilter=
Filter.new(
ml.filter_volatility(1,10,filterSettings.useVolatilityFilter),
ml.regime_filter(ohlc4,filterSettings.regimeThreshold,filterSettings.useRegimeFilter),
ml.filter_adx(settings.source,14,filterSettings.adxThreshold,filterSettings.useAdxFilter)
)
//FeatureVariables:User-DefinedInputsforcalculatingFeatureSeries.
f1_string=input.string(title="Feature1",options=["RSI","WT","CCI","ADX"],defval="RSI",inline="01",tooltip="ThefirstfeaturetouseforMLpredictions.",group="FeatureEngineering")
f1_paramA=input.int(title="ParameterA",tooltip="Theprimaryparameteroffeature1.",defval=14,inline="02",group="FeatureEngineering")
f1_paramB=input.int(title="ParameterB",tooltip="Thesecondaryparameteroffeature2(ifapplicable).",defval=1,inline="02",group="FeatureEngineering")
f2_string=input.string(title="Feature2",options=["RSI","WT","CCI","ADX"],defval="WT",inline="03",tooltip="ThesecondfeaturetouseforMLpredictions.",group="FeatureEngineering")
f2_paramA=input.int(title="ParameterA",tooltip="Theprimaryparameteroffeature2.",defval=10,inline="04",group="FeatureEngineering")
f2_paramB=input.int(title="ParameterB",tooltip="Thesecondaryparameteroffeature2(ifapplicable).",defval=11,inline="04",group="FeatureEngineering")
f3_string=input.string(title="Feature3",options=["RSI","WT","CCI","ADX"],defval="CCI",inline="05",tooltip="ThethirdfeaturetouseforMLpredictions.",group="FeatureEngineering")
f3_paramA=input.int(title="ParameterA",tooltip="Theprimaryparameteroffeature3.",defval=20,inline="06",group="FeatureEngineering")
f3_paramB=input.int(title="ParameterB",tooltip="Thesecondaryparameteroffeature3(ifapplicable).",defval=1,inline="06",group="FeatureEngineering")
f4_string=input.string(title="Feature4",options=["RSI","WT","CCI","ADX"],defval="ADX",inline="07",tooltip="ThefourthfeaturetouseforMLpredictions.",group="FeatureEngineering")
f4_paramA=input.int(title="ParameterA",tooltip="Theprimaryparameteroffeature4.",defval=20,inline="08",group="FeatureEngineering")
f4_paramB=input.int(title="ParameterB",tooltip="Thesecondaryparameteroffeature4(ifapplicable).",defval=2,inline="08",group="FeatureEngineering")
f5_string=input.string(title="Feature5",options=["RSI","WT","CCI","ADX"],defval="RSI",inline="09",tooltip="ThefifthfeaturetouseforMLpredictions.",group="FeatureEngineering")
f5_paramA=input.int(title="ParameterA",tooltip="Theprimaryparameteroffeature5.",defval=9,inline="10",group="FeatureEngineering")
f5_paramB=input.int(title="ParameterB",tooltip="Thesecondaryparameteroffeature5(ifapplicable).",defval=1,inline="10",group="FeatureEngineering")
//FeatureSeriesObject:CalculatedFeatureSeriesbasedonFeatureVariables
featureSeries=
FeatureSeries.new(
series_from(f1_string,close,high,low,hlc3,f1_paramA,f1_paramB),//f1
series_from(f2_string,close,high,low,hlc3,f2_paramA,f2_paramB),//f2
series_from(f3_string,close,high,low,hlc3,f3_paramA,f3_paramB),//f3
series_from(f4_string,close,high,low,hlc3,f4_paramA,f4_paramB),//f4
series_from(f5_string,close,high,low,hlc3,f5_paramA,f5_paramB)//f5
)
//FeatureArraysVariables:StorageofFeatureSeriesasFeatureArraysOptimizedforML
//Note:ThesearrayscannotbedynamicallycreatedwithintheFeatureArraysObjectInitializationandthusmustbeset-upinadvance.
varf1Array=array.new_float()
varf2Array=array.new_float()
varf3Array=array.new_float()
varf4Array=array.new_float()
varf5Array=array.new_float()
array.push(f1Array,featureSeries.f1)
array.push(f2Array,featureSeries.f2)
array.push(f3Array,featureSeries.f3)
array.push(f4Array,featureSeries.f4)
array.push(f5Array,featureSeries.f5)
//FeatureArraysObject:StorageofthecalculatedFeatureArraysintoasingleobject
featureArrays=
FeatureArrays.new(
f1Array,//f1
f2Array,//f2
f3Array,//f3
f4Array,//f4
f5Array//f5
)
//LabelObject:UsedforclassifyinghistoricaldataastrainingdatafortheMLModel
Labeldirection_s=
Label.new(
long=1,
short=-1,
neutral=0
)
//DerivedfromGeneralSettings
maxBarsBackIndex=last_bar_index>=settings.maxBarsBack?last_bar_index-settings.maxBarsBack:0
//EMASettings
useEmaFilter=input.bool(title="UseEMAFilter",defval=false,group="Filters",inline="ema")
emaPeriod=input.int(title="Period",defval=200,minval=1,step=1,group="Filters",inline="ema",tooltip="TheperiodoftheEMAusedfortheEMAFilter.")
isEmaUptrend=useEmaFilter?close>ta.ema(close,emaPeriod):true
isEmaDowntrend=useEmaFilter?close<ta.ema(close,emaPeriod):true
useSmaFilter=input.bool(title="UseSMAFilter",defval=false,group="Filters",inline="sma")
smaPeriod=input.int(title="Period",defval=200,minval=1,step=1,group="Filters",inline="sma",tooltip="TheperiodoftheSMAusedfortheSMAFilter.")
isSmaUptrend=useSmaFilter?close>ta.sma(close,smaPeriod):true
isSmaDowntrend=useSmaFilter?close<ta.sma(close,smaPeriod):true
//Nadaraya-WatsonKernelRegressionSettings
useKernelFilter=input.bool(true,"TradewithKernel",group="KernelSettings",inline="kernel")
showKernelEstimate=input.bool(false,"ShowKernelEstimate",group="KernelSettings",inline="kernel")
useKernelSmoothing=input.bool(false,"EnhanceKernelSmoothing",tooltip="Usesacrossoverbasedmechanismtosmoothenkernelcolorchanges.ThisoftenresultsinlesscolortransitionsoverallandmayresultinmoreMLentrysignalsbeinggenerated.",inline='1',group='KernelSettings')
h=input.int(8,'LookbackWindow',minval=3,tooltip='Thenumberofbarsusedfortheestimation.Thisisaslidingvaluethatrepresentsthemostrecenthistoricalbars.Recommendedrange:3-50',group="KernelSettings",inline="kernel")
r=input.float(8.,'RelativeWeighting',step=0.25,tooltip='Relativeweightingoftimeframes.Asthisvalueapproacheszero,thelongertimeframeswillexertmoreinfluenceontheestimation.Asthisvalueapproachesinfinity,thebehavioroftheRationalQuadraticKernelwillbecomeidenticaltotheGaussiankernel.Recommendedrange:0.25-25',group="KernelSettings",inline="kernel")
x=input.int(25,"RegressionLevel",tooltip='Barindexonwhichtostartregression.Controlshowtightlyfitthekernelestimateistothedata.Smallervaluesareatighterfit.Largervaluesarealooserfit.Recommendedrange:2-25',group="KernelSettings",inline="kernel")
lag=input.int(2,"Lag",tooltip="Lagforcrossoverdetection.Lowervaluesresultinearliercrossovers.Recommendedrange:1-2",inline='1',group='KernelSettings')
//DisplaySettings
showBarColors=input.bool(false,"ShowBarColors",tooltip="Whethertoshowthebarcolors.",group="DisplaySettings")
showBarPredictions=input.bool(defval=false,title="ShowBarPredictionValues",tooltip="WillshowtheMLmodel'sevaluationofeachbarasaninteger.",group="DisplaySettings")
useAtrOffset=input.bool(defval=false,title="UseATROffset",tooltip="WillusetheATRoffsetinsteadofthebarpredictionoffset.",group="DisplaySettings")
barPredictionsOffset=input.float(0,"BarPredictionOffset",minval=0,tooltip="Theoffsetofthebarpredictionsasapercentagefromthebarhighorclose.",group="DisplaySettings")
//=================================
//====NextBarClassification====
//=================================
//Thismodelspecializesspecificallyinpredictingthedirection_sofpriceactionoverthecourseofthenext4bars.
//ToavoidcomplicationswiththeMLmodel,thisvalueishardcodedto4barsbutsupportforothertraininglengthsmaybeaddedinthefuture.
src=settings.source
y_train_series=src[4]<src[0]?direction_s.short:src[4]>src[0]?direction_s.long:direction_s.neutral
vary_train_array=array.new_int(0)
//VariablesusedforMLLogic
varpredictions=array.new_float(0)
varprediction=0.
varsignal=direction_s.neutral
vardistances=array.new_float(0)
array.push(y_train_array,y_train_series)
//=========================
//====CoreMLLogic====
//=========================
lastDistance=-1.0
size=math.min(settings.maxBarsBack-1,array.size(y_train_array)-1)
sizeLoop=math.min(settings.maxBarsBack-1,size)
ifbar_index>=maxBarsBackIndex//{
fori=0tosizeLoop//{
d=get_lorentzian_distance(i,settings.featureCount,featureSeries,featureArrays)
ifd>=lastDistanceandi%4//{
lastDistance:=d
array.push(distances,d)
array.push(predictions,math.round(array.get(y_train_array,i)))
ifarray.size(predictions)>settings.neighborsCount//{
lastDistance:=array.get(distances,math.round(settings.neighborsCount*3/4))
array.shift(distances)
array.shift(predictions)
//}
//}
//}
prediction:=array.sum(predictions)
//}
//============================
//====PredictionFilters====
//============================
//UserDefinedFilters:UsedforadjustingthefrequencyoftheMLModel'spredictions
filter_all=filter.volatilityandfilter.regimeandfilter.adx
//FilteredSignal:Themodel'spredictionoffuturepricemovementdirection_swithuser-definedfiltersapplied
signal:=prediction>0andfilter_all?direction_s.long:prediction<0andfilter_all?direction_s.short:nz(signal[1])
//Bar-CountFilters:Representsstrictfiltersbasedonapre-definedholdingperiodof4bars
varintbarsHeld=0
barsHeld:=ta.change(signal)?0:barsHeld+1
isHeldFourBars=barsHeld==4
isHeldLessThanFourBars=0<barsHeldandbarsHeld<4
//FractalFilters:Derivedfromrelative============Appearance============sofsignalsinagiventimeseriesfractal/segmentwithadefaultlengthof4bars
isDifferentSignalType=ta.change(signal)
isEarlySignalFlip=ta.change(signal)and(ta.change(signal[1])orta.change(signal[2])orta.change(signal[3]))
isBuySignal=signal==direction_s.longandisEmaUptrendandisSmaUptrend
isSellSignal=signal==direction_s.shortandisEmaDowntrendandisSmaDowntrend
isLastSignalBuy=signal[4]==direction_s.longandisEmaUptrend[4]andisSmaUptrend[4]
isLastSignalSell=signal[4]==direction_s.shortandisEmaDowntrend[4]andisSmaDowntrend[4]
isNewBuySignal=isBuySignalandisDifferentSignalType
isNewSellSignal=isSellSignalandisDifferentSignalType
//KernelRegressionFilters:FiltersbasedonNadaraya-WatsonKernelRegressionusingtheRationalQuadraticKernel
//Formoreinformationonthistechniquerefertomyotheropensourceindicatorlocatedhere:
//https://www.tradingview.com/script/AWNvbPRM-Nadaraya-Watson-Rational-Quadratic-Kernel-Non-Repainting/
c_green=color.new(#009988,20)
c_red=color.new(#CC3311,20)
transparent=color.new(#000000,100)
yhat1=kernels.rationalQuadratic(settings.source,h,r,x)
yhat2=kernels.gaussian(settings.source,h-lag,x)
kernelEstimate=yhat1
//KernelRatesofChange
boolwasBearishRate=yhat1[2]>yhat1[1]
boolwasBullishRate=yhat1[2]<yhat1[1]
boolisBearishRate=yhat1[1]>yhat1
boolisBullishRate=yhat1[1]<yhat1
isBearishChange=isBearishRateandwasBullishRate
isBullishChange=isBullishRateandwasBearishRate
//KernelCrossovers
boolisBullishCrossAlert=ta.crossover(yhat2,yhat1)
boolisBearishCrossAlert=ta.crossunder(yhat2,yhat1)
boolisBullishSmooth=yhat2>=yhat1
boolisBearishSmooth=yhat2<=yhat1
//KernelColors
colorcolorByCross=isBullishSmooth?c_green:c_red
colorcolorByRate=isBullishRate?c_green:c_red
colorplotColor=showKernelEstimate?(useKernelSmoothing?colorByCross:colorByRate):transparent
plot(kernelEstimate,color=plotColor,linewidth=2,title="KernelRegressionEstimate",display=display.all-display.price_scale-display.status_line)
//AlertVariables
boolalertBullish=useKernelSmoothing?isBullishCrossAlert:isBullishChange
boolalertBearish=useKernelSmoothing?isBearishCrossAlert:isBearishChange
//BullishandBearishFiltersbasedonKernel
isBullish=useKernelFilter?(useKernelSmoothing?isBullishSmooth:isBullishRate):true
isBearish=useKernelFilter?(useKernelSmoothing?isBearishSmooth:isBearishRate):true
//===========================
//====EntriesandExits====
//===========================
//EntryConditions:BooleansforMLModelPositionEntries
startLongTrade=isNewBuySignalandisBullishandisEmaUptrendandisSmaUptrend
startShortTrade=isNewSellSignalandisBearishandisEmaDowntrendandisSmaDowntrend
//DynamicExitConditions:BooleansforMLModelPositionExitsbasedonFractalFiltersandKernelRegressionFilters
lastSignalWasBullish=ta.barssince(startLongTrade)<ta.barssince(startShortTrade)
lastSignalWasBearish=ta.barssince(startShortTrade)<ta.barssince(startLongTrade)
barsSinceRedEntry=ta.barssince(startShortTrade)
barsSinceRedExit=ta.barssince(alertBullish)
barsSinceGreenEntry=ta.barssince(startLongTrade)
barsSinceGreenExit=ta.barssince(alertBearish)
isValidShortExit=barsSinceRedExit>barsSinceRedEntry
isValidLongExit=barsSinceGreenExit>barsSinceGreenEntry
endLongTradeDynamic=(isBearishChangeandisValidLongExit[1])
endShortTradeDynamic=(isBullishChangeandisValidShortExit[1])
//FixedExitConditions:BooleansforMLModelPositionExitsbasedonaBar-CountFilters
endLongTradeStrict=((isHeldFourBarsandisLastSignalBuy)or(isHeldLessThanFourBarsandisNewSellSignalandisLastSignalBuy))andstartLongTrade[4]
endShortTradeStrict=((isHeldFourBarsandisLastSignalSell)or(isHeldLessThanFourBarsandisNewBuySignalandisLastSignalSell))andstartShortTrade[4]
isDynamicExitValid=notuseEmaFilterandnotuseSmaFilterandnotuseKernelSmoothing
endLongTrade=settings.useDynamicExitsandisDynamicExitValid?endLongTradeDynamic:endLongTradeStrict
endShortTrade=settings.useDynamicExitsandisDynamicExitValid?endShortTradeDynamic:endShortTradeStrict
//=========================
//====PlottingLabels====
//=========================
//Note:Thesewillnotrepaintoncethemostrecentbarhasfullyclosed.Bydefault,signalsappearoverthelastclosedbar;tooverridethisbehaviorsetoffset=0.
//plotshape(startLongTrade?low:na,'Buy',shape.labelup,location.belowbar,color=ml.color_green(prediction),size=size.small,offset=0,display=display.all-display.price_scale-display.status_line)
//plotshape(startShortTrade?high:na,'Sell',shape.labeldown,location.abovebar,ml.color_red(-prediction),size=size.small,offset=0,display=display.all-display.price_scale-display.status_line)
//plotshape(endLongTradeandsettings.showExits?high:na,'StopBuy',shape.xcross,location.absolute,color=#3AFF17,size=size.tiny,offset=0,display=display.all-display.price_scale-display.status_line)
//plotshape(endShortTradeandsettings.showExits?low:na,'StopSell',shape.xcross,location.absolute,color=#FD1707,size=size.tiny,offset=0,display=display.all-display.price_scale-display.status_line)
//================
//====Alerts====
//================
//SeparateAlertsforEntriesandExits
//alertcondition(startLongTrade,title='OpenLong▲',message='LDCOpenLong▲|{{ticker}}@{{close}}|({{interval}})')
//alertcondition(endLongTrade,title='CloseLong▲',message='LDCCloseLong▲|{{ticker}}@{{close}}|({{interval}})')
//alertcondition(startShortTrade,title='OpenShort▼',message='LDCOpenShort|{{ticker}}@{{close}}|({{interval}})')
//alertcondition(endShortTrade,title='CloseShort▼',message='LDCCloseShort▼|{{ticker}}@{{close}}|({{interval}})')
//
////CombinedAlertsforEntriesandExits
//alertcondition(startShortTradeorstartLongTrade,title='OpenPosition▲▼',message='LDCOpenPosition▲▼|{{ticker}}@{{close}}|({{interval}})')
//alertcondition(endShortTradeorendLongTrade,title='ClosePosition▲▼',message='LDCClosePosition▲▼|{{ticker}}@[{{close}}]|({{interval}})')
//
////KernelEstimateAlerts
//alertcondition(condition=alertBullish,title='KernelBullishColorChange',message='LDCKernelBullish▲|{{ticker}}@{{close}}|({{interval}})')
//alertcondition(condition=alertBearish,title='KernelBearishColorChange',message='LDCKernelBearish▼|{{ticker}}@{{close}}|({{interval}})')
//=========================
//====DisplaySignals====
//=========================
atrSpaced=useAtrOffset?ta.atr(1):na
compressionFactor=settings.neighborsCount/settings.colorCompression
c_pred=prediction>0?color.from_gradient(prediction,0,compressionFactor,#787b86,#009988):prediction<=0?color.from_gradient(prediction,-compressionFactor,0,#CC3311,#787b86):na
c_label=showBarPredictions?c_pred:na
c_bars=showBarColors?color.new(c_pred,50):na
x_val=bar_index
y_val=useAtrOffset?prediction>0?high+atrSpaced:low-atrSpaced:prediction>0?high+hl2*barPredictionsOffset/20:low-hl2*barPredictionsOffset/30
label.new(x_val,y_val,str.tostring(prediction),xloc.bar_index,yloc.price,color.new(color.white,100),label.style_label_up,c_label,size.normal,text.align_left)
barcolor(showBarColors?color.new(c_pred,50):na)
//==============================================================================================================================================================================================================================================================================================
//======================================Strategycode================================================================
//------Inputsforcalculatingouramountposition--------
initial_actual_capital=input.float(defval=10000,title="Enterinitial/currentcapital",group="============Positionamountcalculator===========")
risk_c=input.float(2.5,'%accountriskpertrade',step=1,group="============Positionamountcalculator===========",tooltip="Percentageoftotalaccounttoriskpertrade.TheUSDvaluethatshouldbeusedtorisktheinsertedpercentageoftheaccount.Appearsasayellownumberintheupperleftcorner")
//------Datefilter---------
initial_date=input.time(title="Initialdate",defval=timestamp("10Feb201413:30+0000"),group="============Timefilter============",tooltip="Enterthestartdateandtimeofthestrategy")
final_date=input.time(title="Finaldate",defval=timestamp("01Jan203019:30+0000"),group="============Timefilter============",tooltip="Entertheenddateandtimeofthestrategy")
dateFilter(intst,intet)=>time>=standtime<=et
colorDate=input.bool(defval=false,title="Datebackground",tooltip="Addcolortotheperiodoftimeofthestrategytester")
bgcolor(colorDateanddateFilter(initial_date,final_date)?color.new(color.blue,transp=90):na)
date=dateFilter(initial_date,final_date)
//------Sessionlimits------
timeSession=input.session(title="Timesession",defval="0000-2400",group="============Timefilter============",tooltip="Sessiontimetooperate.Itmaybedifferentdependingonyourtimezone,youhavetofindthecorrecthoursmanually.")
colorBG=input.bool(title="Sessionbackground",defval=false,tooltip="Addcolortosessiontimebackground")
inSession(sess)=>na(time(timeframe.period,sess+':1234567'))==false
bgcolor(inSession(timeSession)andcolorBG?color.rgb(0,38,255,84):na)
//===============================================================================================================================================
//------------SuperTrend----------
atrPeriod=input(9,"ATRLengthSuperTrend",group="=========SuperTrendfilter==========")
factor=input.float(2.5,"FactorSuperTrend",step=0.05,group="=========SuperTrendfilter==========")
[supertrend,direction_supertrend]=ta.supertrend(factor,atrPeriod)
show_supertrend=input.bool(defval=false,title="Showsupertrend?",group="============Appearance============")
bodyMiddle=plot(show_supertrend?((open+close)/2):na,display=display.none)
upTrend=plot(show_supertrendanddirection_supertrend<0?supertrend:na,"UpTrend",color=color.green,style=plot.style_linebr,display=display.all-display.status_line)
downTrend=plot(show_supertrendanddirection_supertrend>0?supertrend:na,"DownTrend",color=color.red,style=plot.style_linebr,display=display.all-display.status_line)
fill(bodyMiddle,upTrend,color.new(color.green,95),fillgaps=false,title="Supertrendbackground")
fill(bodyMiddle,downTrend,color.new(color.red,95),fillgaps=false,title="Supertrendbackground")
up_trend_plot=direction_supertrend<0
down_trend_plot=direction_supertrend>0
//-----------Ema----------------------
ema=input.int(200,title='Emalength',minval=1,maxval=500,group="============Trend============")
ema200=ta.ema(close,ema)
bullish=close>ema200
bearish=close<ema200
show_ema=input.bool(defval=true,title="Showema?",group="============Appearance============")
plot(show_ema?ema200:na,title="Ema",color=color.white,linewidth=2,display=display.all-display.status_line-display.price_scale)
//===============================================================================================================================================
//--------------Atrstoplossbygarethyeo(modified)-----------------
source_atr=input(close,title='Source',group="==================Stoploss==================",inline="A")
length_atr=input.int(14,minval=1,title='Period',group="==================Stoploss==================",inline="A")
multiplier=input.float(1.5,minval=0.1,step=0.1,title='Atrmultiplier',group="==================Stoploss==================",inline="A",tooltip="DefinesthestoplossdistancebasedontheAtrstoplossindicator")
show_stoploss=input.bool(defval=true,title="Showstoploss?",group="============Appearance============")
varfloatshortStopLoss=na
varfloatlongStopLoss=na
varfloatatr_past_candle_long=na
varfloatatr_past_candle_short=na
candle_of_stoploss=input.string(defval="Currentcandle",title="Stoplosssourceforatrstoploss",group="==================Stoploss==================",options=["Currentcandle","Pastcandle"])
ifcandle_of_stoploss=="Currentcandle"
shortStopLoss:=source_atr+ta.atr(length_atr)*multiplier
longStopLoss:=source_atr-ta.atr(length_atr)*multiplier
ifcandle_of_stoploss=="Pastcandle"
shortStopLoss:=close[1]+ta.atr(length_atr)[1]*multiplier[1]
longStopLoss:=close[1]-ta.atr(length_atr)[1]*multiplier[1]
//---------Stoplossbasedinlastswinghigh/low--------
high_bars=input.int(defval=10,title="Highestpricebars:",group="==================Stoploss==================")
low_bars=input.int(defval=10,title="Lowestpricebars:",group="==================Stoploss==================")
stop_high=ta.highest(high,high_bars)
stop_low=ta.lowest(low,low_bars)
//---------Stoplosssourceselection---------------
stoploss_type=input.string(defval="Atrstoploss",title="Generalstoplosssource",group="==================Stoploss==================",options=["Atrstoploss","Swinghigh/low"])
ifstoploss_type=="Atrstoploss"
shortStopLoss:=source_atr+ta.atr(length_atr)*multiplier
longStopLoss:=source_atr-ta.atr(length_atr)*multiplier
ifcandle_of_stoploss=="Pastcandle"andstoploss_type=="Atrstoploss"
shortStopLoss:=close[1]+ta.atr(length_atr)[1]*multiplier[1]
longStopLoss:=close[1]-ta.atr(length_atr)[1]*multiplier[1]
ifstoploss_type=="Swinghigh/low"
shortStopLoss:=stop_high
longStopLoss:=stop_low
//========================================Add/withdrawmoneyfrequently(>>>Beta<<<)==============================================================
//Declaresomevariables=========================================================
varinitial_capital=strategy.initial_capital
varinitial_capital_a=strategy.initial_capital
varinitial_capital_w=strategy.initial_capital
varfloatcapital_added=0
varfloatbalance=strategy.initial_capital
varprev_month=0
varfloatamount=0
varadd_frequency=0
varwithdraw_frequency=0
//Choosehowoftenthestrategyaddsmoney=========================================================
add_money_frequency=input.string("Monthly",title="Choosehowoftenwouldyouaddmoney",options=["Monthly","Weekly","Daily","Yearly"],group="===============Addingmoneyfrequently===============")
amount_to_add=input.float(defval=10,title="Howmuchyouwanttoadd?",group="===============Addingmoneyfrequently===============")
ifadd_money_frequency=="Monthly"
add_frequency:=month
ifadd_money_frequency=="Weekly"
add_frequency:=weekofyear
ifadd_money_frequency=="Daily"
add_frequency:=dayofweek
ifadd_money_frequency=="Yearly"
add_frequency:=year
//Chooseifyouwanttoaddmoneyornot====================================
add_money=input.string("No",title="Addmoneyfromtimetotime?",options=["Yes","No"],group="===============Addingmoneyfrequently===============")
ifadd_frequency!=add_frequency[1]andadd_money=="Yes"anddate
initial_capital_a+=amount_to_add
initial_capital+=amount_to_add
balance:=strategy.netprofit+initial_capital
//Choosehowoftenthestrategywithdrawsmoney=========================================================
amount_to_withdraw=input.string("Fixed",title="Withdrawbasedinfixedamountsorpercentageofearnings",options=["%","Fixed"],group="===============Withdrawmoneyfrequently===============")
amount_for_withdraw=input.float(defval=2,title="Howmuchyouwanttowithdraw(fixedamount)?",group="===============Withdrawmoneyfrequently===============")
withdraw_money_frequency=input.string("Monthly",title="Choosehowoftenwouldyouwithdrawmoney",options=["Monthly","Weekly","Daily","Yearly"],group="===============Withdrawmoneyfrequently===============")
//Weusethisforbeingabletochoosethefrequencyofwithdrawingmoney:
ifwithdraw_money_frequency=="Monthly"
withdraw_frequency:=month
ifwithdraw_money_frequency=="Weekly"
withdraw_frequency:=weekofyear
ifwithdraw_money_frequency=="Daily"
withdraw_frequency:=dayofweek
ifwithdraw_money_frequency=="Yearly"
withdraw_frequency:=year
//Chooseifyouwanttowithdrawmoneyornot=============================
withdraw_money=input.string("No",title="Withdrawmoneyfromtimetotime?",options=["Yes","No"],group="===============Withdrawmoneyfrequently===============")
percentage_of_earnings=input.float(10,title="Percentageofearnings",group="===============Withdrawmoneyfrequently===============",tooltip="Usethisifwithdrawisbasedin%ofearnings")
//Percentageofearnings:
ifwithdraw_frequency!=withdraw_frequency[1]andwithdraw_money=="Yes"andamount_to_withdraw=="%"anddateandstrategy.netprofit>0
initial_capital_w-=strategy.netprofit*(percentage_of_earnings/100)
initial_capital-=strategy.netprofit*(percentage_of_earnings/100)
balance:=strategy.netprofit+initial_capital
//Fixedamount:
ifwithdraw_frequency!=withdraw_frequency[1]andwithdraw_money=="Yes"andamount_to_withdraw=="Fixed"anddateandstrategy.netprofit>0
initial_capital_w-=amount_for_withdraw
initial_capital-=amount_for_withdraw
balance:=strategy.netprofit+initial_capital
//Logic
ifwithdraw_money=="Yes"andadd_money=="No"
amount:=balance
ifwithdraw_money=="Yes"andadd_money=="Yes"
amount:=balance
ifwithdraw_money=="No"andadd_money=="Yes"
amount:=balance
ifwithdraw_money=="No"andadd_money=="No"
amount:=strategy.equity
//===============================================================================================================================================
//-------------Moneymanagement--------------
strategy_contracts=amount/close
distance_sl_long=-1*(longStopLoss-close)/close
distance_sl_short=(shortStopLoss-close)/close
risk=input.float(2.5,'%Accountriskpertradeforbacktesting',step=1,group="============Riskmanagementfortrades============",tooltip="Percentageoftotalaccounttoriskpertradeiffixedamountsisdeactivated")
long_amount=strategy_contracts*(risk/100)/distance_sl_long
short_amount=strategy_contracts*(risk/100)/distance_sl_short
leverage=input.bool(defval=true,title="Useleverageforbacktesting?",group="============Riskmanagementfortrades============",tooltip="Ifitisactivated,therewillbenomonetaryunitsoramountofassetslimitforeachoperation(Thatis,eachoperationwillnotbeaffectedbytheinitial/currentcapitalsinceitwouldbeusingleverage).Ifitisdeactivated,themonetaryunitsortheamountofassetstouseforeachoperationwillbelimitedbytheinitial/currentcapital.")
ifnotleverageandlong_amount>strategy_contracts
long_amount:=amount/close
ifnotleverageandshort_amount>strategy_contracts
short_amount:=amount/close
//----Fixedamounts----
fixed_amounts=input.bool(defval=false,title="Fixedamounts?",group="============Riskmanagementfortrades============",tooltip="Ifyouactivatethis,thebacktesterwillusefixedamounts")
fixed_amount_input=input.float(defval=1000,title="Fixedamountinusd",group="============Riskmanagementfortrades============")
iffixed_amounts
long_amount:=fixed_amount_input/close
short_amount:=fixed_amount_input/close
//----------Riskmanagement---------------
risk_reward_breakeven_long=input.float(title="Risk/rewardforbreakevenlong",defval=1.0,step=0.1,group="============Riskmanagementfortrades============")
risk_reward_take_profit_long=input.float(title="Risk/rewardfortakeprofitlong",defval=3.0,step=0.1,group="============Riskmanagementfortrades============")
risk_reward_breakeven_short=input.float(title="Risk/rewardforbreakevenshort",defval=1.0,step=0.1,group="============Riskmanagementfortrades============")
risk_reward_take_profit_short=input.float(title="Risk/rewardfortakeprofitshort",defval=3.0,step=0.1,group="============Riskmanagementfortrades============")
tp_percent=input.float(title="%oftradeforfirsttakeprofit",defval=50,step=5,group="============Riskmanagementfortrades============",tooltip="Closingpercentageofthecurrentpositionwhenthefirsttakeprofitisreached.")
//===============================================================================================================================================
//------------Tradeconditions---------------
//EntryConditions:BooleansforMLModelPositionEntries
//startLongTrade=isNewBuySignalandisBullishandisEmaUptrendandisSmaUptrend
//startShortTrade=isNewSellSignalandisBearishandisEmaDowntrendandisSmaDowntrend
//endLongTrade=settings.useDynamicExitsandisDynamicExitValid?endLongTradeDynamic:endLongTradeStrict
//endShortTrade=settings.useDynamicExitsandisDynamicExitValid?endShortTradeDynamic:endShortTradeStrict
//bullish:=close>ema200
//bearish:=close<ema200
bought=strategy.position_size>0
sold=strategy.position_size<0
buy=startLongTrade
sell=startShortTrade
varfloattotal_commissions_value=0
varfloatcommission_value_l=0
varfloatcommission_value_s=0
varfloatsl_long=na
varfloatsl_short=na
varfloatbe_long=na
varfloatbe_short=na
varfloattp_long=na
varfloattp_short=na
varinttotaltrades=0
close_withsupertrend=input.bool(defval=true,title="Closepositionswithsupertrend?",group="============Positionsmanagement============")
closeshort_supertrend=ta.crossover(close,supertrend)
closelong_supertrend=ta.crossunder(close,supertrend)
ifnotbought
be_long:=na
sl_long:=na
tp_long:=na
ifnotsold
be_short:=na
sl_short:=na
tp_short:=na
long_positions=input.bool(defval=true,title="Longpositions?",group="============Positionsmanagement============")
short_positions=input.bool(defval=true,title="Shortpositions?",group="============Positionsmanagement============")
use_takeprofit=input.bool(defval=true,title="Usetakeprofit?",group="============Riskmanagementfortrades============")
use_breakeven=input.bool(defval=true,title="Usebreakeven?",group="============Riskmanagementfortrades============")
close_only_tp=input.bool(defval=false,title="Closejustwithtakeprofit?",group="============Riskmanagementfortrades============",tooltip="Activateifyoujustwanttoexitfromapositionuntilreachingtakeprofitorstoploss.Ifit´sactivated,change%ofclosingbytpto100%")
ema_filter_long=input.bool(defval=true,title="Emafilterforlongpositions?",group="============Positionsmanagement============",tooltip="Activateifyoujustwanttolongabove200ema")
ema_filter_short=input.bool(defval=true,title="Emafilterforshortpositions?",group="============Positionsmanagement============",tooltip="Activateifyoujustwanttoshortunder200ema")
commission_percent=input.float(0.03,title="Commissionvaluein%",group="============Positionsmanagement============",tooltip="Setthe%ofcommission.Forexample,whenyouenterintoaposition,youhaveacommissionof0.04%perentryand0.04%perexit.Youhavealsotochangethisvalueinpropertiesforgettingarealreturninbacktest.(inthiscase,0.04%)")
iffixed_amounts
commission_value_l:=(close*(long_amount)*(commission_percent/100))
commission_value_s:=(close*(short_amount)*(commission_percent/100))
ifnotfixed_amounts
commission_value_l:=(close*((strategy_contracts*(risk/100))/distance_sl_long)*(commission_percent/100))
commission_value_s:=(close*((strategy_contracts*(risk/100))/distance_sl_short)*(commission_percent/100))
//=======================Strategy===================================================================================================================
//Longpositionwithtakeprofit
ifnotboughtandbuyanddateandlong_positionsandinSession(timeSession)anduse_takeprofitandnotema_filter_long
sl_long:=longStopLoss
long_stoploss_distance=close-longStopLoss
be_long:=close+long_stoploss_distance*risk_reward_breakeven_long
tp_long:=close+(long_stoploss_distance*risk_reward_take_profit_long)
total_commissions_value+=commission_value_l
strategy.entry('L',strategy.long,long_amount,alert_message="Long")
strategy.exit("Tp","L",stop=sl_long,limit=tp_long,qty_percent=tp_percent)
strategy.exit('Exit','L',stop=sl_long)
ifboughtandhigh>be_longanduse_breakeven
sl_long:=strategy.position_avg_price
strategy.exit("Tp","L",stop=sl_long,limit=tp_long,qty_percent=tp_percent)
strategy.exit('Exit','L',stop=sl_long)
ifboughtandsellandstrategy.openprofit>0andnotclose_only_tporboughtandcloselong_supertrendandclose_withsupertrendandstrategy.openprofit>0andnotclose_only_tp
strategy.close("L",comment="CL")
balance:=balance+strategy.openprofit
//Longpositionwithouttakeprofit
ifnotboughtandbuyanddateandlong_positionsandinSession(timeSession)andnotema_filter_long
sl_long:=longStopLoss
long_stoploss_distance=close-longStopLoss
be_long:=close+long_stoploss_distance*risk_reward_breakeven_long
total_commissions_value+=commission_value_l
strategy.entry('L',strategy.long,long_amount,alert_message="Long")
strategy.exit('Exit','L',stop=sl_long)
ifboughtandhigh>be_longanduse_breakeven
sl_long:=strategy.position_avg_price
strategy.exit('Exit','L',stop=sl_long)
ifboughtandsellandstrategy.openprofit>0
strategy.close("L",comment="CL")
balance:=balance+strategy.openprofit
//Shortpositionwithtakeprofit
ifnotsoldandsellanddateandshort_positionsandinSession(timeSession)anduse_takeprofitandnotema_filter_short
sl_short:=shortStopLoss
short_stoploss_distance=shortStopLoss-close
be_short:=((short_stoploss_distance*risk_reward_breakeven_short)-close)*-1
tp_short:=((short_stoploss_distance*risk_reward_take_profit_short)-close)*-1
total_commissions_value+=commission_value_s
strategy.entry("S",strategy.short,short_amount,alert_message="Short")
strategy.exit("Tp","S",stop=sl_short,limit=tp_short,qty_percent=tp_percent)
strategy.exit("Exit","S",stop=sl_short)
ifsoldandlow<be_shortanduse_breakeven
sl_short:=strategy.position_avg_price
strategy.exit("Tp","S",stop=sl_short,limit=tp_short,qty_percent=tp_percent)
strategy.exit("Exit","S",stop=sl_short)
ifsoldandbuyandstrategy.openprofit>0andnotclose_only_tporsoldandcloseshort_supertrendandclose_withsupertrendandstrategy.openprofit>0andnotclose_only_tp
strategy.close("S",comment="CS")
balance:=balance+strategy.openprofit
//Shortpositionwithouttakeprofit
ifnotsoldandsellanddateandshort_positionsandinSession(timeSession)andnotema_filter_short
sl_short:=shortStopLoss
short_stoploss_distance=shortStopLoss-close
be_short:=((short_stoploss_distance*risk_reward_breakeven_short)-close)*-1
total_commissions_value+=commission_value_s
strategy.entry("S",strategy.short,short_amount,alert_message="Short")
strategy.exit("Exit","S",stop=sl_short)
ifsoldandlow<be_shortanduse_breakeven
sl_short:=strategy.position_avg_price
strategy.exit("Exit","S",stop=sl_short)
ifsoldandbuyandstrategy.openprofit>0
strategy.close("S",comment="CS")
balance:=balance+strategy.openprofit
//===============================================================================================================================================
//Longpositionwithemafilter
//Withtakeprofit
ifnotboughtandbuyanddateandlong_positionsandinSession(timeSession)anduse_takeprofitandbullishandema_filter_long
sl_long:=longStopLoss
long_stoploss_distance=close-longStopLoss
be_long:=close+long_stoploss_distance*risk_reward_breakeven_long
tp_long:=close+(long_stoploss_distance*risk_reward_take_profit_long)
total_commissions_value+=commission_value_l
strategy.entry('L',strategy.long,long_amount,alert_message="Long")
strategy.exit("Tp","L",stop=sl_long,limit=tp_long,qty_percent=tp_percent)
strategy.exit('Exit','L',stop=sl_long)
ifboughtandhigh>be_longanduse_breakeven
sl_long:=strategy.position_avg_price
strategy.exit("Tp","L",stop=sl_long,limit=tp_long,qty_percent=tp_percent)
strategy.exit('Exit','L',stop=sl_long)
ifboughtandsellandstrategy.openprofit>0andnotclose_only_tporboughtandcloselong_supertrendandclose_withsupertrendandstrategy.openprofit>0andnotclose_only_tp
strategy.close("L",comment="CL")
balance:=balance+strategy.openprofit
//Withouttakeprofit
ifnotboughtandbuyanddateandlong_positionsandinSession(timeSession)andbullishandema_filter_long
sl_long:=longStopLoss
long_stoploss_distance=close-longStopLoss
be_long:=close+long_stoploss_distance*risk_reward_breakeven_long
total_commissions_value+=commission_value_l
strategy.entry('L',strategy.long,long_amount,alert_message="Long")
strategy.exit('Exit','L',stop=sl_long)
ifboughtandhigh>be_longanduse_breakeven
sl_long:=strategy.position_avg_price
strategy.exit('Exit','L',stop=sl_long)
ifboughtandsellandstrategy.openprofit>0
strategy.close("L",comment="CL")
balance:=balance+strategy.openprofit
//Shortpositonwithemafilter
//Withtakeprofit
ifnotsoldandsellanddateandshort_positionsandinSession(timeSession)anduse_takeprofitandbearishandema_filter_short
sl_short:=shortStopLoss
short_stoploss_distance=shortStopLoss-close
be_short:=((short_stoploss_distance*risk_reward_breakeven_short)-close)*-1
tp_short:=((short_stoploss_distance*risk_reward_take_profit_short)-close)*-1
total_commissions_value+=commission_value_s
strategy.entry("S",strategy.short,short_amount,alert_message="Short")
strategy.exit("Tp","S",stop=sl_short,limit=tp_short,qty_percent=tp_percent)
strategy.exit("Exit","S",stop=sl_short)
ifsoldandlow<be_shortanduse_breakeven
sl_short:=strategy.position_avg_price
strategy.exit("Tp","S",stop=sl_short,limit=tp_short,qty_percent=tp_percent)
strategy.exit("Exit","S",stop=sl_short)
ifsoldandbuyandstrategy.openprofit>0andnotclose_only_tporsoldandcloseshort_supertrendandclose_withsupertrendandstrategy.openprofit>0andnotclose_only_tp
strategy.close("S",comment="CS")
balance:=balance+strategy.openprofit
//Withouttakeprofit
ifnotsoldandsellanddateandshort_positionsandinSession(timeSession)andbearishandema_filter_short
sl_short:=shortStopLoss
short_stoploss_distance=shortStopLoss-close
be_short:=((short_stoploss_distance*risk_reward_breakeven_short)-close)*-1
total_commissions_value+=commission_value_s
strategy.entry("S",strategy.short,short_amount,alert_message="Short")
strategy.exit("Exit","S",stop=sl_short)
ifsoldandlow<be_shortanduse_breakeven
sl_short:=strategy.position_avg_price
strategy.exit("Exit","S",stop=sl_short)
ifsoldandbuyandstrategy.openprofit>0
strategy.close("S",comment="CS")
balance:=balance+strategy.openprofit
//===============================================================================================================================================
//----------Drawpositionsandsignalsonchart(strategyasanindicator)-------------
ifhigh>tp_long
tp_long:=na
iflow<tp_short
tp_short:=na
ifhigh>be_long
be_long:=na
iflow<be_short
be_short:=na
show_position_on_chart=input.bool(defval=true,title="Drawpositiononchart?",group="============Appearance============",tooltip="Activatetographicallydisplayprofit,stoplossandbreakeven")
position_price=plot(show_position_on_chart?strategy.position_avg_price:na,style=plot.style_linebr,color=color.new(#ffffff,10),linewidth=1,display=display.all-display.status_line-display.price_scale)
sl_long_price=plot(show_position_on_chartandbought?sl_long:na,style=plot.style_linebr,color=color.new(color.red,10),linewidth=1,display=display.all-display.status_line-display.price_scale)
sl_short_price=plot(show_position_on_chartandsold?sl_short:na,style=plot.style_linebr,color=color.new(color.red,10),linewidth=1,display=display.all-display.status_line-display.price_scale)
tp_long_price=plot(boughtandshow_position_on_chartanduse_takeprofit?tp_long:na,style=plot.style_linebr,color=color.new(#4cd350,10),linewidth=1,display=display.all-display.status_line-display.price_scale)
tp_short_price=plot(soldandshow_position_on_chartanduse_takeprofit?tp_short:na,style=plot.style_linebr,color=color.new(#4cd350,10),linewidth=1,display=display.all-display.status_line-display.price_scale)
breakeven_long=plot(boughtandhigh<be_longandshow_position_on_chartanduse_breakeven?be_long:na,style=plot.style_linebr,color=color.new(#1fc9fd,60),linewidth=1,display=display.all-display.status_line-display.price_scale)
breakeven_short=plot(soldandlow>be_shortandshow_position_on_chartanduse_breakeven?be_short:na,style=plot.style_linebr,color=color.new(#1fc9fd,60),linewidth=1,display=display.all-display.status_line-display.price_scale)
show_tpbe_on_chart=input.bool(defval=true,title="Drawfirsttakeprofit/breakevenpriceonchart?",group="============Appearance============",tooltip="Activatetodisplaytakeprofitandbreakevenprice.Itappearsasagreenpointinthechart")
long_stoploss_distance=close-longStopLoss
short_stoploss_distance=shortStopLoss-close
be_long_plot=close+long_stoploss_distance*risk_reward_breakeven_long
be_short_plot=((short_stoploss_distance*risk_reward_breakeven_short)-close)*-1
tp_long_plot=close+(long_stoploss_distance*risk_reward_take_profit_long)
tp_short_plot=((short_stoploss_distance*risk_reward_take_profit_short)-close)*-1
plot(show_tpbe_on_chartandbuyanduse_breakevenandbullishandema_filter_longorshow_tpbe_on_chartandbuyanduse_breakevenandnotema_filter_long?be_long_plot:na,color=color.new(#1fc9fd,10),style=plot.style_circles,linewidth=2,display=display.all-display.price_scale)
plot(show_tpbe_on_chartandsellanduse_breakevenandbearishandema_filter_shortorshow_tpbe_on_chartandsellanduse_breakevenandnotema_filter_short?be_short_plot:na,color=color.new(#1fc9fd,10),style=plot.style_circles,linewidth=2,display=display.all-display.price_scale)
plot(show_tpbe_on_chartandbuyanduse_takeprofitandbullishandema_filter_longorshow_tpbe_on_chartandbuyanduse_takeprofitandnotema_filter_long?tp_long_plot:na,color=color.new(#4cd350,10),style=plot.style_circles,linewidth=2,display=display.all-display.price_scale)
plot(show_tpbe_on_chartandsellanduse_takeprofitandbearishandema_filter_shortorshow_tpbe_on_chartandsellanduse_takeprofitandnotema_filter_short?tp_short_plot:na,color=color.new(#4cd350,10),style=plot.style_circles,linewidth=2,display=display.all-display.price_scale)
plot(show_stoplossandbuyandbullishandema_filter_longorshow_stoplossandbuyandnotema_filter_long?longStopLoss:na,title="stoplosslong",color=color.white,style=plot.style_circles,linewidth=2)
plot(show_stoplossandsellandbearishandema_filter_shortorshow_stoplossandsellandnotema_filter_long?shortStopLoss:na,title="stoplossshort",color=color.white,style=plot.style_circles,linewidth=2)
position_profit_long=plot(boughtandshow_position_on_chartandstrategy.openprofit>0?close:na,style=plot.style_linebr,color=color.new(#4cd350,10),linewidth=1,display=display.all-display.status_line-display.price_scale)
position_profit_short=plot(soldandshow_position_on_chartandstrategy.openprofit>0?close:na,style=plot.style_linebr,color=color.new(#4cd350,10),linewidth=1,display=display.all-display.status_line-display.price_scale)
fill(plot1=position_price,plot2=position_profit_long,color=color.new(#4cd350,90))
fill(plot1=position_price,plot2=position_profit_short,color=color.new(#4cd350,90))
fill(plot1=position_price,plot2=sl_long_price,color=color.new(color.red,90))
fill(plot1=position_price,plot2=sl_short_price,color=color.new(color.red,90))
fill(plot1=position_price,plot2=tp_long_price,color=color.new(color.green,90))
fill(plot1=position_price,plot2=tp_short_price,color=color.new(color.green,90))
show_signals=input.bool(defval=true,title="Showsignalsonchart?",group="============Appearance============")
plotshape(show_signalsandbuyandbullishandema_filter_longorshow_signalsandbuyandnotema_filter_long?low:na,title='Buy',text='Buy',style=shape.labelup,location=location.belowbar,color=color.new(color.green,20),textcolor=color.new(color.white,0),size=size.tiny,display=display.all-display.price_scale-display.status_line)
plotshape(show_signalsandsellandbearishandema_filter_longorshow_signalsandsellandnotema_filter_short?high:na,title='Sell',text='Sell',style=shape.labeldown,location=location.abovebar,color=color.new(color.red,20),textcolor=color.new(color.white,0),size=size.tiny,display=display.all-display.price_scale-display.status_line)
plotshape(show_signalsandcloselong_supertrendandclose_withsupertrendandboughtorshow_signalsandsellandbought?low:na,title='ClBuy',text='ClBuy',style=shape.labelup,location=location.belowbar,color=color.new(#4cafaf,30),textcolor=color.new(color.white,0),size=size.tiny,display=display.all-display.price_scale-display.status_line)
plotshape(show_signalsandcloseshort_supertrendandclose_withsupertrendandsoldorshow_signalsandbuyandbought?high:na,title='ClBuy',text='Clsell',style=shape.labeldown,location=location.abovebar,color=color.new(#4cafaf,30),textcolor=color.new(color.white,0),size=size.tiny,display=display.all-display.price_scale-display.status_line)
//===============================================================================================================================================
//---------------Positionsamountcalculator-------------
contracts_amount_c=initial_actual_capital/close
distance_sl_long_c=-1*(longStopLoss-close)/close
distance_sl_short_c=(shortStopLoss-close)/close
long_amount_c=close*(contracts_amount_c*(risk_c/100)/distance_sl_long_c)
short_amount_c=close*(contracts_amount_c*(risk_c/100)/distance_sl_short_c)
long_amount_lev=close*(contracts_amount_c*(risk_c/100)/distance_sl_long_c)
short_amount_lev=close*(contracts_amount_c*(risk_c/100)/distance_sl_short_c)
leverage_for_calculator=input.bool(defval=true,title="Useleverage?",group="============Positionamountcalculator===========",tooltip="Ifitisactivated,therewillbenomonetaryunitsoramountofassetslimitforeachoperation(Thatis,eachoperationwillnotbeaffectedbytheinitial/currentcapitalsinceitwouldbeusingleverage).Ifitisdeactivated,themonetaryunitsortheamountofassetstouseforeachoperationwillbelimitedbytheinitial/currentcapital.")
ifnotleverage_for_calculatorandlong_amount_lev>initial_actual_capital
long_amount_lev:=initial_actual_capital
ifnotleverage_for_calculatorandshort_amount_lev>initial_actual_capital
short_amount_lev:=initial_actual_capital
plot(buyandleverage_for_calculator?long_amount_c:na,color=color.rgb(255,230,0),display=display.all-display.pane-display.price_scale)
plot(sellandleverage_for_calculator?short_amount_c:na,color=color.rgb(255,230,0),display=display.all-display.pane-display.price_scale)
plot(buyandnotleverage_for_calculator?long_amount_lev:na,color=color.rgb(255,230,0),display=display.all-display.pane-display.price_scale)
plot(sellandnotleverage_for_calculator?short_amount_lev:na,color=color.rgb(255,230,0),display=display.all-display.pane-display.price_scale)
//===============================================================================================================================================
//=====================Drawingstatsaboutaddandwithdrawmoneyfrequentlyandothersonchart===================
ifnotboughtandbuyanddateandnotema_filter_long
totaltrades+=1
ifnotsoldandsellanddateandnotema_filter_short
totaltrades+=1
ifnotboughtandbuyanddateandbearishandema_filter_long
totaltrades+=0
ifnotsoldandsellanddateandbullishandema_filter_short
totaltrades+=0
ifnotboughtandbuyanddateandbullishandema_filter_long
totaltrades+=1
ifnotsoldandsellanddateandbearishandema_filter_short
totaltrades+=1
total_money_added=initial_capital_a-strategy.initial_capital
total_money_withdrawn=initial_capital_w-strategy.initial_capital
final_money=total_money_added+strategy.netprofit+strategy.initial_capital-total_money_withdrawn//orcurrentmoneyavaliable
//plot(commission_value_l,color=color.rgb(59,245,255),display=display.all-display.pane)
//plot(commission_value_s,color=color.rgb(59,245,255),display=display.all-display.pane)
//plot(total_commissions_value,color=color.rgb(252,59,255),display=display.all-display.pane)
//plot(total_trades/2,color=color.rgb(59,245,255),display=display.all-display.pane)
//plot(final_money,color=color.yellow,display=display.all-display.pane)
//plot(total_money_added,color=color.blue,display=display.all-display.pane)
//plot(total_money_withdrawn,color=color.red,display=display.all-display.pane)
//plot(strategy.netprofit,color=color.green,display=display.all-display.pane)
truncate(_number,_decimalPlaces)=>
_factor=math.pow(10,_decimalPlaces)
int(_number*_factor)/_factor
draw_stats=input.bool(true,"Showstatsfromadd/withdrawmoneyfrequently?",group="============Appearance============")
//Preparestatstable
vartabletestTable=table.new(position.top_right,5,2,border_width=2,frame_color=color.rgb(0,0,0),frame_width=2)
f_fillCell(_table,_column,_row,_title,_value,_bgcolor,_txtcolor,_size,_tooltip)=>
_cellText=_title+"\n"+_value
table.cell(_table,_column,_row,_cellText,bgcolor=_bgcolor,text_color=_txtcolor,text_size=_size,tooltip=_tooltip)

//Drawstatstable
varbgcolor=color.new(#2f5cda,50)
varbgcolor2=color.new(color.green,50)
varbgcolor3=color.new(color.red,50)
ifdraw_stats
ifbarstate.islastconfirmedhistory
f_fillCell(testTable,0,0,"Final/currentmoney:","$"+str.tostring(truncate(final_money,2)),bgcolor,color.white,_size=size.normal,_tooltip="Totalmoneyadded+totalreturnfromstrategy+initialcapital-totalmoneywithdrawn")
f_fillCell(testTable,0,1,"Totalmoneyadded:","$"+str.tostring(truncate(total_money_added,2)),bgcolor,color.white,_size=size.normal,_tooltip="Sumoftotalmoneyaddedattheendofthedate")
f_fillCell(testTable,1,0,"Totalmoneywithdrawn:","$"+str.tostring(truncate(total_money_withdrawn*-1,2)),bgcolor,color.white,_size=size.normal,_tooltip="Sumoftotalmoneywithdrawnattheendofthedate")
f_fillCell(testTable,1,1,"Totalreturn:","$"+str.tostring(truncate(strategy.netprofit,2)),strategy.netprofit>0?bgcolor2:bgcolor3,color.white,_size=size.normal,_tooltip="Totalreturnfromstrategyuntiltheendofthedate(itcouldbedifferentfromdefaultbacktestingiflastpositionhavenotbeenclosedcompletly)")
f_fillCell(testTable,2,0,"Totaltrades:",""+str.tostring(truncate(totaltrades,2)),bgcolor,color.white,_size=size.normal,_tooltip="Sumofrealtotaltrades.Thevaluefromdefaultbacktesterit´snotprecise")
f_fillCell(testTable,2,1,"Totalcommissionsvalue:",""+str.tostring(truncate(total_commissions_value,2)),bgcolor,color.white,_size=size.normal,_tooltip="Sumofcommissionsvaluefromalltrades.Youmustsetthe%valueinthescriptsettings(Positionsmanagement).")
//=====================================================================:D
Expand (930 lines)
