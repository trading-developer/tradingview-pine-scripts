Script Name: Inverse FVG with Rejections [TFO]
Author: tradeforopp
Description: This indicator is made to look for Inverse Fair Value Gaps (IFVGs) and show rejections from relevant areas. Fair Value Gaps (FVGs) are created when there is an energetic move that leaves a gap between the preceding and following candle's wicks. When that area is violated, we may consider that area as an Inverse FVG, treating it along the lines of a "support turned...
PineScript code:

Pine Script™ indicator
Inverse FVG with Rejections [TFO]
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  tradeforopp
//@version=5
indicator("Inverse  FVG  with  Rejections  [TFO]",  "Inverse  FVG  [TFO]",  true)
//  --------------------------------------------------  Inputs  --------------------------------------------------
var  g_SET  =  "Settings"
show_rfvg  =  input.bool(true,  "Show  Regular  FVG",  inline  =  "RFVG",  group  =  g_SET)
show_ifvg  =  input.bool(true,  "Show  Inverse  FVG",  inline  =  "IFVG",  group  =  g_SET)
rfvg_color  =  input.color(color.new(color.blue,  50),  "",  inline  =  "RFVG",  group  =  g_SET)
ifvg_color  =  input.color(color.new(color.red,  50),  "",  inline  =  "IFVG",  group  =  g_SET)
disp_x  =  input.int(3,  "Displacement",  1,  10,  tooltip  =  "Larger  Displacement  will  require  larger  FVGs",  group  =  g_SET)
disp_limit  =  input.int(10,  "Display  Limit",  1,  50,  tooltip  =  "The  maximum  amount  of  FVGs  and  IFVGs  to  display",  group  =  g_SET)
session  =  input.session("0000-0000",  "Session",  tooltip  =  "FVGs  will  only  be  saved  if  they  are  created  within  this  time  period",  group  =  g_SET)
var  g_RJ  =  "Rejections"
ps  =  input.int(1,  "Rejection  Strength",  tooltip  =  "Larger  values  will  require  larger  fractals/swing  pivots  to  justify  as  rejections",  group  =  g_RJ)
show_rrj  =  input.bool(false,  "Regular  FVG",  inline  =  "RRJ",  tooltip  =  "Show  rejections  made  within  regular  FVGs",  group  =  g_RJ)
show_irj  =  input.bool(false,  "Inverse  FVG",  inline  =  "IRJ",  tooltip  =  "Show  rejections  made  within  inverse  FVGs",  group  =  g_RJ)
show_brj  =  input.bool(true,  "Regular  +  Inverse  FVG",  inline  =  "BRJ",  tooltip  =  "Show  rejections  made  within  both  regular  and  inverse  FVGs",  group  =  g_RJ)
rrj_color  =  input.color(color.blue,  "",  inline  =  "RRJ",  group  =  g_RJ)
irj_color  =  input.color(color.red,  "",  inline  =  "IRJ",  group  =  g_RJ)
brj_color  =  input.color(color.black,  "",  inline  =  "BRJ",  group  =  g_RJ)
//  --------------------------------------------------  Inputs  --------------------------------------------------
//  --------------------------------------------------  Logic  --------------------------------------------------
t  =  not  na(time("",  session,  "America/New_York"))
bull  =  close[2]  >  open[2]
fvg  =  bull  ?  (high[3]  <  low[1]  and  low[2]  <=  high[3]  and  high[2]  >=  low[1])  :  (low[3]  >  high[1]  and  low[2]  <=  high[1]  and  low[3]  <=  high[2])
fvg_len  =  bull  ?  low[1]  -  high[3]  :  low[3]  -  high[1]
atr_check  =  fvg_len  >  ta.atr(50)  *  disp_x  /  10
var  reg_fvg  =  array.new_box()
var  reg_fvg_ce  =  array.new_line()
var  reg_fvg_side  =  array.new_string()
var  inv_fvg  =  array.new_box()
var  inv_fvg_ce  =  array.new_line()
var  inv_fvg_side  =  array.new_string()
solid_color(color  x)  =>
        color.new(x,  0)
if  t[2]  and  fvg  and  atr_check
        top  =  bull  ?  low[1]  :  low[3]
        bottom  =  bull  ?  high[3]  :  high[1]
        reg_fvg.unshift(box.new(time[2],  top,  time,  bottom,  xloc  =  xloc.bar_time,  extend  =  extend.right,  bgcolor  =  show_rfvg  ?  rfvg_color  :  na,  border_color  =  na))
        reg_fvg_ce.unshift(line.new(time[2],  math.avg(top,  bottom),  time,  math.avg(top,  bottom),  xloc  =  xloc.bar_time,  extend  =  extend.right,  color  =  show_rfvg  ?  solid_color(rfvg_color)  :  na,  style  =  line.style_dashed))
        reg_fvg_side.unshift(bull  ?  'bull'  :  'bear')
if  reg_fvg.size()  >  0
        for  i  =  reg_fvg.size()  -  1  to  0
                remove_bull  =  reg_fvg_side.get(i)  ==  'bull'  and  close[1]  <  reg_fvg.get(i).get_bottom()
                remove_bear  =  reg_fvg_side.get(i)  ==  'bear'  and  close[1]  >  reg_fvg.get(i).get_top()
                if  remove_bull  or  remove_bear
                        inv_fvg.unshift(box.copy(reg_fvg.get(i)))
                        inv_fvg_ce.unshift(line.copy(reg_fvg_ce.get(i)))
                        inv_fvg.get(0).set_bgcolor(show_ifvg  ?  ifvg_color  :  na)
                        inv_fvg_ce.get(0).set_color(show_ifvg  ?  solid_color(ifvg_color)  :  na)
                        box.delete(reg_fvg.get(i))
                        line.delete(reg_fvg_ce.get(i))
                        reg_fvg.remove(i)
                        reg_fvg_ce.remove(i)
                        reg_fvg_side.remove(i)

                        if  remove_bear
                                inv_fvg_side.unshift('inv  bear')
                        else  if  remove_bull
                                inv_fvg_side.unshift('inv  bull')
        if  reg_fvg.size()  >  disp_limit
                box.delete(reg_fvg.pop())
                line.delete(reg_fvg_ce.pop())
                reg_fvg_side.pop()
if  inv_fvg.size()  >  0
        for  i  =  inv_fvg.size()  -  1  to  0
                remove_inv_bear  =  inv_fvg_side.get(i)  ==  'inv  bear'  and  close[1]  <  inv_fvg.get(i).get_bottom()
                remove_inv_bull  =  inv_fvg_side.get(i)  ==  'inv  bull'  and  close[1]  >  inv_fvg.get(i).get_top()
                if  remove_inv_bear  or  remove_inv_bull
                        box.delete(inv_fvg.get(i))
                        line.delete(inv_fvg_ce.get(i))
                        inv_fvg.remove(i)
                        inv_fvg_ce.remove(i)
                        inv_fvg_side.remove(i)
        if  inv_fvg.size()  >  disp_limit
                box.delete(inv_fvg.pop())
                line.delete(inv_fvg_ce.pop())
                inv_fvg_side.pop()
reg_rj_bear  =  false
reg_rj_bull  =  false
inv_rj_bear  =  false
inv_rj_bull  =  false
if  math.min(reg_fvg.size(),  inv_fvg.size())  >  0
        for  i  =  0  to  reg_fvg.size()  -  1
                _rrj_bear  =  ta.pivothigh(high,  ps,  ps)  and  high[ps]  >=  reg_fvg.get(i).get_bottom()  and  high[ps]  <=  reg_fvg.get(i).get_top()
                _rrj_bull  =  ta.pivotlow(low,  ps,  ps)  and  low[ps]  >=  reg_fvg.get(i).get_bottom()  and  low[ps]  <=  reg_fvg.get(i).get_top()
                if  _rrj_bear
                        reg_rj_bear  :=  true
                if  _rrj_bull
                        reg_rj_bull  :=  true
        for  i  =  0  to  inv_fvg.size()  -  1
    _irj_bear=ta.pivothigh(high,ps,ps)andhigh[ps]>=inv_fvg.get(i).get_bottom()andhigh[ps]<=inv_fvg.get(i).get_top()
_irj_bull=ta.pivotlow(low,ps,ps)andlow[ps]>=inv_fvg.get(i).get_bottom()andlow[ps]<=inv_fvg.get(i).get_top()
if_irj_bear
inv_rj_bear:=true
if_irj_bull
inv_rj_bull:=true
plotshape(show_rrjandreg_rj_bear[1],color=rrj_color,size=size.small,location=location.abovebar,style=shape.triangledown)
plotshape(show_rrjandreg_rj_bull[1],color=rrj_color,size=size.small,location=location.belowbar,style=shape.triangleup)
plotshape(show_irjandinv_rj_bear[1],color=irj_color,size=size.small,location=location.abovebar,style=shape.triangledown)
plotshape(show_irjandinv_rj_bull[1],color=irj_color,size=size.small,location=location.belowbar,style=shape.triangleup)
plotshape(show_brjandreg_rj_bear[1]andinv_rj_bear[1],color=brj_color,size=size.small,location=location.abovebar,style=shape.triangledown)
plotshape(show_brjandreg_rj_bull[1]andinv_rj_bull[1],color=brj_color,size=size.small,location=location.belowbar,style=shape.triangleup)
//--------------------------------------------------Logic--------------------------------------------------
Expand (136 lines)
