Script Name: Webhook Starter Kit [HullBuster]
Author: tradingtudi
Description: Introduction

This is an open source strategy which provides a framework for webhook enabled projects. It is designed to work out-of-the-box on any instrument triggering on an intraday bar interval. This is a full featured script with an emphasis on actual trading at a brokerage through the TradingView alert mechanism and without requiring browser plugins....
PineScript code:

Pine Script™ strategy
Webhook Starter Kit [HullBuster]
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  tradingtudi
//@version=4
strategy(title  =  "WebhookDrive-V1",  overlay  =  true,  pyramiding  =  0,  initial_capital  =  10000,  currency  =  currency.USD)
//  -----------------------------
//  ----  Strategy  Inputs
//  -----------------------------
inputBuild                      =  input(defval  =  101,        type  =  input.integer,    minval  =  0.0,    title  =  "Build  Number",                      group  =  "[  SECTION  1  ]",  tooltip  =  "This  is  a  trend  follow  script  that  enters  the  market  long  above  the  purple  line  and  short  below.  It  is  prone  to  losses  on  ranging  markets  where  the  trend  line  bisects  the  price  stream")
inputTradingMode          =  input(defval  =  "BiDir",  options  =  ["Long","Short","BiDir","Flip  Flop","Crypto","Range","No  Trade"],  title  =  "Trading  Mode",  group  =  "[  SECTION  1  ]",  tooltip  =  "BiDir  is  for  margin  trading  with  a  stop.  Flip  Flop  will  alter  direction  on  trend  line  cross.  Crypto  is  long  only  with  downward  pyramids.  Range  only  enters  on  a  counter-trend")
inputMinProfit              =  input(defval  =  0.50,      type  =  input.float,        minval  =  0.0,    title  =  "Minimum  Profit",                  group  =  "[  SECTION  1  ]",  tooltip  =  "Smallest  take  profit  offset  to  permit  a  close  order.  This  is  a  conditional  exit  not  a  limit  (quote  currency  units)")
inputStopOffset            =  input(defval  =  0.50,      type  =  input.float,        minval  =  0.0,    title  =  "Stop  Offset",                        group  =  "[  SECTION  1  ]",  tooltip  =  "Hard  stop  offset  from  the  trade  open  price  (quote  currency  units)")
inputTickScaler            =  input(defval  =  10.0,      type  =  input.float,        minval  =  1.0,    title  =  "Tick  Scalar",                        group  =  "[  SECTION  1  ]",  tooltip  =  "Value  used  to  remove  the  pipette  from  quote  currency  calculations.  See  the  Summary  Report  to  determine  this  value")
inputChgDivisor            =  input(defval  =  1000.0,  type  =  input.float,        minval  =  1.0,    title  =  "Price  Normalizer",              group  =  "[  SECTION  1  ]",  tooltip  =  "Value  used  to  normalize  bar  prices  for  differential  calculations.  Serves  to  increase  the  magnitude  of  significant  digits.  Applied  to  all  inputs  specifying  net  change  and  roc")
inputPryramidSpan        =  input(defval  =  0.0,        type  =  input.float,        minval  =  0.0,    title  =  "Pyramid  Minimum  Span",      group  =  "[  SECTION  1  ]",  tooltip  =  "Minimum  spacing  between  downward  pyramid  levels  (quote  currency  units).  Set  to  zero  to  disable  downward  pyramiding.  To  fully  disable  pyramiding  zero  the  value  in  the  Properties  tab")
inputPyramidBaleOut    =  input(defval  =  true,      type  =  input.bool,                                        title  =  "Position  Bale  Out",            group  =  "[  SECTION  1  ]",  tooltip  =  "Enable  to  exit  positions  early.  The  algorithm  ensures  the  position  exits  at  a  profit  but  not  at  the  amount  specified  in  the  Minimum  Profit  input.  Reduces  the  risk  when  pyramiding")
inputMaxAddOns              =  input(defval  =  0,            type  =  input.integer,    minval  =  0,        maxval  =  20,  title    =  "Maximum  DCA  Increments",  group  =  "[  SECTION  1  ]",  tooltip  =  "Sets  a  whole  number  limit  on  the  number  of  times  a  losing  position  can  be  averaged  down")
inputSignalPeriod        =  input(defval  =  "60",      options  =  ["60","240","1440"],                title  ="SignalLinePeriod",group="[SECTION2]",tooltip="SetsthebarintervalfortheBlue,Green,OrangesignallinesandtheZScoreoscillatornotvisible")
inputTrendPeriod=input(defval="240",options=["60","240","1440"],title="TrendLinePeriod",group="[SECTION2]",tooltip="SetsthebarintervalforthePurpletrendlineandStochasticindicator")
inputFastAlmaLen=input(defval=10,type=input.integer,minval=1,title="FastAlmaLength",group="[SECTION2]",tooltip="SetstheperiodlengthoftheBlueline(ArnaudLegouxMovingAverageindicator)")
inputFastLinRegLen=input(defval=30,type=input.integer,minval=1,title="FastLinRegLength",group="[SECTION2]",tooltip="SetstheperiodlengthoftheGreenline(LinearRegressionindicator)")
inputSlowLinRegLen=input(defval=100,type=input.integer,minval=1,title="SlowLinRegLength",group="[SECTION2]",tooltip="SetstheperiodlengthoftheOrangeline(LinearRegressionindicator)")
inputTrendDEMALen=input(defval=200,type=input.integer,minval=1,title="TrendLineLength",group="[SECTION2]",tooltip="SetstheperiodlengthofthePurpleline(DoubleSmoothedMovingAverageindicator)")
inputStochastLen=input(defval=14,type=input.integer,minval=1,title="StochasticLength",group="[SECTION2]",tooltip="SetstheperiodlengthoftwoStochasticindicators.OneatthePurpleline.Secondatthechartinterval")
inputFastCrossLen=input(defval=9,type=input.integer,minval=1,title="FastCrossLength",group="[SECTION3]",tooltip="SetstheperiodlengthoftheSimpleMovingAverageindicatorusedfortradeentry(CrossoverSetup).ThesameexactoneusedintheTVexamplestrategy.Crossupisalongentry.Crossdownisshort")
inputSlowCrossLen=input(defval=24,type=input.integer,minval=1,title="SlowCrossLength",group="[SECTION3]",tooltip="SetstheperiodlengthoftheSimpleMovingAverageindicatorusedfortradeentry(CrossoverSetup).ThesameexactoneusedintheTVexamplestrategy.Crossupisalongentry.Crossdownisshort")
inputFastEMALen=input(defval=8,type=input.integer,minval=1,title="FastEMALength",group="[SECTION3]",tooltip="SetstheperiodlengthoftheYellowline(ExponentialMovingAverageindicator).Thisisachartintervalindicator")
inputFastEMARiseNet=input(defval=3.0,type=input.float,minval=0.00,title="FastEMARiseNetChg",group="[SECTION3]",tooltip="MeasuresthedeltapercentagefromtheupwardcrossoftheYellowovertheBlueline.Alargernumbermeansthemarketmustswinghighertogenerateasignal.Tradeswillstayinlonger")
inputFastEMARiseROC=input(defval=0.8,type=input.float,minval=0.00,title="FastEMARiseROC",group="[SECTION3]",tooltip="MeasurestherateofchangefromtheupwardcrossoftheYellowovertheBlueline.Alargernumbermeanstheswinghigherhastooccuroveracommensuratelyshortertime.Tradeswillstayinlonger")
inputFastEMAFallNet=input(defval=4.0,type=input.float,minval=0.00,title="FastEMAFallNetChg",group="[SECTION3]",tooltip="MeasuresthedeltapercentagefromthedownwardcrossoftheYellowundertheBlueline.Alargernumbermeansthemarketmustswinglowertogenerateasignal.Tradeswillstayinlonger")
inputFastEMAFallROC=input(defval=0.8,type=input.float,minval=0.00,title="FastEMAFallROC",group="[SECTION3]",tooltip="MeasurestherateofchangefromthedownwardcrossoftheYellowundertheBlueline.Alargernumbermeanstheswinglowerhastooccuroveracommensuratelyshortertime.Tradeswillstayinlonger")
inputLongNascent=input(defval=false,type=input.bool,title="EnterLongOnNascent",group="[SECTION4]",tooltip="Enablesrudimentarycounter-trendtrading.IfcheckedlongtradeswillsignalbelowthePurpletrendlineandwillexitabove.Thestrategywillperformpoorlyintrendingmarkets")
inputLongCrossExit=input(defval=true,type=input.bool,title="LongNaturalExit",group="[SECTION4]",tooltip="AnaturallongexitiswhentheBluelinecrossesundertheGreenLine(downward).Thepositionmustbeprofitabletoexit")
inputLongSignalExit=input(defval=true,type=input.bool,title="LongSignalExit",group="[SECTION4]",tooltip="AsignaleventiswhentheBluecrossesovertheGreenlineatthemagnitudeandratespecifiedinsection#6.TheZScoreoscillatormusthavereachedthepositivevaluespecifiedinsection#6.Thepositionmustbeprofitabletoexit")
inputLongEventExit=input(defval=true,type=input.bool,title="LongPriceEventExit",group="[SECTION4]",tooltip="ApriceeventiswhentheYellowcrossesovertheBluelineatthemagnitudeandratespecifiedinsection#3.Thepositionmustbeprofitabletoexit")
inputLongStochExit=input(defval=true,type=input.bool,title="LongStochasticExit",group="[SECTION4]",tooltip="ThisexitoccurswhentheStochasticoscillatormeasuringthePurplelineexceedstheoverboughtthreshold(80).Thepositionmustbeprofitabletoexit")
inputShortNascent=input(defval=false,type=input.bool,title="EnterShortOnNascent",group="[SECTION5]",tooltip="Enablesrudimentarycounter-trendtrading.IfcheckedshorttradeswillsignalabovethePurpletrendlineandwillexitbelow.Thestrategywillperformpoorlyintrendingmarkets")
inputShortCrossExit=input(defval=true,type=input.bool,title="ShortNaturalExit",group="[SECTION5]",tooltip="AnaturalshortexitiswhentheBluelinecrossesovertheGreenLine.(upward)Thepositionmustbeprofitabletoexit")
inputShortSignalExit=input(defval=true,type=input.bool,title="ShortSignalExit",group="[SECTION5]",tooltip="AsignaleventiswhentheBluecrossesundertheGreenlineatthemagnitudeandratespecifiedinsection#6.TheZScoreoscillatormusthavereachedthenegativevaluespecifiedinsection#6.Thepositionmustbeprofitabletoexit")
inputShortEventExit=input(defval=true,type=input.bool,title="ShortPriceEventExit",group="[SECTION5]",tooltip="ApriceeventiswhentheYellowcrossesundertheBluelineatthemagnitudeandratespecifiedinsection#3.Thepositionmustbeprofitabletoexit")
inputShortStochExit=input(defval=true,type=input.bool,title="ShortStochasticExit",group="[SECTION5]",tooltip="ThisexitoccurswhentheStochasticoscillatormeasuringthePurplelineexceedstheoversoldthreshold(20).Thepositionmustbeprofitabletoexit")
inputRiseEventNet=input(defval=10.0,type=input.float,minval=0.00,title="RiseEventNetChange",group="[SECTION6]",tooltip="MeasuresthedeltapercentagefromtheupwardcrossoftheBlueovertheGreenline.Alargernumbermeansthemarketmustswinghighertogenerateasignal.Tradeswillstayinlonger")
inputRiseEventROC=input(defval=0.1,type=input.float,minval=0.00,title="RiseEventROC",group="[SECTION6]",tooltip="MeasurestherateofchangefromtheupwardcrossoftheBlueovertheGreenline.Alargernumbermeanstheswinghigherhastooccuroveracommensuratelyshortertime.Tradeswillstayinlonger")
inputMinZScoreABZ=input(defval=5.0,type=input.float,minval=0.00,title="MinAboveZeroZScore",group="[SECTION6]",tooltip="SpecifiestheoverboughtthresholdoftheZScoreoscillator.Ifthe[LongSignalExit]optioninSection#4isenabledahighvalueherewillcausethelongtradetostayinthemarketlonger")
inputFallEventNet=input(defval=10.0,type=input.float,minval=0.00,title="FallEventNetChange",group="[SECTION6]",tooltip="MeasuresthedeltapercentagefromthedownwardcrossoftheBlueundertheGreenline.Alargernumbermeansthemarketmustswinglowertogenerateasignal.Tradeswillstayinlonger")
inputFallEventROC=input(defval=0.1,type=input.float,minval=0.00,title="FallEventROC",group="[SECTION6]",tooltip="MeasurestherateofchangefromthedownwardcrossoftheBlueundertheGreenline.Alargernumbermeanstheswinglowerhastooccuroveracommensuratelyshortertime.Tradeswillstayinlonger")
inputMinZScoreBLZ=input(defval=5.0,type=input.float,minval=0.00,title="MinBelowZeroZScore",group="[SECTION6]",tooltip="SpecifiestheoversoldthresholdoftheZScoreoscillator.Ifthe[ShortSignalExit]optioninSection#5isenabledahighvalueherewillcausetheshorttradetostayinthemarketlonger")
inputShowLines=input(defval=true,type=input.bool,title="ShowTrendLines",group="[SECTION7]",tooltip="DisplaytheYellow,Blue,Green,OrangeandPurpletrendlines.Theyarerenderedatawidthof2")
inputShowCrosses=input(defval=false,type=input.bool,title="ShowEntryRegions",group="[SECTION7]",tooltip="BackgroundfillfortheSMAcrossoversspecifiedinSection#3.TheSMAisonthecharttimeframesowilldisplayfrequenttransitions.Blueisanupwardcross.Redisdownward")
inputShowEvents=input(defval=false,type=input.bool,title="DisplayEventRegions",group="[SECTION7]",tooltip="BackgroundfillforsignaleventsspecifiedinSection#6.TheBluecrossingtheGreenlines.UseittoconfigureSection#6.Blueisexceedingrisevalues.Redisisexceedingfallvalues")
inputShowEMPeaks=input(defval=false,type=input.bool,title="DisplayEMAPeaks",group="[SECTION7]",tooltip="BackgroundfillforpriceeventsspecifiedinSection#3.TheYellowcrossingtheBluelines.UseittoconfigureSection#3.Blueisexceedingrisevalues.Redisisexceedingfallvalues")
inputShowStochEvent=input(defval=false,type=input.bool,title="ShowStochasticEvents",group="[SECTION7]",tooltip="BackgroundfillforStochasticeventsoccurringonthePurpleline.UseitverifyselectedexitsinSection#4and#5.Blueisexceedingoverboughtlevels.Redisisexceedingoversoldlevels")
inputShowConsecLoss=input(defval=false,type=input.bool,title="ShowConsecutiveLosses",group="[SECTION7]",tooltip="Backgroundfillforperiodswhenconsecutivelossesareoccurring.Redareasmeanstopswherehitandhavenotencounteredaprofitableexit.UseittomakeadjustmentstothevaluesinSection#1")
inputShowBaleOuts=input(defval=false,type=input.bool,title="ShowBaleOuts",group="[SECTION7]",tooltip="Displaysredlabelsunderthebarswhereapositionwasexitedprematurely.Eachboxcontainsinformationaboutthestateofthetradeatexittime.Useitwhen[PositionBaleOut]inSection#1isenabled")
inputReport=input(defval=false,type=input.bool,title="ShowSummaryReport",group="[SECTION7]",tooltip="Displaysabluelabelattheliveendofthechart.Containsusefulstrategymetricswhichcanaidinthedevelopmentofthescript.Relevantinformationshouldbeaddedhereasthescriptlogicevolves.HappyTrading!")
intinputNormalizeLen=100
boolinputAccumulateLong=false
boolinputAccumulateShort=false
boolinputExclusiveLong=false
boolinputExclusiveShort=false
if(inputTradingMode=="Long")
inputExclusiveLong:=true
if(inputTradingMode=="Short")
inputExclusiveShort:=true
if(inputTradingMode=="Crypto")
inputAccumulateLong:=true
inputLongNascent:=true
inputExclusiveLong:=true
if(inputTradingMode=="Range")
inputAccumulateLong:=true
inputAccumulateShort:=true
inputLongNascent:=true
inputShortNascent:=true
strategy.risk.allow_entry_in((inputTradingMode=="Long")?strategy.direction.long:(inputTradingMode=="Short")?strategy.direction.short:(inputTradingMode=="Crypto")?strategy.direction.long:strategy.direction.all)
if(inputTradingMode=="Crypto")
inputTradingMode:="FlipFlop"
//-----------------------------
//----IndicatorConfigurations
//-----------------------------
floatfltBarPrice=close
//LinearRegression
intncSlowLinRegLen=inputSlowLinRegLen
intncFastLinRegLen=inputFastLinRegLen
intncLinRegOffset=0
//ArnaudLegouxMovingAverage
intncFastAlmaLen=inputFastAlmaLen
//DoubleExponentialMovingAverage
intncTrendDEMALen=inputTrendDEMALen
//ZScoreSimpleMovingAverage
intncNormalizeLen=inputNormalizeLen
//FastCrossSimpleMovingAverage
intncFastCrossLen=inputFastCrossLen
//SlowCrossSimpleMovingAverage
intncSlowCrossLen=inputSlowCrossLen
//FastExponentialMovingAverage
intncFastEMALen=inputFastEMALen
//StochasticOscillator
intncStochasLen=inputStochastLen
intncKn2Period=3
intncDn3Period=3
//-----------------------------
//----SeriesUtilities
//-----------------------------
intindexClosedBar=barstate.isrealtime?1:0
intindexReadBar=barstate.isrealtime?0:1
calcDEMA(seriesData,ncMALength)=>
floatemaAlpha=ema(seriesData,ncMALength)
floatemaOfEma=ema(emaAlpha,ncMALength)
floatseriesDema=(2*emaAlpha)-emaOfEma
calcTrendDEMA()=>
floatseriesOut=calcDEMA(fltBarPrice[indexClosedBar],ncTrendDEMALen)
calcSlowLinReg()=>
floatseriesOut=linreg(fltBarPrice[indexClosedBar],ncSlowLinRegLen,ncLinRegOffset)
calcFastLinReg()=>
floatseriesOut=linreg(fltBarPrice[indexClosedBar],ncFastLinRegLen,ncLinRegOffset)
calcFastAlma()=>
floatseriesOut=alma(fltBarPrice[indexClosedBar],ncFastAlmaLen,0.85,6)
calcStochastic()=>
floatseriesOut=stoch(close[indexClosedBar],high[indexClosedBar],low[indexClosedBar],ncStochasLen)
//----------------------------
//----SeriesCreation
//----------------------------
floatseriesClose=close[indexClosedBar]
floatseriesHigh=high[indexClosedBar]
floatseriesLow=low[indexClosedBar]
//----[HIGHERTIMEFRAME]----
//LinearRegression
floathtf_seriesSlowLinReg=security(syminfo.tickerid,inputSignalPeriod,calcSlowLinReg())[indexReadBar]
floathtf_seriesFastLinReg=security(syminfo.tickerid,inputSignalPeriod,calcFastLinReg())[indexReadBar]
//ArnaudLegouxMovingAverage
floathtf_seriesFastAlma=security(syminfo.tickerid,inputSignalPeriod,calcFastAlma())[indexReadBar]
//DoubleExponentialMovingAverage
floathtf_seriesTrendDEMA=security(syminfo.tickerid,inputTrendPeriod,calcTrendDEMA())[indexReadBar]
//ZScoreSimpleMovingAverage
floathtf_seriesAlmaMean=sma(htf_seriesFastAlma,ncNormalizeLen)
//ZScoreSeries
floathtf_seriesMarks=htf_seriesFastAlma-htf_seriesAlmaMean
floathtf_seriesZScore=htf_seriesMarks/stdev(htf_seriesMarks,ncNormalizeLen)
//StochasticOscillator
floathtf_seriesFastK=security(syminfo.tickerid,inputTrendPeriod,calcStochastic())[indexReadBar]
floathtf_seriesDLine=sma(htf_seriesFastK,ncKn2Period)
floathtf_seriesSlowD=sma(htf_seriesDLine,ncDn3Period)
//----[CHARTTIMEFRAME]----
//FastCrossSimpleMovingAverage
floatseriesFastCross=sma(fltBarPrice,ncFastCrossLen)
//SlowCrossSimpleMovingAverage
floatseriesSlowCross=sma(fltBarPrice,ncSlowCrossLen)
//FastExponentialMovingAverage
floatseriesFastEMA=ema(fltBarPrice,ncFastEMALen)
//StochasticOscillator
floatseriesFastK=stoch(seriesClose,seriesHigh,seriesLow,ncStochasLen)
floatseriesDLine=sma(seriesFastK,ncKn2Period)
floatseriesSlowD=sma(seriesDLine,ncDn3Period)
//----------------------------
//----IndicatorConditions
//----------------------------
boolbHTFSignalRise=(htf_seriesFastAlma>htf_seriesFastLinReg)
boolbHTFSignalFall=(htf_seriesFastAlma<htf_seriesFastLinReg)
boolbHTFFastAboveTrend=((htf_seriesFastAlma>htf_seriesTrendDEMA)and(htf_seriesFastLinReg>htf_seriesTrendDEMA))
boolbHTFFastBelowTrend=((htf_seriesFastAlma<htf_seriesTrendDEMA)and(htf_seriesFastLinReg<htf_seriesTrendDEMA))
boolbFastAboveSignal=((seriesFastEMA>htf_seriesFastAlma)and(htf_seriesFastAlma>htf_seriesFastLinReg))
boolbFastBelowSignal=((seriesFastEMA<htf_seriesFastAlma)and(htf_seriesFastAlma<htf_seriesFastLinReg))
boolbFullFanCone=((bFastAboveSignal==true)and(htf_seriesFastLinReg>htf_seriesSlowLinReg))
boolbDownFanCone=((bFastBelowSignal==true)and(htf_seriesFastLinReg<htf_seriesSlowLinReg))
boolbPartialTrendRise=((seriesFastEMA>htf_seriesFastAlma)and(htf_seriesFastAlma>htf_seriesSlowLinReg)and(htf_seriesFastLinReg>htf_seriesSlowLinReg))
boolbPartialTrendFall=((seriesFastEMA<htf_seriesFastAlma)and(htf_seriesFastAlma<htf_seriesSlowLinReg)and(htf_seriesFastLinReg<htf_seriesSlowLinReg))
boolbDurableTrendRise=((bPartialTrendRise==true)and(htf_seriesSlowLinReg>htf_seriesTrendDEMA))
boolbDurableTrendFall=((bPartialTrendFall==true)and(htf_seriesSlowLinReg<htf_seriesTrendDEMA))
boolbHTFNascentRise=((htf_seriesFastAlma>htf_seriesSlowLinReg)and(htf_seriesFastLinReg>htf_seriesSlowLinReg)and(htf_seriesSlowLinReg<htf_seriesTrendDEMA))
boolbHTFNascentFall=((htf_seriesFastAlma<htf_seriesSlowLinReg)and(htf_seriesFastLinReg<htf_seriesSlowLinReg)and(htf_seriesSlowLinReg>htf_seriesTrendDEMA))
//-------------------------------
//----EventUtilities
//-------------------------------
floatfltFXMinTick=syminfo.mintick*inputTickScaler
calcRiseNetChg(fltFastPrice,fltSlowPrice)=>
floatfltPercentChg=0.0
floatfltChgDivisor=(inputChgDivisor>1.0)?inputChgDivisor:fltSlowPrice
if(((na(fltSlowPrice)==false)and(fltSlowPrice>0.0)and(fltFastPrice>fltSlowPrice))==true)
fltPercentChg:=(((fltFastPrice-fltSlowPrice)/fltFXMinTick)/fltChgDivisor)*100.0
floatfltResult=fltPercentChg
calcFallNetChg(fltFastPrice,fltSlowPrice)=>
floatfltPercentChg=0.0
floatfltChgDivisor=(inputChgDivisor>1.0)?inputChgDivisor:fltSlowPrice
if(((na(fltSlowPrice)==false)and(fltSlowPrice>0.0)and(fltFastPrice<fltSlowPrice))==true)
fltPercentChg:=(((fltSlowPrice-fltFastPrice)/fltFXMinTick)/fltChgDivisor)*100.0
floatfltResult=fltPercentChg
//-------------------------------
//----HTFFastAlmaCrossesHTFFastLinReg
//-------------------------------
//AlmaAboveandBelowLinReg(AL)
varfloatfltRiseALCrossPrice=0.0
varfloatfltRiseALNetChg=0.0
varfloatfltFallALCrossPrice=0.0
varfloatfltFallALNetChg=0.0
varintncRiseALBarsSince=0
varintncFallALBarsSince=0
if(htf_seriesFastAlma>htf_seriesFastLinReg)
if(ncFallALBarsSince>0)//Wewerepreviouslyfalling
ncFallALBarsSince:=0//Zeromeansnotinthatdirection
fltFallALCrossPrice:=0.0
ncRiseALBarsSince:=1//Non-zeromeanscurrentlyrising
fltRiseALCrossPrice:=seriesClose
fltRiseALNetChg:=0.0
else
ncRiseALBarsSince:=ncRiseALBarsSince+1//Risecontinues
fltRiseALNetChg:=calcRiseNetChg(seriesClose,fltRiseALCrossPrice)//Rising
if(htf_seriesFastAlma<htf_seriesFastLinReg)
if(ncRiseALBarsSince>0)//Wewerepreviouslyrising
ncRiseALBarsSince:=0//Zeromeansnotinthatdirection
fltRiseALCrossPrice:=0.0
ncFallALBarsSince:=1//Non-zeromeanscurrentlyfalling
fltFallALCrossPrice:=seriesClose
fltFallALNetChg:=0.0
else
ncFallALBarsSince:=ncFallALBarsSince+1//Fallcontinues
fltFallALNetChg:=calcFallNetChg(seriesClose,fltFallALCrossPrice)//Falling
isMinimumNetChgROC(ncTypeBarsSince,fltTypeNetChg,fltMinNetChg,fltMinROC)=>
boolbPassed=false
bPassed:=(((ncTypeBarsSince>0)and(fltTypeNetChg>0.0))and(fltTypeNetChg>=fltMinNetChg)and((fltTypeNetChg/ncTypeBarsSince)>=fltMinROC))
//-------------------------------
//----FastEMACrossesHTFAlma
//-------------------------------
//LTFEMAAboveandBelowHTFAlma(EM)
varfloatfltRiseEMCrossPrice=0.0
varfloatfltRiseEMNetChg=0.0
varfloatfltFallEMCrossPrice=0.0
varfloatfltFallEMNetChg=0.0
varintncRiseEMBarsSince=0
varintncFallEMBarsSince=0
if(seriesFastEMA>htf_seriesFastAlma)
if(ncFallEMBarsSince>0)//Wewerepreviouslyfalling
ncFallEMBarsSince:=0//Zeromeansnotinthatdirection
fltFallEMCrossPrice:=0.0
ncRiseEMBarsSince:=1//Non-zeromeanscurrentlyrising
fltRiseEMCrossPrice:=seriesClose
fltRiseEMNetChg:=0.0
else
ncRiseEMBarsSince:=ncRiseEMBarsSince+1//Risecontinues
fltRiseEMNetChg:=calcRiseNetChg(seriesClose,fltRiseEMCrossPrice)//Rising
if(seriesFastEMA<htf_seriesFastAlma)
if(ncRiseEMBarsSince>0)//Wewerepreviouslyrising
ncRiseEMBarsSince:=0//Zeromeansnotinthatdirection
fltRiseEMCrossPrice:=0.0
ncFallEMBarsSince:=1//Non-zeromeanscurrentlyfalling
fltFallEMCrossPrice:=seriesClose
fltFallEMNetChg:=0.0
else
ncFallEMBarsSince:=ncFallEMBarsSince+1//Fallcontinues
fltFallEMNetChg:=calcFallNetChg(seriesClose,fltFallEMCrossPrice)//Falling
//----------------------------
//----ZScoreHistogramTracking
//----------------------------
//ZScoreAboveandBelowZeroLine(ZS)
boolbNewRiseZSHigh=false
boolbNewFallZSLow=false
varintncRiseZSSince=0
varintncFallZSSince=0
varintncRiseZSCount=0
varintncFallZSCount=0
varfloatfltRiseZSValue=0.0
varfloatfltFallZSValue=0.0
varfloatfltRiseZSHigh=0.0
varfloatfltFallZSLow=0.0
varintncAboveZSCount=0
varintncBelowZSCount=0
varintncAboveZSSince=0
varintncBelowZSSince=0
ncRiseZSSince:=ncRiseZSSince+1
ncFallZSSince:=ncFallZSSince+1
ncAboveZSSince:=ncAboveZSSince+1
ncBelowZSCount:=ncBelowZSCount+1
if(htf_seriesZScore>htf_seriesZScore[1])
fltRiseZSValue:=htf_seriesZScore[0]
fltRiseZSHigh:=seriesClose[0]//High
bNewRiseZSHigh:=true
if(ncRiseZSSince>0)//Wewerepreviouslyfalling
ncRiseZSSince:=0
ncRiseZSCount:=1
else
ncRiseZSSince:=0
ncRiseZSCount:=ncRiseZSCount+1//Risecontinues
if(htf_seriesZScore>0.0)
if(ncAboveZSSince>0)//Wewerepreviouslybelowzero
ncAboveZSSince:=0
ncAboveZSCount:=1
else
ncAboveZSSince:=0
ncAboveZSCount:=ncAboveZSCount+1//Abovezerocontinues
if(htf_seriesZScore<htf_seriesZScore[1])
fltFallZSValue:=htf_seriesZScore[0]
fltFallZSLow:=seriesClose[0]//Low
bNewFallZSLow:=true
if(ncFallZSSince>0)//Wewerepreviouslyrising
ncFallZSSince:=0
ncFallZSCount:=1
else
ncFallZSSince:=0
ncFallZSCount:=ncFallZSCount+1//Fallcontinues
if(htf_seriesZScore<0.0)
if(ncBelowZSSince>0)//Wewerepreviouslyabovezero
ncBelowZSSince:=0
ncBelowZSCount:=1
else
ncBelowZSSince:=0
ncBelowZSCount:=ncBelowZSCount+1//Belowzerocontinues
//----------------------------
//----StrategyVariables
//----------------------------
varfloatfltEntryPrice=0.0
varfloatfltExitPrice=0.0
varfloatfltStopPrice=0.0
varfloatfltEntryHigh=0.0
varfloatfltEntryLow=0.0
varfloatfltDefaultSize=0.0
varfloatfltCurrentSize=0.0
varboolbPullback=false
varboolbFEERise=false
varboolbFEEFall=false
varintncPyramidCount=0
varintnPyramidWaveID=0
varintnEntryTrendDir=0
varintncConsecLosses=0
varboolbNascentEntry=false
varboolbHemiTransit=false
varfloatfltLastLevel=0.0
varfloatfltMAELevel=0.0
stringstrLongName="WBHDrive-L"
stringstrShortName="WBHDrive-S"
stringstrLongStop="WBHD-L-Stop"
stringstrShortStop="WBHD-S-Stop"
stringstrTradingMode=inputTradingMode
floatfltMinProfit=inputMinProfit
floatfltStopOffset=inputStopOffset
floatfltPryramidSpan=inputPryramidSpan
floatfltRiseEventNet=inputRiseEventNet
floatfltRiseEventROC=inputRiseEventROC
floatfltMinZScoreABZ=inputMinZScoreABZ
floatfltFallEventNet=inputFallEventNet
floatfltFallEventROC=inputFallEventROC
floatfltMinZScoreBLZ=inputMinZScoreBLZ
floatfltFastEMARiseNet=inputFastEMARiseNet
floatfltFastEMARiseROC=inputFastEMARiseROC
floatfltFastEMAFallNet=inputFastEMAFallNet
floatfltFastEMAFallROC=inputFastEMAFallROC
intncMaxAddOns=inputMaxAddOns
boolbPyramidBaleOut=inputPyramidBaleOut
boolbAccumulateLong=inputAccumulateLong
boolbAccumulateShort=inputAccumulateShort
boolbLongNascent=inputLongNascent
boolbLongCrossExit=inputLongCrossExit
boolbLongSignalExit=inputLongSignalExit
boolbLongEventExit=inputLongEventExit
boolbLongStochExit=inputLongStochExit
boolbShortNascent=inputShortNascent
boolbShortCrossExit=inputShortCrossExit
boolbShortSignalExit=inputShortSignalExit
boolbShortEventExit=inputShortEventExit
boolbShortStochExit=inputShortStochExit
floatfltNetProfit=0.0
floatfltNumShares=0.0
floatfltExpected=0.0
boolbAlreadyIn=false
boolbProfitable=false
intnPositionDir=0
boolbCrossRise=false
boolbCrossFall=false
boolbOpenLong=false
boolbOpenShort=false
boolbOpenTrade=false
boolbCloseLong=false
boolbCloseShort=false
boolbCloseTrade=false
calcPipsProfit(nTradeDir,fltPriceNow,fltOpenPrice)=>
floatfltProfit=0.0
if(nTradeDir==1)
fltProfit:=fltPriceNow-fltOpenPrice
if(nTradeDir==-1)
fltProfit:=fltOpenPrice-fltPriceNow
floatfltResult=fltProfit
//---------------------------------
//---StatisticalEventCalculation
//---------------------------------
boolbRiseALEvent=(((fltRiseEventNet>0.0)and(fltRiseEventROC>0.0))and(isMinimumNetChgROC(ncRiseALBarsSince,fltRiseALNetChg,fltRiseEventNet,fltRiseEventROC)==true))
boolbFallALEvent=(((fltFallEventNet>0.0)and(fltFallEventROC>0.0))and(isMinimumNetChgROC(ncFallALBarsSince,fltFallALNetChg,fltFallEventNet,fltFallEventROC)==true))
boolbRiseEMEvent=(((fltFastEMARiseNet>0.0)and(fltFastEMARiseROC>0.0))and(isMinimumNetChgROC(ncRiseEMBarsSince,fltRiseEMNetChg,fltFastEMARiseNet,fltFastEMARiseROC)==true))
boolbFallEMEvent=(((fltFastEMAFallNet>0.0)and(fltFastEMAFallROC>0.0))and(isMinimumNetChgROC(ncFallEMBarsSince,fltFallEMNetChg,fltFastEMAFallNet,fltFastEMAFallROC)==true))
varfloatfltHTFEventHigh=0.0
varfloatfltHTFEventLow=0.0
varintnLastHTFEvent=0
if(bRiseALEvent==true)
fltHTFEventHigh:=seriesClose
nLastHTFEvent:=1
if(bFallALEvent==true)
fltHTFEventLow:=seriesClose
nLastHTFEvent:=-1
boolbRiseStochas=(((htf_seriesDLine>80)and(bFullFanCone==true))or((htf_seriesSlowD>90)and(bDurableTrendRise==true))or((htf_seriesDLine>90)and(bPartialTrendRise==true)and(fltHTFEventHigh>0.0)and(seriesClose>fltHTFEventHigh)))
boolbFallStochas=(((htf_seriesDLine<20)and(bDownFanCone==true))or((htf_seriesSlowD<10)and(bDurableTrendFall==true))or((htf_seriesDLine<10)and(bPartialTrendFall==true)and(fltHTFEventLow>0.0)and(seriesClose<fltHTFEventLow)))
varintnImpulseWaveDir=0
varintnImpulseWaveID=0
intnWaveDirNow=0
if(htf_seriesFastLinReg>htf_seriesSlowLinReg)
nWaveDirNow:=1
if(htf_seriesFastLinReg<htf_seriesSlowLinReg)
nWaveDirNow:=-1
if(nWaveDirNow!=nImpulseWaveDir)
nImpulseWaveDir:=nWaveDirNow
nImpulseWaveID:=nImpulseWaveID+1
//----------------------------
//----ActualStrategy
//----------------------------
nPositionDir:=(strategy.position_size<0)?-1:(strategy.position_size>0)?1:0
fltNumShares:=abs(strategy.position_size)
fltNetProfit:=strategy.openprofit
fltExpected:=(fltMinProfit*fltNumShares)
bProfitable:=(fltNetProfit>=fltExpected)
if((strategy.position_entry_name==strLongName)or(strategy.position_entry_name==strShortName))
bAlreadyIn:=true
if(bProfitable==true)
bProfitable:=(calcPipsProfit(nPositionDir,seriesClose,fltEntryPrice)>=fltMinProfit)
if(bAlreadyIn==false)
if(fltEntryPrice>0.0)
ncConsecLosses:=ncConsecLosses+1
ncPyramidCount:=0
fltLastLevel:=0.0
fltEntryPrice:=0.0
fltStopPrice:=0.0
bPullback:=false
bFEERise:=false
bFEEFall:=false
//----------------------------
//----EntryCondition-Long
//----------------------------
bCrossRise:=crossover(seriesFastCross,seriesSlowCross)
if((bAlreadyIn==false)and(strTradingMode!="NoTrade"))
if(bCrossRise==true)
if((seriesClose>htf_seriesTrendDEMA)and(strTradingMode!="Range"))
bOpenLong:=true
bNascentEntry:=false
elseif((bLongNascent==true)and(bHTFNascentRise==true))
bOpenLong:=true
bNascentEntry:=true
//----------------------------
//----EntryCondition-Short
//----------------------------
bCrossFall:=crossunder(seriesFastCross,seriesSlowCross)
if((bAlreadyIn==false)and(bOpenLong==false)and(strTradingMode!="NoTrade"))
if(bCrossFall==true)
if((seriesClose<htf_seriesTrendDEMA)and(strTradingMode!="Range"))
bOpenShort:=true
bNascentEntry:=false
elseif((bShortNascent==true)and(bHTFNascentFall==true))
bOpenShort:=true
bNascentEntry:=true
//----------------------------
//----ConditionalClose
//----------------------------
if(bAlreadyIn==true)
if(htf_seriesZScore>fltMinZScoreABZ)
bFEERise:=true
if(htf_seriesZScore<(fltMinZScoreBLZ*(-1)))
bFEEFall:=true
if(bAlreadyIn==true)
if((nPositionDir==1)and(bProfitable==true))
if((bLongCrossExit==true)and(bHTFSignalFall==true))
bCloseLong:=true
if((bLongSignalExit==true)and(bHTFSignalRise==true)and(bRiseALEvent==true)and(bFEERise==true))
bCloseLong:=true
if((bLongEventExit==true)and(bRiseEMEvent==true)and(bFastAboveSignal==true)and(bHTFFastAboveTrend==true))
bCloseLong:=true
if((bLongStochExit==true)and(bRiseStochas==true))
bCloseLong:=true
if((nPositionDir==-1)and(bProfitable==true))
if((bShortCrossExit==true)and(bHTFSignalRise==true))
bCloseShort:=true
if((bShortSignalExit==true)and(bHTFSignalFall==true)and(bFallALEvent==true)and(bFEEFall==true))
bCloseShort:=true
if((bShortEventExit==true)and(bFallEMEvent==true)and(bFastBelowSignal==true)and(bHTFFastBelowTrend==true))
bCloseShort:=true
if((bShortStochExit==true)and(bFallStochas==true))
bCloseShort:=true
//----------------------------
//----FlipFlopCondition
//----------------------------
if(bAlreadyIn==true)
if((nPositionDir==1)and(seriesClose>htf_seriesTrendDEMA)and(bNascentEntry==true))
bHemiTransit:=true
if((nPositionDir==-1)and(seriesClose<htf_seriesTrendDEMA)and(bNascentEntry==true))
bHemiTransit:=true
if((bAlreadyIn==true)and(strTradingMode=="FlipFlop"))
if(nPositionDir==1)
if((seriesClose<fltEntryPrice)and(bFallEMEvent==true)and(bFastBelowSignal==true)and(bHTFFastBelowTrend==true)and(htf_seriesSlowLinReg<htf_seriesTrendDEMA))
if((bNascentEntry==true)and(bHemiTransit==true))
bCloseLong:=true
if((bNascentEntry==true)and(htf_seriesFastAlma<htf_seriesSlowLinReg)and(htf_seriesFastLinReg<htf_seriesSlowLinReg)and(bFallALEvent==true)and(bAccumulateLong==false))
bCloseLong:=true
if((nEntryTrendDir==1)and(bNascentEntry==false)and(inputExclusiveLong==false))
bCloseLong:=true
if(nPositionDir==-1)
if((seriesClose>fltEntryPrice)and(bRiseEMEvent==true)and(bFastAboveSignal==true)and(bHTFFastAboveTrend==true)and(htf_seriesSlowLinReg>htf_seriesTrendDEMA))
if((bNascentEntry==true)and(bHemiTransit==true))
bCloseShort:=true
if((bNascentEntry==true)and(htf_seriesFastAlma>htf_seriesSlowLinReg)and(htf_seriesFastLinReg>htf_seriesSlowLinReg)and(bRiseALEvent==true)and(bAccumulateShort==false))
bCloseShort:=true
if((nEntryTrendDir==-1)and(bNascentEntry==false)and(inputExclusiveShort==false))
bCloseShort:=true
//----------------------------
//----BaleOutCondition
//----------------------------
boolbBailingOut=false
if(nPositionDir==1)
if((bPyramidBaleOut==true)and(seriesClose>htf_seriesTrendDEMA)and(bRiseStochas==true)and(htf_seriesFastAlma>htf_seriesSlowLinReg)and(htf_seriesFastLinReg>htf_seriesSlowLinReg)and(htf_seriesSlowLinReg>htf_seriesTrendDEMA))
if(fltNetProfit>(fltExpected*2.0))
bCloseLong:=true
bBailingOut:=true
if(nPositionDir==-1)
if((bPyramidBaleOut==true)and(seriesClose<htf_seriesTrendDEMA)and(bFallEMEvent==true)and(bFastBelowSignal==true)and(bHTFFastBelowTrend==true)and(htf_seriesSlowLinReg<htf_seriesTrendDEMA))
if(fltNetProfit>(fltExpected*2.0))
bCloseShort:=true
bBailingOut:=true
//----------------------------
//----OpenTrade
//----------------------------
calcQuantity()=>
floatfltTradeSize=fltCurrentSize
if(fltDefaultSize>0.0)
fltTradeSize:=((ncMaxAddOns>0)and(fltDefaultSize>0.0)and(ncConsecLosses>0)and(ncConsecLosses<ncMaxAddOns))?(fltDefaultSize*(ncConsecLosses+1)):fltDefaultSize
floatfltResult=fltTradeSize
floatfltQuantity=0.0
if((bOpenLong==true)or(bOpenShort==true))
fltQuantity:=calcQuantity()
fltEntryPrice:=seriesClose
fltEntryHigh:=seriesHigh
fltEntryLow:=seriesLow
fltLastLevel:=fltEntryPrice
fltMAELevel:=0.0
fltStopPrice:=0.0
bOpenTrade:=true
bFEERise:=false
bFEEFall:=false
bPullback:=false
bHemiTransit:=false
ncPyramidCount:=0
nEntryTrendDir:=(seriesClose>htf_seriesTrendDEMA)?1:-1
if(bOpenLong==true)
if(fltStopOffset>0.0)
fltStopPrice:=(seriesLow-fltStopOffset)
if(fltQuantity>0.0)
strategy.entry(strLongName,strategy.long,qty=fltQuantity,alert_message="entrystop="+tostring(fltStopPrice))
if(fltQuantity==0.0)
strategy.entry(strLongName,strategy.long,alert_message="entrystop="+tostring(fltStopPrice))
fltCurrentSize:=abs(strategy.position_size)
if(fltStopPrice>0.0)
strategy.exit(strLongStop,strLongName,stop=fltStopPrice,alert_message="stop="+tostring(fltStopPrice))
if(bOpenShort==true)
if(fltStopOffset>0.0)
fltStopPrice:=(seriesHigh+fltStopOffset)
if(fltQuantity>0.0)
strategy.entry(strShortName,strategy.short,qty=fltQuantity,alert_message="entrystop="+tostring(fltStopPrice))
if(fltQuantity==0.0)
strategy.entry(strShortName,strategy.short,alert_message="entrystop="+tostring(fltStopPrice))
fltCurrentSize:=abs(strategy.position_size)
if(fltStopPrice>0.0)
strategy.exit(strShortStop,strShortName,stop=fltStopPrice,alert_message="stop="+tostring(fltStopPrice))
if(fltDefaultSize==0.0)
fltDefaultSize:=abs(strategy.position_size)
//----------------------------
//----CloseTrade
//----------------------------
varintncLastConsecs=0
if(bCloseLong==true)
fltExitPrice:=seriesClose
strategy.close(strLongName,when=true,alert_message="exitprofit="+tostring(fltExitPrice-fltEntryPrice))
strategy.cancel(strLongName)
bCloseTrade:=true
if(bCloseShort==true)
fltExitPrice:=seriesClose
strategy.close(strShortName,when=true,alert_message="exitprofit="+tostring(fltEntryPrice-fltExitPrice))
strategy.cancel(strShortName)
bCloseTrade:=true
if(bCloseTrade==true)
ncLastConsecs:=ncConsecLosses
ncConsecLosses:=(bProfitable==true)?0:ncConsecLosses+1
fltLastLevel:=0.0
fltEntryPrice:=0.0
fltStopPrice:=0.0
bPullback:=false
bFEERise:=false
bFEEFall:=false
varstringstrBadRunDate=""
varintncMaxConsecs=0
if(ncConsecLosses>ncMaxConsecs)
ncMaxConsecs:=ncConsecLosses
strBadRunDate:=tostring(year)+"-"+tostring(month,"##")+"-"+tostring(dayofmonth,"##")+"["+tostring(hour,"##")+":"+tostring(minute,"##")+":00]"
//----------------------------
//----PyramidTechnology
//----------------------------
if((nPositionDir==1)and(seriesSlowD<20)and((bFallALEvent==true)or(bFallStochas==true)))
bPullback:=true
if((nPositionDir==-1)and(seriesSlowD>80)and((bRiseALEvent==true)or(bRiseStochas==true)))
bPullback:=true
IsPyramidFall()=>
boolbResult=false
boolbPassed=false
boolbExceedingSpan=((fltPryramidSpan>0.0)and((fltLastLevel-seriesClose)>fltPryramidSpan))
if((bCrossRise==true)and(seriesClose>htf_seriesTrendDEMA)and(bHTFFastAboveTrend==true)and(seriesClose>fltLastLevel)and(bPullback==true))
bPassed:=true
elseif((seriesClose<fltLastLevel)and(bExceedingSpan==true)and(seriesClose>fltEntryPrice)and((bFallALEvent==true)or(bFallEMEvent==true)or(bFallStochas==true)))
bPassed:=true
elseif((seriesClose<fltLastLevel)and(bExceedingSpan==true)and(seriesClose<fltEntryPrice)and(bFallALEvent==true)and(bFallStochas==true)and(bAccumulateLong==true)and(nImpulseWaveID>nPyramidWaveID))
bPassed:=true
bResult:=bPassed
IsPyramidRise()=>
boolbResult=false
boolbPassed=false
boolbExceedingSpan=((fltPryramidSpan>0.0)and((seriesClose-fltLastLevel)>fltPryramidSpan))
if((bCrossFall==true)and(seriesClose<htf_seriesTrendDEMA)and(bHTFFastBelowTrend==true)and(seriesClose<fltLastLevel)and(bPullback==true))
bPassed:=true
elseif((seriesClose>fltLastLevel)and(bExceedingSpan==true)and(seriesClose<fltEntryPrice)and((bRiseALEvent==true)or(bRiseEMEvent==true)or(bRiseStochas==true)))
bPassed:=true
elseif((seriesClose>fltLastLevel)and(bExceedingSpan==true)and(seriesClose>fltEntryPrice)and(bRiseALEvent==true)and(bRiseStochas==true)and(bAccumulateShort==true)and(nImpulseWaveID>nPyramidWaveID))
bPassed:=true
bResult:=bPassed
boolbNewPyramidLevel=false
boolbPyramidFall=IsPyramidFall()
boolbPyramidRise=IsPyramidRise()
if(bAlreadyIn==true)
if((nPositionDir==1)and(bPyramidFall==true))
bNewPyramidLevel:=true
strategy.entry(strLongName,strategy.long,alert_message="pyramidlevel="+tostring(ncPyramidCount+1))
strategy.exit(strLongStop,strLongName,stop=fltStopPrice,alert_message="scaleoutlevel="+tostring(ncPyramidCount+1))
if((nPositionDir==-1)and(bPyramidRise==true))
bNewPyramidLevel:=true
strategy.entry(strShortName,strategy.short,alert_message="pyramidlevel="+tostring(ncPyramidCount+1))
strategy.exit(strShortStop,strShortName,stop=fltStopPrice,alert_message="scaleoutlevel="+tostring(ncPyramidCount+1))
if(bNewPyramidLevel==true)
ncPyramidCount:=ncPyramidCount+1
nPyramidWaveID:=nImpulseWaveID
fltLastLevel:=seriesClose
bPullback:=false
if(ncPyramidCount==1)
fltMAELevel:=seriesClose
if((nPositionDir==1)and(seriesClose<fltMAELevel))
fltMAELevel:=seriesClose
if((nPositionDir==-1)and(seriesClose>fltMAELevel))
fltMAELevel:=seriesClose
varintncHighestLevel=0
if(ncPyramidCount>ncHighestLevel)
ncHighestLevel:=ncPyramidCount
//----------------------------
//----StrategyPlots
//----------------------------
//HTFTrendLines
floatplotSlowLinReg=na
floatplotFastLinReg=na
floatplotTrendDEMA=na
floatplotFastAlma=na
floatplotFastEMA=na
if(inputShowLines==true)
plotSlowLinReg:=htf_seriesSlowLinReg
plotFastLinReg:=htf_seriesFastLinReg
plotTrendDEMA:=htf_seriesTrendDEMA
plotFastAlma:=htf_seriesFastAlma
plotFastEMA:=seriesFastEMA
plot(plotSlowLinReg,color=color.orange,linewidth=2,title="SlowLinReg")
plot(plotFastLinReg,color=color.green,linewidth=2,title="FastLinReg")
plot(plotTrendDEMA,color=color.purple,linewidth=2,title="TrendDEMA")
plot(plotFastAlma,color=color.blue,linewidth=2,title="FastAlma")
plot(plotFastEMA,color=color.yellow,linewidth=2,title="FastEMA")
//EntryCrossoverBackgroundFill
bgcolor(((inputShowCrosses==true)and(bCrossRise==true))?color.blue:na)
bgcolor(((inputShowCrosses==true)and(bCrossFall==true))?color.red:na)
//HTFEventBackgroundFill
bgcolor(((inputShowEvents==true)and(bRiseALEvent==true))?color.blue:na)
bgcolor(((inputShowEvents==true)and(bFallALEvent==true))?color.red:na)
//EntryEMAEventBackgroundFill
bgcolor(((inputShowEMPeaks==true)and(bRiseEMEvent==true))?color.blue:na)
bgcolor(((inputShowEMPeaks==true)and(bFallEMEvent==true))?color.red:na)
//StochasticEventBackgroundFill
bgcolor(((inputShowStochEvent==true)and(bRiseStochas==true))?color.blue:na)
bgcolor(((inputShowStochEvent==true)and(bFallStochas==true))?color.red:na)
//ConsecutiveLossesBackgroundFill
bgcolor(((inputShowConsecLoss==true)and(ncConsecLosses>0))?color.red:na)
//-----------------------------------------------------------------------------
//-----[BALEOUTMARKERS]-------------------------------------------------
//-----------------------------------------------------------------------------
if((inputShowBaleOuts==true)and(bBailingOut==true))
stringtxtReport="BaleOutExit"
txtReport:=txtReport+"\n"+"NetProfit:"+tostring(fltNetProfit,"#.####")
txtReport:=txtReport+"\n"+"PositionSize:"+tostring(fltNumShares,"#.####")
txtReport:=txtReport+"\n"+"PyramidCount:"+tostring(ncPyramidCount)
txtReport:=txtReport+"\n"+"MAELevel:"+tostring(fltMAELevel,"#.####")
txtReport:=txtReport+"\n"+"ConsecLosses:"+tostring(ncLastConsecs)
label.new(bar_index,high,txtReport,xloc=xloc.bar_index,yloc=yloc.belowbar,style=label.style_labelup,color=#FF0000,textcolor=color.white,size=size.normal,textalign=text.align_left)
//-----------------------------------------------------------------------------
//-----[REPORT]------------------------------------------------------------
//-----------------------------------------------------------------------------
intncBarsOffChart=8
stringtxtReport=""
txtReport:=txtReport+"╒═════════════════╕"
txtReport:=txtReport+"\n"+"MinimumTickSize:"+tostring(syminfo.mintick)
txtReport:=txtReport+"\n"+"MaximumPyramids:"+tostring(ncHighestLevel+1)
txtReport:=txtReport+"\n"+"ConsecutiveLosses:"+tostring(ncMaxConsecs)
txtReport:=txtReport+"\n"+"Date:"+strBadRunDate
txtReport:=txtReport+"\n"+"MaxTVDrawdown:"+tostring(strategy.max_drawdown,"#.####")
txtReport:=txtReport+"\n"+"MaxTVContracts:"+tostring(strategy.max_contracts_held_all,"#.####")
txtReport:=txtReport+"\n"+"╘═════════════════╛"
if(inputReport==true)
lblEndOfChart=label.new(time+(40*(time-time[1])),low,txtReport,xloc=xloc.bar_time,yloc=yloc.price,style=label.style_labeldown,color=color.navy,textcolor=color.white,size=size.normal,textalign=text.align_left)
label.delete(lblEndOfChart[1])
Expand (827 lines)
