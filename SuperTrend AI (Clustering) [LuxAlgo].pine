Script Name: SuperTrend AI (Clustering) [LuxAlgo]
Author: LuxAlgo
Description: The SuperTrend AI indicator is a novel take on bridging the gap between the K-means clustering machine learning method & technical indicators. In this case, we apply K-Means clustering to the famous SuperTrend indicator.

ðŸ”¶  USAGE



Users can interpret the SuperTrend AI trailing stop similarly to the regular SuperTrend indicator. Using higher minimum/maximum...
PineScript code:

Pine Scriptâ„¢ indicator
SuperTrend AI (Clustering) [LuxAlgo]
//  This  work  is  licensed  under  a  Attribution-NonCommercial-ShareAlike  4.0  International  (CC  BY-NC-SA  4.0)  https://creativecommons.org/licenses/by-nc-sa/4.0/
//  Â©  LuxAlgo
//@version=5
indicator("SuperTrend  AI  (Clustering)  [LuxAlgo]",  "LuxAlgo  -  SuperTrend  AI",  overlay  =  true,  max_labels_count  =  500)
//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
length  =  input(10,  'ATR  Length')
minMult  =  input.int(1,  'Factor  Range',  minval  =  0,  inline  =  'factor')
maxMult  =  input.int(5,  '',  minval  =0,inline='factor')
step=input.float(.5,'Step',minval=0,step=0.1)
//Triggererror
ifminMult>maxMult
runtime.error('Minimumfactorisgreaterthanmaximumfactorintherange')
perfAlpha=input.float(10,'PerformanceMemory',minval=2)
fromCluster=input.string('Best','FromCluster',options=['Best','Average','Worst'])
//Optimization
maxIter=input.int(1000,'MaximumIterationSteps',minval=0,group='Optimization')
maxData=input.int(10000,'HistoricalBarsCalculation',minval=0,group='Optimization')
//Style
bearCss=input(color.red,'TrailingStop',inline='ts',group='Style')
bullCss=input(color.teal,'',inline='ts',group='Style')
amaBearCss=input(color.new(color.red,50),'AMA',inline='ama',group='Style')
amaBullCss=input(color.new(color.teal,50),'',inline='ama',group='Style')
showGradient=input(true,'CandleColoring',group='Style')
showSignals=input(true,'ShowSignals',group='Style')
//Dashboard
showDash=input(true,'ShowDashboard',group='Dashboard')
dashLoc=input.string('TopRight','Location',options=['TopRight','BottomRight','BottomLeft'],group='Dashboard')
textSize=input.string('Small','Size',options=['Tiny','Small','Normal'],group='Dashboard')
//-----------------------------------------------------------------------------}
//UDT's
//-----------------------------------------------------------------------------{
typesupertrend
floatupper=hl2
floatlower=hl2
floatoutput
floatperf=0
floatfactor
inttrend=0
typevector
array<float>out
//-----------------------------------------------------------------------------}
//Supertrend
//-----------------------------------------------------------------------------{
varholder=array.new<supertrend>(0)
varfactors=array.new<float>(0)
//Populatesupertrendtypearray
ifbarstate.isfirst
fori=0toint((maxMult-minMult)/step)
factors.push(minMult+i*step)
holder.push(supertrend.new())
atr=ta.atr(length)
//ComputeSupertrendformultiplefactors
k=0
forfactorinfactors
get_spt=holder.get(k)
up=hl2+atr*factor
dn=hl2-atr*factor

get_spt.trend:=close>get_spt.upper?1:close<get_spt.lower?0:get_spt.trend
get_spt.upper:=close[1]<get_spt.upper?math.min(up,get_spt.upper):up
get_spt.lower:=close[1]>get_spt.lower?math.max(dn,get_spt.lower):dn

diff=nz(math.sign(close[1]-get_spt.output))
get_spt.perf+=2/(perfAlpha+1)*(nz(close-close[1])*diff-get_spt.perf)
get_spt.output:=get_spt.trend==1?get_spt.lower:get_spt.upper
get_spt.factor:=factor
k+=1
//-----------------------------------------------------------------------------}
//K-meansclustering
//-----------------------------------------------------------------------------{
factor_array=array.new<float>(0)
data=array.new<float>(0)
//Populatedataarrays
iflast_bar_index-bar_index<=maxData
forelementinholder
data.push(element.perf)
factor_array.push(element.factor)
//Intitalizecentroidsusingquartiles
centroids=array.new<float>(0)
centroids.push(data.percentile_linear_interpolation(25))
centroids.push(data.percentile_linear_interpolation(50))
centroids.push(data.percentile_linear_interpolation(75))
//Intializeclusters
vararray<vector>factors_clusters=na
vararray<vector>perfclusters=na
iflast_bar_index-bar_index<=maxData
for_=0tomaxIter
factors_clusters:=array.from(vector.new(array.new<float>(0)),vector.new(array.new<float>(0)),vector.new(array.new<float>(0)))
perfclusters:=array.from(vector.new(array.new<float>(0)),vector.new(array.new<float>(0)),vector.new(array.new<float>(0)))

//Assignvaluetocluster
i=0
forvalueindata
dist=array.new<float>(0)
forcentroidincentroids
dist.push(math.abs(value-centroid))
idx=dist.indexof(dist.min())
perfclusters.get(idx).out.push(value)
factors_clusters.get(idx).out.push(factor_array.get(i))
i+=1
//Updatecentroids
new_centroids=array.new<float>(0)
forcluster_inperfclusters
new_centroids.push(cluster_.out.avg())
//Testifcentroidchanged
ifnew_centroids.get(0)==centroids.get(0)andnew_centroids.get(1)==centroids.get(1)andnew_centroids.get(2)==centroids.get(2)
break
centroids:=new_centroids
//-----------------------------------------------------------------------------}
//Signalsandtrailingstop
//-----------------------------------------------------------------------------{
//Getassociatedsupertrend
varfloattarget_factor=na
varfloatperf_idx=na
varfloatperf_ama=na
varfrom=switchfromCluster
'Best'=>2
'Average'=>1
'Worst'=>0
//Performanceindexdenominator
den=ta.ema(math.abs(close-close[1]),int(perfAlpha))
ifnotna(perfclusters)
//Getaveragefactorswithintargetcluster
target_factor:=nz(factors_clusters.get(from).out.avg(),target_factor)

//Getperformanceindexoftargetcluster
perf_idx:=math.max(nz(perfclusters.get(from).out.avg()),0)/den
//Getnewsupertrend
varupper=hl2
varlower=hl2
varos=0
up=hl2+atr*target_factor
dn=hl2-atr*target_factor
upper:=close[1]<upper?math.min(up,upper):up
lower:=close[1]>lower?math.max(dn,lower):dn
os:=close>upper?1:close<lower?0:os
ts=os?lower:upper
//GettrailingstopadaptiveMA
ifna(ts[1])andnotna(ts)
perf_ama:=ts
else
perf_ama+=perf_idx*(ts-perf_ama)
//-----------------------------------------------------------------------------}
//Dashboard
//-----------------------------------------------------------------------------{
vartable_position=dashLoc=='BottomLeft'?position.bottom_left
:dashLoc=='TopRight'?position.top_right
:position.bottom_right
vartable_size=textSize=='Tiny'?size.tiny
:textSize=='Small'?size.small
:size.normal
vartb=table.new(table_position,4,4
,bgcolor=#1e222d
,border_color=#373a46
,border_width=1
,frame_color=#373a46
,frame_width=1)
ifshowDash
ifbarstate.isfirst
tb.cell(0,0,'Cluster',text_color=color.white,text_size=table_size)
tb.cell(0,1,'Best',text_color=color.white,text_size=table_size)
tb.cell(0,2,'Average',text_color=color.white,text_size=table_size)
tb.cell(0,3,'Worst',text_color=color.white,text_size=table_size)

tb.cell(1,0,'Size',text_color=color.white,text_size=table_size)
tb.cell(2,0,'CentroidDispersion',text_color=color.white,text_size=table_size)
tb.cell(3,0,'Factors',text_color=color.white,text_size=table_size)

ifbarstate.islast
topN=perfclusters.get(2).out.size()
midN=perfclusters.get(1).out.size()
btmN=perfclusters.get(0).out.size()
//Size
tb.cell(1,1,str.tostring(topN),text_color=color.white,text_size=table_size)
tb.cell(1,2,str.tostring(midN),text_color=color.white,text_size=table_size)
tb.cell(1,3,str.tostring(btmN),text_color=color.white,text_size=table_size)

//Content
tb.cell(3,1,str.tostring(factors_clusters.get(2).out),text_color=color.white,text_size=table_size,text_halign=text.align_left)
tb.cell(3,2,str.tostring(factors_clusters.get(1).out),text_color=color.white,text_size=table_size,text_halign=text.align_left)
tb.cell(3,3,str.tostring(factors_clusters.get(0).out),text_color=color.white,text_size=table_size,text_halign=text.align_left)
//Calculatedispersionaroundcentroid
i=0
forcluster_inperfclusters
disp=0.
ifcluster_.out.size()>1
forvalueincluster_.out
disp+=math.abs(value-centroids.get(i))

disp/=switchi
0=>btmN
1=>midN
2=>topN
i+=1
tb.cell(2,4-i,str.tostring(disp,'#.####'),text_color=color.white,text_size=table_size)
//-----------------------------------------------------------------------------}
//Plots
//-----------------------------------------------------------------------------{
css=os?bullCss:bearCss
plot(ts,'TrailingStop',os!=os[1]?na:css)
plot(perf_ama,'TrailingStopAMA',
ta.cross(close,perf_ama)?na
:close>perf_ama?amaBullCss:amaBearCss)
//Candlecoloring
barcolor(showGradient?color.from_gradient(perf_idx,0,1,color.new(css,80),css):na)
//Signals
n=bar_index
ifshowSignals
ifos>os[1]
label.new(n,ts,str.tostring(int(perf_idx*10))
,color=bullCss
,style=label.style_label_up
,textcolor=color.white
,size=size.tiny)
ifos<os[1]
label.new(n,ts,str.tostring(int(perf_idx*10))
,color=bearCss
,style=label.style_label_down
,textcolor=color.white
,size=size.tiny)
//-----------------------------------------------------------------------------}
Expand (270 lines)
