Script Name: TASC 2022.04 S&P500 Hybrid Seasonal System
Author: PineCodersTASC
Description: █  OVERVIEW

 TASC's April 2022 edition of Traders' Tips  includes the "Sell In May? Stock Market Seasonality" article authored by Markos Katsanos. This is the code implementing the "Hybrid ​Seasonal System" from the article.



█  CONCEPTS


In his article, Markos Katsanos takes an updated look at the "Sell in May" adage by reviewing recent historical data for...
PineScript code:

Pine Script™ strategy
TASC 2022.04 S&P500 Hybrid Seasonal System
//    TASC  Issue:  April  2022  -  Vol.  40,  Issue  4
//          Article:  Sell  In  May?  Stock  Market  Seasonality
//    Article  By:  Markos  Katsanos
//        Language:  TradingView's  Pine  Script  v5
//  Provided  By:  PineCoders,  for  tradingview.com
//@version=5
strategy(title                          =  "TASC  2022.04  S&P500  Hybrid  Seasonal  System",
                  shorttitle                =  "HSS  v2.0",
                  overlay                      =  true,
                  default_qty_type    =  strategy.percent_of_equity,
                  default_qty_value  =  10,
                  initial_capital      =  100000,
                  currency                    =  currency.USD,
                  commission_type      =  strategy.commission.percent,
                  commission_value    =  0.01
                  )
//  Helper  Functions:
//  @function  Returns  the  ratio  to  max/min  of  a  sample  period
//  @param  src  float,  data  source.
//  @param  length  int,  period  of  the  sample.
//  @returns  [float,  float]  tuple.
volatility  (float  src,  int  length)  =>
        [(src  /  ta.highest(src,  length)[1]  -  1.0)  *  100.0,
          (src  /  ta.lowest  (src,  length)[1]  -  1.0)  *  100.0]
//  @function  Volume  Flow  Indicator.
//  @param  Period  int,  period  of  the  data  sample.
//  @param  VCoef  float,  Volume  Volatility  Coefficient.
//  @param  Coef  float,  Cutoff  Coefficient.
//  @returns  float.
//  ref:  https://mkatsanos.com/volume-flow-vfi-indicator/
vfi  (int  Period  =  130,  float  VCoef  =  2.5,  float  Coef  =  0.2)  =>
        lastHLC3  =  nz(hlc3[1],  hlc3)
        MF          =  hlc3    -  lastHLC3
        Vinter  =  ta.stdev(math.log(hlc3)  -  math.log(lastHLC3),  30)
        Vave      =  ta.sma(volume,  Period)[1]
        Cutoff  =  Coef  *  close  *  Vinter
        VC          =  math.min(volume,  Vave  *  VCoef)
        VCP        =  MF  >    Cutoff  ?    VC  :
                          MF  <  -Cutoff  ?  -VC  :  0.0
        VFI1  =  nz(math.sum(VCP,  Period)  /  Vave)
        VFI  =  ta.ema(VFI1,  3)
//  inputs:
//  optional  strategy  obserservation  window  parameters:
string  ig_ow            =  'Observation  Window:'
bool  i_Sdate            =  input.time(    title      =  'Start  date:',
                                                                  defval    =  timestamp('2021-01-01'),
                                                                  inline    =  'Sdate',
                                                                  group      =  ig_ow
                                                                  )  <  time  //
bool  i_useSdate      =  input.bool(    title      =  '',
                                                                  defval    =  false,
                                                                  group      =  ig_ow,
                                                                  inline    =  'Sdate',
                                                                  tooltip  =  'Optional  start  date  to  clamp  strategy  observation  window.'
                                                                  )  //
bool  i_Edate            =  input.time(    title      =  'End  date:',
                                                                  defval    =  timestamp('2022-01-01'),
                                                                  inline    =  'Edate',
                                                                  group      =  ig_ow
                                                                  )  >  time  //
bool  i_useEdate      =  input.bool(    title      =  '',
                                                                  defval    =  false,
                                                                  group      =  ig_ow,
                                                          inline='Edate',
tooltip='Optionalenddatetoclampstrategyobservationwindow.'
)//
//
stringig_ro='LookbackOptions:'
inti_lback=input.int(title='LookbackShift:',
defval=0,minval=0,
group=ig_ro,
tooltip='Optional,inspectprevioussignalvalues.'
)//
//
stringig_so='SignalOptions:'
booli_onlyL=input.bool(title='LongOnly:',
defval=true,
group=ig_so,
tooltip='Ifswitchedoff,shortentriesareinitiatedbysellsignals.'
)//
inti_sMonth=input.int(title='SellMonth:',
defval=8,minval=1,maxval=12,step=1,
group=ig_so,
tooltip='Theworstperformingmonth,originallyclampedbetweenmonths5and8.'
)//
inti_maxVI=input.int(title='MaxVIXup:',
defval=60,minval=50,maxval=60,step=5,
group=ig_so,
tooltip='Volatilitymaximumthreshold.'
)//
inti_critVFI=input.int(title='CriticalVFISell:',
defval=-20,minval=-20,maxval=-15,step=5,
group=ig_so,
tooltip='Criticalmoneyfloat(VFI)thresholdforsellsignal.'
)//
floati_K=input.float(title='ATR/VIXRatio:',
defval=1.5,minval=1.3,maxval=1.7,step=0.2,
group=ig_so,
tooltip='ATRtoVIXratioforsellsignal.'
)//
//
stringi_VIticker=input.symbol(title='VolatilityIndex:',
defval='VIX',
group=ig_so,
tooltip='VolatilityIndexTicker.'
)//
stringi_VItf=input.timeframe(title='',
defval='D',
group=ig_so,
tooltip='VolatilityIndexTimeframe.'
)//
inti_VIiperiod=input.int(title='ImpliedVolatilityperiod:',
defval=25,
group=ig_so
)//
inti_VIhperiod=input.int(title='HistoricalVolatilityperiod:',
defval=15,
group=ig_so
)//
//
inti_VFIperiod=input.int(title='VFIperiod:',
defval=130,
group=ig_so,inline='VFI1'
)//
inti_VFIMperiod=input.int(title='MA:',
defval=10,
group=ig_so,inline='VFI1',
tooltip='VFIandMovingAveragesamplingperiod.'
)//
floati_VFIcoef=input.float(title='VFICoefCuttoff:',
defval=0.2,
group=ig_so,inline='VFI2'
)//
floati_VFIvcoef=input.float(title='Volat.:',
defval=2.5,
group=ig_so,inline='VFI2',
tooltip='VFICutoffandVolatilitycoefficient.'
)//
inti_ATRperiod=input.int(title='ATRlength:',
defval=15,
group=ig_so,inline='ATR',
tooltip='ATRlength.'
)//
//
stringig_to='TableOptions:'
booli_showT=input.bool(title='ShowTable:',
defval=true,
group=ig_to,
tooltip='Optionaltoggle.'
)//
stringi_Tpos=input.string(title='Position:',
defval=position.middle_right,
options=[position.top_left,position.top_center,position.top_right,
position.middle_left,position.middle_center,position.middle_right,
position.bottom_left,position.bottom_center,position.bottom_right],
group=ig_to)//
inti_Ttransp=input.int(title='Transparency:',
defval=0,minval=0,maxval=99,
group=ig_to
)//
//
colori_Tcframe=input.color(title='TableColors:',
defval=#000000,
group=ig_to,inline='tablecolor'
)//
colori_Tcrowe=input.color(title='',
defval=#d6dae3,
group=ig_to,inline='tablecolor'
)//
colori_Tcrowo=input.color(title='',
defval=#cccccc,
group=ig_to,inline='tablecolor',
tooltip='Tablebackgroundcolors,inorder:frame,evenrow,oddrow.'
)//
stringi_Ttsize=input.string(title='TableText:',
defval=size.small,
options=[size.auto,size.huge,size.large,size.normal,size.small,size.tiny],
group=ig_to,inline='tabletext'
)//
colori_Tcdeft=input.color(title='TextColors:',
defval=#000000,
group=ig_to,inline='tabletext'
)//
colori_Tcsigt=input.color(title='',
defval=color.red,
group=ig_to,inline='tabletext'
)//
colori_Tctitt=input.color(title='',
defval=color.navy,
group=ig_to,inline='tabletext',
tooltip='Tabletextsizeandcolors,inorder:default,shortsignal,title.'
)//
//ComparisonIndex
floatVIX=request.security(i_VIticker,i_VItf,close)
[VIdn,VIup]=volatility(VIX,i_VIiperiod)//Implied
[ATRdn,ATRup]=volatility(ta.atr(i_VIhperiod),i_VIiperiod)//Historical
floatVFI=vfi(i_VFIperiod,i_VFIvcoef,i_VFIcoef)
floatVFI10=ta.sma(VFI,i_VFIMperiod)
//
boolVFIatCrit=VFI>i_critVFI
boollowVolat=(VIup<i_maxVI)or(ATRup<(i_K*i_maxVI))
boolVolatC=VFIatCrit?lowVolat:false
boolLong=((month>=10)or(month<i_sMonth))andVolatC[1]
boolSseasonal=month==i_sMonth//SEASONALEXIT/SHORT
boolSvol=VIup>(2.0*i_maxVI)//VOLATILITYEXIT/SHORT
boolScrit=ta.cross(i_critVFI,VFI)and(VFI10<VFI10[1])//VFIEXIT/SHORT
boolShort=SseasonalorSvol[1]orScrit[1]
boolwithinObsWindow=switch
(i_useSdateandi_useEdate)=>i_Sdateandi_Edate
(i_useSdate)=>i_Sdate
(i_useEdate)=>i_Edate
=>true
//
ifwithinObsWindowandstrategy.equity>0
_L=strategy.long
_S=strategy.short
strategy.entry('L',direction=_L,when=Long)
ifi_onlyL
strategy.close('L',comment='EXITSEASONAL',when=Sseasonal)
strategy.close('L',comment='EXITVOLATILITY',when=Svol[1])
strategy.close('L',comment='EXITMF',when=Scrit[1])
else
strategy.entry('SSeasonal',direction=_S,when=Sseasonal)
strategy.entry('SVolatility',direction=_S,when=Svol[1])
strategy.entry('SMFCrit.',direction=_S,when=Scrit[1])
else
strategy.close_all()
stringSIGNAL=switch
(Long)=>'LongSeasonal'
(Sseasonalandi_onlyL)=>'ExitSeasonal'
(Svol[1]andi_onlyL)=>'ExitVolatility'
(Scrit[1]andi_onlyL)=>'ExitMoneyFlow'
(Sseasonalandnoti_onlyL)=>'ShortSeasonal'
(Svol[1]andnoti_onlyL)=>'ShortVolatility'
(Scrit[1]andnoti_onlyL)=>'ShortMoneyFlowBearish'
=>'none'
stringdate=str.format(
'{0,number,0000}-{1,number,00}-{2,number,00}',
year,month,dayofmonth
)
vartabledTable=table.new(position=i_Tpos,
columns=2,
rows=17,
frame_color=color.new(#000000,i_Ttransp),
frame_width=4
)//
//@functionHelpertopopulatethetablerows.
tRow(tableId,idx,left,right,tcol=0)=>
color_bg=color.new(idx%2?i_Tcrowo:i_Tcrowe,i_Ttransp)
color_tx=switch(tcol)
(1)=>color.new(i_Tcsigt,i_Ttransp)
(2)=>color.new(i_Tctitt,i_Ttransp)
=>color.new(i_Tcdeft,i_Ttransp)
table.cell(table_id=tableId,
column=0,row=idx,
text=left,text_color=_tx,text_halign=text.align_right,text_size=i_Ttsize,
bgcolor=_bg)//
table.cell(table_id=tableId,
column=1,row=idx,
text=str.tostring(right),text_color=_tx,text_halign=text.align_left,text_size=i_Ttsize,
bgcolor=_bg)//
ifi_showT
float_atr10=ta.atr(10)[i_lback]
string_nf='0.00'
string_aru='🔼',string_ard='🔽'
//id|idx|leftlabel|rightlabel|conditionalcolor|
tRow(dTable,00,'S&P500HybridSeasonal','',2)
tRow(dTable,01,'CreatedBy:MarkosKatsanos','',2)
tRow(dTable,02,'Date:',date[i_lback])
tRow(dTable,03,'Signal:',SIGNAL[i_lback])
tRow(dTable,04,'Price:',open[i_lback])
tRow(dTable,05,'VIX:',str.tostring(VIX[i_lback],_nf))
tRow(dTable,06,'VFI:',str.tostring(VFI[i_lback],_nf),VFIatCrit?1:0)
tRow(dTable,07,'ATR:',str.tostring(_atr10,_nf))
tRow(dTable,08,'VIup%:',str.tostring(VIup[i_lback],_nf),VIup>i_maxVI?1:0)
tRow(dTable,09,'ATRup%:',str.tostring(ATRup[i_lback],_nf),ATRup>i_K*i_maxVI?1:0)
tRow(dTable,10,'VIdn%:',str.tostring(VIdn[i_lback],_nf))
tRow(dTable,11,'ATRdn%:',str.tostring(ATRdn[i_lback],_nf))
tRow(dTable,12,_aru+'LongSeasonal:',Long[i_lback])
tmp=12
ifnoti_onlyL
tmp:=13
tRow(dTable,13,_ard+'Short:',Short[i_lback],Short[i_lback]?1:0)
tRow(dTable,tmp+1,_ard+'Seasonal:',Sseasonal[i_lback],Sseasonal[i_lback]?1:0)
tRow(dTable,tmp+2,_ard+'Volatility:',Svol[1+i_lback],Svol[1+i_lback]?1:0)
tRow(dTable,tmp+3,_ard+'MoneyFlow:',Scrit[i_lback],Scrit[i_lback]?1:0)
Expand (305 lines)
