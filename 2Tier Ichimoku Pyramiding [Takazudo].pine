Script Name: 2Tier Ichimoku Pyramiding [Takazudo]
Author: Takazudo
Description: Ichimoku based pyramiding strategy example that was tested on 4h TF.

 makes the first entry when 2Tier Kumo breakout was occurred.
 makes the extra entries when higher-low (on long) or lower-high (on short) was occurred.
 uses short term MACD reversal + stop entry as a confirmation of the trend.
 slack trailing stop loss.
 changes entry quantity by the...
PineScript code:

Pine Script™ strategy
2Tier Ichimoku Pyramiding [Takazudo]

//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  https://www.tradingview.com/script/UhhFWEus-MTF-Ichimoku-Takazudo/
//@version=4
//@author=Takazudo
strategy("2Tier  Ichimoku  Pyramiding  [Takazudo]",
    pyramiding=2,
    overlay=true,
    default_qty_type=strategy.fixed,
    initial_capital=0,
    currency=currency.USD)
//============================================================================
//  consts,  inputs
//============================================================================
//  colors
var  COLOR_KIJUN  =  color.new(#fcb103,  20)
var  COLOR_TENKAN  =  color.new(#f57f17,  20)
var  COLOR_CHIKOU  =  color.new(#ffffff,  50)
var  COLOR_KUMO_BASEHTF_BULL  =  color.new(#315F2E,  60)
var  COLOR_KUMO_BASEHTF_BEAR  =  color.new(#802A1C,  60)
var  COLOR_KUMO_HIGHESTTF_BULL  =  color.new(#1D4F8A,  60)
var  COLOR_KUMO_HIGHESTTF_BEAR  =  color.new(#6B2B55,  60)
var  COLOR_SENKOUA_BASEHTF  =  color.new(#315F2E,  30)
var  COLOR_SENKOUB_BASEHTF  =  color.new(#802A1C,  30)
var  COLOR_SENKOUA_HIGHESTTF  =  color.new(#1D4F8A,  30)
var  COLOR_SENKOUB_HIGHESTTF  =  color.new(#6B2B55,  30)
var  COLOR_CROSS_POINT_BULL  =  color.new(#315F2E,  20)
var  COLOR_CROSS_POINT_BEAR  =  color.new(#802A1C,  20)
var  COLOR_CHIKOU_CROSS_POINT_BULL  =  color.new(#315F2E,  20)
var  COLOR_CHIKOU_CROSS_POINT_BEAR  =  color.new(#802A1C,  20)
var  COLOR_CHIKOU_KUMO_BREAKOUT_BULL  =  color.new(#315F2E,  0)
var  COLOR_CHIKOU_KUMO_BREAKOUT_BEAR  =  color.new(#802A1C,  0)
var  COLOR_CHIKOU_HINT_BULL  =  color.new(#315F2E,  0)
var  COLOR_CHIKOU_HINT_BEAR  =  color.new(#802A1C,  0)
var  COLOR_SENKOU_CROSS_HINT_BULL  =  color.new(#315F2E,  0)
var  COLOR_SENKOU_CROSS_HINT_BEAR  =  color.new(#802A1C,  0)
var  COLOR_TENKAN_CROSS_BG  =  color.new(#f2931d,  90)
var  COLOR_CHIKOU_BREAKOUT_BG  =  color.new(#656565,  90)
var  COLOR_SENKOU_CROSS_BG  =  color.new(#7a73d8,  90)
var  COLOR_GAP_KUMO  =  color.new(#FCC02C,  97)
var  COLOR_RANGE_EDGE  =  color.new(#43A6F5,  30)
var  COLOR_RESISTANCE_PRICE_LINE  =  color.new(#e0f64d,  20)
var  COLOR_TRANSPARENT  =  color.new(#000000,  100)
//  HTF
var  _1  =  input(true,  "═════════  HTF  ══════════")
var  config_baseHtf  =  input("D",  "Base  Higher  Timeframe",  type  =  input.resolution)
var  config_useHighestTf  =  input(true,  "use  Highest  Timeframe  (Kumo  only)")
var  config_highestTf=  input("W",  "Highest  Timeframe",  type  =  input.resolution)
var  _2  =  input(true,  "═════════  Ichimoku  ══════════")
var  config_tenkanSen  =  input(9,  minval=1,  title="Tenkan-Sen  Bars")
var  config_kijunSen  =  input(26,  minval=1,  title="Kijun-Sen  Bars")
var  config_senkouSpanB  =  input(52,  minval=1,  title="Senkou-Span  B  Bars")
var  config_chikouSpan  =  input(26,  minval=1,  title="Chikou-Span  Offset")
var  config_senkouSpan  =  input(26,  minval=1,  title="Senkou-Span  Offset")
var  _3  =  input(true,  "═════════  Smooth  Line  ══════════")
var  config_useSmooth  =  input(true,  "enable  smooth  line")
var  config_smoothFactor  =  input(2,  minval=2,  title="smooth  factor")
var  _4  =  input(true,  "═════════  MTF  stuff  ══════════")
var  config_autoSwitchToHtf  =  input(true,  "avoid  to  refer  lower  resolution  indicator")
var  config_avoidTooHighResolution  =  input(true,  "avoid  to  refer  too  high  resolution  indicator")
var  config_useGapKumo  =  input(true,  "use  Gap  Kumo")
var  _5  =  input(true,  "═════════  etc  ══════════")
var  config_bullDetectBars  =  input(defval  =  3,  title  =  "bull  detection  min  bar  count",    minval  =  1)
var  config_rangeDetectBars  =  input(defval  =  200,  title  =  "range  detection  bar  count",    minval  =  1)
var  config_recentBars  =  input(defval  =  50,  title  =  "recent  bar  count  for  SL",    minval  =  1)
var  config_atrLength  =  input(4,  title  =  "Trailing  stop  ATR  Length")
var  config_atrSlMult  =  input(1,  title  =  "Trailing  stop  ATR  Multiple  factor",  type=input.float)
var  config_atrEntryPaddingMult  =  input(0.5,  title  =  "Entry  padding  ATR  Multiple  factor",  type=input.float)
var  config_atrEntryPaddingLength  =  input(10,  title  =  "Entry  padding  ATR  Length")
var  config_extraEntryStopDetectBars  =  input(defval  =  10,  title  =  "Pyramiding  entry  recent  detect  bar  count",    minval  =  1)
var  _6  =  input(true,  "═════════  Backtesting  range  ══════════")
//  From  Date  Inputs
fromYear    =  input(defval  =  2019,  title  =  "From  Year",    minval  =  1970)
fromMonth  =  input(defval  =  1,        title  =  "From  Month",  minval  =  1,  maxval  =  12)
fromDay      =  input(defval  =  1,        title  =  "From  Day",minval=1,maxval=31)
//ToDateInputs
toYear=input(defval=2021,title="ToYear",minval=1970)
toMonth=input(defval=3,title="ToMonth",minval=1,maxval=12)
toDay=input(defval=10,title="ToDay",minval=1,maxval=31)
//============================================================================
//MTFSelectionFramework
//http://www.pinecoders.com/faq_and_code/#other-intervals-mtf
//============================================================================
//—————Convertscurrent"timeframe.multiplier"plustheTFintominutesoftypefloat.
f_resInMinutes()=>
_resInMinutes=timeframe.multiplier*(
timeframe.isseconds?1./60.:
timeframe.isminutes?1.:
timeframe.isdaily?1440.:
timeframe.isweekly?10080.:
timeframe.ismonthly?43800.:na)
//—————Returnsresolutionof_resolutionperiodinminutes.
f_tfResInMinutes(_res)=>
//_res:resolutionofanyTF(in"timeframe.period"stringformat).
security(syminfo.tickerid,_res,f_resInMinutes())
//—————Givencurrentresolution,returnsnextstepofHTF.
f_resNextStep(_res)=>
//_res:currentTFinfractionalminutes.
_res<=1?"15":
_res<=5?"60":
_res<=30?"240":
_res<=60?"1D":
_res<=360?"3D":
_res<=1440?"1W":
_res<=10080?"1M":"12M"
//—————Returnsamultipleofcurrentresolutionasastringin"timeframe.period"formatusablewith"security()".
f_multipleOfRes(_res,_mult)=>
//_res:currentresolutioninminutes,inthefractionalformatsuppliedbyf_resInMinutes()companionfunction.
//_mult:MultipleofcurrentTFtobecalculated.
//ConvertcurrentfloatTFinminutestotargetstringTFin"timeframe.period"format.
_targetResInMin=_res*max(_mult,1)
//Findbeststringtoexpresstheresolution.
_targetResInMin<=0.083?"5S":
_targetResInMin<=0.251?"15S":
_targetResInMin<=0.501?"30S":
_targetResInMin<=1440?tostring(round(_targetResInMin)):
_targetResInMin<=43800?tostring(round(min(_targetResInMin/1440,365)))+"D":
tostring(round(min(_targetResInMin/43800,12)))+"M"
//—————Convertsaresolutionexpressedinfloatminutesintoastringusableby"security()".
//SeeourFAQ&Codeforanexampleofusingthisfunction:http://www.pinecoders.com/faq_and_code/#how-can-i-convert-a-resolution-in-float-minutes-into-a-string-usable-with-security
f_resFromMinutes(_minutes)=>
_minutes<=0.0167?"1S":
_minutes<=0.0834?"5S":
_minutes<=0.2500?"15S":
_minutes<=0.5000?"30S":
_minutes<=1440?tostring(round(_minutes)):
_minutes<=43800?tostring(round(min(_minutes/1440,365)))+"D":
tostring(round(min(_minutes/43800,12)))+"M"
//ReturnsthetheoreticalnumbersofcurrentchartbarsinthegiventargetHTFresolution(notethatthisnumbermaybeverydifferentfromactualnumberoncertainsymbols).
f_theoreticalDilationOf(_res)=>
//_res:resolutionofanyTF(in"timeframe.period"stringformat).
f_tfResInMinutes(_res)/f_resInMinutes()
//ReturnstheaveragenumberofcurrentchartbarsinthegiventargetHTFresolution(thisreflectsthedataset'shistory).
f_avgDilationOf(_res)=>
//_res:resolutionofanyTF(in"timeframe.period"stringformat).
b=barssince(change(time(_res)))
cumTotal=cum(b==0?b[1]+1:0)
cumCount=cum(b==0?1:0)
cumTotal/cumCount
//—————Printalabelatendofchart.
f_htfLabel(_txt,_y,_color,_offsetLabels)=>
_t=int(time+(f_resInMinutes()*_offsetLabels*60000))
//Createthelabelonthedataset'sfirstbar.
var_lbl=label.new(_t,_y,_txt,xloc.bar_time,yloc.price,#00000000,label.style_none,color.gray,size.large)
ifbarstate.islast
//Ratherthandeleteandrecreatethelabeloneveryrealtimebarupdate,
//simplyupdatethelabel'sinformation;it'smoreefficient.
label.set_xy(_lbl,_t,_y)
label.set_text(_lbl,_txt)
label.set_textcolor(_lbl,_color)
//}
//============================================================================
//utils,setup
//============================================================================
//initialize
vartenkanLine_baseHtf=0.0
varkijunLine_baseHtf=0.0
varsenkouALine_baseHtf=0.0
varsenkouBLine_baseHtf=0.0
vartenkanLine_highestTf=0.0
varkijunLine_highestTf=0.0
varsenkouALine_highestTf=0.0
varsenkouBLine_highestTf=0.0
vargapKumo_high=0.0
vargapKumo_low=0.0
f_isUsingHtf()=>
_current=f_resInMinutes()
_target=f_tfResInMinutes(config_baseHtf)
_current<_target
f_isOverHtf()=>
_current=f_resInMinutes()
_target=f_tfResInMinutes(config_baseHtf)
_current>_target
f_isOverHighestTf()=>
_current=f_resInMinutes()
_target=f_tfResInMinutes(config_highestTf)
_current>=_target
f_shouldAvoidHighestTf(barsMultipiller)=>
//ittheresolutionwastoohigh,requestedcandlesticks
//hitthelimitoftradingview.
//thisfunctiondetectsthelimit
config_avoidTooHighResolutionandbarsMultipiller>150
varuseSmooth=f_isUsingHtf()andconfig_useSmooth
f_smooth(_series)=>
_f=config_smoothFactor
//Trickypart.thelinesthatrefershigherTimeframegotzig-zag
//becausethegranularityofthevalueperbaristhesame
//insidethehighertimeframe'sonebarlength.
//Thissmoothfactorblendsthevaluewithpreviousvaluesusingema.
_smoothed=ema(ema(ema(_series,_f),_f),_f)
useSmooth?_smoothed:_series
lostPositionsInPrevBar=strategy.position_size==0and(strategy.position_size[0]!=strategy.position_size[1])
//rememberentryprice
varpreviousEntryPrice=hl2
//============================================================================
//entryquantitycaliculation
//widerSL=lessquantities
//============================================================================
f_calcQtyForInitialEntry(_percentage)=>
if_percentage<1
10000
elseif_percentage<2
8000
elseif_percentage<3
6000
else
4000
f_calcQtyForExtraEntry(_percentage)=>
if_percentage<1
5000
elseif_percentage<2
4000
elseif_percentage<3
3000
else
2000
//============================================================================
//candleactions
//============================================================================
f_isUpDoji()=>
fullPriceHeight=high-low
bodyPriceHeight=abs(close-open)
(bodyPriceHeight<fullPriceHeight*1/7)and(max(open,close)>(low+(high-low)*2/3))
f_isDownDoji()=>
fullPriceHeight=high-low
bodyPriceHeight=abs(close-open)
(bodyPriceHeight<fullPriceHeight*1/7)and(min(open,close)<(high-(high-low)*2/3))
f_isLastCandleUp()=>
result=false
(close>open)orf_isUpDoji()
f_isLastCandleDown()=>
result=false
(close<open)orf_isDownDoji()
//============================================================================
//Ichimokucalcs
//============================================================================
f_donchian(len)=>
avg(lowest(len),highest(len))
f_tenkan()=>
f_donchian(config_tenkanSen)
f_kijun()=>
f_donchian(config_kijunSen)
f_senkouA(_tenkan,_kijun)=>
avg(_tenkan,_kijun)
f_senkouB()=>
f_donchian(config_senkouSpanB)
barsMultipiller_baseHtf=f_isOverHtf()?1:f_theoreticalDilationOf(config_baseHtf)
barsMultipiller_highestTf=f_isOverHighestTf()?1:f_theoreticalDilationOf(config_highestTf)
shouldAvoidHighestTf=f_shouldAvoidHighestTf(barsMultipiller_highestTf)
f_calcUseHighestTf()=>
_result=true
ifshouldAvoidHighestTf
_result:=false
else
ifconfig_useHighestTf
iff_isOverHighestTf()
_result:=false
else
_result:=true
_result
varuseHighestTf=f_calcUseHighestTf()
senkouOffset=config_senkouSpan-1
chikouOffset=-config_chikouSpan+1
senkouOffset_baseHtf=round((config_senkouSpan-1)*barsMultipiller_baseHtf)
chikouOffset_baseHtf=round((config_chikouSpan-1)*barsMultipiller_baseHtf)
senkouOffsetForPlot_baseHtf=round(senkouOffset*barsMultipiller_baseHtf)
chikouOffsetForPlot_baseHtf=round(-chikouOffset_baseHtf)
senkouOffset_highestTf=useHighestTf?round((config_senkouSpan-1)*barsMultipiller_highestTf):0
chikouOffset_highestTf=useHighestTf?round((config_chikouSpan-1)*barsMultipiller_highestTf):0
senkouOffsetForPlot_highestTf=useHighestTf?round(senkouOffset*barsMultipiller_highestTf):0
chikouOffsetForPlot_highestTf=useHighestTf?round(-chikouOffset_highestTf):0
senkouSpanIndexDiff=senkouOffsetForPlot_highestTf-senkouOffsetForPlot_baseHtf
//notsurewhybutitsaysnegativeindexwasdetected
ifsenkouSpanIndexDiff<0
senkouSpanIndexDiff:=0
ifnotuseHighestTfornotconfig_useGapKumo
senkouSpanIndexDiff:=0
f_calcIchimoku_baseHtf()=>
_useCurrentRes=config_autoSwitchToHtfandf_isOverHtf()
_tenkan=f_tenkan()
_kijun=f_kijun()
_senkouA=f_senkouA(_tenkan[0],_kijun[0])
_senkouB=f_senkouB()
_htfTenkan=_useCurrentRes?_tenkan:security(syminfo.tickerid,config_baseHtf,_tenkan)
_htfKijun=_useCurrentRes?_kijun:security(syminfo.tickerid,config_baseHtf,_kijun)
_htfSenkouA=_useCurrentRes?_senkouA:security(syminfo.tickerid,config_baseHtf,_senkouA)
_htfSenkouB=_useCurrentRes?_senkouB:security(syminfo.tickerid,config_baseHtf,_senkouB)
[_htfTenkan,_htfKijun,_htfSenkouA,_htfSenkouB]
f_calcIchimoku_highestTf()=>
_tenkan=f_tenkan()
_kijun=f_kijun()
_senkouA=f_senkouA(_tenkan[0],_kijun[0])
_senkouB=f_senkouB()
_highestTfTenkan=useHighestTf?security(syminfo.tickerid,config_highestTf,_tenkan):_tenkan
_highestTfKijun=useHighestTf?security(syminfo.tickerid,config_highestTf,_kijun):_kijun
_highestTfSenkouA=useHighestTf?security(syminfo.tickerid,config_highestTf,_senkouA):_senkouA
_highestTfSenkouB=useHighestTf?security(syminfo.tickerid,config_highestTf,_senkouB):_senkouB
[_highestTfTenkan,_highestTfKijun,_highestTfSenkouA,_highestTfSenkouB]
//--------------------------------------
//HTFIchimokuvalues
[_htfTenkan,_htfKijun,_htfSenkouA,_htfSenkouB]=f_calcIchimoku_baseHtf()
tenkanLine_baseHtf:=_htfTenkan
kijunLine_baseHtf:=_htfKijun
senkouALine_baseHtf:=_htfSenkouA
senkouBLine_baseHtf:=_htfSenkouB
//--------------------------------------
//HighestTFIchimokuvalues
[_highestTfTenkan,_highestTfKijun,_highestTfSenkouA,_highestTfSenkouB]=f_calcIchimoku_highestTf()
tenkanLine_highestTf:=_highestTfTenkan
kijunLine_highestTf:=_highestTfKijun
senkouALine_highestTf:=_highestTfSenkouA
senkouBLine_highestTf:=_highestTfSenkouB
f_calcIchimokuSignals_baseHtf()=>
var_chikouAboveCandle=false
var_chikouBelowCandle=false
var_chikouAboveKumo=false
var_chikouBelowKumo=false
_kumoColor_bull=senkouALine_baseHtf>senkouBLine_baseHtf
_senkouCross_bull=crossover(senkouALine_baseHtf,senkouBLine_baseHtf)
_senkouCross_bear=crossover(senkouBLine_baseHtf,senkouALine_baseHtf)
_senkouSpanHigh=max(senkouALine_baseHtf[senkouOffset_baseHtf],senkouBLine_baseHtf[senkouOffset_baseHtf])
_senkouSpanLow=min(senkouALine_baseHtf[senkouOffset_baseHtf],senkouBLine_baseHtf[senkouOffset_baseHtf])
_chikouKumoHigh=max(senkouALine_baseHtf[senkouOffset_baseHtf+chikouOffset_baseHtf],senkouBLine_baseHtf[senkouOffset_baseHtf+chikouOffset_baseHtf])
_chikouKumoLow=min(senkouALine_baseHtf[senkouOffset_baseHtf+chikouOffset_baseHtf],senkouBLine_baseHtf[senkouOffset_baseHtf+chikouOffset_baseHtf])
_tenkanCross_bull=crossover(tenkanLine_baseHtf,kijunLine_baseHtf)
_tenkanCross_bear=crossover(kijunLine_baseHtf,tenkanLine_baseHtf)
_tenkanAboveKijun=tenkanLine_baseHtf>kijunLine_baseHtf
_tenkanBelowKijun=tenkanLine_baseHtf<kijunLine_baseHtf
_chikouAboveCandle:=close>close[chikouOffset_baseHtf]
_chikouBelowCandle:=close<close[chikouOffset_baseHtf]
_chikouCross_bull=_chikouAboveCandleandnot_chikouAboveCandle[1]
_chikouCross_bear=_chikouBelowCandleandnot_chikouBelowCandle[1]
_chikouAboveKumo:=close>_chikouKumoHigh
_chikouBelowKumo:=close<_chikouKumoLow
_currentInKumo=(_senkouSpanLow<=close)and(close<=_senkouSpanHigh)
_currentTouchingKumo=not_currentInKumoand
(((low<=_senkouSpanHigh)and(low>=_senkouSpanLow))or
((high>=_senkouSpanLow)and(high<=_senkouSpanHigh)))
_currentAboveKumo=close>_senkouSpanHigh
_currentBelowKumo=close<_senkouSpanLow
_chikouInKumo=(_chikouKumoLow<=close)and(close<=_chikouKumoHigh)
_chikouTouchingKumo=not_chikouInKumoand
(((low<=_chikouKumoHigh)and(low>=_chikouKumoLow))or
((high>=_chikouKumoLow)and(high<=_chikouKumoHigh)))
_chikouKumoBreakout_bull=_chikouAboveKumoandnot_chikouAboveKumo[1]
_chikouKumoBreakout_bear=_chikouBelowKumoandnot_chikouBelowKumo[1]
[_currentInKumo,_currentTouchingKumo,_kumoColor_bull,_senkouCross_bull,_senkouCross_bear,
_senkouSpanHigh,_senkouSpanLow,
_chikouKumoHigh,_chikouKumoLow,
_chikouAboveCandle,_chikouBelowCandle,
_tenkanCross_bull,_tenkanCross_bear,
_tenkanAboveKijun,_tenkanBelowKijun,
_chikouCross_bull,_chikouCross_bear,
_chikouAboveKumo,_chikouBelowKumo,
_chikouKumoBreakout_bull,_chikouKumoBreakout_bear,
_currentAboveKumo,_currentBelowKumo,
_chikouInKumo,_chikouTouchingKumo]
f_calcIchimokuSignals_highestTf()=>
var_chikouAboveCandle=false
var_chikouBelowCandle=false
var_chikouAboveKumo=false
var_chikouBelowKumo=false
_kumoColor_bull=senkouALine_highestTf>senkouBLine_highestTf
_senkouCross_bull=crossover(senkouALine_highestTf,senkouBLine_highestTf)
_senkouCross_bear=crossover(senkouBLine_highestTf,senkouALine_highestTf)
_senkouSpanCurrentHigh=max(senkouALine_highestTf[senkouOffset_highestTf],senkouBLine_highestTf[senkouOffset_highestTf])
_senkouSpanCurrentLow=min(senkouALine_highestTf[senkouOffset_highestTf],senkouBLine_highestTf[senkouOffset_highestTf])
_chikouKumoHigh=max(senkouALine_highestTf[senkouOffset_highestTf+chikouOffset_highestTf],senkouBLine_highestTf[senkouOffset_highestTf+chikouOffset_highestTf])
_chikouKumoLow=min(senkouALine_highestTf[senkouOffset_highestTf+chikouOffset_highestTf],senkouBLine_highestTf[senkouOffset_highestTf+chikouOffset_highestTf])
_tenkanCross_bull=crossover(tenkanLine_highestTf,kijunLine_highestTf)
_tenkanCross_bear=crossover(kijunLine_highestTf,tenkanLine_highestTf)
_chikouAboveCandle:=close>close[chikouOffset_highestTf]
_chikouBelowCandle:=close<close[chikouOffset_highestTf]
_chikouCross_bull=_chikouAboveCandleandnot_chikouAboveCandle[1]
_chikouCross_bear=_chikouBelowCandleandnot_chikouBelowCandle[1]
_chikouAboveKumo:=close>_chikouKumoHigh
_chikouBelowKumo:=close<_chikouKumoLow
_chikouKumoBreakout_bull=_chikouAboveKumoandnot_chikouAboveKumo[1]
_chikouKumoBreakout_bear=_chikouBelowKumoandnot_chikouBelowKumo[1]
_currentAboveKumo=close>_senkouSpanCurrentHigh
_currentBelowKumo=close<_senkouSpanCurrentLow
[_kumoColor_bull,_senkouCross_bull,_senkouCross_bear,
_senkouSpanCurrentHigh,_senkouSpanCurrentLow,
_chikouKumoHigh,_chikouKumoLow,
_chikouAboveCandle,_chikouBelowCandle,
_tenkanCross_bull,_tenkanCross_bear,
_chikouCross_bull,_chikouCross_bear,
_chikouAboveKumo,_chikouBelowKumo,
_chikouKumoBreakout_bull,_chikouKumoBreakout_bear,
_currentAboveKumo,_currentBelowKumo]
f_calcGapKumo(_tf1_senkouA,_tf1_senkouB,_tf2_senkouA,_tf2_senkouB)=>
_max=max(_tf1_senkouA,_tf1_senkouB,_tf2_senkouA,_tf2_senkouB)
_tf1IsHigher=(_tf1_senkouA==_max)or(_tf1_senkouB==_max)
_kumoA_max=_tf1IsHigher?max(_tf1_senkouA,_tf1_senkouB):max(_tf2_senkouA,_tf2_senkouB)
_kumoA_min=_tf1IsHigher?min(_tf1_senkouA,_tf1_senkouB):min(_tf2_senkouA,_tf2_senkouB)
_kumoB_max=_tf1IsHigher?max(_tf2_senkouA,_tf2_senkouB):max(_tf1_senkouA,_tf1_senkouB)
_kumoB_min=_tf1IsHigher?min(_tf2_senkouA,_tf2_senkouB):min(_tf1_senkouA,_tf1_senkouB)
_kumoCrossed=false
_gapKumo_high=max(_kumoA_max,_kumoB_max)
_gapKumo_low=_gapKumo_high
if_kumoA_max>_kumoB_max
if_kumoA_min<_kumoB_max
_kumoCrossed:=true
else
_gapKumo_high:=_kumoA_min
_gapKumo_low:=_kumoB_max
else
if_kumoB_min<_kumoA_max
_kumoCrossed:=true
else
_gapKumo_high:=_kumoB_min
_gapKumo_low:=_kumoA_max
[_kumoCrossed,_gapKumo_high,_gapKumo_low]
//============================================================================
//calcIchimokuvaluesforplot
//============================================================================
//--------------------------------------
//HTFIchimokusignals
[currentInKumo_baseHtf,_,kumoColor_bull_baseHtf,_,_,
senkouSpanHigh_baseHtf,senkouSpanLow_baseHtf,
_,_,
chikouAboveCandle_baseHtf,chikouBelowCandle_baseHtf,
_,_,
tenkanAboveKijun_baseHtf,tenkanBelowKijun_baseHtf,
_,_,
chikouAboveKumo_baseHtf,chikouBelowKumo_baseHtf,
_,_,
currentAboveKumo_baseHtf,currentBelowKumo_baseHtf,
_,_]=f_calcIchimokuSignals_baseHtf()
//--------------------------------------
//HighestTFIchimokusignals
[kumoColor_bull_highestTf,senkouCross_bull_highestTf,senkouCross_bear_highestTf,
senkouSpanHigh_highestTf,senkouSpanLow_highestTf,
_,_,
_,_,
tenkanCross_bull_highestTf,tenkanCross_bear_highestTf,
chikouCross_bull_highestTf,chikouCross_bear_highestTf,
_,_,
chikouKumoBreakout_bull_highestTf,chikouKumoBreakout_bear_highestTf,
currentAboveKumo_highestTf,currentBelowKumo_highestTf]=f_calcIchimokuSignals_highestTf()
//--------------------------------------
//smoothlines
smooth_tenkanLine_baseHtf=f_smooth(tenkanLine_baseHtf)
smooth_kijunLine_baseHtf=f_smooth(kijunLine_baseHtf)
smooth_senkouALine_baseHtf=f_smooth(senkouALine_baseHtf)
smooth_senkouBLine_baseHtf=f_smooth(senkouBLine_baseHtf)
//smooth_tenkanLine_highestTf=f_smooth(tenkanLine_highestTf)
//smooth_kijunLine_highestTf=f_smooth(kijunLine_highestTf)
smooth_senkouALine_highestTf=f_smooth(senkouALine_highestTf)
smooth_senkouBLine_highestTf=f_smooth(senkouBLine_highestTf)
//--------------------------------------
//gapkumo
//max_bars_back(senkouALine_highestTf,600)
//max_bars_back(senkouBLine_highestTf,600)
[_,_gapKumo_high,_gapKumo_low]=f_calcGapKumo(
senkouALine_baseHtf,
senkouBLine_baseHtf,
senkouALine_highestTf[senkouSpanIndexDiff],
senkouBLine_highestTf[senkouSpanIndexDiff])
gapKumo_high:=_gapKumo_high
gapKumo_low:=_gapKumo_low
smooth_gapKumo_high=f_smooth(gapKumo_high)
smooth_gapKumo_low=f_smooth(gapKumo_low)
//============================================================================
//plotstuffs
//============================================================================
//gapkumo
val_gapKumo_high=useHighestTfandconfig_useGapKumo?smooth_gapKumo_high:na
val_gapKumo_low=useHighestTfandconfig_useGapKumo?smooth_gapKumo_low:na
plot_gapKumo_high=plot(val_gapKumo_high,
offset=senkouOffsetForPlot_baseHtf,
color=COLOR_TRANSPARENT,
transp=0,
linewidth=1,
title="GapKumoHigh")
plot_gapKumo_low=plot(val_gapKumo_low,
offset=senkouOffsetForPlot_baseHtf,
color=COLOR_TRANSPARENT,
transp=0,
linewidth=1,
title="GapKumoLOW")
fill(plot_gapKumo_high,plot_gapKumo_low,
color=COLOR_GAP_KUMO,
transp=0,
title="GapKumo")
//kumoHighestTF
plotVal_senkouA_highestTf=useHighestTf?smooth_senkouALine_highestTf:na
plotVal_senkouB_highestTf=useHighestTf?smooth_senkouBLine_highestTf:na
color_kumo_highestTf=kumoColor_bull_highestTf?COLOR_KUMO_HIGHESTTF_BULL:COLOR_KUMO_HIGHESTTF_BEAR
plot_senkouA_highestTf=plot(plotVal_senkouA_highestTf,
offset=senkouOffsetForPlot_highestTf,
color=COLOR_SENKOUA_HIGHESTTF,
transp=0,
linewidth=1,
title="HighestTFSenkou-SpanA")
plot_senkouB_highestTf=plot(plotVal_senkouB_highestTf,
offset=senkouOffsetForPlot_highestTf,
color=COLOR_SENKOUB_HIGHESTTF,
transp=0,
linewidth=1,
title="HighestTFSenkou-SpanB")
fill(plot_senkouA_highestTf,plot_senkouB_highestTf,
color=color_kumo_highestTf,
transp=0,
title="HighestTFKumo")
//kumoHTF
color_kumo_baseHtf=kumoColor_bull_baseHtf?COLOR_KUMO_BASEHTF_BULL:COLOR_KUMO_BASEHTF_BEAR
plot_senkouA_baseHtf=plot(smooth_senkouALine_baseHtf,
offset=senkouOffsetForPlot_baseHtf,
color=COLOR_SENKOUA_BASEHTF,
transp=0,
linewidth=1,
title="BaseHTF:Senkou-SpanA")
plot_senkouB_baseHtf=plot(smooth_senkouBLine_baseHtf,
offset=senkouOffsetForPlot_baseHtf,
color=COLOR_SENKOUB_BASEHTF,
transp=0,
linewidth=1,
title="BaseHTF:Senkou-SpanB")
fill(plot_senkouA_baseHtf,plot_senkouB_baseHtf,
color=color_kumo_baseHtf,
transp=0,
title="BaseHTFKumo")
//chikou
plot(close,
offset=chikouOffsetForPlot_baseHtf,
color=COLOR_CHIKOU,
linewidth=1,
transp=0,
title="Chikou-Span")
//tenkan&kijun
plot(smooth_tenkanLine_baseHtf,
color=COLOR_TENKAN,
linewidth=1,
transp=0,
title="Tenkan-Sen")
plot(smooth_kijunLine_baseHtf,
color=COLOR_KIJUN,
linewidth=3,
transp=0,
title="Kijun-Sen")
//============================================================================
//backtestduration
//============================================================================
//Calculatestart/enddateandtimecondition
startDate=timestamp(fromYear,fromMonth,fromDay,00,00)
finishDate=timestamp(toYear,toMonth,toDay,00,00)
//============================================================================
//bullish/bearishdetection
//============================================================================
varbullish=false
varbearish=false
//detectbullishorbearishbymanyincidents
bullish:=kumoColor_bull_baseHtfandchikouAboveCandle_baseHtfand
tenkanAboveKijun_baseHtfandchikouAboveKumo_baseHtfand
currentAboveKumo_baseHtfandcurrentAboveKumo_highestTf
bearish:=notkumoColor_bull_baseHtfandchikouBelowCandle_baseHtfand
tenkanBelowKijun_baseHtfandchikouBelowKumo_baseHtfand
currentBelowKumo_baseHtfandcurrentBelowKumo_highestTf
//calccontinuousbullishorbearish
f_isContinuousBull()=>
inTrend=0
fori=0to(config_bullDetectBars-1)
ifbullish[i]
inTrend:=inTrend+1
inTrend==config_bullDetectBars
f_isContinuousBear()=>
inTrend=0
fori=0to(config_bullDetectBars-1)
ifbearish[i]
inTrend:=inTrend+1
inTrend==config_bullDetectBars
continuousBull=f_isContinuousBull()
continuousBear=f_isContinuousBear()
//============================================================================
//MACD
//============================================================================
f_isMacdUpTrend()=>
[_macdLine,_signalLine,_]=macd(close,12,26,9)
_upTrend=_macdLine>_signalLine
//calcmacdforentry
macdUpTrend=f_isMacdUpTrend()
macdDownTrend=notmacdUpTrend
//============================================================================
//recenthigh/low
//============================================================================
f_calcRecentHigh()=>
startIndex=1
highest=max(open[startIndex],close[startIndex])
fori=startIndexto(config_recentBars-1)
current=max(open[i],close[i])
ifhighest<current
highest:=current
highest
f_calcRecentLow()=>
startIndex=1
lowest=min(open[startIndex],close[startIndex])
fori=startIndexto(config_recentBars-1)
current=min(open[i],close[i])
iflowest>current
lowest:=current
lowest
recentHigh=f_calcRecentHigh()
recentLow=f_calcRecentLow()
//============================================================================
//ATRbasedstuff
//============================================================================
entryPadding=config_atrEntryPaddingMult*atr(config_atrEntryPaddingLength)
sl_val=config_atrSlMult*atr(config_atrLength)
atrSl_long=low-sl_val
atrSl_short=high+sl_val
//============================================================================
//KumobasedSL
//============================================================================
kumoBasedSlLong=(senkouSpanHigh_baseHtf+atrSl_long)/2
kumoBasedSlShort=(senkouSpanLow_baseHtf+atrSl_short)/2
//============================================================================
//MixedSL
//============================================================================
varinitialEntryTpPrice_long=hl2
varinitialEntryTpPrice_short=hl2
varmixedTrailingSl_long=hl2
varmixedTrailingSl_short=hl2
mixedSlLong=min(atrSl_long,kumoBasedSlLong,recentLow)
mixedSlShort=max(atrSl_short,kumoBasedSlShort,recentHigh)
//plot(mixedSlLong,color=color.green,linewidth=2)
//plot(mixedSlShort,color=color.red,linewidth=2)
//============================================================================
//RangeEdgecaliculation
//============================================================================
//calcrangeedge
f_calcRangeEdge_high()=>
//highest=high[3]
highest=max(open[3],close[3])
fori=4to(config_rangeDetectBars-1)
//current=high[i]
current=max(open[i],close[i])
ifhighest<current
highest:=current
highest
f_calcRangeEdge_low()=>
//lowest=low[3]
lowest=min(open[3],close[3])
fori=4to(config_rangeDetectBars-1)
//current=low[i]
current=min(open[i],close[i])
iflowest>current
lowest:=current
lowest
entryLimitHigh=f_calcRangeEdge_high()
entryLimitLow=f_calcRangeEdge_low()
plot(entryLimitHigh,color=COLOR_RANGE_EDGE,linewidth=1)
plot(entryLimitLow,color=COLOR_RANGE_EDGE,linewidth=1)
//============================================================================
//entrytimingjudge
//============================================================================
f_trendStatsChanged()=>
vartrendStats=0
varkumoBull=false
varkumoBear=false
varkumoRanged=false
kumoBull:=currentAboveKumo_baseHtfandcurrentAboveKumo_highestTf
kumoBear:=currentBelowKumo_baseHtfandcurrentBelowKumo_highestTf
kumoRanged:=notkumoBullandnotkumoBear
ifkumoRanged
trendStats:=0
//respectrecentbullishorbearish
ifkumoBull[1]orkumoBull[2]orkumoBull[3]orkumoBear[1]orkumoBear[2]orkumoBear[3]
trendStats:=trendStats[1]
ifkumoBull
trendStats:=1
ifkumoBear
trendStats:=-1
trendStats[1]!=trendStats[0]
trendStatsChanged=f_trendStatsChanged()
varisFirstEntry=true
varresistancePrice=hl2
varrangeBreakSignalDetected=false
varrangeBreakMacdReversalDetected=false
varrangeBreakConfirmed=false
//--------------------------------------
//resetflags
//iftrendstatschanged,resetflags
iftrendStatsChanged
isFirstEntry:=true
rangeBreakSignalDetected:=false
rangeBreakMacdReversalDetected:=false
rangeBreakConfirmed:=false
else
//ifhasnopositions
ifstrategy.position_size==0
isFirstEntry:=isFirstEntry[1]
//iflostpositionsinprevbar
iflostPositionsInPrevBar
rangeBreakSignalDetected:=false
rangeBreakConfirmed:=false
else
rangeBreakSignalDetected:=rangeBreakSignalDetected[1]
rangeBreakConfirmed:=rangeBreakConfirmed[1]
//ifhasanyposition
else
isFirstEntry:=false//nomorefirstentry
resistancePrice:=hl2//noresistanceprice
//--------------------------------------
//1stentryconfirmation
varfirstReverseAfterTrendChange=false
vartrendConfirmed=false
//thisoperationisforthe1stentry
ifisFirstEntry
ifbullish
//waitfortheshortreversalforconfirmation
ifnotfirstReverseAfterTrendChangeandnotrangeBreakMacdReversalDetected
ifmacdDownTrend
rangeBreakMacdReversalDetected:=true
ifrangeBreakMacdReversalDetected
ifmacdUpTrend
trendConfirmed:=true
ifbearish
ifnotfirstReverseAfterTrendChangeandnotrangeBreakMacdReversalDetected
ifmacdUpTrend
rangeBreakMacdReversalDetected:=true
ifrangeBreakMacdReversalDetected
ifmacdDownTrend
trendConfirmed:=true
else
trendConfirmed:=false
firstReverseAfterTrendChange:=false
if(bullish[0]!=bullish[1])or(bearish[0]!=bearish[1])
trendConfirmed:=false
//plottrendconfirmation
if(trendConfirmed[0]==true)and(trendConfirmed[1]==false)
ifbullish
label.new(bar_index,low,'TrendConfirmed',style=label.style_triangleup,size=size.tiny,color=#ffffff,textcolor=#ffffff)
else
label.new(bar_index,high,'TrendConfirmed',style=label.style_triangledown,size=size.tiny,color=#ffffff,textcolor=#ffffff)
//--------------------------------------
//laterentryconfirmation
ifstrategy.position_size==0
//thisoperationisforlaterentry
ifisFirstEntry
resistancePrice:=hl2
else
//ifrangebreakwasdetected,setflag
ifnotrangeBreakSignalDetectedandcontinuousBullandentryLimitHigh<close
rangeBreakSignalDetected:=true
ifnotrangeBreakSignalDetectedandcontinuousBearandclose<entryLimitLow
rangeBreakSignalDetected:=true
//afterrangebreak,waitforshortMACDreversal.
//afterthisconfirmation,makestopentry
ifrangeBreakSignalDetected
ifsenkouSpanHigh_baseHtf<close
resistancePrice:=entryLimitHigh
ifmacdDownTrend
rangeBreakConfirmed:=true
ifsenkouSpanLow_baseHtf>close
resistancePrice:=entryLimitLow
ifmacdUpTrend
rangeBreakConfirmed:=true
//plotrangebreakdetection
if(rangeBreakSignalDetected[0]==true)and(rangeBreakSignalDetected[1]==false)
ifbullish
label.new(bar_index,low,'Rangebreakdetected',style=label.style_triangleup,size=size.tiny,color=#ffffff,textcolor=#ffffff)
else
label.new(bar_index,high,'Rangebreakdetected',style=label.style_triangledown,size=size.tiny,color=#ffffff,textcolor=#ffffff)
//plotresistancepriceline
resitancePriceColor=rangeBreakConfirmedandstrategy.position_size==0?COLOR_RESISTANCE_PRICE_LINE:COLOR_TRANSPARENT
plot(resistancePrice,linewidth=4,color=resitancePriceColor)
//============================================================================
//Pyramidingentryjudge
//============================================================================
f_calcExtraEntryStopForShort()=>
startIndex=2
highest=max(open[startIndex],close[startIndex])
fori=startIndexto(config_extraEntryStopDetectBars-1)
current=max(open[i],close[i])
ifhighest<current
highest:=current
highest
f_calcExtraEntryStopForLong()=>
startIndex=2
lowest=min(open[startIndex],close[startIndex])
fori=startIndexto(config_extraEntryStopDetectBars-1)
current=min(open[i],close[i])
iflowest>current
lowest:=current
lowest
extraEntryStopLong=f_calcExtraEntryStopForLong()+entryPadding
extraEntryStopShort=f_calcExtraEntryStopForShort()-entryPadding
extraEntryStop=bullish?extraEntryStopLong:
bearish?extraEntryStopShort:
hl2
extraEntryStopColor=(bullishorbearish)?color.green:COLOR_TRANSPARENT
//plotasline
plot(extraEntryStop,color=extraEntryStopColor,linewidth=2)
//============================================================================
//entry,TP,SL
//============================================================================
shouldMakeEntryLong=continuousBulland((isFirstEntryandtrendConfirmed)or(rangeBreakConfirmedandclose>resistancePrice))
shouldMakeEntryShort=continuousBearand((isFirstEntryandtrendConfirmed)or(rangeBreakConfirmedandclose<resistancePrice))
//TPcaliculation
ifstrategy.position_size==0
initialEntryTpPrice_long:=entryLimitHigh+(hl2-extraEntryStopLong)
initialEntryTpPrice_short:=entryLimitLow-(extraEntryStopShort-hl2)
//SLcaliculation
mixedTrailingSl_long:=if((strategy.position_size==0)andshouldMakeEntryLong)or((strategy.position_size>0)and(mixedTrailingSl_long<mixedSlLong))
mixedSlLong
elseif(strategy.position_size==0)or(strategy.position_size<0)
hl2
else
mixedTrailingSl_long[1]
mixedTrailingSl_short:=if((strategy.position_size==0)andshouldMakeEntryShort)or((strategy.position_size<0)and(mixedTrailingSl_short>mixedSlShort))
mixedSlShort
elseif(strategy.position_size==0)or(strategy.position_size>0)
hl2
else
mixedTrailingSl_short[1]
//finalentryprice
initialEntryStopPrice_long=entryLimitHigh+entryPadding
initialEntryStopPrice_short=entryLimitLow-entryPadding
extraEntryLimitPrice_long=extraEntryStopLong
extraEntryLimitPrice_short=extraEntryStopShort
extraEntryTpPrice_long=entryLimitHigh+entryPadding
extraEntryTpPrice_short=entryLimitLow-entryPadding
//============================================================================
//Quantitiycaliculation
//============================================================================
varinitialQty=0
slPercentage=bullish?abs(mixedTrailingSl_long-hl2)/hl2*100:abs(mixedTrailingSl_short-hl2)/hl2*100
qtyForInitialEntry=f_calcQtyForInitialEntry(slPercentage)
qtyForExtraEntry=f_calcQtyForExtraEntry(slPercentage)
//============================================================================
//Pyramidingjudge
//============================================================================
varanyTpTriggered=false
varhasAnyPositions=false
ifstrategy.position_size!=0andstrategy.position_size[1]==0
hasAnyPositions:=true
ifstrategy.position_size==0andstrategy.position_size[1]!=0
hasAnyPositions:=false
anyTpTriggered:=false
ifhasAnyPositionsandnotanyTpTriggeredand(abs(strategy.position_size)<initialQty)
anyTpTriggered:=true
pyramidingReady=
(anyTpTriggeredandbullishand(extraEntryStopLong>previousEntryPrice)andf_isLastCandleUp())or
(anyTpTriggeredandbearishand(extraEntryStopShort<previousEntryPrice)andf_isLastCandleDown())
//============================================================================
//makeentries
//============================================================================
if(time>=startDateandtime<=finishDate)
ifstrategy.position_size==0
ifshouldMakeEntryLong
initialQty:=qtyForInitialEntry
strategy.entry(id="Long",long=true,stop=initialEntryStopPrice_long,qty=initialQty)
previousEntryPrice:=entryLimitHigh
ifshouldMakeEntryShort
initialQty:=qtyForInitialEntry
strategy.entry(id="Short",long=false,stop=initialEntryStopPrice_short,qty=initialQty)
previousEntryPrice:=entryLimitLow
//Longpyramiding
if(strategy.position_size>0)andpyramidingReady
previousEntryPrice:=extraEntryStopLong
strategy.entry(id="LongExtra",long=true,limit=extraEntryLimitPrice_long,qty=qtyForExtraEntry)
else
strategy.cancel(id="LongExtra")
//Shortpyramiding
if(strategy.position_size<0)andpyramidingReady
previousEntryPrice:=extraEntryStopShort
strategy.entry(id="ShortExtra",long=false,limit=extraEntryLimitPrice_short,qty=qtyForExtraEntry)
else
strategy.cancel(id="ShortExtra")
//cancelstopentries
ifnotcontinuousBull
strategy.cancel(id="Long")
strategy.cancel(id="LongExtra")
ifnotcontinuousBear
strategy.cancel(id="Short")
strategy.cancel(id="ShortExtra")
//TP,SL
strategy.exit('Long-TP','Long',stop=mixedTrailingSl_long,limit=initialEntryTpPrice_long,qty=(initialQty/2))
strategy.exit('Long-SL','Long',stop=mixedTrailingSl_long)
strategy.exit('LongExtra-SL/TP','LongExtra',stop=mixedTrailingSl_long,limit=extraEntryTpPrice_long)
strategy.exit('Short-TP','Short',stop=mixedTrailingSl_short,limit=initialEntryTpPrice_short,qty=(initialQty/2))
strategy.exit('Short-SL','Short',stop=mixedTrailingSl_short)
strategy.exit('ShortExtra-SL/TP','ShortExtra',stop=mixedTrailingSl_short,limit=extraEntryTpPrice_short)
//============================================================================
//plotSL,TP
//============================================================================
sl=ifstrategy.position_size>0
mixedTrailingSl_long
elseifstrategy.position_size<0
mixedTrailingSl_short
else
na
tp=ifhasAnyPositionsandnotanyTpTriggered
strategy.position_size>0?initialEntryTpPrice_long:initialEntryTpPrice_short
else
na
plot(sl,color=color.red,style=plot.style_cross,linewidth=2,title="SL")
plot(tp,color=color.blue,style=plot.style_cross,linewidth=2,title="T")
//============================================================================
//debug
//============================================================================
//continuousbull/bearcheck
value_bgcolor=continuousBull?color.green:continuousBear?color.red:color.new(#000000,100)
//MACDupordowncheck
//value_bgcolor=macdUpTrend?color.green:color.red
//bothkumobull
//value_bgcolor=(kumoColor_bull_baseHtfandkumoColor_bull_highestTf)?color.green:
//(notkumoColor_bull_baseHtfandnotkumoColor_bull_highestTf)?color.red:color.new(#000000,100)
//doji
//dojiUp=bullishandf_isUpDoji()
//dojiDown=bearishandf_isDownDoji()
//value_bgcolor=dojiUp?color.green:
//dojiDown?color.red:
//COLOR_TRANSPARENT
//value_bgcolor=f_isLastCandleUp()?color.green:COLOR_TRANSPARENT
//value_bgcolor=pyramidingReady?color.green:COLOR_TRANSPARENT
bgcolor(value_bgcolor,transp=95)
Expand (1085 lines)
