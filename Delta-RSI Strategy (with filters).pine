Script Name: Delta-RSI Strategy (with filters)
Author: tbiktag
Description: Delta-RSI Strategy (with filters):
This is a version of the Delta-RSI Oscillator strategy with several criteria available to filter entry and exit signals. This script is also suitable for backtesting over a user-defined period and offers several risk management options (take profit and stop loss).

Since the publication of the Delta-RSI Oscillator script, I have...
PineScript code:

Pine Script™ strategy
Delta-RSI Strategy (with filters)
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  tbiktag
//
//  Delta-RSI  Oscillator  Strategy  With  Filters
//
//  This  is  a  version  of  the  Delta-RSI  Oscillator  Strategy  compatible  with
//  the  Strategy  Tester.
//
//  This  version  also  allows  filtering  the  trade  signals  generated  by  Delts-RSI
//  by  means  of  volatility  (defined  by  ATR),  relative  volume  and  RSI(14).
//
//  Delta-RSI  (©  tbiktag)  is  a  smoothed  time  derivative  of  the  RSI  designed
//  as  a  momentum  indicator.  For  the  original  publication,  see  link  below:
//  https://www.tradingview.com/script/OXQVFTQD-Delta-RSI-Oscillator/
//
//  D-RSI  model  parameters:
//  RSI  Length:  The  timeframe  of  the  RSI  that  serves  as  an  input  to  D-RSI.
//  Frame  Length:  The  length  of  the  lookback  frame  used  for  local  regression.
//  Polynomial  Order:  The  order  of  the  local  polynomial  function  used  to  interpolate
//  the  RSI.
//  Trade  signals  are  generated  based  on  three  optional  conditions:
//  -  Zero-crossing:  bullish  when  D-RSI  crosses  zero  from  negative  to  positive
//  values  (bearish  otherwise)
//  -  Signal  Line  Crossing:  bullish  when  D-RSI  crosses  from  below  to  above  the  signal
//  line  (bearish  otherwise)
//  -  Direction  Change:  bullish  when  D-RSI  was  negative  and  starts  ascending
//  (bearish  otherwise)
//
//@version=4
strategy(title="Delta-RSI  Strategy  with  Filters",  shorttitle  =  "D-RSI  with  filters",  overlay  =  true)
//  ---Subroutines---
matrix_get(_A,_i,_j,_nrows)  =>
        //  Get  the  value  of  the  element  of  an  implied  2d  matrix
        //input:
        //  _A  ::  array:  pseudo  2d  matrix  _A  =  [[column_0],[column_1],...,[column_(n-1)]]
        //  _i  ::  integer:  row  number
        //  _j  ::  integer:  column  number
        //  _nrows  ::  integer:  number  of  rows  in  the  implied  2d  matrix
        array.get(_A,_i+_nrows*_j)
matrix_set(_A,_value,_i,_j,_nrows)  =>
        //  Set  a  value  to  the  element  of  an  implied  2d  matrix
        //input:
        //  _A  ::  array,  changed  on  output:  pseudo  2d  matrix  _A  =  [[column_0],[column_1],...,[column_(n-1)]]
        //  _value  ::  float:  the  new  value  to  be  set
        //  _i  ::  integer:  row  number
        //  _j  ::  integer:  column  number
        //  _nrows  ::  integer:  number  of  rows  in  the  implied  2d  matrix
        array.set(_A,_i+_nrows*_j,_value)
transpose(_A,_nrows,_ncolumns)  =>
        //  Transpose  an  implied  2d  matrix
        //  input:
        //  _A  ::  array:  pseudo  2d  matrix  _A  =  [[column_0],[column_1],...,[column_(n-1)]]
        //  _nrows  ::  integer:  number  of  rows  in  _A
        //  _ncolumns  ::  integer:  number  of  columns  in  _A
        //  output:
        //  _AT  ::  array:  pseudo  2d  matrix  with  implied  dimensions:  _ncolums  x  _nrows
        var  _AT  =  array.new_float(_nrows*_ncolumns,0)
        for  i  =  0  to  _nrows-1
                for  j  =  0  to  _ncolumns-1
                        matrix_set(_AT,  matrix_get(_A,i,j,_nrows),j,i,_ncolumns)
        _AT
multiply(_A,_B,_nrowsA,_ncolumnsA,_ncolumnsB)  =>
        //  Calculate  scalar  product  of  two  matrices
        //  input:
        //  _A  ::  array:  pseudo  2d  matrix
        //  _B  ::  array:  pseudo  2d  matrix
        //  _nrowsA  ::  integer:  number  of  rows  in  _A
        //  _ncolumnsA  ::  integer:  number  of  columns  in  _A
        //  _ncolumnsB  ::  integer:  number  of  columns  in  _B
        //  output:
        //  _C::  array:  pseudo  2d  matrix  with  implied  dimensions  _nrowsA  x  _ncolumnsB
        var  _C  =  array.new_float(_nrowsA*_ncolumnsB,0)
        int  _nrowsB  =  _ncolumnsA
        float  elementC=  0.0
        for  i  =  0  to  _nrowsA-1
                for  j  =  0  to  _ncolumnsB-1
                        elementC  :=  0
                        for  k  =  0  to  _ncolumnsA-1
                                elementC  :=  elementC  +  matrix_get(_A,i,k,_nrowsA)*matrix_get(_B,k,j,_nrowsB)
                        matrix_set(_C,elementC,i,j,_nrowsA)
        _C
vnorm(_X,_n)  =>
        //Square  norm  of  vector  _X  with  size  _n
        float  _norm  =  0.0
        for  i  =  0  to  _n-1
                _norm  :=  _norm  +  pow(array.get(_X,i),2)
        sqrt(_norm)
qr_diag(_A,_nrows,_ncolumns)  =>
        //QR  Decomposition  with  Modified  Gram-Schmidt  Algorithm  (Column-Oriented)
        //  input:
        //  _A  ::  array:  pseudo  2d  matrix  _A  =  [[column_0],[column_1],...,[column_(n-1)]]
        //  _nrows  ::  integer:  number  of  rows  in  _A
        //  _ncolumns  ::  integer:  number  of  columns  in  _A
        //  output:
        //  _Q:  unitary  matrix,  implied  dimenstions  _nrows  x  _ncolumns
        //  _R:  upper  triangular  matrix,  implied  dimansions  _ncolumns  x  _ncolumns
        var  _Q  =  array.new_float(_nrows*_ncolumns,0)
        var  _R  =  array.new_float(_ncolumns*_ncolumns,0)
        var  _a  =  array.new_float(_nrows,0)
        var  _q  =  array.new_float(_nrows,0)
        float  _r  =  0.0
        float  _aux  =  0.0
        //get  first  column  of  _A  and  its  norm:
        for  i  =  0  to  _nrows-1
                array.set(_a,i,matrix_get(_A,i,0,_nrows))
        _r  :=  vnorm(_a,_nrows)
        //assign  first  diagonal  element  of  R  and  first  column  of  Q
        matrix_set(_R,_r,0,0,_ncolumns)
        for  i  =  0  to  _nrows-1
                matrix_set(_Q,array.get(_a,i)/_r,i,0,_nrows)
        if  _ncolumns  !=  1
                //repeat  for  the  rest  of  the  columns
                for  k  =  1  to  _ncolumns-1
                        for  i  =  0  to  _nrows-1
                                array.set(_a,i,matrix_get(_A,i,k,_nrows))
                        for  j  =  0  to  k-1
                                //get  R_jk  as  scalar  product  of  Q_j  column  and  A_k  column:
                                _r  :=  0
                                for  i  =  0  to  _nrows-1
                                        _r  :=  _r  +  matrix_get(_Q,i,j,_nrows)*array.get(_a,i)
                                matrix_set(_R,_r,j,k,_ncolumns)
                                //update  vector  _a
                                for  i  =  0  to  _nrows-1
                                        _aux  :=  array.get(_a,i)  -  _r*matrix_get(_Q,i,j,_nrows)
                                        array.set(_a,i,_aux)
                        //get  diagonal  R_kk  and  Q_k  column
                        _r  :=  vnorm(_a,_nrows)
                        matrix_set(_R,_r,k,k,_ncolumns)
                        for  i  =  0  to  _nrows-1
                                matrix_set(_Q,array.get(_a,i)/_r,i,k,_nrows)
        [_Q,_R]

pinv(_A,_nrows,_ncolumns)  =>
    //Pseudoinverseofmatrix_AcalculatedusingQRdecomposition
//Input:
//_A::array:impliedasa(_nrowsx_ncolumns)matrix
//._A=[[column_0],[column_1],...,[column_(_ncolumns-1)]]
//Output:
//_Ainv::arrayimpliedasa(_ncolumnsx_nrows)matrix
//_A=[[row_0],[row_1],...,[row_(_nrows-1)]]
//----
//FirstfindtheQRfactorizationofA:A=QR,
//whereRisuppertriangularmatrix.
//Then_Ainv=R^-1*Q^T.
//----
[_Q,_R]=qr_diag(_A,_nrows,_ncolumns)
_QT=transpose(_Q,_nrows,_ncolumns)
//CalculateRinv:
var_Rinv=array.new_float(_ncolumns*_ncolumns,0)
float_r=0.0
matrix_set(_Rinv,1/matrix_get(_R,0,0,_ncolumns),0,0,_ncolumns)
if_ncolumns!=1
forj=1to_ncolumns-1
fori=0toj-1
_r:=0.0
fork=itoj-1
_r:=_r+matrix_get(_Rinv,i,k,_ncolumns)*matrix_get(_R,k,j,_ncolumns)
matrix_set(_Rinv,_r,i,j,_ncolumns)
fork=0toj-1
matrix_set(_Rinv,-matrix_get(_Rinv,k,j,_ncolumns)/matrix_get(_R,j,j,_ncolumns),k,j,_ncolumns)
matrix_set(_Rinv,1/matrix_get(_R,j,j,_ncolumns),j,j,_ncolumns)
//
_Ainv=multiply(_Rinv,_QT,_ncolumns,_ncolumns,_nrows)
_Ainv
norm_rmse(_x,_xhat)=>
//RootMeanSquareErrornormalizedtothesamplemean
//_x.::arrayfloat,originaldata
//_xhat::arrayfloat,modelestimate
//output
//_nrmse::float
float_nrmse=0.0
ifarray.size(_x)!=array.size(_xhat)
_nrmse:=na
else
int_N=array.size(_x)
float_mse=0.0
fori=0to_N-1
_mse:=_mse+pow(array.get(_x,i)-array.get(_xhat,i),2)/_N
_xmean=array.sum(_x)/_N
_nrmse:=sqrt(_mse)/_xmean
_nrmse

diff(_src,_window,_degree)=>
//Polynomialdifferentiator
//input:
//_src::inputseries
//_window::integer:wigthofthemovinglookbackwindow
//_degree::integer:degreeoffittingpolynomial
//output:
//_diff::series:timederivative
//_nrmse::float:normalizedrootmeansquareerror
//
//Vandermondematrixwithimplieddimensions(windowxdegree+1)
//Linearform:J=[[z]^0,[z]^1,...[z]^degree],
//withz=[(1-window)/2to(window-1)/2]
var_J=array.new_float(_window*(_degree+1),0)
fori=0to_window-1
forj=0to_degree
matrix_set(_J,pow(i,j),i,j,_window)
//Vectorofrawdatapoints:
var_Y_raw=array.new_float(_window,na)
forj=0to_window-1
array.set(_Y_raw,j,_src[_window-1-j])
//Calculatepolynomialcoefficientswhichminimizethelossfunction
_C=pinv(_J,_window,_degree+1)
_a_coef=multiply(_C,_Y_raw,_degree+1,_window,1)
//Forfirstderivative,approximatethelastpoint(i.e.z=window-1)by
float_diff=0.0
fori=1to_degree
_diff:=_diff+i*array.get(_a_coef,i)*pow(_window-1,i-1)
//Calculatesdataestimate(neededforrmse)
_Y_hat=multiply(_J,_a_coef,_window,_degree+1,1)
float_nrmse=norm_rmse(_Y_raw,_Y_hat)
[_diff,_nrmse]
///---main---
degree=input(title="PolynomialOrder",group="ModelParameters:",
inline="linepar1",type=input.integer,defval=3,minval=1)
rsi_l=input(title="RSILength",group="ModelParameters:",
inline="linepar1",type=input.integer,defval=21,minval=1,
tooltip="TheperiodlengthofRSIthatisusedasinput.")
window=input(title="Length(>Order)",group="ModelParameters:",
inline="linepar2",type=input.integer,defval=50,minval=2)
signalLength=input(title="SignalLength",group="ModelParameters:",
inline="linepar2",type=input.integer,defval=9,
tooltip="ThesignallineisaEMAoftheD-RSItimeseries.")
islong=input(title="Long",group="AllowedEntries:",
inline="lineent",type=input.bool,defval=true)
isshort=input(title="Short",group="AllowedEntries:",
inline="lineent",type=input.bool,defval=true)
buycond=input(title="Buy",group="EntryandExitConditions:",
inline="linecond",type=input.string,defval="SignalLineCrossing",
options=["Zero-Crossing","SignalLineCrossing","DirectionChange"])
sellcond=input(title="Sell",group="EntryandExitConditions:",
inline="linecond",type=input.string,defval="SignalLineCrossing",
options=["Zero-Crossing","SignalLineCrossing","DirectionChange"])
endcond=input(title="Exit",group="EntryandExitConditions:",
inline="linecond",type=input.string,defval="SignalLineCrossing",
options=["Zero-Crossing","SignalLineCrossing","DirectionChange"])
filterlong=input(title="LongEntries",inline='linefilt',group='ApplyFiltersto',
type=input.bool,defval=true)
filtershort=input(title="ShortEnties",inline='linefilt',group='ApplyFiltersto',
type=input.bool,defval=true)
filterend=input(title="Exits",inline='linefilt',group='ApplyFiltersto',
type=input.bool,defval=true)
usevol=input(title="",inline='linefiltvol',group='RelativeVolumeFilter:',
type=input.bool,defval=false)
rvol=input(title="Volume>",inline='linefiltvol',group='RelativeVolumeFilter:',
type=input.integer,defval=1)
len_vol=input(title="Avg.VolumeOverPeriod",inline='linefiltvol',group='RelativeVolumeFilter:',
type=input.integer,defval=30,minval=1,
tooltip="ThecurrentvolumemustbegreaterthanNtimestheM-periodaveragevolume.")
useatr=input(title="",inline='linefiltatr',group='VolatilityFilter:',
type=input.bool,defval=false)
len_atr1=input(title="ATR",inline='linefiltatr',group='VolatilityFilter:',
type=input.integer,defval=5,minval=1)
len_atr2=input(title=">ATR",inline='linefiltatr',group='VolatilityFilter:',
type=input.integer,defval=30,minval=1,
tooltip="TheN-periodATRmustbegreaterthantheM-periodATR.")
usersi=input(title="",inline='linersi',group='Overbought/OversoldFilter:',
type=input.bool,defval=false)
rsitrhs1=input(title="",inline='linersi',group='Overbought/OversoldFilter:',
type=input.integer,defval=0,minval=0,maxval=100)
rsitrhs2=input(title="<RSI(14)<",inline='linersi',group='Overbought/OversoldFilter:',
type=input.integer,defval=100,minval=0,maxval=100,
tooltip="RSI(14)mustbeintherangebetweenNandM.")
issl=input(title="SL",inline='linesl1',group='StopLoss/TakeProfit:',
type=input.bool,defval=false)
slpercent=input(title=",%",inline='linesl1',group='StopLoss/TakeProfit:',
type=input.float,defval=10,minval=0.0)
istrailing=input(title="Trailing",inline='linesl1',group='StopLoss/TakeProfit:',
type=input.bool,defval=false)
istp=input(title="TP",inline='linetp1',group='StopLoss/TakeProfit:',
type=input.bool,defval=false)
tppercent=input(title=",%",inline='linetp1',group='StopLoss/TakeProfit:',
type=input.float,defval=20)
fixedstart=input(title="",group="FixedBacktestPeriodStart/EndDates:",
inline="linebac1",type=input.bool,defval=true)
backtest_start=input(title="",type=input.time,inline="linebac1",
group="FixedBacktestPeriodStart/EndDates:",
defval=timestamp("01Jan201713:30+0000"),
tooltip="Ifdeactivated,backteststaringfromthefirstavailablepricebar.")
fixedend=input(title="",group="FixedBacktestPeriodStart/EndDates:",
inline="linebac2",type=input.bool,defval=false)
backtest_end=input(title="",type=input.time,inline="linebac2",
group="FixedBacktestPeriodStart/EndDates:",
defval=timestamp("30Dec208023:30+0000"),
tooltip="Ifdeactivated,backtestingendsatthelastavailablepricebar.")
ifwindow<degree
window:=degree+1
src=rsi(close,rsi_l)
[drsi,nrmse]=diff(src,window,degree)
signalline=ema(drsi,signalLength)
//ConditionsforD-RSI
dirchangeup=(drsi>drsi[1])and(drsi[1]<drsi[2])anddrsi[1]<0.0
dirchangedw=(drsi<drsi[1])and(drsi[1]>drsi[2])anddrsi[1]>0.0
crossup=crossover(drsi,0.0)
crossdw=crossunder(drsi,0.0)
crosssignalup=crossover(drsi,signalline)
crosssignaldw=crossunder(drsi,signalline)
//D-RSIsignals
drsilong=(buycond=="DirectionChange"?dirchangeup:(buycond=="Zero-Crossing"?crossup:crosssignalup))
drsishort=(sellcond=="DirectionChange"?dirchangedw:(sellcond=="Zero-Crossing"?crossdw:crosssignaldw))
drisendlong=(endcond=="DirectionChange"?dirchangedw:(endcond=="Zero-Crossing"?crossdw:crosssignaldw))
drisendshort=(endcond=="DirectionChange"?dirchangeup:(endcond=="Zero-Crossing"?crossup:crosssignalup))
//Filters
rsifilter=usersi?(rsi(close,14)>rsitrhs1andrsi(close,14)<rsitrhs2):true
volatilityfilter=useatr?(atr(len_atr1)>atr(len_atr2)):true
volumefilter=usevol?(volume>rvol*sma(volume,len_vol)):true
totalfilter=volatilityfilterandvolumefilterandrsifilter
//Filteredsignals
golong=drsilongandislongand(filterlong?totalfilter:true)
goshort=drsishortandisshortand(filtershort?totalfilter:true)
endlong=drisendlongand(filterend?totalfilter:true)
endshort=drisendlongand(filterend?totalfilter:true)
//Backtestperiod
//backtest_start=timestamp(syminfo.timezone,startYear,startMonth,startDate,0,0)
//backtest_end=timestamp(syminfo.timezone,endYear,endMonth,endDate,0,0)
isinrange=(fixedstart?time>=backtest_start:true)and(fixedend?time<=backtest_end:true)
//Entryprice/Takeprofit/StopLoss
startprice=valuewhen(condition=golongorgoshort,source=close,occurrence=0)
pm=golong?1:goshort?-1:1/sign(strategy.position_size)
takeprofit=startprice*(1+pm*tppercent*0.01)
//fixedstoploss
stoploss=startprice*(1-pm*slpercent*0.01)
//trailingstoploss
ifistrailingandstrategy.position_size>0
stoploss:=max(close*(1-slpercent*0.01),stoploss[1])
elseifistrailingandstrategy.position_size<0
stoploss:=min(close*(1+slpercent*0.01),stoploss[1])
tpline=plot(takeprofit,color=color.blue,transp=100,title="TP")
slline=plot(stoploss,color=color.red,transp=100,title="SL")
p1=plot(close,transp=100,color=color.white,title="DummyClose")
fill(p1,tpline,color=color.green,transp=istp?70:100,title="TP")
fill(p1,slline,color=color.red,transp=issl?70:100,title="SL")
//Backtest:BasicEntryandExitConditions
ifgolongandisinrangeandislong
strategy.entry("long",true)
alert("D-RSILong"+syminfo.tickerid,alert.freq_once_per_bar_close)
ifgoshortandisinrangeandisshort
strategy.entry("short",false)
alert("D-RSIShort"+syminfo.tickerid,alert.freq_once_per_bar_close)
ifendlong
strategy.close("long",alert_message="CloseLong")
alert("D-RSIExitLong"+syminfo.tickerid,alert.freq_once_per_bar_close)
ifendshort
strategy.close("short",alert_message="CloseShort")
alert("D-RSIExitShort"+syminfo.tickerid,alert.freq_once_per_bar_close)
//ExitviaSLorTP
strategy.exit(id="sl/tplong",from_entry="long",stop=issl?stoploss:na,
limit=istp?takeprofit:na,alert_message="CloseLong")
strategy.exit(id="sl/tpshort",from_entry="short",stop=issl?stoploss:na,
limit=istp?takeprofit:na,alert_message="StopLossShort")
//Closeifoutsidetherange
if(notisinrange)
strategy.close_all()
Expand (377 lines)
