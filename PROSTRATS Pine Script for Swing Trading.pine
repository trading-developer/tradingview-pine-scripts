Script Name: PROSTRATS Pine Script for Swing Trading
Author: andrew_allen
Description: This is a simple script for swing trading. It uses my 2 favorite indicators; the Choppiness Index as well as Fibonacci Retracement. This script is meant to run on the 4 hour time frame, in my case I use BTCUSD. It will buy when 2 conditions are met. The first is that the Choppiness Index is above 54.5 on the Daily Time frame, which means the price has potential to...
PineScript code:

Pine Scriptâ„¢ strategy
PROSTRATS Pine Script for Swing Trading
//@version=4
strategy("PROSTRATS",  overlay=true,  default_qty_type  =  strategy.percent_of_equity,  default_qty_value  =  10,  initial_capital  =  1000)
//CI
length  =  input(14,  minval=1)
ci  =  100  *  log10(sum(atr(1),  length)  /  (highest(length)  -  lowest(length)))  /  log10(length)
ci_d  =  security(syminfo.tickerid,  "D",  ci)
ci_buy  =  false
ci_sell  =  false
if  ci_d  >=55
        ci_buy  :=  true
else
        ci_buy  :=  false

//  while  ci_d  <=38.2
//          ci_sell  :=  true
//FIB
//  pivots  threshold
threshold_multiplier  =  input(title="Deviation",  type=input.float,  defval=3,  minval=0)
dev_threshold  =  atr(14)  /  close  *  100  *  threshold_multiplier
depth  =  input(title="Depth",  type=input.integer,  defval=14,  minval=1)
var  extendLeft  =  input(false,  "Extend  Lines  Left")
var  extendRight  =  input(true,  "Extend  Lines  Right")
var  extending  =  extend.none
if  extendLeft  and  extendRight
        extending  :=  extend.both
if  extendLeft  and  not  extendRight
        extending  :=  extend.left
if  not  extendLeft  and  extendRight
        extending  :=  extend.right
reverse  =  input(false,  "Reverse")
prices  =  input(true,  "Prices")
levels  =  input(true,  "Levels")
levelsFormat  =  input("Values",  "Levels  Format",  options  =  ["Values",  "Percent"])
labelsPosition  =  input("Left",  "Labels  Position",  options  =  ["Left",  "Right"])
var  line  lineLast  =  na
var  int  iLast  =  0
var  int  iPrev  =  0
var  float  pLast  =  0
var  isHighLast  =  false  //  otherwise  the  last  pivot  is  a  low  pivot
pivots(src,  length,  isHigh)  =>
        l2  =  length  *  2
        c  =  nz(src[length])
        ok  =  true
        for  i  =  0  to  l2
                if  isHigh  and  src[i]  >  c
                        ok  :=  false
                if  not  isHigh  and  src[i]  <  c
                        ok  :=  false
        if  ok
                [bar_index[length],  c]
        else
                [int(na),  float(na)]
[iH,  pH]  =  pivots(high,  depth  /  2,  true)
[iL,  pL]  =  pivots(low,  depth  /  2,  false)
calc_dev(base_price,  price)  =>
        100  *  (price  -  base_price)  /  price
pivotFound(dev,  isHigh,  index,  price)  =>
        if  isHighLast  ==  isHigh  and  not  na(lineLast)
                //  same  direction
                if  isHighLast  ?  price  >  pLast  :  price  <  pLast
                        line.set_xy2(lineLast,  index,  price)
                        [lineLast,  isHighLast]
                else
                        [line(na),  bool(na)]
else//reversethedirection(orcreatetheveryfirstline)
ifabs(dev)>dev_threshold
//pricemoveissignificant
id=line.new(iLast,pLast,index,price,color=color.gray,width=1,style=line.style_dashed)
[id,isHigh]
else
[line(na),bool(na)]
ifnotna(iH)
dev=calc_dev(pLast,pH)
[id,isHigh]=pivotFound(dev,true,iH,pH)
ifnotna(id)
ifid!=lineLast
line.delete(lineLast)
lineLast:=id
isHighLast:=isHigh
iPrev:=iLast
iLast:=iH
pLast:=pH
else
ifnotna(iL)
dev=calc_dev(pLast,pL)
[id,isHigh]=pivotFound(dev,false,iL,pL)
ifnotna(id)
ifid!=lineLast
line.delete(lineLast)
lineLast:=id
isHighLast:=isHigh
iPrev:=iLast
iLast:=iL
pLast:=pL
_draw_line(price,col)=>
varid=line.new(iLast,price,bar_index,price,color=col,width=1,extend=extending)
ifnotna(lineLast)
line.set_xy1(id,line.get_x1(lineLast),price)
line.set_xy2(id,line.get_x2(lineLast),price)
_draw_label(price,txt,txtColor)=>
x=labelsPosition=="Left"?line.get_x1(lineLast):notextendRight?line.get_x2(lineLast):bar_index
labelStyle=labelsPosition=="Left"?label.style_label_right:label.style_label_left
align=labelsPosition=="Left"?text.align_right:text.align_left
labelsAlignStrLeft=txt+'\n[U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F]\n'
labelsAlignStrRight=''+txt+'\n[U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F]\n'
labelsAlignStr=labelsPosition=="Left"?labelsAlignStrLeft:labelsAlignStrRight
varid=label.new(x=x,y=price,text=labelsAlignStr,textcolor=txtColor,style=labelStyle,textalign=align,color=#00000000)
label.set_xy(id,x,price)
label.set_text(id,labelsAlignStr)
label.set_textcolor(id,txtColor)
_wrap(txt)=>
"("+tostring(txt,"#.##")+")"
_label_txt(level,price)=>
l=levelsFormat=="Values"?tostring(level):tostring(level*100)+"%"
(levels?l:"")+(prices?_wrap(price):"")
_crossing_level(sr,r)=>
(r>srandr<sr[1])or(r<srandr>sr[1])
startPrice=reverse?line.get_y1(lineLast):pLast
endPrice=reverse?pLast:line.get_y1(lineLast)
iHL=startPrice>endPrice
diff=(iHL?-1:1)*abs(startPrice-endPrice)
level_0=input(true,"0")
color_0=input(#787b86,"0LevelColor")
floatm=0
r=startPrice+diff*m
iflevel_0
_draw_line(r,color_0)
_draw_label(r,_label_txt(m,r),color_0)
//alertcondition(_crossing_level(close,r),"Autofib0crossing!","Autofib:{{ticker}}crossinglevel0.")
fib_sell_stop=crossunder(close,r)
stop_price=r
level_0236=input(true,"0.236")
color_0236=input(#f44336,"0.236LevelColor")
m:=0.236
r:=startPrice+diff*m
iflevel_0236
_draw_line(r,color_0236)
_draw_label(r,_label_txt(m,r),color_0236)
//alertcondition(_crossing_level(close,r),"Autofib0.236crossing!","Autofib:{{ticker}}crossinglevel0.236.")
level_0382=input(true,"0.382")
color_0382=input(#81c784,"0.382LevelColor")
m:=0.382
r:=startPrice+diff*m
iflevel_0382
_draw_line(r,color_0382)
_draw_label(r,_label_txt(m,r),color_0382)
//alertcondition(_crossing_level(close,r),"Autofib0.382crossing!","Autofib:{{ticker}}crossinglevel0.382.")
level_05=input(true,"0.5")
color_05=input(#4caf50,"0.5LevelColor")
m:=0.5
r:=startPrice+diff*m
iflevel_05
_draw_line(r,color_05)
_draw_label(r,_label_txt(m,r),color_05)
//alertcondition(_crossing_level(close,r),"Autofib0.5crossing!","Autofib:{{ticker}}crossinglevel0.5.")
level_0618=input(true,"0.618")
color_0618=input(#009688,"0.618LevelColor")
m:=0.618
r:=startPrice+diff*m
iflevel_0618
_draw_line(r,color_0618)
_draw_label(r,_label_txt(m,r),color_0618)
//alertcondition(_crossing_level(close,r),"Autofib0.618crossing!","Autofib:{{ticker}}crossinglevel0.618.")
level_0786=input(true,"0.786")
color_0786=input(#64b5f6,"0.786LevelColor")
m:=0.786
r:=startPrice+diff*m
iflevel_0786
_draw_line(r,color_0786)
_draw_label(r,_label_txt(m,r),color_0786)
//alertcondition(_crossing_level(close,r),"Autofib0.786crossing!","Autofib:{{ticker}}crossinglevel0.786.")
level_1=input(true,"1")
color_1=input(#787b86,"1LevelColor")
m:=1
r:=startPrice+diff*m
iflevel_1
_draw_line(r,color_1)
_draw_label(r,_label_txt(m,r),color_1)
//alertcondition(_crossing_level(close,r),"Autofib1crossing!","Autofib:{{ticker}}crossinglevel1.")
fib_buy=crossover(close,r)
buy_price=r
level_1618=input(true,"1.618")
color_1618=input(#2196f3,"1.618LevelColor")
m:=1.618
r:=startPrice+diff*m
iflevel_1618
_draw_line(r,color_1618)
_draw_label(r,_label_txt(m,r),color_1618)
//alertcondition(_crossing_level(close,r),"Autofib1.618crossing!","Autofib:{{ticker}}crossinglevel1.618.")
fib_sell_profit=crossover(close,r)
profit_price=r
if(buy_price>stop_price)and(profit_price>buy_price)and(fib_buy)
fib_buy:=true
else
fib_buy:=false

strategy.entry(syminfo.tickerid,strategy.long,when=ci_buy==trueandfib_buy)
strategy.close(syminfo.tickerid,when=fib_sell_profitorfib_sell_stop)
Expand (231 lines)
