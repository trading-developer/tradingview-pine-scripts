Script Name: BEAM DCA Strategy Monthly
Author: panpanXBT
Description: This strategy is based on BEAM bands for BTC. The space between the original BEAM bands is broken up into 10 bands representing levels of risk for investing fresh capital.

The strategy will buy bitcoin when the price is in the bottom 5 bands, increasing the amount investmented as the price approaches the 1400 D SMA.

The strategy will limit sell bitcoin when...
PineScript code:

Pine Script™ strategy
BEAM DCA Strategy Monthly
//  ©  gjfsdrtytru  -  BEAM  DCA  Strategy  {
//  Based  on  Ben  Cowen's  risk  level  strategy,  this  aims  to  copy  that  method  but  with  BEAM  band  levels.
//  Upper  BEAM  level  is  derived  from  ln(price/200W  MA)/2.5,  while  the  200W  MA  is  the  floor  price.  This  is  our  0-1  range.
//  Buy  limit  orders  are  set  at  the  <  0.5  levels  and  sell  orders  are  set  at  the  >  0.5  level.
//@version=5
strategy(
    title                                  =  "BEAM  DCA  Strategy  Monthly",
    shorttitle                        =  "BEAM  DCA  M",
    overlay                              =  true,
    pyramiding                        =  500,
    default_qty_type            =  strategy.percent_of_equity,
    default_qty_value          =  0,
    initial_capital              =  0)  //}
//  Inputs  {  ————————————————————————————————————————————————————————————————————
T_ceiling      =  input.string("Off",  "Diminishing  Returns",  ["Off","Linear","Parabolic"],  "Account  for  diminishing  returns  as  time  increases")
day                  =  input.int(1,  "DCA  Day  of  Month",1,28,1,"Select  day  of  month  for  buy  orders.")
DCAamount      =  input.int(1000,"DCA  Amount",400,tooltip="Enter  the  maximum  amount  you'd  be  willing  to  DCA  for  any  given  month.")
T_buy              =  input(true,"Buy  Orders","Toggle  buy  orders.")
T_sell            =  input(true,"Sell  Orders","Toggle  sell  orders.")
//  Time  period
testStartYear      =  input.int(2018,      title="Backtest  Start  Year",        minval=2010,maxval=2100,group="Backtest  Period")
testStartMonth    =  input.int(1,            title="Backtest  Start  Month",      minval=1,      maxval=12,    group="Backtest  Period")
testStartDay        =  input.int(1,            title="Backtest  Start  Day",          minval=1,      maxval=31,    group="Backtest  Period")
testPeriodLen      =  input.int(9999,      title="Backtest  Period  (days)",  minval=1,                              group="Backtest  Period",tooltip="Days  until  strategy  ends")  *  86400000  //  convert  days  into  UNIX  time
testPeriodStart  =  timestamp(testStartYear,testStartMonth,testStartDay,0,0)
testPeriodStop    =  testPeriodStart  +  testPeriodLen
testPeriod()  =>
        time  >=  testPeriodStart  and  time  <=  testPeriodStop  ?  true  :  false
//  ———————————————————————————————————————————————————————————————————————————  }
//  Diminishing  Returns  {  ———————————————————————————————————————————————————————
x  =  bar_index  +  1
assetDivisor=  2.5
switch
        T_ceiling  ==  "Linear"      =>  assetDivisor:=  3.50542  -  0.000277696  *  x
        T_ceiling  ==  "Parabolic"=>  assetDivisor:=  -0.0000001058992338  *  math.pow(x,2)  +  0.000120729  *  x  +  3.1982
//  ———————————————————————————————————————————————————————————————————————————  }
//  Risk  Levels  {  ———————————————————————————————————————————————————————————————
cycleLen  =  1400
getMaLen()  =>
        if  bar_index  <  cycleLen
                bar_index  +  1
        else
                cycleLen
//  Define  Risk  Bands
price              =  close
riskLow          =  ta.sma(price,getMaLen())
risk1              =  riskLow  *  math.exp((assetDivisor)*0.1)
risk2              =  riskLow  *  math.exp((assetDivisor)*0.2)
risk3              =  riskLow  *  math.exp((assetDivisor)*0.3)
risk4              =  riskLow  *  math.exp((assetDivisor)*0.4)
risk5              =  riskLow  *  math.exp((assetDivisor)*0.5)
risk6              =  riskLow  *  math.exp((assetDivisor)*0.6)
risk7              =  riskLow  *  math.exp((assetDivisor)*0.7)
risk8              =  riskLow  *  math.exp((assetDivisor)*0.8)
risk9              =  riskLow  *  math.exp((assetDivisor)*0.9)
riskHigh        =  riskLow  *  math.exp((assetDivisor))
//  Plot  Risk  Bands
p_low              =  plot(riskLow,      "Beam  Risk  0.0",color.new(#0042F0,50),3,editable=false)
p_band1          =  plot(risk1,          "Beam  Risk  0.1",color.new(#0090F5,20),1,editable=false)
p_band2          =  plot(risk2,          "Beam  Risk  0.2",color.new(#00C6DB,20),1,editable=false)
p_band3          =  plot(risk3,          "Beam  Risk  0.3",color.new(#00F5BD,20),1,editable=false)
p_band4          =  plot(risk4,          "Beam  Risk  0.4",color.new(#00F069,20),1,editable=false)
p_band5          =  plot(risk5,          "Beam  Risk  0.5",color.new(#00DB08,50),3,editable=false)
p_band6          =  plot(risk6,          "Beam  Risk  0.6",color.new(#E8D20C,20),1,editable=false)
p_band7          =  plot(risk7,          "Beam  Risk  0.7",color.new(#F2B40C,20),1,editable=false)
p_band8          =  plot(risk8,          "Beam  Risk  0.8",color.new(#DC7A00,20),1,editable=false)
p_band9          =  plot(risk9,        "BeamRisk0.9",color.new(#F2520C,20),1,editable=false)
p_band10=plot(riskHigh,"BeamRisk1.0",color.new(#F01102,50),3,editable=false)
//———————————————————————————————————————————————————————————————————————————}
//OrderExecution{———————————————————————————————————————————————————————————
band5=price<risk5andprice>risk4
band4=price<risk4andprice>risk3
band3=price<risk3andprice>risk2
band2=price<risk2andprice>risk1
band1=price<risk1
//DCAbuyorderweights
y=DCAamount/5
switch
band5=>y:=y*1
band4=>y:=y*2
band3=>y:=y*3
band2=>y:=y*4
band1=>y:=y*5
//Contractsperorder
contracts=(y/price)
iftestPeriod()
//Buyorders
ifT_buy==true
ifdayofmonth==day
strategy.entry("RiskBand5",strategy.long,qty=contracts,when=band5)
strategy.entry("RiskBand4",strategy.long,qty=contracts,when=band4)
strategy.entry("RiskBand3",strategy.long,qty=contracts,when=band3)
strategy.entry("RiskBand2",strategy.long,qty=contracts,when=band2)
strategy.entry("RiskBand1",strategy.long,qty=contracts,when=band1)
//Sellorders
ifT_sell==true
ifstrategy.opentrades>5
strategy.exit("RiskBand6",qty_percent=6.67,limit=risk6)
strategy.exit("RiskBand7",qty_percent=14.28,limit=risk7)
strategy.exit("RiskBand8",qty_percent=25.00,limit=risk8)
strategy.exit("RiskBand9",qty_percent=44.44,limit=risk9)
strategy.exit("RiskBand10",qty_percent=100,limit=riskHigh)
//———————————————————————————————————————————————————————————————————————————}
//Info{——————————————————————————————————————————————————————————————————————
//Lineplotofavg.entryprice
plot(strategy.position_size>0?strategy.position_avg_price:na,"AverageEntry",color.red,trackprice=true,editable=false)
//UnrealisedPNL
uPNL=price/strategy.position_avg_price
//RealisedPNL
realPNL=0.
fori=0tostrategy.closedtrades-1
realPNL+=strategy.closedtrades.profit(i)
//Sizeofopenpositionin($)
openPosSize=0.
fori=0tostrategy.opentrades-1
openPosSize+=strategy.opentrades.size(i)*strategy.position_avg_price
//Sizeofclosedpositionin($)
closePosSize=0.
ifstrategy.closedtrades>0
fori=0tostrategy.closedtrades-1
closePosSize+=strategy.closedtrades.size(i)*strategy.closedtrades.entry_price(i)
invested=openPosSize+closePosSize//Totalcapital($)putintostrategy
equity=openPosSize+closePosSize+strategy.openprofit+realPNL//Totalcurrentequity($)instrategy(countingrealisedPNL)
ROI=(equity-invested)/invested*100//ROIofstrategy(comparecapitalinvestedtoexcessreturn)
//InfoTable
vartabletable1=table.new(position.bottom_right,2,9,color.black,color.gray,1,color.gray,2)
table.cell(table1,0,0,"CapitalInvested",text_color=color.white,text_halign=text.align_right)
table.cell(table1,0,1,"OpenPosition",text_color=color.white,text_halign=text.align_right)
table.cell(table1,0,2,"AverageEntry",text_color=color.white,text_halign=text.align_right)
table.cell(table1,0,3,"LastPrice",text_color=color.white,text_halign=text.align_right)
table.cell(table1,0,4,"OpenPNL(%)",text_color=color.white,text_halign=text.align_right)
table.cell(table1,0,5,"OpenPNL($)",text_color=color.white,text_halign=text.align_right)
table.cell(table1,0,6,"RealisedPNL($)",text_color=color.white,text_halign=text.align_right)
table.cell(table1,0,7,"TotalEquity",text_color=color.white,text_halign=text.align_right)
table.cell(table1,0,8,"StrategyROI",text_color=color.white,text_halign=text.align_right)
table.cell(table1,1,0,"$"+str.tostring(invested,"#,###.00"),text_halign=text.align_right,text_color=color.white)
table.cell(table1,1,1,"$"+str.tostring(openPosSize,"#,###.00"),text_halign=text.align_right,text_color=color.white)
table.cell(table1,1,2,"$"+str.tostring(strategy.position_avg_price,"#,###.00"),text_halign=text.align_right,text_color=color.white)
table.cell(table1,1,3,"$"+str.tostring(price,"#,###.00"),text_halign=text.align_right,text_color=color.white)
table.cell(table1,1,4,str.tostring((uPNL-1)*100,"#,###.00")+"%",text_halign=text.align_right,text_color=uPNL>1?color.lime:color.red)
table.cell(table1,1,5,"$"+str.tostring(strategy.openprofit,"#,###.00"),text_halign=text.align_right,text_color=uPNL>1?color.lime:color.red)
table.cell(table1,1,6,"$"+str.tostring(realPNL,"#,###.00"),text_halign=text.align_right,text_color=color.white)
table.cell(table1,1,7,"$"+str.tostring(equity,"#,###.00"),text_halign=text.align_right,text_color=color.white)
table.cell(table1,1,8,str.tostring(ROI,"#,###.00")+"%",text_halign=text.align_right,text_color=ROI>1?color.lime:color.red)
//———————————————————————————————————————————————————————————————————————————}
Expand (161 lines)
