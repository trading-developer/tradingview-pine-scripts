Script Name: breakout crossover 4H 1D
Author: hussain81
Description: Hi, this script is crossover between breakouts of 4H and Day timeframe. It also checks candlestick patterns before opening trades. Red horizontal line acts as support and resistance of Daily timeframe. You can close trades at next signal or at High/Low. Enjoy trading.
PineScript code:

Pine Scriptâ„¢ strategy
breakout crossover 4H 1D
//@version=2
strategy("breakout  ",  overlay=true)
tim=input('1440')
sim=input('370')
out1  =  security(tickerid,  tim,  open)
out2  =  security(tickerid,  sim,  close)
plot(out1,color=red)
plot(out2,color=green)
length  =  input(20,  title="BB  Length")
mult  =  input(2.0,title="BB  MultFactor")
lengthKC=input(20,  title="KC  Length")
multKC  =  input(1.5,  title="KC  MultFactor")
useTrueRange  =  input(true,  title="Use  TrueRange  (KC)",  type=bool)
//  Calculate  BB
source  =  close
basis  =  sma(source,  length)
dev  =  multKC  *  stdev(source,  length)
upperBB  =  basis  +  dev
lowerBB  =  basis  -  dev
//  Calculate  KC
ma  =  sma(source,  lengthKC)
range1  =  useTrueRange  ?  tr  :  (high  -  low)
rangema  =  sma(range1,  lengthKC)
upperKC  =  ma  +  rangema  *  multKC
lowerKC  =  ma  -  rangema  *  multKC
sqzOn    =  (lowerBB  >  lowerKC)  and  (upperBB  <  upperKC)
sqzOff  =  (lowerBB  <  lowerKC)  and  (upperBB  >  upperKC)
noSqz    =  (sqzOn  ==  false)  and  (sqzOff  ==  false)
val  =  linreg(source    -    avg(avg(highest(high,  lengthKC),  lowest(low,  lengthKC)),sma(close,lengthKC)),lengthKC,0)
bcolor  =  iff(  val  >  0,iff(  val  >  nz(val[1]),  lime,  green),iff(  val  <  nz(val[1]),  red,  maroon))
scolor  =  noSqz  ?  blue  :  sqzOn  ?  black  :  gray
//plot(val,  color=bcolor,  style=histogram,  linewidth=4)
//plot(0,  color=scolor,  style=cross,  linewidth=2)
//  this  section  based  on  Almost  Zero  Lag  EMA  [LazyBear]
//  Fast  MA  -  type,  length
matype      =  input(defval="HullMA",  title="Fast  MA  Type:  SMA,  EMA,  WMA,  VWMA,  SMMA,  DEMA,  TEMA,  HullMA,  TMA,  ZEMA  (  case  sensitive  )",  type=string)
malength  =  input(defval=20,  title="Moving  Average  Length",  minval=1)
src            =  input(close,title="Moving  average  Source")
//  Returns  MA  input  selection  variant,  default  to  SMA  if  blank  or  typo.
variant(type,  src,  len)  =>
        v1  =  sma(src,  len)                                                                                                    //  Simple
        v2  =  ema(src,  len)                                                                                                    //  Exponential
        v3  =  wma(src,  len)                                                                                                    //  Weighted
        v4  =  vwma(src,  len)                                                                                                  //  Volume  Weighted
        v5  =  na(v5[1])  ?  sma(src,  len)  :  (v5[1]  *  (len  -  1)  +  src)  /  len        //  Smoothed
        v6  =  2  *  v2  -  ema(v2,  len)                                                                                    //  Double  Exponential
        v7  =  3  *  (v2  -  ema(v2,  len))  +  ema(ema(v2,  len),  len)                              //  Triple  Exponential
        v8  =  wma(2  *  wma(src,  len  /  2)  -  wma(src,  len),  round(sqrt(len)))      //  Hull
        ema1  =  ema(src,  len)
        ema2  =  ema(ema1,  len)
        v10  =  ema1+(ema1-ema2)                                                                                            //  Zero  Lag  Exponential
        v11  =  sma(sma(src,len),len)                                                                                  //  Trianglular
        //  return  variant,  defaults  to  SMA  if  input  invalid.
        type=="EMA"?v2  :  type=="WMA"?v3  :  type=="VWMA"?v4  :  type=="SMMA"?v5  :  type=="DEMA"?v6  :  type=="TEMA"?v7  :  type=="HullMA"?v8  :  type=="ZEMA"?v10  :  type=="TMA"?v11  :  v1
//  Calculate  selected  MA  and  get  direction  of  trend  from  it.
zlema=  variant(matype,src,malength)
col  =    zlema  >  zlema[1]  ?  green  :  red
up  =  zlema  >  zlema[1]  ?  1  :  0
down  =  zlema  <  zlema[1]  ?  1  :  0
//plot(zlema,color=col,  style=line,  linewidth=4,  transp=0)
//  Find  all  Fractals.
//  This  section  based  on  [RS]Fractal  Levels    by  RicardoSantos
hidefractals  =  input(false)
hidelevels  =  input(false)
topfractal  =  high[2]  >  high[1]  and  high[2]  >  high  and  high[2]  >  high[3]  and  high[2]  >  high[4]
botfractal  =  low[2]  <  low[1]  and  low[2]  <  low  and  low[2]  <  low[3]  and  low[2]  <  low[4]
//plotshape(hidefractals  ?  na  :  topfractal,  color=green,  transp=0,  style=shape.triangleup,  location=location.abovebar,  offset=-2,  size=size.tiny)
//plotshape(hidefractals  ?  na  :  botfractal,  color=red,  transp=0,  style=shape.triangledown,  location=location.belowbar,  offset=-2,  size=size.tiny)
topfractals  =  topfractal  ?  high[2]  :  topfractals[1]
botfractals  =  botfractal  ?  low[2]  :  botfractals[1]
topfcolor  =  topfractals  !=  topfractals[1]  ?  na  :  green
botfcolor  =  botfractals  !=  botfractals[1]  ?  na  :  red
//plot(hidelevels  ?  na  :  topfractals,  color=topfcolor,  transp=0,  linewidth=2)
//plot(hidelevels  ?  na  :  botfractals,  color=botfcolor,  transp=0,  linewidth=2)
//
//  This  section  based  on  Candlestick  Patterns  With  EMA  by  rmwaddelljr
//
ufb    =  input(false,  title="Use  Fractal  S/R  Cross  Patterns")
udc    =  input(true,  title="Use  Dark  Cloud  Cover  Patterns"  )
upl    =  input(true,  title="Use  Piecing  Line  Patterns"  )
ube    =  input(true,  title="Use  Engulfing  Candle  Patterns"  )
ubh    =  input(true,  title="Use  Harami  Candle  Patterns"  )
upb    =  input(true,    title="Use  Defined  PinBar  Patterns")
pctP  =  input(66,  minval=1,  maxval=99,  title="Directional  PBars,  %  of  Range  of  Candle  the  Long  Wick  Has  To  Be")
//  This  section  based  on  CM_Price-Action-Bars  by  ChrisMoody
//  Change  the  pin  bar  calculation,  so  can  be  used  for  market  direction.
urpb=  input(false,  title="Use  CM  Price  Action  Reversal  Pin  Bars")
usb  =  input(false,  title="Use  CM  Price  Action  Shaved  Bars")
uob  =  input(false,  title="Use  CM  Price  Action  Outside  Bars")
uib  =  input(false,  title="Use  CM  Price  Action  Inside  Bars")
pctRP  =  input(72,  minval=1,  maxval=99,  title="CM  Reversal  PBars,  %  of  Range  of  Candle  the  Long  Wick  Has  To  Be")
pctS  =  input(5,  minval=1,  maxval=99,  title="CM  ShavedBars,%ofRangeitHasToCloseOnTheLowsorHighs")
pblb=input(6,minval=1,title="CMReversalPinBarLookbackLength")
//
stnd=input(true,title="AlertOnlyPatternsFollowingTrend")
//
//GetMACDforAlertFiltering
umacd=input(true,title="AlertOnlyPatternsConfirmedbyMACD")
fastMA=input(title="MACDFastMALength",type=integer,defval=12,minval=2)
slowMA=input(title="MACDSlowMALength",type=integer,defval=26,minval=7)
signal=input(title="MACDSignalLength",type=integer,defval=9,minval=1)
//
sgb=input(false,title="CheckBoxToTurnBarsGray")
salc=input(true,title="ShowAlertconditionDot")
//
[currMacd,_,_]=macd(close[0],fastMA,slowMA,signal)
[prevMacd,_,_]=macd(close[1],fastMA,slowMA,signal)
plotColor=currMacd>0?currMacd>prevMacd?green:red:currMacd<prevMacd?red:green
//Showalertonthisbar?
sbarUp=(notumacdorplotColor==green)and(notstndorup)
sbarDn=(notumacdorplotColor==red)and(notstndordown)
//PBarPercentages
pctCp=pctP*.01
//ShavedBarsPercentages
pctCs=pctS*.01
pctSPO=pctCs
//ma50=sma(close,50)
range=high-low
///ReversalPinBars
pctCRp=pctRP*.01
pctCRPO=1-pctCRp
//
//pBarRUp=upbandopen<closeandopen>high-(range*pctCRPO)andclose>high-(range*pctCRPO)andlow<=lowest(pblb)?1:0
//pBarRDn=upbandopen>closeandopen<high-(range*pctCRp)andclose<high-(range*pctCRp)andhigh>=highest(pblb)?1:0
pBarRUp=urpbandopen>high-(range*pctCRPO)andclose>high-(range*pctCRPO)andlow<=lowest(pblb)?1:0
pBarRDn=urpbandopen<high-(range*pctCRp)andclose<high-(range*pctCRp)andhigh>=highest(pblb)?1:0
//ShavedBarsfiltertotheMA50line
sBarUp=usband(close>=(high-(range*pctCs)))//andclose>ma50
sBarDown=usband(close<=(low+(range*pctCs)))//andclose<ma50
//InsideBars
insideBarUp=uiband(high<high[1]andlow>low[1])
insideBarDn=uiband(high<high[1]andlow>low[1])
outsideBarUp=uoband(high>high[1]andlow<low[1])
outsideBarDn=uoband(high>high[1]andlow<low[1])
//PinBarsrepresentingpossiblechangeintrenddirection
barcolor(pBarRUp?green:na)
barcolor(pBarRDn?red:na)
//ShavedBars
barcolor(sBarDown?fuchsia:na)
barcolor(sBarUp?aqua:na)
//InsideandOutsideBars
barcolor((insideBarUporinsideBarDn)?yellow:na)
barcolor((outsideBarUporoutsideBarDn)?orange:na)
//LongshadowPinBarssupportingmarketdirection
///PinBarsLongUpperShadowrepresentsellingpressure
pBarDn=upbandopen<high-(range*pctCp)andclose<high-(range*pctCp)
//plotshape(pBarDnand(notpBarRUpandnotpBarRDn),title="BearishPinBar",color=red,style=shape.arrowdown,text="Bearish\nPinBar")
///PinBarswithLongLowerShadowrepresentbuyingpressure
pBarUp=upbandopen>low+(range*pctCp)andclose>low+(range*pctCp)
//plotshape(pBarUpand(notpBarRUpandnotpBarRDn),title="BullishPinBar",location=location.belowbar,color=green,style=shape.arrowup,text="Bullish\nPinBar")
dcc=udcand(close[1]>open[1]andabs(close[1]-open[1])/range[1]>=0.7andclose<openandabs(close-open)/range>=0.7andopen>=close[1]andclose>open[1]andclose<((open[1]+close[1])/2))
//plotshape(dcc,title="DarkCloudCover",text='DarkCloud\nCover',color=red,style=shape.arrowdown,location=location.abovebar)
ts=timestamp(2021,8,1,8,18)
pln=upland(close[1]<open[1]andabs(open[1]-close[1])/range[1]>=0.7andclose>openandabs(close-open)/range>=0.7andopen<=close[1]andclose<open[1]andclose>((open[1]+close[1])/2))
//plotshape(pln,title="PierciengLine",text="Piercing\nLine",color=green,style=shape.arrowup,location=location.belowbar)
beh=ubhand(close[1]>open[1]andopen>closeandopen<=close[1]andlow>=open[1]andopen-close<close[1]-open[1]and(high<high[1]andlow>low[1]))
//plotshape(behandnotdcc,title="BearishHarami",color=red,style=shape.arrowdown,text="Bear\nHarami")
blh=ubhand(open[1]>close[1]andclose>openandclose<=open[1]andhigh<=open[1]andclose-open<open[1]-close[1]and(high<high[1]andlow>low[1]))
//plotshape(blhandnotpln,title="BullishHarami",location=location.belowbar,color=green,style=shape.arrowup,text="Bull\nHarami")
bee=ubeand(close[1]>open[1]andclose<openandclose<=low[1]andopen>=close[1])
//plotshape(bee,title="BearishEngulfing",color=red,style=shape.arrowdown,text="Bearish\nEngulf")
ble=ubeand(close[1]<open[1]andclose>openandclose>=high[1]andopen<=close[1])
//plotshape(ble,title="BullishEngulfing",location=location.belowbar,color=green,style=shape.arrowup,text="Bullish\nEngulf")
blfr=ufbandcrossover(close,topfractals)
//plotshape(blfrandnotbleandnotblhandnotsBarUp,title="BullishFractalCross",location=location.belowbar,color=green,style=shape.arrowup,text="Fractal\nCross")
befr=ufbandcrossunder(close,botfractals)
//plotshape(befrandnotbeeandnotbehandnotsBarDown,title="BearishFractalCross",color=red,style=shape.arrowdown,text="Fractal\nCross")
//
//
bcolorDn=sbarDnandnot(pBarRDnorpBarRUporsBarDownorinsideBarDnoroutsideBarDn)and(behorbeeordccorbefrorpBarDn)
bcolorUp=sbarUpandnot(pBarRDnorpBarRUporsBarUporinsideBarUporoutsideBarUp)and(blhorbleorplnorblfrorpBarUp)
barcolor(bcolorDn?maroon:na)
barcolor(bcolorUp?lime:na)
//
barcolor(sgbandclose?gray:na)
bullcnd=pBarUporplnorblhorbleorblfr
bearcnd=pBarDnordccorbehorbeeorbefr
if(time<ts)
longCondition=crossover(out2,out1)
if(longConditionorclose>out1andbullcndandstrategy.position_size==0)
strategy.entry("long",strategy.long)

//if(pBarRUp)//andbullcnd)//andstrategy.position_size==0)
//strategy.entry("long",strategy.long)

shortCondition=crossunder(out2,out1)
if(shortConditionorclose<out1andbearcndandstrategy.position_size==0)
strategy.entry("short",strategy.short)
//
barAlertDn=(sbarDnand(befrorbeeorbehorpBarDnordcc))or(sbarDnand(insideBarDnoroutsideBarDnorsBarDown))orpBarRDn
barAlertUp=(sbarUpand(blfrorbleorblhorpBarUporpln))or(sbarUpand(insideBarUporoutsideBarUporsBarUp))orpBarRUp
barAlert=barAlertDnorbarAlertUp
alertcondition(barAlert,title="CDLTRDAlert",message="CDLTRDBarAlert")
//showonlywhenalertconditionismetandbarclosed.
//plotshape(salcandbarAlert[1],title="AlertIndicatorClosed",location=location.bottom,color=barAlertDn[1]?red:green,transp=0,style=shape.circle,offset=-1)
//EOF

//if(pBarRDn)//andbearcnd//andstrategy.position_size==0)
//strategy.entry("short",strategy.short)
//strategy.close("long",when=exit)
//strategy.close("short",when=exit2)


//exit3=sqzOnandsqzOn[1]andsqzOn[2]andsqzOn[3]andsqzOn[4]andsqzOn[5]andsqzOn[6]
//strategy.close("long",when=exit3)
//strategy.close("short",when=exit3)


//else
//alertcondition(condition=time>t,message="Timeexceeded")
Expand (253 lines)
