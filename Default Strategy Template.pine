Script Name: Default Strategy Template
Author: CN_FX-999
Description: © CN_FX-999
Coded By Christian Nataliano

First Coded In 14/06/2023
Last Edited In 22/06/2023

This Is A Default Strategy Template That Can Make Your Strategy Scripts More Organized With The Benefit Of Having The Same Layouts & Not Needing To Copy Over The Common Codes Such As Displaying Backtest Results, Opening & Closing Trades, Pine Connector Capabilities And A...
PineScript code:

Pine Script™ strategy
Default Strategy Template
//======================================================================================================================================================================
//  Strategy  Header
//======================================================================================================================================================================
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©CN_FX-999
//  ©Christian  Nataliano  2022-2023
//  Coded  By  Christian  Nataliano
//  First  Coded  In  14/06/2023
//  Last  Edited  In  21/07/2023
//@version=5
strategy(title  =  "Default  Strategy  Template",  shorttitle  =  "DefTemp",  overlay  =  true,
                  initial_capital  =  100000,  currency  =  currency.USD,
                  max_labels_count  =  500,  max_lines_count  =  500,  max_boxes_count  =  500,
                  use_bar_magnifier  =  true
                  )
//Import  Libraries
import  CN_FX-999/CNTLibrary/3  as  Cnt
//======================================================================================================================================================================
//  User  Inputs
//======================================================================================================================================================================
var  GDate  =  "===  Strategy  Testing  Date  ==="
Start_Date                            =  input.time(defval  =  timestamp("01  Jan  2020  13:30  +0000"),  title  =  "Backtesting  Start  Date",  group  =  GDate,  tooltip  =  "Start  Date  Of  The  Strategy  Tester")
End_Date                                =  input.time(defval  =  timestamp("01  Jan  2024  13:30  +0000"),  title  =  "Backtesting  End  Date",  group  =  GDate,  tooltip  =  "End  Date  Of  The  Strategy  Tester")
TradeDetails                        =  input.bool(defval  =  false,  title  =  "Display  Each  Trade  Details",  group  =  GDate,  tooltip  =  "Show  Detailed  Report  On  Each  Trade  Closing  Instead  Of  Only  Shapes,  Note  Max  Labels  Are  500")
var  GIndicator  =  "===  1st  Indicator  Settings  ==="
//Your  Own  Indicator  Settings  Here
var  GFilter  =  "===  Filter  Settings  ==="
//Your  Own  Filter  Settings  Here
var  GRisk  =  "===  Risk  Management  Settings  ==="
FixedLongSize                      =  input.int(defval  =  0,  title  =  "Fixed  Long  Size",  group  =  GRisk,  tooltip  =  "Trade  The  Strategy  Using  A  Fixed  Sizing")
FixedShortSize                    =  input.int(defval  =  0,  title  =  "Fixed  Short  Size",  group  =  GRisk,  tooltip  =  "Trade  The  Strategy  Using  A  Fixed  Sizing")
LongRPT                                  =  input.float(defval  =  1,  title  =  "Long  Risk  Per  Trade",  group  =  GRisk,  tooltip  =  "Trade  The  Strategy  Using  A  Risk  Percentage  Of  Account  Balance  Sizing")
ShortRPT                                =  input.float(defval  =  1,  title  =  "Short  Risk  Per  Trade",  group  =  GRisk,  tooltip  =  "Trade  The  Strategy  Using  A  Risk  Percentage  Of  Account  Balance  Sizing")
InLots                                    =  input.bool(defval  =  true,  title  =  "Position  Size  In  Lots",  group  =  GRisk,  tooltip  =  "Convert  The  Positions  Taken  Into  Lots  Instead  Of  Units")
var  GTPSL  =  "===  TP  /  SL  Settings  ==="
ATR_Period                            =  input.int(defval  =  20,  title  =  "ATR  Period",  group  =  GTPSL,  tooltip  =  "ATR  Period  For  Stop  Loss")
SL_Multiplyer                      =  input.float(defval  =  1,  title  =  "Stop  Loss  Multiplyer",  minval  =  0.1,  group  =  GTPSL,  tooltip  =  "ATR  Multiplyer  For  Determining  StopLoss  Level")
RRR                                          =  input.float(defval  =  1,  title  =  "Risk  Reward  Ratio",  group  =  GTPSL,  tooltip  =  "Risk  Reward  Ratio  Setting",  options  =  [0.4,0.6,0.8,1,1.2,1.4,1.6,1.8,2])
TPSL_Mode=input.string(defval="InstantTPSL",title="TakeProfit&StopLossMode",options=["InstantTPSL","NormalTPSL"],group=GTPSL,tooltip="TakeProfit&StopLossOrderSettingMode")
varGBT="===BacktestSettings==="
StartingBalance=input.int(defval=100000,title="StartingBalance",minval=100,maxval=1000000,group=GBT,tooltip="AccountStartingBalanceForBacktesting")
ShowBacktestPanel=input.bool(defval=true,title="ShowBacktestPanel",group=GBT,tooltip="ShowTheBacktestingPanels&TheStrategyStatistics")
CalculateFee=input.bool(defval=true,title="CalculateRandomizedFees",group=GBT,tooltip="ARandomizedFeeCalculatedBasedOnAPercentageOfTheClosedTradePNL")
MaxFee=input.float(defval=0.025,title="MaximumFeeRandomizedRateIn%",group=GBT,tooltip="UpperLimitOfTheRandomizedFee(In%)")
LongOnly=input.bool(defval=false,title="TradeLongOnly",group=GBT,inline="GBT",tooltip="OnlyTradeTheLongDirection")
ShortOnly=input.bool(defval=false,title="TradeShortOnly",group=GBT,inline="GBT",tooltip="OnlyTradeTheShortDirection")
varstringGPT="===MonthlyPerformanceTableSettings==="
mptable_on=input.bool(title="TurnOn|",defval=true,display=display.none,group=GPT,inline="MPT_Toggles")
mptable_debug=input.bool(title="DebugMode|",defval=false,display=display.none,group=GPT,inline="MPT_Toggles")
mptable_precision=input.int(title="DecimalPrecision",defval=2,minval=1,display=display.none,group=GPT,inline="MPT_Toggles",tooltip="Decimalprecisionofeachcell")
mptable_titleColor=input.color(title="TitleCellColor",defval=#cccccc,display=display.none,group=GPT,inline="MPT_Colors")
mptable_titleTextColor=input.color(title="TitleTextColor",defval=#363a45,display=display.none,group=GPT,inline="MPT_Colors")
mptable_textColor=input.color(title="CellTextColor",defval=color.white,display=display.none,group=GPT,inline="MPT_Colors")
mptable_ProfitColor=input.color(title="YearProfitColor",defval=color.new(color.green,50),display=display.none,group=GPT,inline="MPT_Colors")
mptable_LossColor=input.color(title="YearLossColor",defval=color.new(color.red,50),display=display.none,group=GPT,inline="MPT_Colors")
mptable_BreakEvenColor=input.color(title="YearB/EColor",defval=color.new(color.yellow,75),display=display.none,group=GPT,inline="MPT_Colors")
mptable_pageNumber=input.int(title="PageNumber",defval=1,minval=1,step=1,maxval=10,display=display.none,group=GPT,tooltip="Whichpageofresultstodisplay")-1//-1isforcorectionforarrays.Aarayindexstartwith0
mptable_pageSize=input.int(title="PageSize(Rows)",defval=20,minval=1,display=display.none,group=GPT,tooltip="Howmanyrowstodisplay")-1//9isusedtoshow10rowsofdataduetoarraystartfrom0
mptable_tableTextSize=input.string(title="TextSize",defval="Normal",options=["Auto","Huge","Large","Normal","Small","Tiny"],display=display.none,group=GPT)
varstringGPC="===PineConnectorAutomationSettings==="
ConnectedBroker=input.string(defval="FX",title="ConnectedBroker",options=["FX","PEPPERSTONE","OANDA","EIGHTCAP","BLACKBULL"],group=GPC,tooltip="SelectedBrokerForPineConnectiorAutomationToPreventDataDislocation")
AccountID=input.string(defval="1234567890123",title="PineConnectorID",group=GPC,tooltip="PineConnectorID,Ex:1234567890123")
SymbolPrefix=input.string(defval="",title="TradedSymbolPrefix(IfAny)",group=GPC,tooltip="UseIfYourBrokerHasAPrefixBeforeTheirSymbol,Ex:1-EURUSD")
SymbolSuffix=input.string(defval="",title="TradedSymbolSuffix(IfAny)",group=GPC,tooltip="UseIfYourBrokerHasASuffixAfterItsSymbol,Ex:EURUSD-1")
OrderSpread=input.int(defval=50,minval=0,maxval=100,title="MaximumSpreadAllowedInPips",group=GPC,tooltip="TradeMaximumSpread")
OrderComment=input.string(defval="PCTrade",title="OrderComment",group=GPC,tooltip="TradeCommentInTheMT4/MT5Terminal")
UseLimit=input.bool(defval=false,title="UseLimitOrder",group=GPC,inline="GPC1")
UseStop=input.bool(defval=false,title="UseStopOrder",group=GPC,inline="GPC1",tooltip="UseLimit/StopOrderToEnterInsteadOfMarketOrderONLYCHOSEONE")
//======================================================================================================================================================================
//IndicatorCalculation
//======================================================================================================================================================================
Date_Filter=time>=Start_Dateandtime<=End_Date
ATR=ta.atr(ATR_Period)
//YourIndicatorCalculationsHere
//======================================================================================================================================================================
//FiltersCalculation
//======================================================================================================================================================================
//YourFiltersCalculationsHere
//======================================================================================================================================================================
//Entry&ExitConditions
//======================================================================================================================================================================
//Buy&SellSignalTrigger
Buy_Signal=Date_Filterandstrategy.position_size==0andnotna(ATR)andnot(ShortOnly)andfalse
Sell_Signal=Date_Filterandstrategy.position_size==0andnotna(ATR)andnot(LongOnly)andfalse
//Buy&SellExitSignal(IfAny)
//LongExitReason=LongExitReason
//ShortExitReason=ShortExitReasom
//======================================================================================================================================================================
//RiskManagementCalculation
//======================================================================================================================================================================
//SetPersistantVariables
varfloatTradeEntry=na
varintTradeEntryIndex=na
varfloatTradeTP=na
varfloatTradeSL=na
varfloatTradeLots=na
varfloatBuyPending=na
varfloatSellPending=na
//CalculateTPSLLevels
BuySL=Cnt.CalculateStopLossLevel(1,close[0],ATR*SL_Multiplyer)
SellSL=Cnt.CalculateStopLossLevel(-1,close[0],ATR*SL_Multiplyer)
BuySLDistance=Cnt.CalculateStopLossDistance(1,close[0],BuySL)
SellSLDistance=Cnt.CalculateStopLossDistance(-1,close[0],SellSL)
BuyTP=Cnt.CalculateTakeProfitLevel(1,close[0],BuySLDistance,RRR)
SellTP=Cnt.CalculateTakeProfitLevel(-1,close[0],SellSLDistance,RRR)
//CalculateLotSize
[ConvertCurrency,CurrencyConversion]=Cnt.CalculateConversionCurrency(currency.USD,syminfo.currency,syminfo.basecurrency)
CurrencyRate=Cnt.CalculateConversionRate(ConvertCurrency,request.security(CurrencyConversion,"D",close,ignore_invalid_symbol=true))
BuyUnits=FixedLongSize
SellUnits=FixedShortSize
BuyLots=syminfo.type=="forex"?Cnt.LotSize(false,strategy.equity,LongRPT,BuySLDistance,CurrencyRate):Cnt.LotSize(true,strategy.equity,LongRPT,BuySLDistance,0)
SellLots=syminfo.type=="forex"?Cnt.LotSize(false,strategy.equity,ShortRPT,SellSLDistance,CurrencyRate):Cnt.LotSize(true,strategy.equity,ShortRPT,BuySLDistance,0)
//======================================================================================================================================================================
//StrategyExecutions
//======================================================================================================================================================================
//BuySignalCondition
ifBuy_Signalandbarstate.isconfirmedandstrategy.position_size==0andCnt.BrokerCheck(ConnectedBroker)
//UpdatePersistantVariables
TradeEntry:=close[0]
TradeTP:=BuyTP
TradeSL:=BuySL
TradeLots:=LongRPT==0?BuyUnits:BuyLots
TradeEntryIndex:=bar_index
//StrategyEntry
Cnt.OpenLong("Long",InLots?Cnt.ToLotsInUnits(TradeLots):TradeLots,na,na,"","")
alert(Cnt.OpenPC(AccountID,1,UseLimit,UseStop,BuyPending,SymbolPrefix,syminfo.ticker,SymbolSuffix,LongRPT,TradeSL,TradeTP,OrderComment,OrderSpread),alert.freq_once_per_bar_close)
//InstantTPSLPlacement
ifTPSL_Mode=="InstantTPSL"
Cnt.TP_SLExit("Long",TradeTP,TradeSL,100,"","")
//SellSignalCondition
ifSell_Signalandbarstate.isconfirmedandstrategy.position_size==0andCnt.BrokerCheck(ConnectedBroker)
//UpdatePersistantVariables
TradeEntry:=close[0]
TradeTP:=SellTP
TradeSL:=SellSL
TradeLots:=ShortRPT==0?SellUnits:SellLots
TradeEntryIndex:=bar_index
//StrategyEntry
Cnt.OpenShort("Short",InLots?Cnt.ToLotsInUnits(TradeLots):TradeLots,na,na,"","")
alert(Cnt.OpenPC(AccountID,-1,UseLimit,UseStop,SellPending,SymbolPrefix,syminfo.ticker,SymbolSuffix,ShortRPT,TradeSL,TradeTP,OrderComment,OrderSpread),alert.freq_once_per_bar_close)
//InstantTPSLPlacement
ifTPSL_Mode=="InstantTPSL"
Cnt.TP_SLExit("Short",TradeTP,TradeSL,100,"","")
//SettingTP&SLLevelsOnOpenedOrder
ifTPSL_Mode=="NormalTPSL"
//PlaceTP&SLOnNextBar
ifstrategy.position_size>0
Cnt.TP_SLExit("Long",TradeTP,TradeSL,100,"","")
ifstrategy.position_size<0
Cnt.TP_SLExit("Short",TradeTP,TradeSL,100,"","")
//CloseOnConditionalParameters
//ifLongExitReason
//Cnt.CloseLong("Long",100,"LongExitWithSLDistanceOf:",str.tostring(BuySLDistance,'#.##'),false)
//alert(Cnt.ClosePC(AccountID,1,SymbolPrefix,syminfo.ticker,SymbolSuffix,OrderComment),alert.freq_once_per_bar_close)
//ifShortExitReason
//Cnt.CloseLong("Short",100,"ShortExitWithSLDistanceOf:",str.tostring(SellSLDistance,'#.##'),false)
//alert(Cnt.ClosePC(AccountID,-1,SymbolPrefix,syminfo.ticker,SymbolSuffix,OrderComment),alert.freq_once_per_bar_close)
//CanclePendingOrders
//ifTradeEntryIndex!=bar_indexandstrategy.position_size[1]==0andstrategy.position_size[0]==0
//strategy.cancel_all()
//ifBuy_Signal[2]
//alert(Cnt.CancelPC(AccountID,1,SymbolPrefix,syminfo.ticker,SymbolSuffix,OrderComment),alert.freq_once_per_bar_close)
//elseifSell_Signal[2]
//alert(Cnt.CancelPC(AccountID,-1,SymbolPrefix,syminfo.ticker,SymbolSuffix,OrderComment),alert.freq_once_per_bar_close)
//======================================================================================================================================================================
//PlotData
//======================================================================================================================================================================
//PlotIndicatorValues
//PlotYourIndicatorValuesHere
//PlotFilterValues
//PlotYourFilterIndicatorHere
//PlotSignals
plotshape(notTradeDetails?Buy_Signal:na,title="BuyEntrySignal",style=shape.triangleup,location=location.belowbar,color=color.green,
size=size.small,display=display.all-display.status_line)
plotshape(notTradeDetails?Sell_Signal:na,title="SellEntrySignal",style=shape.triangledown,location=location.abovebar,color=color.red,
size=size.small,display=display.all-display.status_line)
plotshape(notTradeDetailsandstrategy.position_size[0]==0andstrategy.position_size[1]>0andstrategy.wintrades[0]>strategy.wintrades[1]?1:na,
title="BuyHitTP",style=shape.triangledown,location=location.abovebar,color=color.blue,size=size.small,display=display.all-display.status_line)
plotshape(notTradeDetailsandstrategy.position_size[0]==0andstrategy.position_size[1]<0andstrategy.wintrades[0]>strategy.wintrades[1]?1:na,
title="SellHitTP",style=shape.triangleup,location=location.belowbar,color=color.blue,size=size.small,display=display.all-display.status_line)
plotshape(notTradeDetailsandstrategy.position_size[0]==0andstrategy.position_size[1]>0andstrategy.losstrades[0]>strategy.losstrades[1]?1:na,
title="BuyHitSL",style=shape.triangleup,location=location.belowbar,color=color.orange,size=size.small,display=display.all-display.status_line)
plotshape(notTradeDetailsandstrategy.position_size[0]==0andstrategy.position_size[1]<0andstrategy.losstrades[0]>strategy.losstrades[1]?1:na,
title="SellHitSL",style=shape.triangledown,location=location.abovebar,color=color.orange,size=size.small,display=display.all-display.status_line)
//PlotTradeInfo
plot(strategy.position_size!=0?TradeTP:na,title="TradeTakeProfit",color=color.green,style=plot.style_linebr)
plot(strategy.position_size!=0?TradeSL:na,title="TradeStopLoss",color=color.red,style=plot.style_linebr)
plot(strategy.position_size!=0?TradeLots:na,title="TradeLots",color=color.blue,display=display.status_line)
//ShowQTTradesInChart
QTTrades=Cnt.IsQuestionableTrades(TradeTP,TradeSL)
varQTTradesCount=0
ifQTTrades
QTTradesCount+=1
bgcolor(QTTrades?color.yellow:na,title="QuestionableTrades")
//======================================================================================================================================================================
//BacktestDataPlotting
//======================================================================================================================================================================
///BacktestPersistantData
varfloatBalance=na
varfloatMaxBalance=na
varfloatDD=na
varfloatMaxDD=na
varfloatMeanDD=0
varfloatPNL=na
varfloatFee=na
varfloatCumFee=0
varfloatAvgRRR=0
EntryTime=Cnt.UNIXToDate(strategy.closedtrades.entry_time(strategy.closedtrades-1))
ExitTime=Cnt.UNIXToDate(strategy.closedtrades.exit_time(strategy.closedtrades-1))
//BacktestInfoData
[LongWinRate,ShortWinRate,TotalWinRate,WinTrade,LossTrade,TotalLong,TotalShort]=Cnt.CalculateWR(strategy.closedtrades,"Long","Short")
PrevEntry=strategy.closedtrades.entry_price(strategy.closedtrades-1)
PrevExit=strategy.closedtrades.exit_price(strategy.closedtrades-1)
PrevLots=strategy.closedtrades.size(strategy.closedtrades-1)
ConvertedPNL=Cnt.Truncate(Cnt.CalculatePNL(PrevEntry,PrevExit,PrevLots,CurrencyRate))
CheckMaxDD=ta.max(DD)
CheckMeanDD=0
CumProfit=Cnt.Truncate(Balance-StartingBalance,2)
CAGR=Cnt.Truncate(Cnt.CAGR(Start_Date,StartingBalance,End_Date,Balance),2)
//UpdateOnOrderClose
ifstrategy.closedtrades[0]!=strategy.closedtrades[1]
PNL:=ConvertedPNL
Balance:=Cnt.UpdateBalance(na(Balance)?StartingBalance:Balance,PNL)
if(Balance>MaxBalance)orna(MaxBalance)
MaxBalance:=Balance
DD:=Cnt.UpdateDD(MaxBalance,Balance)
MaxDD:=CheckMaxDD
MeanDD:=MeanDD[0]+DD
Fee:=CalculateFee?Cnt.CalculateSlpComm(PNL,MaxFee):0
CumFee:=CumFee[1]+Fee
AvgRRR:=Cnt.CalculateAvgRRR(WinTrade,LossTrade)
//DrawBacktestTable
vartableBacktestTable=table.new(position.top_right,6,2,border_width=2)
varBgColor=color.black
varTextColor=color.white
DollarReturn=Balance-StartingBalance
if(ShowBacktestPanel)
if(barstate.isconfirmed)
Cnt.DisplayBTResultsV2(BacktestTable,BgColor,TextColor,TotalWinRate,QTTradesCount,LongWinRate,ShortWinRate,StartingBalance,CumProfit,CumFee,AvgRRR,MaxDD,CAGR,Cnt.Truncate(MeanDD/strategy.closedtrades,2))
//CheckDrawConditions
BuyHitTP=TradeDetailsandstrategy.position_size[0]==0andstrategy.position_size[1]>0andstrategy.wintrades[0]>strategy.wintrades[1]
BuyHitSL=TradeDetailsandstrategy.position_size[0]==0andstrategy.position_size[1]>0andstrategy.losstrades[0]>strategy.losstrades[1]
SellHitTP=TradeDetailsandstrategy.position_size[0]==0andstrategy.position_size[1]<0andstrategy.wintrades[0]>strategy.wintrades[1]
SellHitSL=TradeDetailsandstrategy.position_size[0]==0andstrategy.position_size[1]<0andstrategy.losstrades[0]>strategy.losstrades[1]
//DrawTradeDetails
ifBuyHitSLorSellHitTP
//SetSL&TPDistance
BuySLDist=Cnt.Truncate(Cnt.ToWhole(Cnt.CalculateStopLossDistance(1,TradeEntry,TradeSL)),2)
BuyTPDist=Cnt.Truncate(Cnt.ToWhole(Cnt.CalculateTakeProfitDistance(1,TradeEntry,TradeTP)),2)
SellSLDist=Cnt.Truncate(Cnt.ToWhole(Cnt.CalculateStopLossDistance(-1,TradeEntry,TradeSL)),2)
SellTPDist=Cnt.Truncate(Cnt.ToWhole(Cnt.CalculateTakeProfitDistance(-1,TradeEntry,TradeTP)),2)
//LabelDrawing
label.new(bar_index,low,color=BuyHitSL?color.orange:color.blue,textcolor=color.black,size=size.small,text=BuyHitSL?"BuySL":"SellTP",style=label.style_label_up,
tooltip=
"TradeNo:"+str.tostring(strategy.closedtrades)+
"\nEntryTime:"+str.tostring(EntryTime)+
"\nExitTime:"+str.tostring(ExitTime)+
"\nWinRate:"+str.tostring(TotalWinRate)+"%"+
"\nTotalLong:"+str.tostring(TotalLong)+
"\nTotalShort:"+str.tostring(TotalShort)+
"\n"+
"\nSLDist:"+str.tostring(BuyHitSL?BuySLDist:SellTPDist)+
"\nTPDist:"+str.tostring(BuyHitSL?BuyTPDist:SellSLDist)+
"\nLot:"+str.tostring(InLots?Cnt.Truncate(TradeLots/100000,2):TradeLots)+
"\n"+
"\nStartBalnce:"+str.tostring(Balance[1])+
"\nEndBalnce:"+str.tostring(Balance)+
"\nPNL:"+str.tostring(PNL)+
"\nCumProfit:"+str.tostring(Balance-strategy.initial_capital)+
"\n"+
"\nFee:"+str.tostring(Fee)+
"\nCumFee:"+str.tostring(CumFee)+
"\n"+
"\nMaxBalnce:"+str.tostring(MaxBalance)+
"\nDD:"+str.tostring(DD)+
"\nMaxDD:"+str.tostring(MaxDD)+
"\nMeanDD:"+str.tostring(Cnt.Truncate(MeanDD/strategy.closedtrades,2))+
"\nCAGR:"+str.tostring(CAGR)+
"\nCAGR/MeanDD:"+str.tostring(Cnt.Truncate(CAGR/MeanDD,2))+
"\n"+
"\nTotalWR:"+str.tostring(TotalWinRate)+
"\nAvgRRR:"+str.tostring(AvgRRR)+
"\nLongWR:"+str.tostring(LongWinRate)+
"\nShortWR:"+str.tostring(ShortWinRate)+
"\n"
)
elseifBuyHitTPorSellHitSL
//SetSL&TPDistance
BuySLDist=Cnt.Truncate(Cnt.ToWhole(Cnt.CalculateStopLossDistance(1,TradeEntry,TradeSL)),2)
BuyTPDist=Cnt.Truncate(Cnt.ToWhole(Cnt.CalculateTakeProfitDistance(1,TradeEntry,TradeTP)),2)
SellSLDist=Cnt.Truncate(Cnt.ToWhole(Cnt.CalculateStopLossDistance(-1,TradeEntry,TradeSL)),2)
SellTPDist=Cnt.Truncate(Cnt.ToWhole(Cnt.CalculateTakeProfitDistance(-1,TradeEntry,TradeTP)),2)
//LabelDrawing
label.new(bar_index,high,color=BuyHitTP?color.blue:color.orange,textcolor=color.black,size=size.small,text=BuyHitTP?"BuyTP":"SellSL",style=label.style_label_down,
tooltip=
"TradeNo:"+str.tostring(strategy.closedtrades)+
"\nEntryTime:"+str.tostring(EntryTime)+
"\nExitTime:"+str.tostring(ExitTime)+
"\nWinRate:"+str.tostring(TotalWinRate)+"%"+
"\nTotalLong:"+str.tostring(TotalLong)+
"\nTotalShort:"+str.tostring(TotalShort)+
"\n"+
"\nSLDist:"+str.tostring(BuyHitTP?BuySLDist:SellTPDist)+
"\nTPDist:"+str.tostring(BuyHitTP?BuyTPDist:SellSLDist)+
"\nLot:"+str.tostring(InLots?Cnt.Truncate(TradeLots/100000,2):TradeLots)+
"\n"+
"\nStartBalnce:"+str.tostring(Balance[1])+
"\nEndBalnce:"+str.tostring(Balance)+
"\nPNL:"+str.tostring(PNL)+
"\nCumProfit:"+str.tostring(Balance-strategy.initial_capital)+
"\n"+
"\nFee:"+str.tostring(Fee)+
"\nCumFee:"+str.tostring(CumFee)+
"\n"+
"\nMaxBalnce:"+str.tostring(MaxBalance)+
"\nDD:"+str.tostring(DD)+
"\nMaxDD:"+str.tostring(MaxDD)+
"\nMeanDD:"+str.tostring(Cnt.Truncate(MeanDD/strategy.closedtrades,2))+
"\nCAGR:"+str.tostring(CAGR)+
"\nCAGR/MeanDD:"+str.tostring(Cnt.Truncate(CAGR/MeanDD,2))+
"\n"+
"\nTotalWR:"+str.tostring(TotalWinRate)+
"\nAvgRRR:"+str.tostring(AvgRRR)+
"\nLongWR:"+str.tostring(LongWinRate)+
"\nShortWR:"+str.tostring(ShortWinRate)+
"\n"
)
//======================================================================================================================================================================
//TableDataPlotting-AllCredistTo©ZenAndTheArtOfTradingForThisSection
//======================================================================================================================================================================
//Customfunctionforgettingtabletextsizedbasedonuserinput
table_text_size(_size)=>
switch_size
"Auto"=>size.auto
"Huge"=>size.huge
"Large"=>size.large
"Normal"=>size.normal
"Small"=>size.small
=>size.tiny
tableTextSize=table_text_size(mptable_tableTextSize)
//Customfunctionforgettingdecimalprecisionbasedongivennumber
//(eg.ifnumberis>0but<0.05or<0and>-0.05,setprecisionto3toavoidroundingto0whichismisleading)
GetRoundingPrecision(floatnum)=>
if(num>0andnum<0.05)or(num<0andnum>-0.05)
3
else
mptable_precision
//Defineanopentrade'scost(usedtocalculatecommissioncost)
typeTradeCost
intentryTime
floatentryPrice
floatcost
//Defineamonthly/yearlyreturntype
typeStrategyReturn
floatprofit
floatdrawdown
floatpeak
inttimestamp
//StoreaccumulatedP&Lvalues
varfloataccumulatedMonthlyPL=0
varfloataccumulatedYearlyPL=0
varfloatbestAccumulatedMonthlyPL=0
varfloatbestAccumulatedYearlyPL=0
//Storedrawdownvalues
varfloatequityPeak=strategy.initial_capital
varfloatyearlyEquityHigh=0
varfloatcurrentYearlyDrawdown=0
varfloatyearlyMaxDrawdown=0
varfloatworstDrawdown=0
varfloatmonthlyEquityHigh=0
varfloatcurrentMonthlyDrawdown=0
varfloatmonthlyMaxDrawdown=0
varintcurrentDrawdownBars=0
varintmaxDrawdownBars=0
//Storestatarrays
vartotalDrawdownBars=array.new<int>(0)
vartotalDrawdowns=array.new<float>(0)
//Storelong&shorttradecount
varinttotalBreakEvenTrades=0
varinttotalLongTrades=0
varinttotalLongTradeWins=0
varinttotalShortTrades=0
varinttotalShortTradeWins=0
//Storeopentradecommissioncostsinarray
varcostOfOpenTrades=array.new<TradeCost>(0)
//Detectopenedtradeandsavecostoftrade(ItriedmanymethodstogetmynumberstomatchtheCumulativeProfitlistintheStrategyTester,noideawhy,butnoneofthemworkedwithoutdoingthis)
ifstrategy.opentrades!=strategy.opentrades[1]andstrategy.closedtrades==strategy.closedtrades[1]
costOfTrade=strategy.grossloss-strategy.grossloss[1]
costOfOpenTrades.push(TradeCost.new(strategy.opentrades.entry_time(strategy.opentrades-1),strategy.opentrades.entry_price(strategy.opentrades-1),costOfTrade))
//Detectaclosedtrade
//TVDocumentation:TradeList'sCumulativeProfit%Formula=TradeProfit/(InitialCapital+CumulativeProfitoftheprevioustrades)*100%
ifstrategy.closedtrades!=strategy.closedtrades[1]

//Retrievetradecostfortheclosedtrade
floattradeCost=0
intremoveIdx=-1
ifcostOfOpenTrades.size()>0
fori=0tocostOfOpenTrades.size()-1
TradeCosttc=costOfOpenTrades.get(i)
iftc.entryTime==strategy.closedtrades.entry_time(strategy.closedtrades-1)andtc.entryPrice==strategy.closedtrades.entry_price(strategy.closedtrades-1)
tradeCost:=tc.cost
removeIdx:=i
break

//Removecost
ifremoveIdx!=-1
costOfOpenTrades.remove(removeIdx)
//Calculateequitybeforetradeclosed(strategy.equitywillnotdo,becauseitchangesbar-by-barbasedonopenP&LnotrealizedP&L)
floatpreEquity=strategy.initial_capital+strategy.netprofit[1]
//CalculateP&L+costofthistrade
floatprofitLoss=0
ifstrategy.losstrades>strategy.losstrades[1]
profitLoss:=(strategy.grossloss-(strategy.grossloss[1]-tradeCost))*-1
else
profitLoss:=strategy.grossprofit-strategy.grossprofit[1]

//Checkifthiswasalongorshorttradeandifitwonorlost
ifstrategy.position_size[1]>0
totalLongTrades:=totalLongTrades+1
ifprofitLoss>0
totalLongTradeWins:=totalLongTradeWins+1
elseifstrategy.position_size[1]<0
totalShortTrades:=totalShortTrades+1
ifprofitLoss>0
totalShortTradeWins:=totalShortTradeWins+1

//Checkifthetradebrokeeven
ifprofitLoss==0
totalBreakEvenTrades:=totalBreakEvenTrades+1
//Calculatecumulativeprofit%forthistrade
floatcumulativeProfitPercent=(profitLoss/preEquity)*100
//Storehighestpeakvalueofequity(wecannowusestrategy.equitysinceequityhasupdatedtorealizedP&Lonthisbar)
ifstrategy.equity>equityPeak
equityPeak:=strategy.equity
//Calculatetotalsystemdrawdown%
floatequityDD=((strategy.equity-equityPeak)/equityPeak)*100
ifequityDD<worstDrawdown
worstDrawdown:=equityDD
//Storeaccumulatedmonthly+yearlyP&L
accumulatedMonthlyPL:=cumulativeProfitPercent+accumulatedMonthlyPL[1]
accumulatedYearlyPL:=accumulatedYearlyPL+cumulativeProfitPercent
//Savemaxfavourableexcursionforthismonth(ie.peakreturnas%)
ifaccumulatedMonthlyPL>bestAccumulatedMonthlyPL
bestAccumulatedMonthlyPL:=accumulatedMonthlyPL
//Savemaxfavourableexcursionforthisyear(ie.peakreturnas%)
ifaccumulatedYearlyPL>bestAccumulatedYearlyPL
bestAccumulatedYearlyPL:=accumulatedYearlyPL
//Trackmaxequityhighovercurrentyearformaxyearlydrawdowncalculation
ifaccumulatedYearlyPL>yearlyEquityHigh
yearlyEquityHigh:=accumulatedYearlyPL

//Checkifouryearlyrealizedequityhighminuscurrentrealizedequityexceedsourstoredmaxdrawdownfortheyear,updateifnecessary,andsaveworstdrawdown
ifaccumulatedYearlyPL-yearlyEquityHigh<0
currentYearlyDrawdown:=accumulatedYearlyPL-yearlyEquityHigh
ifcurrentYearlyDrawdown<yearlyMaxDrawdown
yearlyMaxDrawdown:=currentYearlyDrawdown
currentDrawdownBars:=currentDrawdownBars+1

//Trackmaxequityhighovercurrentmonthformaxmonthlydrawdowncalculation
ifaccumulatedMonthlyPL>monthlyEquityHigh
monthlyEquityHigh:=accumulatedMonthlyPL

//Checkifourmonthlyrealizedequityhighminuscurrentrealizedequityexceedsourstoredmaxdrawdownforthemonth,updateifnecessary,andsaveworstdrawdown
ifaccumulatedMonthlyPL-monthlyEquityHigh<0
currentMonthlyDrawdown:=accumulatedMonthlyPL-monthlyEquityHigh
ifcurrentMonthlyDrawdown<monthlyMaxDrawdown
monthlyMaxDrawdown:=currentMonthlyDrawdown

//Debuglabel
ifmptable_debug
stringdebugTip="Equity=$"+str.tostring(strategy.equity,"#.##")+
"\nP&L="+str.tostring(cumulativeProfitPercent)+"%"+
"\nAccumMonthlyP&L="+str.tostring(math.round(accumulatedMonthlyPL,GetRoundingPrecision(accumulatedMonthlyPL)))+"%"+
"\nAccumYearlyP&L="+str.tostring(math.round(accumulatedYearlyPL,GetRoundingPrecision(accumulatedYearlyPL)))+"%"+
"\nMonthlyMaxDD="+str.tostring(math.round(monthlyMaxDrawdown,GetRoundingPrecision(monthlyMaxDrawdown)))+"%"+
"\nYearlyMaxDD="+str.tostring(math.round(yearlyMaxDrawdown,GetRoundingPrecision(yearlyMaxDrawdown)))+"%"+
"\nTotalMaxDD="+str.tostring(math.round(worstDrawdown,GetRoundingPrecision(worstDrawdown)))+"%"+
"\nCurrentDDBars="+str.tostring(currentDrawdownBars)+
"\nMaxDDBars="+str.tostring(maxDrawdownBars)+
"\nTotalBreakEven="+str.tostring(totalBreakEvenTrades)+
"\nTotalLongs="+str.tostring(totalLongTrades)+
"\nTotalLongWins="+str.tostring(totalLongTradeWins)+
"\nTotalShorts="+str.tostring(totalShortTrades)+
"\nTotalShortWins="+str.tostring(totalShortTradeWins)
label.new(bar_index,high+(high*0.01),"P&L"+str.tostring(math.round(cumulativeProfitPercent,GetRoundingPrecision(cumulativeProfitPercent)))+"%",tooltip=debugTip,textcolor=color.white)
//Calculatedrawdownsincelastequityhigh(NOTmaxdrawdown,justthecurrentmaxDDsincewewereoutofDD)
floatt_equityDD=((strategy.equity-equityPeak)/equityPeak)*100
varfloatcurrentMaxDrawdownSinceLast=0
//UpdateMaxDrawdownbarcountandcurrentDDifequityisunderwater,checkisconfirmedtopreventdouble-countingbarswithrecalc_on_order_fillson
ifstrategy.equity<equityPeakandbarstate.isconfirmed
currentDrawdownBars:=currentDrawdownBars+1
ifcurrentDrawdownBars>maxDrawdownBars
maxDrawdownBars:=currentDrawdownBars
ift_equityDD<currentMaxDrawdownSinceLast
currentMaxDrawdownSinceLast:=t_equityDD
else
ifcurrentDrawdownBars>0
totalDrawdownBars.push(currentDrawdownBars)
totalDrawdowns.push(currentMaxDrawdownSinceLast)
currentDrawdownBars:=0
currentMaxDrawdownSinceLast:=0
//PreparearraystostoreYearlyandMonthlyP&Ls
varmonthlyReturns=array.new<StrategyReturn>(0)
varyearlyReturns=array.new<StrategyReturn>(0)
varboolfirstEntryTime=false
//Retrieveentrytimeofinitialentryinopenposition
ifnotfirstEntryTimeandstrategy.opentrades.entry_time(0)
firstEntryTime:=true
//Detectnewmonthandyear
new_month=month(time)!=month(time[1])
new_year=year(time)!=year(time[1])
//Detectanewmonthandstoreitsreturnprofile
ifnotbarstate.isfirstandnew_monthandfirstEntryTimeorbarstate.islastconfirmedhistory
StrategyReturnmr=StrategyReturn.new(accumulatedMonthlyPL,monthlyMaxDrawdown,bestAccumulatedMonthlyPL,time[1])//time)
monthlyReturns.push(mr)
accumulatedMonthlyPL:=0
monthlyMaxDrawdown:=0
monthlyEquityHigh:=0
currentMonthlyDrawdown:=0
bestAccumulatedMonthlyPL:=0
//Detectanewyearandresettrackingvariables
ifnotbarstate.isfirstandnew_yearandfirstEntryTimeorbarstate.islastconfirmedhistory
StrategyReturnyr=StrategyReturn.new(accumulatedYearlyPL,yearlyMaxDrawdown,bestAccumulatedYearlyPL,time[1])
yearlyReturns.push(yr)
accumulatedYearlyPL:=0
yearlyMaxDrawdown:=0
yearlyEquityHigh:=0
currentYearlyDrawdown:=0
bestAccumulatedYearlyPL:=0
//DEBUGcode
bgcolor(mptable_debugandnew_month?color.lime:na,title="NewMonth",display=display.none)
bgcolor(mptable_debugandnew_year?color.red:na,title="NewYear",display=display.none)
//ENDDEBUGCODE
//DefineMonthlyP&LTable
vartableperformance_table=table(na)
//Adjustmptable_pageSizeiftheyearsarelessthanthemptable_pageSize
ifyearlyReturns.size()<mptable_pageSize
mptable_pageSize:=yearlyReturns.size()
//Caluclatethestartandendofpagetodisplay
startIndex=math.max(math.min(yearlyReturns.size()-1,yearlyReturns.size()-1-(mptable_pageSize+1)*mptable_pageNumber),mptable_pageSize-1)
endIndex=math.max(startIndex-mptable_pageSize,0)
mptable_pageSize:=endIndex<=mptable_pageSize?endIndex:mptable_pageSize
//Ifthisisthelastbaronourchart,displaytheperformancetable
varintEXTRA_STAT_ROWS=5//ThisensurestableincludesenoughrowsforCAGRetc
ifmptable_onandmonthlyReturns.size()>0andbarstate.islastconfirmedhistory
//Createtable(100rows=100yearsofdata,shouldbeplentyforallmarkets!)
performance_table:=table.new(position.bottom_right,columns=17,rows=yearlyReturns.size()+EXTRA_STAT_ROWS,border_width=1)
//Setcolumnheaders
performance_table.cell(0,0,"Year",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(1,0,"Jan",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(2,0,"Feb",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(3,0,"Mar",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(4,0,"Apr",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(5,0,"May",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(6,0,"Jun",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(7,0,"Jul",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(8,0,"Aug",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(9,0,"Sep",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(10,0,"Oct",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(11,0,"Nov",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(12,0,"Dec",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(13,0,"TOTAL",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
performance_table.cell(14,0,"MaxDD",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
//Setyearlyvalues
foryear_index=startIndextoyearlyReturns.size()==0?na:endIndex

//Getyearlyreturnforthisloop,setyearnumberinfirstcolumn,determinecolorofcell
StrategyReturnyearlyReturn=yearlyReturns.get(year_index)
//Setyeartitleanddeterminecolor
performance_table.cell(0,year_index+1,str.tostring(year(yearlyReturn.timestamp)),bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_size=tableTextSize)
colory_color=yearlyReturn.profit>0?mptable_ProfitColor:yearlyReturn.profit==0?mptable_BreakEvenColor:mptable_LossColor
//Populateyearlycellvalues
stringyearlyTip="MaxDD:"+str.tostring(math.round(yearlyReturn.drawdown,GetRoundingPrecision(yearlyReturn.drawdown)))+"%"+
"\nMFE:"+str.tostring(math.round(yearlyReturn.peak,GetRoundingPrecision(yearlyReturn.peak)))+"%"
performance_table.cell(13,year_index+1,(yearlyReturn.profit>0?"+":"")+str.tostring(math.round(yearlyReturn.profit,GetRoundingPrecision(yearlyReturn.profit)))+"%",bgcolor=y_color,text_color=color.white,text_size=tableTextSize,tooltip=yearlyTip)
performance_table.cell(14,year_index+1,str.tostring(math.round(yearlyReturn.drawdown,GetRoundingPrecision(yearlyReturn.drawdown)))+"%",bgcolor=mptable_BreakEvenColor,text_color=color.white,text_size=tableTextSize)
//Setmonthlyvalues
formonth_index=0tomonthlyReturns.size()-1
//Getmonthlyreturnforthisloop,getcurrentyearforthisloop,thencalculatethecorrespondingtablecolumnandrow
StrategyReturnmonthlyReturn=monthlyReturns.get(month_index)
intyearOfMonth=year(monthlyReturn.timestamp)
intmonthCol=month(monthlyReturn.timestamp)

//populatemonthlyprofitonlyiftheyearsoftheyearlyreturnmatchwiththemonthlyreturn.
ifyearOfMonth==year(yearlyReturn.timestamp)
//DeterminecolorformonthlyP&L
colorm_color=monthlyReturn.profit>0?color.new(mptable_ProfitColor,color.t(mptable_ProfitColor)+20):monthlyReturn.profit==0?color.new(mptable_BreakEvenColor,color.t(mptable_BreakEvenColor)+20):color.new(mptable_LossColor,color.t(mptable_LossColor)+20)

//SetmonthlyP&Lcell
stringmonthlyTip="MaxDD:"+str.tostring(math.round(monthlyReturn.drawdown,GetRoundingPrecision(monthlyReturn.drawdown)))+"%"+
"\nMFE:"+str.tostring(math.round(monthlyReturn.peak,GetRoundingPrecision(monthlyReturn.peak)))+"%"
performance_table.cell(monthCol,year_index+1,str.tostring(math.round(monthlyReturn.profit,GetRoundingPrecision(monthlyReturn.profit))),bgcolor=m_color,text_color=color.white,text_size=tableTextSize,tooltip=monthlyTip)
floatpercentReturn=(strategy.netprofit/strategy.initial_capital)*100
floatcagr=(math.pow((strategy.netprofit+strategy.initial_capital)/strategy.initial_capital,1/yearlyReturns.size())-1)*100
floatmar=cagr/math.abs(worstDrawdown)
lastMonthRowIndex=startIndex<5?5:startIndex
//Populatetabledata
floattotalWinRate=(strategy.wintrades/strategy.closedtrades)*100
floatlongWinRate=nz((totalLongTradeWins/totalLongTrades)*100)
floatshortWinRate=nz((totalShortTradeWins/totalShortTrades)*100)
stringreturnTip="Basedonatotalof"+str.tostring(strategy.closedtrades)+"trades"+
"\nWinRate="+str.tostring(math.round(totalWinRate,GetRoundingPrecision(totalWinRate)))+"%"+
"\nLongTrades="+str.tostring(totalLongTrades)+"(Win"+str.tostring(math.round(longWinRate,GetRoundingPrecision(longWinRate)))+"%)"+
"\nShortTrades="+str.tostring(totalShortTrades)+"(Win"+str.tostring(math.round(shortWinRate,GetRoundingPrecision(shortWinRate)))+"%)"
//performance_table.cell(15,lastMonthRowIndex,"Return:"+(percentReturn>0?"+":"")+str.tostring(math.round(percentReturn,GetRoundingPrecision(percentReturn)))+"%",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_font_family=font.family_monospace,text_size=tableTextSize,tooltip=returnTip)
//performance_table.cell(15,lastMonthRowIndex-1,"MAR:"+str.tostring(mar,"#.##"),bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_font_family=font.family_monospace,text_size=tableTextSize,tooltip="Measureofreturnadjustedforrisk:CAGRdividedbyMaxDrawdown.Indicateshowcomfortablethesystemmightbetotrade.Higherthan0.5isideal,1.0andaboveisverygood,andanything3.0oraboveshouldbeconsideredsuspicious.")
//performance_table.cell(15,lastMonthRowIndex-2,"DDBars:"+str.tostring(maxDrawdownBars),bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_font_family=font.family_monospace,text_size=tableTextSize,tooltip="AverageDrawdownBars:"+str.tostring(totalDrawdownBars.avg(),"#.#")+"\n\nThisishowmanybarsittooktorecoverthelongestdrawdown(note:thisisdifferenttotheMAXdrawdown,andrepresentstimedrawdown)")
//performance_table.cell(15,lastMonthRowIndex-3,"MaxDD:"+str.tostring(math.round(worstDrawdown,GetRoundingPrecision(worstDrawdown)))+"%",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_font_family=font.family_monospace,text_size=tableTextSize,tooltip="AverageDrawdown:"+str.tostring(totalDrawdowns.avg(),"#.##")+"%\n\nThisnumberisdifferenttotheStrategyTesterbecausethisnumberisbasedonclosedtradeequitywhiletheTester'sMaxDDisbasedonopenequity.")
//performance_table.cell(15,lastMonthRowIndex-4,"CAGR:"+(cagr>0?"+":"")+str.tostring(math.round(cagr,GetRoundingPrecision(cagr)))+"%",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_font_family=font.family_monospace,text_size=tableTextSize,tooltip="Compoundedannualgrowthrate")
//performance_table.cell(15,lastMonthRowIndex-5,"REALIZEDP&L",bgcolor=mptable_titleColor,text_color=mptable_titleTextColor,text_font_family=font.family_monospace,text_size=tableTextSize,tooltip="ThesenumbersarebasedonRealizedequity(closedtrades)")
//======================================================================================================================================================================
//EndOfCode
//======================================================================================================================================================================
Expand (709 lines)
