Script Name: Co-relation and St-deviation Strategy - BNB-USDT 15min
Author: pcooma
Description: This indicator based on statistical analysis. it uses standard deviation and its co-relation to price action to generate signals. and following indicators has been used to calculate standard deviation and its co-relation values. finally it is capable to identify market changes in bottoms to pic most suitable points.
1. Parabolic SAR (parabolic stop and reverse)...
PineScript code:

Pine Scriptâ„¢ strategy
Co-relation and St-deviation Strategy - BNB/USDT 15min
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  Â©  pcooma
//version  35
//@version=5
strategy("OPV15  V2  (Duplicate  of  Used  for  Signal  Generation)  -  Co-relation  and  St-deviation  Strategy  -  BNB/USDT  15min",  shorttitle="OPV15  V2  Duplicate  CS  -  BNB  15min",  overlay=true,  calc_on_order_fills=false,  close_entries_rule  =  "FIFO",  calc_on_every_tick=false,  initial_capital  =  1000,pyramiding  =  999,precision  =  4,  process_orders_on_close=true,  currency  =  currency.USD,  default_qty_type  =  strategy.cash,  default_qty_value  =  33,  commission_type  =  strategy.commission.percent,  max_lines_count  =  500,  commission_value  =  0.1)
//Backtest  dates
fromDay                                            =  input.int(defval          =  25,            title        =  "From  (DD/MM/YYYY)  -  ",          minval  =  1,  maxval  =  31,                group  =  'Time  Period  Values',  inline  =  'From')
fromMonth                                        =  input.int(defval          =  02,            title        =  "/",                                                minval  =  1,  maxval  =  12,                group  =  'Time  Period  Values',  inline  =  'From')
fromYear                                          =  input.int(defval          =  2022,        title        =  "/",                                                minval  =  1970,                                    group  =  'Time  Period  Values',  inline  =  'From')
thruDay                                            =  input.int(defval          =  1,              title        =  "Thru  (DD/MM/YYYY)  -  ",          minval  =  1,  maxval  =  31,                group  =  'Time  Period  Values',  inline  =  'Thru')
thruMonth                                        =  input.int(defval          =  1,              title        =  "/",                                                minval  =  1,  maxval  =  12,                group  =  'Time  Period  Values',  inline  =  'Thru')
thruYear                                          =  input.int(defval          =  2112,        title        =  "/",                                                minval  =  1970,                                    group  =  'Time  Period  Values',  inline  =  'Thru')
start                                                =  timestamp(fromYear,  fromMonth,  fromDay,  00,  00)                  //  backtest  start  window
finish                                              =  timestamp(thruYear,  thruMonth,  thruDay,  23,  59)                  //  backtest  finish  window
//window()    =>
//        time  >=  start  and  time  <=  finish  ?  true  :  false                                  //  create  function  "within  window  of  time"
use_timeframe                              =  input.bool(defval  =  true,  title  =  "Use  data  window  to  limit  trade")
var  window  =  true
if  use_timeframe  ==  true
        window    :=  time  >=  start  and  time  <=  finish  ?  true  :  false
else
        window  :=  true
//Buy  and  Sell  range
var  factor_of_supertrend_to_determine_sell_comand                              =  input.int          (defval  =  1,                                                                                                                                                  title="Factorofsupertrendtodeterminebuycommand",group="Determinationofbuyorsellcommand")
varartperiod_of_supertrend_to_determine_sell_comand=input.int(defval=24,title="ArtPeriodofsupertrendtodeterminebuycommand",group="Determinationofbuyorsellcommand")
buy_comand_high_value=input(defval=high,title="SourceofHighervalueofLookbackperiod",group="Determinationofbuyorsellcommand")
buy_comand_low_value=input(defval=low,title="SourceofLowervalueofLookbackperiod",group="Determinationofbuyorsellcommand")
varbuy_or_sell_lookback=input.int(defval=280,title="Lookbackperiodtodeterminelowerlowpoints",group="Determinationofbuyorsellcommand")
source_of_lower_point=input(defval=open,title="SourceofLowerpointtoinitiatepurchase",group="Determinationofbuyorsellcommand")
//Calculationofprofitprecentage
varprofit_precentage=input.float(defval=7,title="Profitprecentagewillbe",group="ProfitCalculations",step=0.01)
varintermidiate_selling=input(defval=false,title="EnableSwingTrading",group="ProfitCalculations")
varprofit_precentage_intermidiate=input.float(defval=2,title="SwingTradingprofitprecentagewillbe",group="ProfitCalculations",step=0.01)
//FundManagement
varint_cap=input.float(defval=1000,title="CumilativeInvestment",group="FundManagement")
varpurchaseing_method=input.string(defval='Equalamounts',title="ValueofPurchaswillbe",group="FundManagement",options=['Equalamounts','Incrementalamounts'])
vardev_of_equal_amounts=input.string(defval='EqualamountswithfixedUSDT',title="ValueofPurchaswillbe",group="FundManagement",options=['EqualamountswithfixedUSDT','Equalamountswithfixedentries'])
varint_val_prc=input.float(defval=44,title="Valueoffirstpurchasewillbe",group="FundManagement",tooltip="Minimumvalueofinitialpurchasewillbe15USDT",inline="Investment")
varint_val_allocation=input.string(defval='USDT',title="",group="FundManagement",options=['%ofcumilativeinvestment','USDT'],inline="Investment")
varpiramiding=input.int(defval=35,title="Numbersofpararalentries",group="FundManagement")
varr=input.float(defval=5,title="rstartingvalue",group="Inputparametersforfundmanagement")
varr_change_input=input.int(defval=1,title="Initiativevalueforrchange",group="Inputparametersforfundmanagement")
varr_finetune=input.bool(defval=false,title="User=0.001tofinetunervalue",group="Inputparametersforfundmanagement")
varr_value=input.float(defval=3.259,title="Calculatedrvalue",group="Inputparametersforfundmanagement")
//Principleinput
look_back_period=input.int(defval=7,title="Generallookbackperiodforcalculations",group="Principleinputs")
source_of_price_average=input(defval=close,title="SourceofAveragePrice",group="Principleinputs")
look_back_period_for_price_falling=input.int(defval=3,title="Lookbackperiodforpricefalling",group="Principleinputs")
source_of_ma9=input(defval=hl2,title="Sourceofaveragepricetodeterminesellingandbuying",group="Principleinputs")
look_back_period_of_sma9=input.int(defval=3,title="Lookbackperiodofaveragepricetodeterminebuyandsell",group="Principleinputs")
ma_9_calculation=input.string(defval='ExponentiallyWeightedMovingAverage(EMA)',title="Calculationmethodofaverageprice",group="Principleinputs",options=['Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
volume_profile_calculation=input.string(defval='Leniorregression',title="Calculationmethodofvolumeprofile",group="Principleinputs",options=['Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//ParabolicSAR(parabolicstopandreverse)
varfloatsar_start_value=input.float(defval=0.2,title="StartvalueofSAR",group="ParabolicStopandReverse(SAR)",minval=0,step=0.01)
varfloatsar_incrimant_value=input.float(defval=0.2,title="IncrementvalueofSAR",group="ParabolicStopandReverse(SAR)",minval=0,step=0.01)
varfloatsar_mac_value=input.float(defval=0.2,title="MaxvalueofSAR",group="ParabolicStopandReverse(SAR)",minval=0,step=0.01)
//Supertrend
varST_factor_value=input.int(defval=1,title="FactorofSupertrend",group="Supertrend",minval=0,step=1)
varST_art_period_value=input.int(defval=10,title="ArtPeriodofSupertrend",group="Supertrend",minval=0,step=1)
//Relativestrengthindex(RSI)
source_of_rsi=input(defval=close,title="SourceofRSI",group="Relativestrengthindex(RSI)")
//Moneyflowindex(MFI)
source_of_mfi=input(defval=close,title="SourceofMFI",group="Moneyflowindex(MFI)")
//BalanceofPower
bop_calculation=input.string(defval='Leniorregression',title="CalculationmethodofBalanceofPower",group="BalanceofPower(BOP)",options=['Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//ChandeMomentumOscillator
source_of_mom=input(defval=close,title="SourceofMOM",group="ChandeMomentumOscillator(MOM)")
//CenterofGravity(COG)
source_of_cog=input(defval=close,title="SourceofCOG",group="TheCenterofGravity(COG)")
//DirectionalMovementIndex(DMI)
vardmi_di_length=input.int(defval=3,title="DILength",group="Directionalmovementindex(DMI)",minval=0,step=1)
vardmi_adx_smoothing_length=input.int(defval=10,title="ADXSmoothinglength",group="Directionalmovementindex(DMI)",minval=0,step=1)
//Stochastic
source_of_stoch=input(defval=close,title="SourceofStochastic",group="Stochastic")
stoch_calculation=input.string(defval='Leniorregression',title="CalculationmethodofStochastic",group="Stochastic",options=['Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//Symmetricallyweightedmovingaveragewithfixedlength
source_of_swma=input(defval=close,title="SourceofSWMA",group="Symmetricallyweightedmovingaveragewithfixedlength")
swma_calculation=input.string(defval='Leniorregression',title="CalculationmethodofSWMA",group="Symmetricallyweightedmovingaveragewithfixedlength",options=['Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//Truestrengthindex(TSI)
source_of_tsi=input(defval=close,title="SourceofTSI",group="Truestrengthindex(TSI)")
vartsi_short_length=input.int(defval=14,title="ShortLengthofTSI",group="Truestrengthindex(TSI)",minval=0,step=1)
vartsi_long_length=input.int(defval=28,title="LonglengthofTSI",group="Truestrengthindex(TSI)",minval=0,step=1)
//Williams%R
wpr_calculation=input.string(defval='ExponentiallyWeightedMovingAverage(EMA)',title="CalculationmethodofWilliams%R",group="Williams%R",options=['NONE','Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//Accumulation/distributionindex
accdist_calculation=input.string(defval='ExponentiallyWeightedMovingAverage(EMA)',title="CalculationmethodofAccumulation/distributionIndex",group="Accumulation/distributionIndex",options=['NONE','Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//IntradayIntensityIndex
iii_calculation=input.string(defval='ExponentiallyWeightedMovingAverage(EMA)',title="CalculationmethodofIntradayIntensityIndex",group="IntradayIntensityIndex",options=['NONE','Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//NegativeVolumeIndex
nvi_calculation=input.string(defval='ExponentiallyWeightedMovingAverage(EMA)',title="CalculationmethodofNegativeVolumeIndex",group="NegativeVolumeIndex",options=['NONE','Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//PositiveVolumeIndex
pvi_calculation=input.string(defval='ExponentiallyWeightedMovingAverage(EMA)',title="CalculationmethodofPositiveVolumeIndex",group="PositiveVolumeIndex",options=['NONE','Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//OnBalanceVolume
obv_calculation=input.string(defval='WeightedMovingAverage(WMA)',title="CalculationmethodofOnBalanceVolume",group="OnBalanceVolume",options=['NONE','Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//Price-VolumeTrend
pvt_calculation=input.string(defval='ExponentiallyWeightedMovingAverage(EMA)',title="CalculationmethodofPrice-VolumeTrend",group="Price-VolumeTrend",options=['NONE','Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//Truerange
tr_calculation=input.string(defval='ExponentiallyWeightedMovingAverage(EMA)',title="CalculationmethodofTruerange",group="Truerange",options=['NONE','Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//Volume-weightedaverageprice
vwap_calculation=input.string(defval='HullMovingAverage(HMA)',title="CalculationmethodofVolume-weightedaverageprice",group="Volume-weightedaverageprice",options=['NONE','Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//WilliamsAccumulation/Distribution
wad_calculation=input.string(defval='ExponentiallyWeightedMovingAverage(EMA)',title="CalculationmethodofWilliamsAccumulation/Distribution",group="WilliamsAccumulation/Distribution",options=['NONE','Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//WilliamsVariableAccumulation/Distribution
wvad_calculation=input.string(defval='ExponentiallyWeightedMovingAverage(EMA)',title="CalculationmethodofWilliamsVariableAccumulation/Distribution",group="WilliamsVariableAccumulation/Distribution",options=['NONE','Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//SimpleMovingAverage
source_of_sma=input(defval=close,title="SourceofSimpleMovingAverage(SMA)",group="SimpleMovingAverage(SMA)")
//ExponentialMovingAverage
source_of_ema=input(defval=close,title="SourceofExponentialMovingAverage(EMA)",group="ExponentialMovingAverage(EMA)")
//CCI(commoditychannelindex)
source_of_cci=input(defval=close,title="SourceofCommodityChannelIndex(CCI)",group="CommodityChannelIndex(CCI)")
//ChopZone
source_of_cz=input(defval=close,title="SourceofChopZone(CZ)",group="ChopZone(CZ)")
source_of_cz_avg=input(defval=hlc3,title="SourceofAverageofChopZone(CZ)",group="ChopZone(CZ)")
cz_calculation=input.string(defval='ExponentiallyWeightedMovingAverage(EMA)',title="CalculationmethodofChopZone",group="ChopZone(CZ)",options=['Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//EaseofMovement
source_of_eom=input(defval=hl2,title="SourceofEaseofMovement(EOM)",group="EaseofMovement")
eom_calculation=input.string(defval='SimpleMovingAverage(SMA)',title="CalculationmethodofEaseofMovement",group="EaseofMovement",options=['Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//DetrendedPriceOscillator
source_of_dpo=input(defval=close,title="SourceofDetrendedPriceOscillator(DPO)",group="DetrendedPriceOscillator(DPO)")
isCentered=input(defval=false,title="Alignmenttocenter-DetrendedPriceOscillator(DPO)",group="DetrendedPriceOscillator(DPO)")
dpo_calculation=input.string(defval='SimpleMovingAverage(SMA)',title="CalculationmethodofEaseofMovement",group="DetrendedPriceOscillator(DPO)",options=['Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//AdvanceDeclineLine
source_of_adl=input(defval=close,title="SourceofAdvanceDeclineLine(ADL)",group="AdvanceDeclineLine(ADL)")
//BullBearPower
source_of_bullp=input(defval=high,title="SourceofBullPower",group="BullBearPower(BBP)")
source_of_bearp=input(defval=low,title="SourceofBearPower",group="BullBearPower(BBP)")
source_of_cal_bullp=input(defval=close,title="SourceofBaselineofBullPower",group="BullBearPower(BBP)")
source_of_cal_bearp=input(defval=close,title="SourceofBaselineofBearPower",group="BullBearPower(BBP)")
bullp_calculation=input.string(defval='SimpleMovingAverage(SMA)',title="CalculationmethodofBullPower",group="BullBearPower(BBP)",options=['Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
bearp_calculation=input.string(defval='SimpleMovingAverage(SMA)',title="CalculationmethodofBullPower",group="BullBearPower(BBP)",options=['Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//high
high_impact_calculation=input.string(defval='SimpleMovingAverage(SMA)',title="Impactcalculationmethodofhigh",group="ImpactCalculation",options=['Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//low
low_impact_calculation=input.string(defval='SimpleMovingAverage(SMA)',title="Impactcalculationmethodoflow",group="ImpactCalculation",options=['Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//open
open_impact_calculation=input.string(defval='SimpleMovingAverage(SMA)',title="Impactcalculationmethodofopen",group="ImpactCalculation",options=['Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
//close
close_impact_calculation=input.string(defval='SimpleMovingAverage(SMA)',title="Impactcalculationmethodofclose",group="ImpactCalculation",options=['Leniorregression','SimpleMovingAverage(SMA)','ExponentiallyWeightedMovingAverage(EMA)','HullMovingAverage(HMA)','ExponentiallyWeightedMovingaveragewithalphalength(RMA)','WeightedMovingAverage(WMA)','ArnaudLegouxMovingAverage(ALMA)','Symmetricallyweightedmovingaveragewithfixedlength(SWMA)','Volume-weightedMovingAverage(VWMA)'])
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//GeneralCalculations
varfloatvolume_avg_14=0
varfloatma_9=0
price_avg_14=ta.linreg((source_of_price_average),look_back_period,0)
price_rising=ta.rising(price_avg_14,2)
price_falling=ta.falling(price_avg_14,look_back_period_for_price_falling)
//Volumeprofile
ifvolume_profile_calculation=='Leniorregression'
volume_avg_14:=ta.linreg(volume,look_back_period,0)
elseifvolume_profile_calculation=='SimpleMovingAverage(SMA)'
volume_avg_14:=ta.sma(volume,look_back_period)
elseifvolume_profile_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
volume_avg_14:=ta.ema(volume,look_back_period)
elseifvolume_profile_calculation=='HullMovingAverage(HMA)'
volume_avg_14:=ta.hma(volume,look_back_period)
elseifvolume_profile_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
volume_avg_14:=ta.rma(volume,look_back_period)
elseifvolume_profile_calculation=='WeightedMovingAverage(WMA)'
volume_avg_14:=ta.wma(volume,look_back_period)
elseifvolume_profile_calculation=='ArnaudLegouxMovingAverage(ALMA)'
volume_avg_14:=ta.alma(volume,look_back_period,0,3)
elseifvolume_profile_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
volume_avg_14:=ta.swma(volume)
elseifvolume_profile_calculation=='Volume-weightedMovingAverage(VWMA)'
volume_avg_14:=ta.vwma(volume,look_back_period)
ifma_9_calculation=='Leniorregression'
ma_9:=ta.linreg(source_of_ma9,look_back_period,0)
elseifma_9_calculation=='SimpleMovingAverage(SMA)'
ma_9:=ta.sma(source_of_ma9,look_back_period)
elseifma_9_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
ma_9:=ta.ema(source_of_ma9,look_back_period)
elseifma_9_calculation=='HullMovingAverage(HMA)'
ma_9:=ta.hma(source_of_ma9,look_back_period)
elseifma_9_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
ma_9:=ta.rma(source_of_ma9,look_back_period)
elseifma_9_calculation=='WeightedMovingAverage(WMA)'
ma_9:=ta.wma(source_of_ma9,look_back_period)
elseifma_9_calculation=='ArnaudLegouxMovingAverage(ALMA)'
ma_9:=ta.alma(source_of_ma9,look_back_period,0,3)
elseifma_9_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
ma_9:=ta.swma(source_of_ma9)
elseifma_9_calculation=='Volume-weightedMovingAverage(VWMA)'
ma_9:=ta.vwma(source_of_ma9,look_back_period)
st_dev_of_price_avg_14=ta.stdev(price_avg_14,look_back_period)
st_dev_of_volume_avg_14=ta.stdev(volume_avg_14,look_back_period)
corelation_btw_price_avg_14_and_volume_avg_14=ta.correlation(volume_avg_14,price_avg_14,look_back_period)
//ParabolicSAR(parabolicstopandreverse)
indicator_sar_14=ta.sar(sar_start_value,sar_incrimant_value,sar_mac_value)
[middle_sar_14,upper_sar_14,lower_sar_14]=ta.bb(indicator_sar_14,5,4)
bb_gap_of_sar_14=indicator_sar_14-middle_sar_14
st_dev_of_bb_gap_of_sar_14=ta.stdev(bb_gap_of_sar_14,look_back_period)
st_dev_of_indicator_sar_14=ta.stdev(indicator_sar_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_sar_14=ta.correlation(indicator_sar_14,price_avg_14,look_back_period)
first_degree_indicator_sar_14=st_dev_of_indicator_sar_14*corelation_btw_price_avg_14_and_indicator_sar_14
//Supertrend(ST)
varfloatst_line=0
[supertrend,direction]=ta.supertrend(ST_factor_value,ST_art_period_value)
up_direction=direction<0?supertrend:na
down_direction=direction<0?na:supertrend
ifup_direction>0
st_line:=up_direction
else
st_line:=down_direction
indicator_st_14=st_line
[middle_st_14,upper_st_14,lower_st_14]=ta.bb(indicator_st_14,5,4)
bb_gap_of_st_14=indicator_st_14-middle_st_14
st_dev_of_bb_gap_of_st_14=ta.stdev(bb_gap_of_st_14,look_back_period)
st_dev_of_indicator_st_14=ta.stdev(indicator_st_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_st_14=ta.correlation(indicator_st_14,price_avg_14,look_back_period)
first_degree_indicator_st_14=st_dev_of_indicator_st_14*corelation_btw_price_avg_14_and_indicator_st_14
//Relativestrengthindex(RSI)
indicator_rsi_14=ta.rsi(source_of_rsi,look_back_period)
[middle_rsi_14,upper_rsi_14,lower_rsi_14]=ta.bb(indicator_rsi_14,5,4)
bb_gap_of_rsi_14=indicator_rsi_14-middle_rsi_14
st_dev_of_bb_gap_of_rsi_14=ta.stdev(bb_gap_of_rsi_14,look_back_period)
st_dev_of_indicator_rsi_14=ta.stdev(indicator_rsi_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_rsi_14=ta.correlation(indicator_rsi_14,price_avg_14,look_back_period)
first_degree_indicator_rsi_14=st_dev_of_indicator_rsi_14*corelation_btw_price_avg_14_and_indicator_rsi_14*st_dev_of_bb_gap_of_rsi_14
//Moneyflowindex(MFI)
indicator_mfi_14=ta.mfi(source_of_mfi,look_back_period)
[middle_mfi_14,upper_mfi_14,lower_mfi_14]=ta.bb(indicator_mfi_14,5,4)
bb_gap_of_mfi_14=indicator_mfi_14-middle_mfi_14
st_dev_of_bb_gap_of_mfi_14=ta.stdev(bb_gap_of_mfi_14,look_back_period)
st_dev_of_indicator_mfi_14=ta.stdev(indicator_mfi_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_mfi_14=ta.correlation(indicator_mfi_14,price_avg_14,look_back_period)
first_degree_indicator_mfi_14=st_dev_of_indicator_mfi_14*corelation_btw_price_avg_14_and_indicator_mfi_14*st_dev_of_bb_gap_of_mfi_14
//BalanceofPower(BOP)
varfloatbop_f=0
bop_nf=ta.linreg((((close-open)/(high-low)*100)+100)/2,look_back_period,0)
ifbop_calculation=='Leniorregression'
bop_f:=bop_nf
elseifbop_calculation=='SimpleMovingAverage(SMA)'
bop_f:=ta.sma(bop_nf,look_back_period)
elseifbop_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
bop_f:=ta.ema(bop_nf,look_back_period)
elseifbop_calculation=='HullMovingAverage(HMA)'
bop_f:=ta.hma(bop_nf,look_back_period)
elseifbop_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
bop_f:=ta.rma(bop_nf,look_back_period)
elseifbop_calculation=='WeightedMovingAverage(WMA)'
bop_f:=ta.wma(bop_nf,look_back_period)
elseifbop_calculation=='ArnaudLegouxMovingAverage(ALMA)'
bop_f:=ta.alma(bop_nf,look_back_period,0,3)
elseifbop_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
bop_f:=ta.swma(bop_nf)
elseifbop_calculation=='Volume-weightedMovingAverage(VWMA)'
bop_f:=ta.vwma(bop_nf,look_back_period)
indicator_bop_14=bop_f
[middle_bop_14,upper_bop_14,lower_bop_14]=ta.bb(indicator_bop_14,5,4)
bb_gap_of_bop_14=indicator_bop_14-middle_bop_14
st_dev_of_bb_gap_of_bop_14=ta.stdev(bb_gap_of_bop_14,look_back_period)
st_dev_of_indicator_bop_14=ta.stdev(indicator_bop_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_bop_14=ta.correlation(indicator_bop_14,price_avg_14,look_back_period)
first_degree_indicator_bop_14=st_dev_of_indicator_bop_14*corelation_btw_price_avg_14_and_indicator_bop_14*st_dev_of_bb_gap_of_bop_14
//ChandeMomentumOscillator
indicator_mom_14=ta.cmo(source_of_mom,look_back_period)
[middle_mom_14,upper_mom_14,lower_mom_14]=ta.bb(indicator_mom_14,5,4)
bb_gap_of_mom_14=indicator_mom_14-middle_mom_14
st_dev_of_bb_gap_of_mom_14=ta.stdev(bb_gap_of_mom_14,look_back_period)
st_dev_of_indicator_mom_14=ta.stdev(indicator_mom_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_mom_14=ta.correlation(indicator_mom_14,price_avg_14,look_back_period)
first_degree_indicator_mom_14=st_dev_of_indicator_mom_14*corelation_btw_price_avg_14_and_indicator_mom_14*st_dev_of_bb_gap_of_mom_14
//CenterofGravity(COG)
indicator_cog_14=ta.cog(source_of_cog,look_back_period)
[middle_cog_14,upper_cog_14,lower_cog_14]=ta.bb(indicator_cog_14,5,4)
bb_gap_of_cog_14=indicator_cog_14-middle_cog_14
st_dev_of_bb_gap_of_cog_14=ta.stdev(bb_gap_of_cog_14,look_back_period)
st_dev_of_indicator_cog_14=ta.stdev(indicator_cog_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_cog_14=ta.correlation(indicator_cog_14,price_avg_14,look_back_period)
first_degree_indicator_cog_14=st_dev_of_indicator_cog_14*corelation_btw_price_avg_14_and_indicator_cog_14*st_dev_of_bb_gap_of_cog_14
//DirectionalMovementIndex(DMI)
[diplus,diminus,indicator_dmi_14]=ta.dmi(dmi_di_length,dmi_adx_smoothing_length)
[middle_dmi_14,upper_dmi_14,lower_dmi_14]=ta.bb(indicator_dmi_14,5,4)
bb_gap_of_dmi_14=indicator_dmi_14-middle_dmi_14
st_dev_of_bb_gap_of_dmi_14=ta.stdev(bb_gap_of_dmi_14,look_back_period)
st_dev_of_indicator_dmi_14=ta.stdev(indicator_dmi_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_dmi_14=ta.correlation(indicator_dmi_14,price_avg_14,look_back_period)
first_degree_indicator_dmi_14=st_dev_of_indicator_dmi_14*corelation_btw_price_avg_14_and_indicator_dmi_14*st_dev_of_bb_gap_of_dmi_14
//Stochastic
stoch_nf=ta.stoch(source_of_stoch,high,low,look_back_period)
varfloatstoch_f=0
ifstoch_calculation=='Leniorregression'
stoch_f:=ta.linreg(stoch_nf,look_back_period,0)
elseifstoch_calculation=='SimpleMovingAverage(SMA)'
stoch_f:=ta.sma(stoch_nf,look_back_period)
elseifstoch_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
stoch_f:=ta.ema(stoch_nf,look_back_period)
elseifstoch_calculation=='HullMovingAverage(HMA)'
stoch_f:=ta.hma(stoch_nf,look_back_period)
elseifstoch_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
stoch_f:=ta.rma(stoch_nf,look_back_period)
elseifstoch_calculation=='WeightedMovingAverage(WMA)'
stoch_f:=ta.wma(stoch_nf,look_back_period)
elseifstoch_calculation=='ArnaudLegouxMovingAverage(ALMA)'
stoch_f:=ta.alma(stoch_nf,look_back_period,0,3)
elseifstoch_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
stoch_f:=ta.swma(stoch_nf)
elseifstoch_calculation=='Volume-weightedMovingAverage(VWMA)'
stoch_f:=ta.vwma(stoch_nf,look_back_period)
indicator_stoch_14=stoch_f
[middle_stoch_14,upper_stoch_14,lower_stoch_14]=ta.bb(indicator_stoch_14,5,4)
bb_gap_of_stoch_14=indicator_stoch_14-middle_stoch_14
st_dev_of_bb_gap_of_stoch_14=ta.stdev(bb_gap_of_stoch_14,look_back_period)
st_dev_of_indicator_stoch_14=ta.stdev(indicator_stoch_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_stoch_14=ta.correlation(indicator_stoch_14,price_avg_14,look_back_period)
first_degree_indicator_stoch_14=st_dev_of_indicator_stoch_14*corelation_btw_price_avg_14_and_indicator_stoch_14*st_dev_of_bb_gap_of_stoch_14
//Symmetricallyweightedmovingaveragewithfixedlength
swma_nf=ta.swma(source_of_swma)
varfloatswma_f=0
ifswma_calculation=='Leniorregression'
swma_f:=ta.linreg(swma_nf,look_back_period,0)
elseifswma_calculation=='SimpleMovingAverage(SMA)'
swma_f:=ta.sma(swma_nf,look_back_period)
elseifswma_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
swma_f:=ta.ema(swma_nf,look_back_period)
elseifswma_calculation=='HullMovingAverage(HMA)'
swma_f:=ta.hma(swma_nf,look_back_period)
elseifswma_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
swma_f:=ta.rma(swma_nf,look_back_period)
elseifswma_calculation=='WeightedMovingAverage(WMA)'
swma_f:=ta.wma(swma_nf,look_back_period)
elseifswma_calculation=='ArnaudLegouxMovingAverage(ALMA)'
swma_f:=ta.alma(swma_nf,look_back_period,0,3)
elseifswma_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
swma_f:=ta.swma(swma_nf)
elseifswma_calculation=='Volume-weightedMovingAverage(VWMA)'
swma_f:=ta.vwma(swma_nf,look_back_period)
indicator_swma_14=swma_f
[middle_swma_14,upper_swma_14,lower_swma_14]=ta.bb(indicator_swma_14,5,4)
bb_gap_of_swma_14=indicator_swma_14-middle_swma_14
st_dev_of_bb_gap_of_swma_14=ta.stdev(bb_gap_of_swma_14,look_back_period)
st_dev_of_indicator_swma_14=ta.stdev(indicator_swma_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_swma_14=ta.correlation(indicator_swma_14,price_avg_14,look_back_period)
first_degree_indicator_swma_14=st_dev_of_indicator_swma_14*corelation_btw_price_avg_14_and_indicator_swma_14*st_dev_of_bb_gap_of_swma_14
//Truestrengthindex(TSI)
indicator_tsi_14=ta.tsi(source_of_tsi,tsi_short_length,tsi_long_length)
[middle_tsi_14,upper_tsi_14,lower_tsi_14]=ta.bb(indicator_tsi_14,5,4)
bb_gap_of_tsi_14=indicator_tsi_14-middle_tsi_14
st_dev_of_bb_gap_of_tsi_14=ta.stdev(bb_gap_of_tsi_14,look_back_period)
st_dev_of_indicator_tsi_14=ta.stdev(indicator_tsi_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_tsi_14=ta.correlation(indicator_tsi_14,price_avg_14,look_back_period)
first_degree_indicator_tsi_14=st_dev_of_indicator_tsi_14*corelation_btw_price_avg_14_and_indicator_tsi_14*st_dev_of_bb_gap_of_tsi_14
//Williams%R
varfloatwpr_f=0
wpr_nf=ta.wpr(look_back_period)
ifwpr_calculation=='NONE'
wpr_f:=wpr_nf
elseifwpr_calculation=='Leniorregression'
wpr_f:=ta.linreg(wpr_nf,look_back_period,0)
elseifwpr_calculation=='SimpleMovingAverage(SMA)'
wpr_f:=ta.sma(wpr_nf,look_back_period)
elseifwpr_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
wpr_f:=ta.ema(wpr_nf,look_back_period)
elseifwpr_calculation=='HullMovingAverage(HMA)'
wpr_f:=ta.hma(wpr_nf,look_back_period)
elseifwpr_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
wpr_f:=ta.rma(wpr_nf,look_back_period)
elseifwpr_calculation=='WeightedMovingAverage(WMA)'
wpr_f:=ta.wma(wpr_nf,look_back_period)
elseifwpr_calculation=='ArnaudLegouxMovingAverage(ALMA)'
wpr_f:=ta.alma(wpr_nf,look_back_period,0,3)
elseifwpr_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
wpr_f:=ta.swma(wpr_nf)
elseifwpr_calculation=='Volume-weightedMovingAverage(VWMA)'
wpr_f:=ta.vwma(wpr_nf,look_back_period)
indicator_wpr_14=wpr_f
[middle_wpr_14,upper_wpr_14,lower_wpr_14]=ta.bb(indicator_wpr_14,5,4)
bb_gap_of_wpr_14=indicator_wpr_14-middle_wpr_14
st_dev_of_bb_gap_of_wpr_14=ta.stdev(bb_gap_of_wpr_14,look_back_period)
st_dev_of_indicator_wpr_14=ta.stdev(indicator_wpr_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_wpr_14=ta.correlation(indicator_wpr_14,price_avg_14,look_back_period)
first_degree_indicator_wpr_14=st_dev_of_indicator_wpr_14*corelation_btw_price_avg_14_and_indicator_wpr_14*st_dev_of_bb_gap_of_wpr_14
//Accumulation/distributionindex
varfloataccdist_f=0
accdist_nf=ta.accdist
ifaccdist_calculation=='NONE'
accdist_f:=accdist_nf
elseifaccdist_calculation=='Leniorregression'
accdist_f:=ta.linreg(accdist_nf,look_back_period,0)
elseifaccdist_calculation=='SimpleMovingAverage(SMA)'
accdist_f:=ta.sma(accdist_nf,look_back_period)
elseifaccdist_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
accdist_f:=ta.ema(accdist_nf,look_back_period)
elseifaccdist_calculation=='HullMovingAverage(HMA)'
accdist_f:=ta.hma(accdist_nf,look_back_period)
elseifaccdist_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
accdist_f:=ta.rma(accdist_nf,look_back_period)
elseifaccdist_calculation=='WeightedMovingAverage(WMA)'
accdist_f:=ta.wma(accdist_nf,look_back_period)
elseifaccdist_calculation=='ArnaudLegouxMovingAverage(ALMA)'
accdist_f:=ta.alma(accdist_nf,look_back_period,0,3)
elseifaccdist_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
accdist_f:=ta.swma(accdist_nf)
elseifaccdist_calculation=='Volume-weightedMovingAverage(VWMA)'
accdist_f:=ta.vwma(accdist_nf,look_back_period)
indicator_accdist_14=accdist_f
[middle_accdist_14,upper_accdist_14,lower_accdist_14]=ta.bb(indicator_accdist_14,5,4)
bb_gap_of_accdist_14=indicator_accdist_14-middle_accdist_14
st_dev_of_bb_gap_of_accdist_14=ta.stdev(bb_gap_of_accdist_14,look_back_period)
st_dev_of_indicator_accdist_14=ta.stdev(indicator_accdist_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_accdist_14=ta.correlation(indicator_accdist_14,price_avg_14,look_back_period)
first_degree_indicator_accdist_14=st_dev_of_indicator_accdist_14*corelation_btw_price_avg_14_and_indicator_accdist_14*st_dev_of_bb_gap_of_accdist_14
//IntradayIntensityIndex
varfloatiii_f=0
iii_nf=ta.iii
ifiii_calculation=='NONE'
iii_f:=iii_nf
elseifiii_calculation=='Leniorregression'
iii_f:=ta.linreg(iii_nf,look_back_period,0)
elseifiii_calculation=='SimpleMovingAverage(SMA)'
iii_f:=ta.sma(iii_nf,look_back_period)
elseifiii_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
iii_f:=ta.ema(iii_nf,look_back_period)
elseifiii_calculation=='HullMovingAverage(HMA)'
iii_f:=ta.hma(iii_nf,look_back_period)
elseifiii_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
iii_f:=ta.rma(iii_nf,look_back_period)
elseifiii_calculation=='WeightedMovingAverage(WMA)'
iii_f:=ta.wma(iii_nf,look_back_period)
elseifiii_calculation=='ArnaudLegouxMovingAverage(ALMA)'
iii_f:=ta.alma(iii_nf,look_back_period,0,3)
elseifiii_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
iii_f:=ta.swma(iii_nf)
elseifiii_calculation=='Volume-weightedMovingAverage(VWMA)'
iii_f:=ta.vwma(iii_nf,look_back_period)
indicator_iii_14=iii_f
[middle_iii_14,upper_iii_14,lower_iii_14]=ta.bb(indicator_iii_14,5,4)
bb_gap_of_iii_14=indicator_iii_14-middle_iii_14
st_dev_of_bb_gap_of_iii_14=ta.stdev(bb_gap_of_iii_14,look_back_period)
st_dev_of_indicator_iii_14=ta.stdev(indicator_iii_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_iii_14=ta.correlation(indicator_iii_14,price_avg_14,look_back_period)
first_degree_indicator_iii_14=st_dev_of_indicator_iii_14*corelation_btw_price_avg_14_and_indicator_iii_14*st_dev_of_bb_gap_of_iii_14
//NegativeVolumeIndex
varfloatnvi_f=0
nvi_nf=ta.nvi
ifnvi_calculation=='NONE'
nvi_f:=nvi_nf
elseifnvi_calculation=='Leniorregression'
nvi_f:=ta.linreg(nvi_nf,look_back_period,0)
elseifnvi_calculation=='SimpleMovingAverage(SMA)'
nvi_f:=ta.sma(nvi_nf,look_back_period)
elseifnvi_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
nvi_f:=ta.ema(nvi_nf,look_back_period)
elseifnvi_calculation=='HullMovingAverage(HMA)'
nvi_f:=ta.hma(nvi_nf,look_back_period)
elseifnvi_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
nvi_f:=ta.rma(nvi_nf,look_back_period)
elseifnvi_calculation=='WeightedMovingAverage(WMA)'
nvi_f:=ta.wma(nvi_nf,look_back_period)
elseifnvi_calculation=='ArnaudLegouxMovingAverage(ALMA)'
nvi_f:=ta.alma(nvi_nf,look_back_period,0,3)
elseifnvi_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
nvi_f:=ta.swma(nvi_nf)
elseifnvi_calculation=='Volume-weightedMovingAverage(VWMA)'
nvi_f:=ta.vwma(nvi_nf,look_back_period)
indicator_nvi_14=nvi_f
[middle_nvi_14,upper_nvi_14,lower_nvi_14]=ta.bb(indicator_nvi_14,5,4)
bb_gap_of_nvi_14=indicator_nvi_14-middle_nvi_14
st_dev_of_bb_gap_of_nvi_14=ta.stdev(bb_gap_of_nvi_14,look_back_period)
st_dev_of_indicator_nvi_14=ta.stdev(indicator_nvi_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_nvi_14=ta.correlation(indicator_nvi_14,price_avg_14,look_back_period)
first_degree_indicator_nvi_14=st_dev_of_indicator_nvi_14*corelation_btw_price_avg_14_and_indicator_nvi_14*st_dev_of_bb_gap_of_nvi_14
//PositiveVolumeIndex
varfloatpvi_f=0
pvi_nf=ta.pvi
ifpvi_calculation=='NONE'
pvi_f:=pvi_nf
elseifpvi_calculation=='Leniorregression'
pvi_f:=ta.linreg(pvi_nf,look_back_period,0)
elseifpvi_calculation=='SimpleMovingAverage(SMA)'
pvi_f:=ta.sma(pvi_nf,look_back_period)
elseifpvi_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
pvi_f:=ta.ema(pvi_nf,look_back_period)
elseifpvi_calculation=='HullMovingAverage(HMA)'
pvi_f:=ta.hma(pvi_nf,look_back_period)
elseifpvi_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
pvi_f:=ta.rma(pvi_nf,look_back_period)
elseifpvi_calculation=='WeightedMovingAverage(WMA)'
pvi_f:=ta.wma(pvi_nf,look_back_period)
elseifpvi_calculation=='ArnaudLegouxMovingAverage(ALMA)'
pvi_f:=ta.alma(pvi_nf,look_back_period,0,3)
elseifpvi_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
pvi_f:=ta.swma(pvi_nf)
elseifpvi_calculation=='Volume-weightedMovingAverage(VWMA)'
pvi_f:=ta.vwma(pvi_nf,look_back_period)
indicator_pvi_14=pvi_f
[middle_pvi_14,upper_pvi_14,lower_pvi_14]=ta.bb(indicator_pvi_14,5,4)
bb_gap_of_pvi_14=indicator_pvi_14-middle_pvi_14
st_dev_of_bb_gap_of_pvi_14=ta.stdev(bb_gap_of_pvi_14,look_back_period)
st_dev_of_indicator_pvi_14=ta.stdev(indicator_pvi_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_pvi_14=ta.correlation(indicator_pvi_14,price_avg_14,look_back_period)
first_degree_indicator_pvi_14=st_dev_of_indicator_pvi_14*corelation_btw_price_avg_14_and_indicator_pvi_14*st_dev_of_bb_gap_of_pvi_14
//OnBalanceVolume
varfloatobv_f=0
obv_nf=ta.obv
ifobv_calculation=='NONE'
obv_f:=obv_nf
elseifobv_calculation=='Leniorregression'
obv_f:=ta.linreg(obv_nf,look_back_period,0)
elseifobv_calculation=='SimpleMovingAverage(SMA)'
obv_f:=ta.sma(obv_nf,look_back_period)
elseifobv_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
obv_f:=ta.ema(obv_nf,look_back_period)
elseifobv_calculation=='HullMovingAverage(HMA)'
obv_f:=ta.hma(obv_nf,look_back_period)
elseifobv_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
obv_f:=ta.rma(obv_nf,look_back_period)
elseifobv_calculation=='WeightedMovingAverage(WMA)'
obv_f:=ta.wma(obv_nf,look_back_period)
elseifobv_calculation=='ArnaudLegouxMovingAverage(ALMA)'
obv_f:=ta.alma(obv_nf,look_back_period,0,3)
elseifobv_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
obv_f:=ta.swma(obv_nf)
elseifobv_calculation=='Volume-weightedMovingAverage(VWMA)'
obv_f:=ta.vwma(obv_nf,look_back_period)
indicator_obv_14=obv_f
[middle_obv_14,upper_obv_14,lower_obv_14]=ta.bb(indicator_obv_14,5,4)
bb_gap_of_obv_14=indicator_obv_14-middle_obv_14
st_dev_of_bb_gap_of_obv_14=ta.stdev(bb_gap_of_obv_14,look_back_period)
st_dev_of_indicator_obv_14=ta.stdev(indicator_obv_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_obv_14=ta.correlation(indicator_obv_14,price_avg_14,look_back_period)
first_degree_indicator_obv_14=st_dev_of_indicator_obv_14*corelation_btw_price_avg_14_and_indicator_obv_14*st_dev_of_bb_gap_of_obv_14
//Price-VolumeTrend
varfloatpvt_f=0
pvt_nf=ta.pvt
ifpvt_calculation=='NONE'
pvt_f:=pvt_nf
elseifpvt_calculation=='Leniorregression'
pvt_f:=ta.linreg(pvt_nf,look_back_period,0)
elseifpvt_calculation=='SimpleMovingAverage(SMA)'
pvt_f:=ta.sma(pvt_nf,look_back_period)
elseifpvt_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
pvt_f:=ta.ema(pvt_nf,look_back_period)
elseifpvt_calculation=='HullMovingAverage(HMA)'
pvt_f:=ta.hma(pvt_nf,look_back_period)
elseifpvt_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
pvt_f:=ta.rma(pvt_nf,look_back_period)
elseifpvt_calculation=='WeightedMovingAverage(WMA)'
pvt_f:=ta.wma(pvt_nf,look_back_period)
elseifpvt_calculation=='ArnaudLegouxMovingAverage(ALMA)'
pvt_f:=ta.alma(pvt_nf,look_back_period,0,3)
elseifpvt_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
pvt_f:=ta.swma(pvt_nf)
elseifpvt_calculation=='Volume-weightedMovingAverage(VWMA)'
pvt_f:=ta.vwma(pvt_nf,look_back_period)
indicator_pvt_14=pvt_f
[middle_pvt_14,upper_pvt_14,lower_pvt_14]=ta.bb(indicator_pvt_14,5,4)
bb_gap_of_pvt_14=indicator_pvt_14-middle_pvt_14
st_dev_of_bb_gap_of_pvt_14=ta.stdev(bb_gap_of_pvt_14,look_back_period)
st_dev_of_indicator_pvt_14=ta.stdev(indicator_pvt_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_pvt_14=ta.correlation(indicator_pvt_14,price_avg_14,look_back_period)
first_degree_indicator_pvt_14=st_dev_of_indicator_pvt_14*corelation_btw_price_avg_14_and_indicator_pvt_14*st_dev_of_bb_gap_of_pvt_14
//Truerange
varfloattr_f=0
tr_nf=ta.tr
iftr_calculation=='NONE'
tr_f:=tr_nf
elseiftr_calculation=='Leniorregression'
tr_f:=ta.linreg(tr_nf,look_back_period,0)
elseiftr_calculation=='SimpleMovingAverage(SMA)'
tr_f:=ta.sma(tr_nf,look_back_period)
elseiftr_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
tr_f:=ta.ema(tr_nf,look_back_period)
elseiftr_calculation=='HullMovingAverage(HMA)'
tr_f:=ta.hma(tr_nf,look_back_period)
elseiftr_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
tr_f:=ta.rma(tr_nf,look_back_period)
elseiftr_calculation=='WeightedMovingAverage(WMA)'
tr_f:=ta.wma(tr_nf,look_back_period)
elseiftr_calculation=='ArnaudLegouxMovingAverage(ALMA)'
tr_f:=ta.alma(tr_nf,look_back_period,0,3)
elseiftr_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
tr_f:=ta.swma(tr_nf)
elseiftr_calculation=='Volume-weightedMovingAverage(VWMA)'
tr_f:=ta.vwma(tr_nf,look_back_period)
indicator_tr_14=tr_f
[middle_tr_14,upper_tr_14,lower_tr_14]=ta.bb(indicator_tr_14,5,4)
bb_gap_of_tr_14=indicator_tr_14-middle_tr_14
st_dev_of_bb_gap_of_tr_14=ta.stdev(bb_gap_of_tr_14,look_back_period)
st_dev_of_indicator_tr_14=ta.stdev(indicator_tr_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_tr_14=ta.correlation(indicator_tr_14,price_avg_14,look_back_period)
first_degree_indicator_tr_14=st_dev_of_indicator_tr_14*corelation_btw_price_avg_14_and_indicator_tr_14*st_dev_of_bb_gap_of_tr_14
//Volume-weightedaverageprice
varfloatvwap_f=0
vwap_nf=ta.vwap
ifvwap_calculation=='NONE'
vwap_f:=vwap_nf
elseifvwap_calculation=='Leniorregression'
vwap_f:=ta.linreg(vwap_nf,look_back_period,0)
elseifvwap_calculation=='SimpleMovingAverage(SMA)'
vwap_f:=ta.sma(vwap_nf,look_back_period)
elseifvwap_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
vwap_f:=ta.ema(vwap_nf,look_back_period)
elseifvwap_calculation=='HullMovingAverage(HMA)'
vwap_f:=ta.hma(vwap_nf,look_back_period)
elseifvwap_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
vwap_f:=ta.rma(vwap_nf,look_back_period)
elseifvwap_calculation=='WeightedMovingAverage(WMA)'
vwap_f:=ta.wma(vwap_nf,look_back_period)
elseifvwap_calculation=='ArnaudLegouxMovingAverage(ALMA)'
vwap_f:=ta.alma(vwap_nf,look_back_period,0,3)
elseifvwap_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
vwap_f:=ta.swma(vwap_nf)
elseifvwap_calculation=='Volume-weightedMovingAverage(VWMA)'
vwap_f:=ta.vwma(vwap_nf,look_back_period)
indicator_vwap_14=vwap_f
[middle_vwap_14,upper_vwap_14,lower_vwap_14]=ta.bb(indicator_vwap_14,5,4)
bb_gap_of_vwap_14=indicator_vwap_14-middle_vwap_14
st_dev_of_bb_gap_of_vwap_14=ta.stdev(bb_gap_of_vwap_14,look_back_period)
st_dev_of_indicator_vwap_14=ta.stdev(indicator_vwap_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_vwap_14=ta.correlation(indicator_vwap_14,price_avg_14,look_back_period)
first_degree_indicator_vwap_14=st_dev_of_indicator_vwap_14*corelation_btw_price_avg_14_and_indicator_vwap_14*st_dev_of_bb_gap_of_vwap_14
//WilliamsAccumulation/Distribution
varfloatwad_f=0
wad_nf=ta.wad
ifwad_calculation=='NONE'
wad_f:=wad_nf
elseifwad_calculation=='Leniorregression'
wad_f:=ta.linreg(wad_nf,look_back_period,0)
elseifwad_calculation=='SimpleMovingAverage(SMA)'
wad_f:=ta.sma(wad_nf,look_back_period)
elseifwad_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
wad_f:=ta.ema(wad_nf,look_back_period)
elseifwad_calculation=='HullMovingAverage(HMA)'
wad_f:=ta.hma(wad_nf,look_back_period)
elseifwad_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
wad_f:=ta.rma(wad_nf,look_back_period)
elseifwad_calculation=='WeightedMovingAverage(WMA)'
wad_f:=ta.wma(wad_nf,look_back_period)
elseifwad_calculation=='ArnaudLegouxMovingAverage(ALMA)'
wad_f:=ta.alma(wad_nf,look_back_period,0,3)
elseifwad_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
wad_f:=ta.swma(wad_nf)
elseifwad_calculation=='Volume-weightedMovingAverage(VWMA)'
wad_f:=ta.vwma(wad_nf,look_back_period)
indicator_wad_14=wad_f
[middle_wad_14,upper_wad_14,lower_wad_14]=ta.bb(indicator_wad_14,5,4)
bb_gap_of_wad_14=indicator_wad_14-middle_wad_14
st_dev_of_bb_gap_of_wad_14=ta.stdev(bb_gap_of_wad_14,look_back_period)
st_dev_of_indicator_wad_14=ta.stdev(indicator_wad_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_wad_14=ta.correlation(indicator_wad_14,price_avg_14,look_back_period)
first_degree_indicator_wad_14=st_dev_of_indicator_wad_14*corelation_btw_price_avg_14_and_indicator_wad_14*st_dev_of_bb_gap_of_wad_14
//WilliamsVariableAccumulation/Distribution
varfloatwvad_f=0
wvad_nf=ta.wvad
ifwvad_calculation=='NONE'
wvad_f:=wvad_nf
elseifwvad_calculation=='Leniorregression'
wvad_f:=ta.linreg(wvad_nf,look_back_period,0)
elseifwvad_calculation=='SimpleMovingAverage(SMA)'
wvad_f:=ta.sma(wvad_nf,look_back_period)
elseifwvad_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
wvad_f:=ta.ema(wvad_nf,look_back_period)
elseifwvad_calculation=='HullMovingAverage(HMA)'
wvad_f:=ta.hma(wvad_nf,look_back_period)
elseifwvad_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
wvad_f:=ta.rma(wvad_nf,look_back_period)
elseifwvad_calculation=='WeightedMovingAverage(WMA)'
wvad_f:=ta.wma(wvad_nf,look_back_period)
elseifwvad_calculation=='ArnaudLegouxMovingAverage(ALMA)'
wvad_f:=ta.alma(wvad_nf,look_back_period,0,3)
elseifwvad_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
wvad_f:=ta.swma(wvad_nf)
elseifwvad_calculation=='Volume-weightedMovingAverage(VWMA)'
wvad_f:=ta.vwma(wvad_nf,look_back_period)
indicator_wvad_14=wvad_f
[middle_wvad_14,upper_wvad_14,lower_wvad_14]=ta.bb(indicator_wvad_14,5,4)
bb_gap_of_wvad_14=indicator_wvad_14-middle_wvad_14
st_dev_of_bb_gap_of_wvad_14=ta.stdev(bb_gap_of_wvad_14,look_back_period)
st_dev_of_indicator_wvad_14=ta.stdev(indicator_wvad_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_wvad_14=ta.correlation(indicator_wvad_14,price_avg_14,look_back_period)
first_degree_indicator_wvad_14=st_dev_of_indicator_wvad_14*corelation_btw_price_avg_14_and_indicator_wvad_14*st_dev_of_bb_gap_of_wvad_14
//SimpleMovingAverage
indicator_sma_14=ta.sma(source_of_sma,look_back_period)-ta.sma(source_of_sma,200)
[middle_sma_14,upper_sma_14,lower_sma_14]=ta.bb(indicator_sma_14,5,4)
bb_gap_of_sma_14=indicator_sma_14-middle_sma_14
st_dev_of_bb_gap_of_sma_14=ta.stdev(bb_gap_of_sma_14,look_back_period)
st_dev_of_indicator_sma_14=ta.stdev(indicator_sma_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_sma_14=ta.correlation(indicator_sma_14,price_avg_14,look_back_period)
first_degree_indicator_sma_14=st_dev_of_indicator_sma_14*corelation_btw_price_avg_14_and_indicator_sma_14*st_dev_of_bb_gap_of_sma_14
//ExponentialMovingAverage
indicator_ema_14=ta.ema(source_of_ema,look_back_period)-ta.sma(source_of_ema,200)
[middle_ema_14,upper_ema_14,lower_ema_14]=ta.bb(indicator_ema_14,5,4)
bb_gap_of_ema_14=indicator_ema_14-middle_ema_14
st_dev_of_bb_gap_of_ema_14=ta.stdev(bb_gap_of_ema_14,look_back_period)
st_dev_of_indicator_ema_14=ta.stdev(indicator_ema_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_ema_14=ta.correlation(indicator_ema_14,price_avg_14,look_back_period)
first_degree_indicator_ema_14=st_dev_of_indicator_ema_14*corelation_btw_price_avg_14_and_indicator_ema_14*st_dev_of_bb_gap_of_ema_14
//CCI(commoditychannelindex)
indicator_cci_14=ta.cci(source_of_cci,look_back_period)
[middle_cci_14,upper_cci_14,lower_cci_14]=ta.bb(indicator_cci_14,5,4)
bb_gap_of_cci_14=indicator_cci_14-middle_cci_14
st_dev_of_bb_gap_of_cci_14=ta.stdev(bb_gap_of_cci_14,look_back_period)
st_dev_of_indicator_cci_14=ta.stdev(indicator_cci_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_cci_14=ta.correlation(indicator_cci_14,price_avg_14,look_back_period)
first_degree_indicator_cci_14=st_dev_of_indicator_cci_14*corelation_btw_price_avg_14_and_indicator_cci_14*st_dev_of_bb_gap_of_cci_14
//ChopZone
source=source_of_cz
avg=source_of_cz_avg
varfloatema34_f=0
cz_nf=ta.ema(source,34)
ifcz_calculation=='Leniorregression'
ema34_f:=ta.linreg(cz_nf,look_back_period,0)
elseifcz_calculation=='SimpleMovingAverage(SMA)'
ema34_f:=ta.sma(cz_nf,look_back_period)
elseifcz_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
ema34_f:=cz_nf
elseifcz_calculation=='HullMovingAverage(HMA)'
ema34_f:=ta.hma(cz_nf,look_back_period)
elseifcz_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
ema34_f:=ta.rma(cz_nf,look_back_period)
elseifcz_calculation=='WeightedMovingAverage(WMA)'
ema34_f:=ta.wma(cz_nf,look_back_period)
elseifcz_calculation=='ArnaudLegouxMovingAverage(ALMA)'
ema34_f:=ta.alma(cz_nf,look_back_period,0,3)
elseifcz_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
ema34_f:=ta.swma(cz_nf)
elseifcz_calculation=='Volume-weightedMovingAverage(VWMA)'
ema34_f:=ta.vwma(cz_nf,look_back_period)
pi=math.atan(1)*4
periods=30
highestHigh=ta.highest(periods)
lowestLow=ta.lowest(periods)
span=25/(highestHigh-lowestLow)*lowestLow
ema34=ema34_f
x1_ema34=0
x2_ema34=1
y1_ema34=0
y2_ema34=(ema34[1]-ema34)/avg*span
c_ema34=math.sqrt((x2_ema34-x1_ema34)*(x2_ema34-x1_ema34)+(y2_ema34-y1_ema34)*(y2_ema34-y1_ema34))
emaAngle_1=math.round(180*math.acos((x2_ema34-x1_ema34)/c_ema34)/pi)
emaAngle=y2_ema34>0?-emaAngle_1:emaAngle_1
indicator_chop_zone_14=emaAngle
[middle_chop_zone_14,upper_chop_zone_14,lower_chop_zone_14]=ta.bb(indicator_chop_zone_14,5,4)
bb_gap_of_chop_zone_14=indicator_chop_zone_14-middle_chop_zone_14
st_dev_of_bb_gap_of_chop_zone_14=ta.stdev(bb_gap_of_chop_zone_14,look_back_period)
st_dev_of_indicator_chop_zone_14=ta.stdev(indicator_chop_zone_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_chop_zone_14=ta.correlation(indicator_chop_zone_14,price_avg_14,look_back_period)
first_degree_indicator_chop_zone_14=st_dev_of_indicator_chop_zone_14*corelation_btw_price_avg_14_and_indicator_chop_zone_14*st_dev_of_bb_gap_of_chop_zone_14
//EaseofMovement
varcumVol=0.
cumVol+=nz(volume)
ifbarstate.islastandcumVol==0
runtime.error("Novolumeisprovidedbythedatavendor.")
div=10000//input.int(10000,title="Divisor",minval=1)
eom_nf=(div*ta.change(source_of_eom)*(high-low)/volume)
varfloateom_f=0
ifeom_calculation=='Leniorregression'
eom_f:=ta.linreg(eom_nf,look_back_period,0)
elseifeom_calculation=='SimpleMovingAverage(SMA)'
eom_f:=ta.sma(eom_nf,look_back_period)
elseifeom_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
eom_f:=eom_nf
elseifeom_calculation=='HullMovingAverage(HMA)'
eom_f:=ta.hma(eom_nf,look_back_period)
elseifeom_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
eom_f:=ta.rma(eom_nf,look_back_period)
elseifeom_calculation=='WeightedMovingAverage(WMA)'
eom_f:=ta.wma(eom_nf,look_back_period)
elseifeom_calculation=='ArnaudLegouxMovingAverage(ALMA)'
eom_f:=ta.alma(eom_nf,look_back_period,0,3)
elseifeom_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
eom_f:=ta.swma(eom_nf)
elseifeom_calculation=='Volume-weightedMovingAverage(VWMA)'
eom_f:=ta.vwma(eom_nf,look_back_period)
eom=eom_f
indicator_eom_14=eom
[middle_eom_14,upper_eom_14,lower_eom_14]=ta.bb(indicator_eom_14,5,4)
bb_gap_of_eom_14=indicator_eom_14-middle_eom_14
st_dev_of_bb_gap_of_eom_14=ta.stdev(bb_gap_of_eom_14,look_back_period)
st_dev_of_indicator_eom_14=ta.stdev(indicator_eom_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_eom_14=ta.correlation(indicator_eom_14,price_avg_14,look_back_period)
first_degree_indicator_eom_14=st_dev_of_indicator_eom_14*corelation_btw_price_avg_14_and_indicator_eom_14*st_dev_of_bb_gap_of_eom_14
//DetrendedPriceOscillator
varfloatma_f=0
ma_nf=ta.sma(source_of_dpo,look_back_period)
ifdpo_calculation=='Leniorregression'
ma_f:=ta.linreg(ma_nf,look_back_period,0)
elseifdpo_calculation=='SimpleMovingAverage(SMA)'
ma_f:=ta.sma(source_of_dpo,look_back_period)
elseifdpo_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
ma_f:=ta.ema(source_of_dpo,look_back_period)
elseifdpo_calculation=='HullMovingAverage(HMA)'
ma_f:=ta.hma(source_of_dpo,look_back_period)
elseifdpo_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
ma_f:=ta.rma(source_of_dpo,look_back_period)
elseifdpo_calculation=='WeightedMovingAverage(WMA)'
ma_f:=ta.wma(source_of_dpo,look_back_period)
elseifdpo_calculation=='ArnaudLegouxMovingAverage(ALMA)'
ma_f:=ta.alma(source_of_dpo,look_back_period,0,3)
elseifdpo_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
ma_f:=ta.swma(source_of_dpo)
elseifdpo_calculation=='Volume-weightedMovingAverage(VWMA)'
ma_f:=ta.vwma(source_of_dpo,look_back_period)
barsback=look_back_period/2+1
ma=ma_f
dpo=isCentered?close[barsback]-ma:close-ma[barsback]
indicator_dpo_14=dpo
[middle_dpo_14,upper_dpo_14,lower_dpo_14]=ta.bb(indicator_dpo_14,5,4)
bb_gap_of_dpo_14=indicator_dpo_14-middle_dpo_14
st_dev_of_bb_gap_of_dpo_14=ta.stdev(bb_gap_of_dpo_14,look_back_period)
st_dev_of_indicator_dpo_14=ta.stdev(indicator_dpo_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_dpo_14=ta.correlation(indicator_dpo_14,price_avg_14,look_back_period)
first_degree_indicator_dpo_14=st_dev_of_indicator_dpo_14*corelation_btw_price_avg_14_and_indicator_dpo_14*st_dev_of_bb_gap_of_dpo_14
//AdvanceDeclineLine
sym(s)=>request.security(s,timeframe.period,source_of_adl)
difference=(sym("USI:ADVN.NY")-sym("USI:DECL.NY"))/(sym("USI:UNCH.NY")+1)
adline=ta.cum(difference>0?math.sqrt(difference):-math.sqrt(-difference))
indicator_adl_14=adline
[middle_adl_14,upper_adl_14,lower_adl_14]=ta.bb(indicator_adl_14,5,4)
bb_gap_of_adl_14=indicator_adl_14-middle_adl_14
st_dev_of_bb_gap_of_adl_14=ta.stdev(bb_gap_of_adl_14,look_back_period)
st_dev_of_indicator_adl_14=ta.stdev(indicator_adl_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_adl_14=ta.correlation(indicator_adl_14,price_avg_14,look_back_period)
first_degree_indicator_adl_14=st_dev_of_indicator_adl_14*corelation_btw_price_avg_14_and_indicator_adl_14*st_dev_of_bb_gap_of_adl_14
//BullBearPower
varfloatbullp_f=0
varfloatbearp_f=0
bullp_nf=ta.ema(source_of_cal_bullp,look_back_period)
bearp_nf=ta.ema(source_of_cal_bullp,look_back_period)
ifbullp_calculation=='Leniorregression'
bullp_f:=ta.linreg(bullp_nf,look_back_period,0)
elseifbullp_calculation=='SimpleMovingAverage(SMA)'
bullp_f:=ta.sma(source_of_bullp,look_back_period)
elseifbullp_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
bullp_f:=ta.ema(source_of_bullp,look_back_period)
elseifbullp_calculation=='HullMovingAverage(HMA)'
bullp_f:=ta.hma(source_of_bullp,look_back_period)
elseifbullp_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
bullp_f:=ta.rma(source_of_bullp,look_back_period)
elseifbullp_calculation=='WeightedMovingAverage(WMA)'
bullp_f:=ta.wma(source_of_bullp,look_back_period)
elseifbullp_calculation=='ArnaudLegouxMovingAverage(ALMA)'
bullp_f:=ta.alma(source_of_bullp,look_back_period,0,3)
elseifbullp_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
bullp_f:=ta.swma(source_of_bullp)
elseifbullp_calculation=='Volume-weightedMovingAverage(VWMA)'
bullp_f:=ta.vwma(source_of_bullp,look_back_period)
ifbearp_calculation=='Leniorregression'
bearp_f:=ta.linreg(bearp_nf,look_back_period,0)
elseifbearp_calculation=='SimpleMovingAverage(SMA)'
bearp_f:=ta.sma(source_of_bearp,look_back_period)
elseifbearp_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
bearp_f:=ta.ema(source_of_bearp,look_back_period)
elseifbearp_calculation=='HullMovingAverage(HMA)'
bearp_f:=ta.hma(source_of_bearp,look_back_period)
elseifbearp_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
bearp_f:=ta.rma(source_of_bearp,look_back_period)
elseifbearp_calculation=='WeightedMovingAverage(WMA)'
bearp_f:=ta.wma(source_of_bearp,look_back_period)
elseifbearp_calculation=='ArnaudLegouxMovingAverage(ALMA)'
bearp_f:=ta.alma(source_of_bearp,look_back_period,0,3)
elseifbearp_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
bearp_f:=ta.swma(source_of_bearp)
elseifbearp_calculation=='Volume-weightedMovingAverage(VWMA)'
bearp_f:=ta.vwma(source_of_bearp,look_back_period)
bullPower=source_of_bullp-bullp_f
bearPower=source_of_bearp-bearp_f
indicator_bbp_14=bullPower+bearPower
[middle_bbp_14,upper_bbp_14,lower_bbp_14]=ta.bb(indicator_bbp_14,5,4)
bb_gap_of_bbp_14=indicator_bbp_14-middle_bbp_14
st_dev_of_bb_gap_of_bbp_14=ta.stdev(bb_gap_of_bbp_14,look_back_period)
st_dev_of_indicator_bbp_14=ta.stdev(indicator_bbp_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_bbp_14=ta.correlation(indicator_bbp_14,price_avg_14,look_back_period)
first_degree_indicator_bbp_14=st_dev_of_indicator_bbp_14*corelation_btw_price_avg_14_and_indicator_bbp_14*st_dev_of_bb_gap_of_bbp_14
//high
varfloathigh_f=0
ifhigh_impact_calculation=='Leniorregression'
high_f:=ta.linreg(high,look_back_period,0)
elseifhigh_impact_calculation=='SimpleMovingAverage(SMA)'
high_f:=ta.sma(high,look_back_period)
elseifhigh_impact_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
high_f:=ta.ema(high,look_back_period)
elseifhigh_impact_calculation=='HullMovingAverage(HMA)'
high_f:=ta.hma(high,look_back_period)
elseifhigh_impact_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
high_f:=ta.rma(high,look_back_period)
elseifhigh_impact_calculation=='WeightedMovingAverage(WMA)'
high_f:=ta.wma(high,look_back_period)
elseifhigh_impact_calculation=='ArnaudLegouxMovingAverage(ALMA)'
high_f:=ta.alma(high,look_back_period,0,3)
elseifhigh_impact_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
high_f:=ta.swma(high)
elseifhigh_impact_calculation=='Volume-weightedMovingAverage(VWMA)'
high_f:=ta.vwma(high,look_back_period)
indicator_high_14=high_f
[middle_high_14,upper_high_14,lower_high_14]=ta.bb(indicator_high_14,5,4)
bb_gap_of_high_14=indicator_high_14-middle_high_14
st_dev_of_bb_gap_of_high_14=ta.stdev(bb_gap_of_high_14,look_back_period)
st_dev_of_indicator_high_14=ta.stdev(indicator_high_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_high_14=ta.correlation(indicator_high_14,price_avg_14,look_back_period)
first_degree_indicator_high_14=st_dev_of_indicator_high_14*corelation_btw_price_avg_14_and_indicator_high_14*st_dev_of_bb_gap_of_high_14
//low
varfloatlow_f=0
iflow_impact_calculation=='Leniorregression'
low_f:=ta.linreg(low,look_back_period,0)
elseiflow_impact_calculation=='SimpleMovingAverage(SMA)'
low_f:=ta.sma(low,look_back_period)
elseiflow_impact_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
low_f:=ta.ema(low,look_back_period)
elseiflow_impact_calculation=='HullMovingAverage(HMA)'
low_f:=ta.hma(low,look_back_period)
elseiflow_impact_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
low_f:=ta.rma(low,look_back_period)
elseiflow_impact_calculation=='WeightedMovingAverage(WMA)'
low_f:=ta.wma(low,look_back_period)
elseiflow_impact_calculation=='ArnaudLegouxMovingAverage(ALMA)'
low_f:=ta.alma(low,look_back_period,0,3)
elseiflow_impact_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
low_f:=ta.swma(low)
elseiflow_impact_calculation=='Volume-weightedMovingAverage(VWMA)'
low_f:=ta.vwma(low,look_back_period)
indicator_low_14=low_f
[middle_low_14,upper_low_14,lower_low_14]=ta.bb(indicator_low_14,5,4)
bb_gap_of_low_14=indicator_low_14-middle_low_14
st_dev_of_bb_gap_of_low_14=ta.stdev(bb_gap_of_low_14,look_back_period)
st_dev_of_indicator_low_14=ta.stdev(indicator_low_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_low_14=ta.correlation(indicator_low_14,price_avg_14,look_back_period)
first_degree_indicator_low_14=st_dev_of_indicator_low_14*corelation_btw_price_avg_14_and_indicator_low_14*st_dev_of_bb_gap_of_low_14
//open
varfloatopen_f=0
ifopen_impact_calculation=='Leniorregression'
open_f:=ta.linreg(open,look_back_period,0)
elseifopen_impact_calculation=='SimpleMovingAverage(SMA)'
open_f:=ta.sma(open,look_back_period)
elseifopen_impact_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
open_f:=ta.ema(open,look_back_period)
elseifopen_impact_calculation=='HullMovingAverage(HMA)'
open_f:=ta.hma(open,look_back_period)
elseifopen_impact_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
open_f:=ta.rma(open,look_back_period)
elseifopen_impact_calculation=='WeightedMovingAverage(WMA)'
open_f:=ta.wma(open,look_back_period)
elseifopen_impact_calculation=='ArnaudLegouxMovingAverage(ALMA)'
open_f:=ta.alma(open,look_back_period,0,3)
elseifopen_impact_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
open_f:=ta.swma(open)
elseifopen_impact_calculation=='Volume-weightedMovingAverage(VWMA)'
open_f:=ta.vwma(open,look_back_period)
indicator_open_14=open_f
[middle_open_14,upper_open_14,lower_open_14]=ta.bb(indicator_open_14,5,4)
bb_gap_of_open_14=indicator_open_14-middle_open_14
st_dev_of_bb_gap_of_open_14=ta.stdev(bb_gap_of_open_14,look_back_period)
st_dev_of_indicator_open_14=ta.stdev(indicator_open_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_open_14=ta.correlation(indicator_open_14,price_avg_14,look_back_period)
first_degree_indicator_open_14=st_dev_of_indicator_open_14*corelation_btw_price_avg_14_and_indicator_open_14*st_dev_of_bb_gap_of_open_14
//close
varfloatclose_f=0
ifclose_impact_calculation=='Leniorregression'
close_f:=ta.linreg(close,look_back_period,0)
elseifclose_impact_calculation=='SimpleMovingAverage(SMA)'
close_f:=ta.sma(close,look_back_period)
elseifclose_impact_calculation=='ExponentiallyWeightedMovingAverage(EMA)'
close_f:=ta.ema(close,look_back_period)
elseifclose_impact_calculation=='HullMovingAverage(HMA)'
close_f:=ta.hma(close,look_back_period)
elseifclose_impact_calculation=='ExponentiallyWeightedMovingaveragewithalphalength(RMA)'
close_f:=ta.rma(close,look_back_period)
elseifclose_impact_calculation=='WeightedMovingAverage(WMA)'
close_f:=ta.wma(close,look_back_period)
elseifclose_impact_calculation=='ArnaudLegouxMovingAverage(ALMA)'
close_f:=ta.alma(close,look_back_period,0,3)
elseifclose_impact_calculation=='Symmetricallyweightedmovingaveragewithfixedlength(SWMA)'
close_f:=ta.swma(close)
elseifclose_impact_calculation=='Volume-weightedMovingAverage(VWMA)'
close_f:=ta.vwma(close,look_back_period)
indicator_close_14=close_f
[middle_close_14,upper_close_14,lower_close_14]=ta.bb(indicator_close_14,5,4)
bb_gap_of_close_14=indicator_close_14-middle_close_14
st_dev_of_bb_gap_of_close_14=ta.stdev(bb_gap_of_close_14,look_back_period)
st_dev_of_indicator_close_14=ta.stdev(indicator_close_14,look_back_period)
corelation_btw_price_avg_14_and_indicator_close_14=ta.correlation(indicator_close_14,price_avg_14,look_back_period)
first_degree_indicator_close_14=st_dev_of_indicator_close_14*corelation_btw_price_avg_14_and_indicator_close_14*st_dev_of_bb_gap_of_close_14
//Primaryindicator
all_indicators_final_graph=first_degree_indicator_sar_14+first_degree_indicator_st_14+first_degree_indicator_rsi_14+first_degree_indicator_mfi_14+first_degree_indicator_bop_14+first_degree_indicator_mom_14+first_degree_indicator_cog_14+first_degree_indicator_dmi_14+first_degree_indicator_stoch_14+first_degree_indicator_swma_14+first_degree_indicator_wpr_14+first_degree_indicator_tsi_14+first_degree_indicator_iii_14+first_degree_indicator_nvi_14+first_degree_indicator_pvi_14+first_degree_indicator_obv_14+first_degree_indicator_accdist_14+first_degree_indicator_pvt_14+first_degree_indicator_tr_14+first_degree_indicator_vwap_14+first_degree_indicator_wad_14+first_degree_indicator_sma_14+first_degree_indicator_ema_14+first_degree_indicator_cci_14+first_degree_indicator_chop_zone_14+first_degree_indicator_eom_14+first_degree_indicator_dpo_14+first_degree_indicator_adl_14+first_degree_indicator_bbp_14+first_degree_indicator_high_14+first_degree_indicator_low_14+first_degree_indicator_open_14+first_degree_indicator_close_14
//st.dev,co-relation,degreeofchangeandrateofchangeofprimaryindicator
st_dev_of_all_indicators_final_graph=ta.stdev(all_indicators_final_graph,look_back_period)
corelation_btw_price_avg_14_and_all_indicators_final_graph=ta.correlation(all_indicators_final_graph,price_avg_14,look_back_period)
first_degree_change_of_st_dev_of_all_indicators_final_graph=ta.change(all_indicators_final_graph,2)
first_degree_of_rate_of_change_first_degree_change_of_st_dev_of_all_indicators_final_graph=100*(ta.change(first_degree_change_of_st_dev_of_all_indicators_final_graph,2)/first_degree_change_of_st_dev_of_all_indicators_final_graph[1])
final_graph_of_corelation=all_indicators_final_graph*corelation_btw_price_avg_14_and_all_indicators_final_graph
final_graph_of_st_dev=corelation_btw_price_avg_14_and_all_indicators_final_graph*st_dev_of_all_indicators_final_graph
//final_graph_of_corelation
st_dev_of_final_graph_of_corelation=ta.stdev(final_graph_of_corelation,look_back_period)
corelation_btw_price_avg_14_and_final_graph_of_corelation=ta.correlation(final_graph_of_corelation,price_avg_14,look_back_period)
second_degree_change_of_st_dev_of_final_graph_of_corelation=ta.change(final_graph_of_corelation,2)
second_degree_of_rate_of_change_first_degree_change_of_st_dev_of_all_indicators_final_graph_1=100*(ta.change(second_degree_change_of_st_dev_of_final_graph_of_corelation,2)/second_degree_change_of_st_dev_of_final_graph_of_corelation[1])
second_degree_final_graph_of_corelation_one=final_graph_of_corelation*corelation_btw_price_avg_14_and_final_graph_of_corelation
second_degree_final_graph_of_st_dev_one=corelation_btw_price_avg_14_and_final_graph_of_corelation*st_dev_of_final_graph_of_corelation
//final_graph_of_st_dev
st_dev_of_final_graph_of_st_dev=ta.stdev(final_graph_of_st_dev,look_back_period)
corelation_btw_price_avg_14_and_final_graph_of_st_dev=ta.correlation(final_graph_of_st_dev,price_avg_14,look_back_period)
second_degree_change_of_st_dev_of_final_graph_of_st_dev=st_dev_of_final_graph_of_st_dev-st_dev_of_final_graph_of_st_dev[1]
second_degree_of_rate_of_change_first_degree_change_of_st_dev_of_all_indicators_final_graph_2=second_degree_change_of_st_dev_of_final_graph_of_st_dev-second_degree_change_of_st_dev_of_final_graph_of_st_dev[1]
second_degree_final_graph_of_corelation_two=final_graph_of_st_dev*corelation_btw_price_avg_14_and_final_graph_of_st_dev
second_degree_final_graph_of_st_dev_two=corelation_btw_price_avg_14_and_final_graph_of_st_dev*st_dev_of_final_graph_of_st_dev
//second_degree_final_graph_of_corelation_one
st_dev_of_second_degree_final_graph_of_corelation_one=ta.stdev(second_degree_final_graph_of_corelation_one,look_back_period)
corelation_btw_price_avg_14_and_second_degree_final_graph_of_corelation_one=ta.correlation(second_degree_final_graph_of_corelation_one,price_avg_14,look_back_period)
third_degree_final_graph_of_corelation_three=second_degree_final_graph_of_corelation_one*corelation_btw_price_avg_14_and_second_degree_final_graph_of_corelation_one
//second_degree_final_graph_of_corelation_two
st_dev_of_second_degree_final_graph_of_corelation_two=ta.stdev(second_degree_final_graph_of_corelation_two,look_back_period)
corelation_btw_price_avg_14_and_second_degree_final_graph_of_corelation_two=ta.correlation(second_degree_final_graph_of_corelation_two,price_avg_14,look_back_period)
third_degree_final_graph_of_corelation_four=st_dev_of_second_degree_final_graph_of_corelation_two*corelation_btw_price_avg_14_and_second_degree_final_graph_of_corelation_two
//final_graph_of_corelation
change_of_final_graph_of_corelation=final_graph_of_corelation-final_graph_of_corelation[1]
second_level_change_of_change_of_final_graph_of_corelation=(change_of_final_graph_of_corelation-change_of_final_graph_of_corelation[1])*math.pow(ta.correlation(change_of_final_graph_of_corelation,price_avg_14,look_back_period),3)*ta.stdev(change_of_final_graph_of_corelation,look_back_period)
//GraphIdentification
show_graph_1=input.bool(defval=false,title="(1)ShowCumilativegraph(CG)",group="Graphs")
show_graph_2=input.bool(defval=false,title="(2)CGcorelationtoprice",group="Graphs")
show_graph_3=input.bool(defval=false,title="(3)StdevofCG",group="Graphs")
show_graph_4=input.bool(defval=false,title="(4)Degreeofchange-CG",group="Graphs")
show_graph_5=input.bool(defval=false,title="(5)Rateofchange-CG",inline='Graph5',group="Graphs")
scale_of_graph_5=input.int(defval=1,title="&scale(n)willbe10tothepowern",inline='Graph5',group="Graphs")
show_graph_6=input.bool(defval=false,title="(6)Co-relationofCG(CCG),corelationtoprice",group="Graphs")
show_graph_7=input.bool(defval=false,title="(7)StdevofcorelationofCCG",group="Graphs")
show_graph_8=input.bool(defval=false,title="(8)Degreeofchange-CCG",group="Graphs")
show_graph_9=input.bool(defval=false,title="(9)Rateofchange-CCG",inline='Graph9',group="Graphs")
scale_of_graph_9=input.int(defval=1,title="&scale(n)willbe10tothepowern",inline='Graph9',group="Graphs")
show_graph_10=input.bool(defval=false,title="(10)STDVofCG(SCG),corelationtoprice",group="Graphs")
show_graph_11=input.bool(defval=false,title="(11)StdevofcorelationofSCG",group="Graphs")
show_graph_12=input.bool(defval=false,title="(12)Degreeofchange-SCG",group="Graphs")
show_graph_13=input.bool(defval=false,title="(13)Rateofchange-SCG",inline='Graph13',group="Graphs")
scale_of_graph_13=input.int(defval=1,title="&scale(n)willbe10tothepowern",inline='Graph13',group="Graphs")
show_graph_14=input.bool(defval=false,title="(14)Thirddegreecortoprice",group="Graphs")
show_graph_15=input.bool(defval=false,title="(15)Thirddegreecortoprice",group="Graphs")
show_graph_16=input.bool(defval=false,title="(16)Changeofgraphno2",group="Graphs")
graph_1=all_indicators_final_graph
graph_2=final_graph_of_corelation
graph_3=final_graph_of_st_dev
graph_4=first_degree_change_of_st_dev_of_all_indicators_final_graph
graph_5=first_degree_of_rate_of_change_first_degree_change_of_st_dev_of_all_indicators_final_graph
graph_6=second_degree_final_graph_of_corelation_one
graph_7=second_degree_final_graph_of_st_dev_one
graph_8=second_degree_change_of_st_dev_of_final_graph_of_corelation
graph_9=second_degree_of_rate_of_change_first_degree_change_of_st_dev_of_all_indicators_final_graph_1
graph_10=second_degree_final_graph_of_corelation_two
graph_11=second_degree_final_graph_of_st_dev_two
graph_12=second_degree_change_of_st_dev_of_final_graph_of_st_dev
graph_13=second_degree_of_rate_of_change_first_degree_change_of_st_dev_of_all_indicators_final_graph_2
graph_14=third_degree_final_graph_of_corelation_three
graph_15=third_degree_final_graph_of_corelation_four
graph_16=second_level_change_of_change_of_final_graph_of_corelation
//buysignalgeneration
buy_1=price_fallingandta.crossunder(graph_7,0)
buy_2=price_fallingandta.cross(graph_11,0)
buy_3=price_fallingandta.cross(graph_5,0)andta.cross(graph_9,0)andta.cross(graph_13,0)
buy_4=price_fallingandta.cross(graph_4,0)andta.cross(graph_8,0)andta.cross(graph_12,0)
buy_5=price_fallingandta.cross(graph_2,0)andta.cross(graph_3,0)andta.cross(graph_4,0)
buy_6=price_fallingandta.cross(graph_4,graph_8)andta.cross(graph_4,graph_12)andta.cross(graph_12,graph_8)
//TradingArrangement
//BuyandSellrange
hi_high=ta.highest(buy_comand_high_value,buy_or_sell_lookback)
lowerlowest=ta.lowest(buy_comand_low_value,buy_or_sell_lookback)
varfloathi_point=na
varfloatlow_point=na
fori=1to0by1
ifhi_high[i]<hi_high[i+1]
hi_point:=hi_high[i+1]

elseiflowerlowest[i]>lowerlowest[i+1]
low_point:=lowerlowest[i+1]
//TradingArrangement
//Generatesellsignal
varboolsell_comand=false
[pinesupertrend,pinedirection]=ta.supertrend(factor_of_supertrend_to_determine_sell_comand,artperiod_of_supertrend_to_determine_sell_comand)
ifpinedirection[1]<0andpinedirection>0
sell_comand:=true
elseifpinedirection>0and(buy_1orbuy_2orbuy_3orbuy_4orbuy_5orbuy_6)
sell_comand:=true
else
sell_comand:=false
//Intermediatesellingcount&Countofopentrades
varintopen_trades=0
varintx=0
ifstrategy.position_size==0
open_trades:=0
elseifstrategy.position_size[1]==0andstrategy.position_size>0
open_trades:=1
elseifstrategy.position_size[1]<strategy.position_size
open_trades:=open_trades+1
elseifstrategy.position_size[1]>strategy.position_sizeandstrategy.position_size>0
open_trades:=open_trades-1
else
open_trades:=open_trades
ifstrategy.position_size[1]<strategy.position_sizeandstrategy.position_size[1]>0
x:=open_trades
elseifstrategy.position_size[1]<strategy.position_sizeandstrategy.position_size[1]==0
x:=1
elseifstrategy.position_size[1]>strategy.position_sizeandstrategy.position_size>0
x:=x-1
elseifstrategy.position_size[1]>strategy.position_sizeandstrategy.position_size==0
x:=0
else
x:=x
//Maxcountofopentrades
varfloatmax_open_trades=0
ifstrategy.opentrades>max_open_trades
max_open_trades:=strategy.opentrades
else
max_open_trades:=max_open_trades
//ContrallSelling
varboolint_selling=false
ifstrategy.opentrades==strategy.opentrades[1]andintermidiate_selling==true
int_selling:=true
elseifstrategy.opentrades==strategy.opentrades[1]-1orintermidiate_selling==false
int_selling:=false
//Calculationofprofitprecentage
varfloatcal_profit_precentage=0
ifstrategy.position_size==0
cal_profit_precentage:=na
elseifstrategy.position_size>0
cal_profit_precentage:=(profit_precentage/100)+1
else
cal_profit_precentage:=cal_profit_precentage
//Opentradesentryprice
varfloatresult=0
fori=0tostrategy.opentrades-1
result:=strategy.opentrades.entry_price(i)
varinty=0
varintz=0
ifstrategy.position_size[1]>0andstrategy.position_size==0
y:=0
z:=0
elseifstrategy.position_size[1]==0andstrategy.position_size>0
y:=1
z:=1
elseifstrategy.position_size[1]>strategy.position_sizeandstrategy.position_size[1]>0andstrategy.position_size>0
y:=y-1
z:=z+1
elseifstrategy.position_size[1]<strategy.position_sizeandstrategy.position_size[1]>0andstrategy.position_size>0
z:=z+1
y:=y+1

m=result
//Fundmanagement-rvaluecalculation
varfloatint_val_3=0
varfloatinstallment_2=0
varfloatinstallment_3=0
varfloatinstallment_4=0
varfloatr_f=0
varfloatint_val=0
ifint_cap*int_val_prc/100<=15andint_val_allocation!="USDT"
int_val:=15
ifint_val_prc<=15andint_val_allocation=="USDT"
int_val:=15
ifint_cap*int_val_prc/100>15andint_val_allocation!="USDT"
int_val:=int_cap*int_val_prc/100
ifint_val_prc>15andint_val_allocation=="USDT"
int_val:=int_val_prc

varfloatr_change=0
ifr_finetune==false
r_change:=r_change_input
elseifr_finetune==true
r_change:=0.001

fori=0topiramiding+2by1
ifi==0
int_val_3:=int_val
ifi<=piramiding
installment_2:=int_val_3*math.pow((1+r/100),i)
ifi>=0andi<piramiding+1
installment_3:=installment_3+installment_2
ifi==piramiding+1
installment_4:=installment_3-installment_3[1]
ifinstallment_4<int_cap
r:=r+r_change
elseifinstallment_4>int_cap
r:=r-r_change
else
r:=r

ifr[1]<r
r_f:=r[1]
//FundManagement
varfloattotal_investment=int_cap
ifstrategy.position_size[1]>0andstrategy.position_size==0
total_investment:=int_cap+strategy.netprofit
else
total_investment:=total_investment

//Stratergypossitionsize
varfloatlast_purchase=0
ifstrategy.position_size[1]<strategy.position_sizeandstrategy.position_size[1]==0
last_purchase:=strategy.position_size
elseifstrategy.position_size[1]<strategy.position_sizeandstrategy.position_size[1]>0
last_purchase:=(strategy.position_size-strategy.position_size[1])
elseifstrategy.position_size==0
last_purchase:=0
else
last_purchase:=last_purchase
//QuantityCalculation
varfloatvalue_of_purchase=0
varfloatinitial_quantity=0
ifpurchaseing_method=='Equalamounts'anddev_of_equal_amounts=='Equalamountswithfixedentries'
value_of_purchase:=(total_investment/(piramiding+1))
elseifpurchaseing_method=='Equalamounts'anddev_of_equal_amounts=='EqualamountswithfixedUSDT'
value_of_purchase:=int_val_prc
ifpurchaseing_method=='Incrementalamounts'andint_val_allocation=='%ofcumilativeinvestment'
value_of_purchase:=(total_investment*(int_val_prc/100))*math.pow((1+(r_value/100)),y)
elseifpurchaseing_method=='Incrementalamounts'andint_val_allocation=='USDT'
value_of_purchase:=(int_val_prc)*math.pow((1+(r_value/100)),y)

varfloatfinal_value_of_purchase=0
ifvalue_of_purchase<=21
final_value_of_purchase:=21
else
final_value_of_purchase:=value_of_purchase

quantity=final_value_of_purchase/low
varfloatr_ff=0
ifpurchaseing_method=='Equalamounts'
r_ff:=na
else
r_ff:=r_f

//currentexpenditure
currentexpenditure()=>
result_v2=0.
fori=0tostrategy.opentrades-1
result_v2+=strategy.opentrades.entry_price(i)*strategy.opentrades.size(i)
strategy.opentrades>0?result_v2:na
//cashinhand
varfloatcash_in_hand=0
ifcurrentexpenditure()>0
cash_in_hand:=total_investment-currentexpenditure()
else
cash_in_hand:=total_investment
//unrealisedprofit
unrealised_profit=(high+low)/2*strategy.position_size-currentexpenditure()
//lastentryprice
lastentryprice()=>
result_v3=0.
fori=0tostrategy.opentrades-1
result_v3:=strategy.opentrades.entry_price(i)//*strategy.opentrades.size(i)
strategy.opentrades>0?result_v3:na

varfloatlast_entry_price=0
varindex_of_array_maxval=0
varindex_of_array_minval=0
varentryprice=array.new_float(49)
ifcurrentexpenditure()[1]<currentexpenditure()
last_entry_price:=lastentryprice()
array.push(entryprice,last_entry_price)
elseifstrategy.opentrades[1]==0andstrategy.opentrades>0
last_entry_price:=lastentryprice()
array.push(entryprice,last_entry_price)
elseifstrategy.position_size==0
last_entry_price:=0
array.clear(entryprice)
array_maxval=array.max(entryprice)
array_minval=array.min(entryprice)
ifarray.lastindexof(entryprice,array_maxval)>=0
index_of_array_maxval:=array.lastindexof(entryprice,array_maxval)+1
index_of_array_minval:=array.lastindexof(entryprice,array_minval)+1
else
index_of_array_maxval:=na
index_of_array_minval:=na
ifta.sma(close,9)>array_minval*(1+profit_precentage_intermidiate/100)//andint_selling==trueandhi_point[1]andlow_pointandstrategy.position_avg_price>ma_9
array.clear(entryprice)
//Calculationofprofitline
varfloatprofit_line=0
profit_line_nf=strategy.position_avg_price*cal_profit_precentage
//strategy.position_avg_price*cal_profit_precentage
ifstrategy.position_size[1]==0andstrategy.position_size>0
profit_line:=profit_line_nf
elseifstrategy.position_size[1]<strategy.position_size
profit_line:=profit_line-profit_line_nf[1]+profit_line_nf
elseifstrategy.position_size[1]>strategy.position_size
profit_line:=profit_line[1]
elseifstrategy.opentrades==0
profit_line:=0

//countofmaxtradecount
varintmax_trade_count=0
ifpurchaseing_method=='Incrementalamounts'
max_trade_count:=piramiding-1
elseifpurchaseing_method=='Equalamounts'anddev_of_equal_amounts=='EqualamountswithfixedUSDT'
max_trade_count:=math.floor(total_investment/int_val_prc)-1
elseifpurchaseing_method=='Equalamounts'anddev_of_equal_amounts=='Equalamountswithfixedentries'
max_trade_count:=piramiding-1
//EnterCoustomcomandtoperformbuyandsellactionslinkwithwebhook
stringbuy_comment="BUY"
stringsell_comment="SELL"
//Trading
if((buy_1orbuy_2orbuy_3))andwindowandstrategy.position_size==0andsource_of_lower_point<low_point
strategy.entry("long",strategy.long,comment=buy_comment,qty=quantity)
elseif((buy_1orbuy_2orbuy_3orbuy_4)andwindowandma_9<strategy.position_avg_price*.99andstrategy.position_size>0)andstrategy.opentrades<=(max_trade_count*0.75)//andsource_of_lower_point<low_point
strategy.entry("long",strategy.long,comment=buy_comment,qty=quantity)
elseif((buy_6)andma_9<strategy.position_avg_priceandwindowandstrategy.position_size>0)andstrategy.opentrades>(max_trade_count*0.75)andstrategy.opentrades<=max_trade_count//andsource_of_lower_point<low_point
strategy.entry("long",strategy.long,comment=buy_comment,qty=quantity)
if(sell_comand==true)andprofit_line<ma_9andhi_point[1]andlow_point
strategy.close("long",qty=strategy.position_size,comment=sell_comment)
//intermediateselling
ifta.sma(close,9)>array_minval*(1+profit_precentage_intermidiate/100)andint_selling==trueandhi_point[1]andlow_pointandstrategy.position_avg_price>ma_9
strategy.close("long",qty=last_purchase[x],comment=sell_comment)

//Graphs
//colorchange
plot(r_ff,title="CalculatedRvalue",color=color.new(color.white,100))
plot(strategy.position_avg_price,title="AVG",color=color.green,style=plot.style_circles)
plot(profit_line,title="Adj.Profit",color=color.yellow,style=plot.style_circles)
plot(strategy.opentrades,title="Numbersofopentrades",color=color.new(color.white,100))
plot(max_open_trades,title="MaxOpentrades",color=color.new(color.red,100))
plot(strategy.netprofit,title="CumilativeProfit",color=color.new(color.white,100))
plot(unrealised_profit,title="UnrealisedProfit",color=color.new(color.blue,100))
plot(currentexpenditure(),title="CurrentExpenditure",color=color.new(color.blue,100))
plot(cash_in_hand,title="CashinHand",color=color.new(color.blue,100))
plot(total_investment,title="TotalInvestment",color=color.new(color.white,100))
plot(last_purchase,title="QuantityLastpurchase",color=color.new(color.white,100))
plot(final_value_of_purchase,title="ValueofPurchase",color=color.new(color.white,100))
//plot(last_entry_price,title="LastentryPrice",color=color.new(color.blue,100))
//plot(result,title="EntryPrice",color=color.new(color.white,100))
hidden_color=color.new(color.white,100)
varcolor_1=color.white
varcolor_2=color.red
varcolor_3=color.yellow
varcolor_4=color.blue
varcolor_5=color.green
varcolor_6=color.orange//line
varcolor_7=color.maroon//bar
varcolor_8=color.new(color.gray,50)//area
varcolor_9=color.new(color.aqua,50)//area
varcolor_10=color.orange//line
varcolor_11=color.maroon//bar
varcolor_12=color.new(color.gray,50)//area
varcolor_13=color.new(color.aqua,50)//area
varcolor_14=color.orange//line
varcolor_15=color.maroon//bar
varcolor_16=color.maroon//bar
ifshow_graph_1==true
color_1:=color.white
else
color_1:=hidden_color
ifshow_graph_2==true
color_2:=color.red
else
color_2:=hidden_color
ifshow_graph_3==true
color_3:=color.new(color.yellow,50)
else
color_3:=hidden_color
ifshow_graph_4==true
color_4:=color.new(color.blue,50)
else
color_4:=hidden_color
ifshow_graph_5==true
color_5:=color.new(color.green,30)
else
color_5:=hidden_color
ifshow_graph_6==true
color_6:=color.orange
else
color_6:=hidden_color
ifshow_graph_7==true
color_7:=color.green
else
color_7:=hidden_color
ifshow_graph_8==true
color_8:=color.new(color.silver,50)
else
color_8:=hidden_color
ifshow_graph_9==true
color_9:=color.new(color.yellow,50)
else
color_9:=hidden_color
ifshow_graph_10==true
color_10:=color.new(color.teal,50)
else
color_10:=hidden_color
ifshow_graph_11==true
color_11:=color.new(color.maroon,50)
else
color_11:=hidden_color
ifshow_graph_12==true
color_12:=color.new(color.aqua,50)
else
color_12:=hidden_color
ifshow_graph_13==true
color_13:=color.new(color.red,50)
else
color_13:=hidden_color
ifshow_graph_14==true
color_14:=color.new(color.red,50)
else
color_14:=hidden_color

ifshow_graph_15==true
color_15:=color.new(color.blue,50)
else
color_15:=hidden_color
ifshow_graph_16==true
color_16:=color.new(color.blue,50)
else
color_16:=hidden_color
hline(0,color=color.white,title="o")
plot(show_graph_1==true?graph_1:na,color=color_1,title="(1)Cumilativegraph(CG)",style=plot.style_linebr)
plot(show_graph_2==true?graph_2:na,color=color_2,title="(2)CGcorelationtoprice",style=plot.style_linebr)
plot(show_graph_3==true?graph_3:na,color=color_3,title="(3)StdevofCG",style=plot.style_columns)
plot(show_graph_4==true?graph_4:na,color=color_4,title="(4)Degreeofchange-CG",style=plot.style_linebr)
plot(show_graph_5==true?graph_5*math.pow(10,scale_of_graph_5):na,color=color_5,title="(5)Rateofchange-CG",style=plot.style_area)
plot(show_graph_6==true?graph_6:na,color=color_6,title="(6)corelationofCG(CCG),corelationtoprice",style=plot.style_linebr)
plot(show_graph_7==true?graph_7:na,color=color_7,title="(7)StdevofcorelationofCCG",style=plot.style_columns)
plot(show_graph_8==true?graph_8:na,color=color_8,title="(8)Degreeofchange-CCG",style=plot.style_linebr)
plot(show_graph_9==true?graph_9*math.pow(10,scale_of_graph_9):na,color=color_9,title="(9)Rateofchange-CCG",style=plot.style_area)
plot(show_graph_10==true?graph_10:na,color=color_10,title="(10)STDVofCG(SCG),corelationtoprice",style=plot.style_linebr)
plot(show_graph_11==true?graph_11:na,color=color_11,title="(11)StdevofcorelationofSCG",style=plot.style_columns)
plot(show_graph_12==true?graph_12:na,color=color_12,title="(12)Degreeofchange-SCG",style=plot.style_linebr)
plot(show_graph_13==true?graph_13*math.pow(10,scale_of_graph_13):na,color=color_13,title="(13)Rateofchange-SCG",style=plot.style_area)
plot(show_graph_14==true?graph_14:na,color=color_14,title="(14)Thirddegreecortoprice",style=plot.style_linebr)
plot(show_graph_15==true?graph_15:na,color=color_15,title="(15)Thirddegreecortoprice",style=plot.style_columns)
plot(show_graph_16==true?ta.ema(graph_16,14):na,color=color_16,title="(16)Degreeofchange-SCG",style=plot.style_area)
plotshape(ma_9<strategy.position_avg_price*.99andstrategy.opentrades<=(max_trade_count*0.75)?buy_1:na,style=shape.arrowdown,location=location.abovebar,size=size.large,text="1")
plotshape(ma_9<strategy.position_avg_price*.99andstrategy.opentrades<=(max_trade_count*0.75)?buy_2:na,style=shape.arrowdown,location=location.abovebar,size=size.large,text="2")
plotshape(ma_9<strategy.position_avg_price*.99andstrategy.opentrades<=(max_trade_count*0.75)?buy_3:na,style=shape.arrowdown,location=location.abovebar,size=size.large,text="3")
plotshape(ma_9<strategy.position_avg_price*.99andstrategy.opentrades<=(max_trade_count*0.75)?buy_4:na,style=shape.arrowdown,location=location.abovebar,size=size.large,text="4",color=color.green)
plotshape(ma_9<strategy.position_avg_price*.99andstrategy.opentrades<=(max_trade_count*0.75)?buy_5:na,style=shape.arrowdown,location=location.abovebar,size=size.large,text="5",color=color.red)
plotshape(ma_9<strategy.position_avg_price*.99?buy_6:na,style=shape.arrowdown,location=location.abovebar,size=size.large,text="6",color=color.orange)
//Table
vartbl=table.new(position.top_right,2,9,frame_color=#151715,frame_width=1,border_width=2,border_color=color.new(color.white,100))
//columnvalues
table.cell(tbl,0,0,text="Cumilativeprofit(USDT)",text_color=color.white,text_halign=text.align_left,text_valign=text.align_center,bgcolor=color.green)
table.cell(tbl,0,1,text="CurrentExpenditure",text_color=color.red,text_halign=text.align_left,text_valign=text.align_center)
table.cell(tbl,0,2,text="Cashbalance",text_color=color.red,text_halign=text.align_left,text_valign=text.align_center)
table.cell(tbl,0,3,text="Cumilativeassert(USDT)",text_color=color.red,text_halign=text.align_left,text_valign=text.align_center)
table.cell(tbl,0,4,text="Countofopentrades",text_color=color.red,text_halign=text.align_left,text_valign=text.align_center)
table.cell(tbl,0,5,text="StrategypositionSize",text_color=color.red,text_halign=text.align_left,text_valign=text.align_center)

table.cell(tbl,1,0,str.tostring(strategy.netprofit,format.mintick),text_color=color.white,text_halign=text.align_right,text_valign=text.align_center,bgcolor=color.green)
table.cell(tbl,1,1,str.tostring(currentexpenditure(),format.mintick),text_color=color.red,text_halign=text.align_right,text_valign=text.align_center)
table.cell(tbl,1,2,str.tostring(cash_in_hand,format.mintick),text_color=color.red,text_halign=text.align_right,text_valign=text.align_center)
table.cell(tbl,1,3,str.tostring(total_investment,format.mintick),text_color=color.red,text_halign=text.align_right,text_valign=text.align_center)
table.cell(tbl,1,4,str.tostring(strategy.opentrades,format.mintick),text_color=color.red,text_halign=text.align_right,text_valign=text.align_center)
table.cell(tbl,1,5,str.tostring(strategy.position_size,format.mintick),text_color=color.red,text_halign=text.align_right,text_valign=text.align_center)
Expand (1604 lines)
