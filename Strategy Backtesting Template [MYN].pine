Script Name: Strategy Backtesting Template [MYN]
Author: myncrypto
Description: A few people have been asking me to share my backtesting template.  Currently I use this as my starting point for validating existing strategies and developing new ones.

Features:


  Trading Date Range
  Trade Direction
  4 progressive take profits with target percents and percentage of position to take profit on (Thanks adolgo)
  Variable percentage Stop...
PineScript code:

Pine Script™ strategy
Strategy Backtesting Template [MYN]
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  myn
//@version=5
strategy('Strategy  Backtesting  Template  [MYN]',  max_bars_back=5000,  overlay=true,  pyramiding=0,  initial_capital=20000,  currency='NONE',  default_qty_type=strategy.percent_of_equity,  default_qty_value=100.0,  commission_value=0.075,  use_bar_magnifier  =  false)
/////////////////////////////////////
//*  Put  your  strategy  logic  below  *//
/////////////////////////////////////
//  Below  is  a  very  simple  example  to  demonstrate  the  trading  template
rsiEntry  =  ta.rsi(close,  10)
rsiExit  =  ta.rsi(close,100)
longConditionEntry  =  ta.crossover(rsiEntry,  80)
shortConditionEntry  =  ta.crossunder(rsiEntry,  20)
longConditionExit  =  ta.crossunder(rsiExit,40)
shortConditionExit  =  ta.crossover(rsiExit,  60)
//////////////////////////////////////
//*  Put  your  strategy  rules  below  *//
/////////////////////////////////////
longCondition  =    longConditionEntry                  //  default:  false
shortCondition  =  shortConditionEntry                  //  default:  false
//define  as  0  if  do  not  want  to  have  a  conditional  close
closeLongCondition  =  longConditionExit            //  default:  0
closeShortCondition  =  shortConditionExit        //  default:  0
//  EMA  Filter
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
i_emaFilterEnabled  =  input.bool(defval  =  false  ,  title  =  "Enable  EMA  Filter",  tooltip  =  "Enable  if  you  would  like  to  conditionally  have  entries  incorporate  EMA  as  a  filter  where  source  is  above/below  the  EMA  line",  group  ="EMA  Filter"  )
i_emaLength  =  input.int(200,  title="EMA  Length",  minval=1,  group  ="EMA  Filter")
i_emaSource  =  input.source(close,"EMA  Source"  ,  group  ="EMA  Filter")
emaValue  =  i_emaFilterEnabled  ?  ta.ema(i_emaSource,  i_emaLength)  :  na
bool  isEMAFilterEnabledAndCloseAboveMA  =  i_emaFilterEnabled  ?  i_emaSource  >  emaValue  :  true
bool  isEMAFilterEnabledAndCloseBelowMA  =  i_emaFilterEnabled  ?  i_emaSource  <  emaValue  :  true
//  ADX  Filter
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
i_adxFilterEnabled  =  input.bool(defval  =  false  ,  title  =  "Enable  ADX  Filter",  tooltip  =  "Enable  if  you  would  like  to  conditionally  have  entries  incorporate  ADX  as  a  filter",  group  ="ADX  Filter"  )
i_adxVariant  =  input.string('ORIGINAL',  title='ADX  Variant',  options=['ORIGINAL',  'MASANAKAMURA'],  group  ="ADX  Filter"  )
i_adxSmoothing  =  input.int(14,  title="ADX  Smoothing",  group="ADX  Filter")
i_adxDILength  =  input.int(14,  title="DI  Length",  group="ADX  Filter")
i_adxLowerThreshold  =  input.float(25,  title="ADX  Threshold",  step=.5,  group="ADX  Filter")
calcADX_Masanakamura(int  _len)  =>
        _smoothedTrueRange  =  0.0
        _smoothedDirectionalMovementPlus  =  0.0
        _smoothed_directionalMovementMinus  =  0.0
        _trueRange  =  math.max(math.max(high  -  low,  math.abs(high  -  nz(close[1]))),  math.abs(low  -  nz(close[1])))
        _directionalMovementPlus  =  high  -  nz(high[1])  >  nz(low[1])  -  low  ?  math.max(high  -  nz(high[1]),  0)  :  0
        _directionalMovementMinus  =  nz(low[1])  -  low  >  high  -  nz(high[1])  ?  math.max(nz(low[1])  -  low,  0)  :  0
        _smoothedTrueRange  :=  nz(_smoothedTrueRange[1])  -  nz(_smoothedTrueRange[1])  /  _len  +  _trueRange
        _smoothedDirectionalMovementPlus  :=  nz(_smoothedDirectionalMovementPlus[1])  -  nz(_smoothedDirectionalMovementPlus[1])  /  _len  +  _directionalMovementPlus
        _smoothed_directionalMovementMinus  :=  nz(_smoothed_directionalMovementMinus[1])  -  nz(_smoothed_directionalMovementMinus[1])  /  _len  +  _directionalMovementMinus
        DIP  =  _smoothedDirectionalMovementPlus  /  _smoothedTrueRange  *  100
        DIM  =  _smoothed_directionalMovementMinus  /  _smoothedTrueRange  *  100
        _DX  =  math.abs(DIP  -  DIM)  /  (DIP  +  DIM)  *  100
        adx  =  ta.sma(_DX,  _len)
        [DIP,  DIM,  adx]
[DIPlusO,  DIMinusO,  ADXO]  =  ta.dmi(i_adxDILength,  i_adxSmoothing)
[DIPlusM,  DIMinusM,  ADXM]  =  calcADX_Masanakamura(i_adxDILength)
adx  =  i_adxFilterEnabled  and  i_adxVariant  ==  "ORIGINAL"  ?  ADXO  :  ADXM
bool  isADXFilterEnabledAndAboveThreshold  =  i_adxFilterEnabled  ?  adx  >  i_adxLowerThreshold  :  true
///Start  /  End  Time  Periods
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
i_startPeriodEnabled  =  input.bool(true,  'Start',  group='Date  Range',  inline='Start  Period')
i_startPeriodTime  =  input.time(timestamp('1  Jan  2019'),  '',  group='Date  Range',  inline='Start  Period')
i_endPeriodEnabled  =  input.bool(true,  'End',  group='Date  Range',  inline='End  Period')
i_endPeriodTime  =  input.time(timestamp('31  Dec  2030'),  '',  group='Date  Range',  inline='End  Period')
isStartPeriodEnabledAndInRange  =  i_startPeriodEnabled  ?  i_startPeriodTime  <=  time  :  true
isEndPeriodEnabledAndInRange  =  i_endPeriodEnabled  ?  i_endPeriodTime  >=  time  :  true
//  Time-Of-Day  Window
//  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//  Inspired  from  https://www.tradingview.com/script/3BmID7aW-Highlight-Trading-Window-Simple-Hours-Time-of-Day-Filter/
i_timeFilterEnabled  =  input.bool(defval  =  false  ,  title  =  "Enable  Time-Of-Day  Window",  tooltip  =  "Limit  the  time  of  day  for  trade  execution",  group  ="Time  Window"  )
i_timeZone  =  input.string(title="Select  Local  Time  Zone",  defval="GMT-5",  options=["GMT-8","GMT-7",  "GMT-6",  "GMT-5",  "GMT-4",  "GMT-3",  "GMT-2",  "GMT-1",  "GMT",  "GMT+1",  "GMT+2",    "GMT+3","GMT+4","GMT+5","GMT+6","GMT+7","GMT+8","GMT+9","GMT+10","GMT+11","GMT+12","GMT+13"],  group="Time  Window")
i_betweenTime  =  input.session('0700-0900',    title  =  "Time  Filter",  group="Time  Window")      //  '0000-0000'  is  anytime  to  enter
isWithinWindowOfTime(_position)  =>
        currentTimeIsWithinWindowOfTime  =  not  na(time(timeframe.period,  _position  +  ':1234567',  i_timeZone))
bool  isTimeFilterEnabledAndInRange  =  i_timeFilterEnabled  ?  isWithinWindowOfTime(i_betweenTime)  :  true
isStartEndPeriodsAndTimeInRange  =  isStartPeriodEnabledAndInRange  and  isEndPeriodEnabledAndInRange  and  isTimeFilterEnabledAndInRange
//  Trade  Direction
//  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
i_tradeDirection  =  input.string('Long  and  Short',  title='Trade  Direction',  options=['Long  and  Short',  'Long  Only',  'Short  Only'],  group='Trade  Direction')
//  Percent  as  Points
//  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
per(pcnt)  =>
        strategy.position_size  !=  0  ?  math.round(pcnt  /  100*strategy.position_avg_price/syminfo.mintick):float(na)
//Takeprofit1
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
i_takeProfitTargetPercent1=input.float(title='TakeProfit1-Target%',defval=100,minval=0.0,step=0.5,group='TakeProfit',inline='TakeProfit1')
i_takeProfitQuantityPercent1=input.int(title='%OfPosition',defval=100,minval=0,group='TakeProfit',inline='TakeProfit1')
//Takeprofit2
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
i_takeProfitTargetPercent2=input.float(title='TakeProfit2-Target%',defval=100,minval=0.0,step=0.5,group='TakeProfit',inline='TakeProfit2')
i_takeProfitQuantityPercent2=input.int(title='%OfPosition',defval=100,minval=0,group='TakeProfit',inline='TakeProfit2')
//Takeprofit3
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
i_takeProfitTargetPercent3=input.float(title='TakeProfit3-Target%',defval=100,minval=0.0,step=0.5,group='TakeProfit',inline='TakeProfit3')
i_takeProfitQuantityPercent3=input.int(title='%OfPosition',defval=100,minval=0,group='TakeProfit',inline='TakeProfit3')
//Takeprofit4
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
i_takeProfitTargetPercent4=input.float(title='TakeProfit4-Target%',defval=100,minval=0.0,step=0.5,group='TakeProfit')
///StopLoss
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
i_stopLossPercent=input.float(title='StopLoss(%)',defval=999,minval=0.01,step=0.5,group='StopLoss')*0.01
slLongClose=close<strategy.position_avg_price*(1-i_stopLossPercent)
slShortClose=close>strategy.position_avg_price*(1+i_stopLossPercent)
///Leverage
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
i_leverage=input.float(1,'Leverage',step=.5,group='Leverage')
i_percentOfEquityToTrade=input.float(100,"%ofEquitytoStakePerTrade",minval=0.01,maxval=100,step=5,group='Leverage')*.01
contracts=(i_percentOfEquityToTrade*strategy.equity/close*i_leverage)
///TradeStateManagement
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
isInLongPosition=strategy.position_size>0
isInShortPosition=strategy.position_size<0
///ProfitViewAlertSyntaxStringGeneration
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
i_alertSyntaxPrefix=input.string(defval='CRYPTANEX_99FTX_Strategy-Name-Here',title='AlertSyntaxPrefix',group='ProfitViewAlertSyntax')
alertSyntaxBase=i_alertSyntaxPrefix+'\n#'+str.tostring(open)+','+str.tostring(high)+','+str.tostring(low)+','+str.tostring(close)+','+str.tostring(volume)+','
///TradeExecution
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
longConditionCalc=(longConditionandisADXFilterEnabledAndAboveThresholdandisEMAFilterEnabledAndCloseAboveMA)
shortConditionCalc=(shortConditionandisADXFilterEnabledAndAboveThresholdandisEMAFilterEnabledAndCloseBelowMA)
ifisStartEndPeriodsAndTimeInRange
iflongConditionCalcandi_tradeDirection!='ShortOnly'andisInLongPosition==false
strategy.entry('Long',strategy.long,qty=contracts)
alert(message=alertSyntaxBase+'side:long',freq=alert.freq_once_per_bar_close)
ifshortConditionCalcandi_tradeDirection!='LongOnly'andisInShortPosition==false
strategy.entry('Short',strategy.short,qty=contracts)
alert(message=alertSyntaxBase+'side:short',freq=alert.freq_once_per_bar_close)

//InspiredfromMultiple%%profitexitsexamplebyadolgohttps://www.tradingview.com/script/kHhCik9f-Multiple-profit-exits-example/
strategy.exit('TP1',qty_percent=i_takeProfitQuantityPercent1,profit=per(i_takeProfitTargetPercent1))
strategy.exit('TP2',qty_percent=i_takeProfitQuantityPercent2,profit=per(i_takeProfitTargetPercent2))
strategy.exit('TP3',qty_percent=i_takeProfitQuantityPercent3,profit=per(i_takeProfitTargetPercent3))
strategy.exit('i_takeProfitTargetPercent4',profit=per(i_takeProfitTargetPercent4))
//StopLoss
strategy.close('Long',qty_percent=100,comment='SLLong',when=slLongClose)
strategy.close('Short',qty_percent=100,comment='SLShort',when=slShortClose)
//ConditionalCloses
strategy.close('Long',qty_percent=100,comment='CloseLong',when=closeLongCondition)
strategy.close('Short',qty_percent=100,comment='CloseShort',when=closeShortCondition)
//GlobalDashboardVariables
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//DashboardTableTextSize
i_tableTextSize=input.string(title="DashboardSize",defval="Small",options=["Auto","Huge","Large","Normal","Small","Tiny"],group="Dashboards")
table_text_size(s)=>
switchs
"Auto"=>size.auto
"Huge"=>size.huge
"Large"=>size.large
"Normal"=>size.normal
"Small"=>size.small
=>size.tiny
tableTextSize=table_text_size(i_tableTextSize)
///PerformanceSummaryDashboard
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
//Inspiredbyhttps://www.tradingview.com/script/uWqKX6A2/-ThanksVertMT
i_showDashboard=input.bool(title="PerformanceSummary",defval=true,group="Dashboards",inline="ShowDashboards")
f_fillCell(_table,_column,_row,_title,_value,_bgcolor,_txtcolor)=>
_cellText=_title+"\n"+_value
table.cell(_table,_column,_row,_cellText,bgcolor=_bgcolor,text_color=_txtcolor,text_size=tableTextSize)
//Drawdashboardtable
ifi_showDashboard
varbgcolor=color.new(color.black,0)

//KeeptrackofWins/Lossesstreaks
newWin=(strategy.wintrades>strategy.wintrades[1])and(strategy.losstrades==strategy.losstrades[1])and(strategy.eventrades==strategy.eventrades[1])
newLoss=(strategy.wintrades==strategy.wintrades[1])and(strategy.losstrades>strategy.losstrades[1])and(strategy.eventrades==strategy.eventrades[1])
varipintwinRow=0
varipintlossRow=0
varipintmaxWinRow=0
varipintmaxLossRow=0
ifnewWin
lossRow:=0
winRow:=winRow+1
ifwinRow>maxWinRow
maxWinRow:=winRow

ifnewLoss
winRow:=0
lossRow:=lossRow+1
iflossRow>maxLossRow
maxLossRow:=lossRow
//Preparestatstable
vartabledashTable=table.new(position.top_right,1,15,border_width=1)

ifbarstate.islastconfirmedhistory
//Updatetable
dollarReturn=strategy.netprofit
f_fillCell(dashTable,0,0,"Start:",str.format("{0,date,long}",strategy.closedtrades.entry_time(0)),bgcolor,color.white)//+str.format("{0,time,HH:mm}",strategy.closedtrades.entry_time(0))
f_fillCell(dashTable,0,1,"End:",str.format("{0,date,long}",strategy.opentrades.entry_time(0)),bgcolor,color.white)//+str.format("{0,time,HH:mm}",strategy.opentrades.entry_time(0))
_profit=(strategy.netprofit/strategy.initial_capital)*100
f_fillCell(dashTable,0,2,"NetProfit:",str.tostring(_profit,'##.##')+"%",_profit>0?color.teal:color.maroon,color.white)
_numOfDaysInStrategy=(strategy.opentrades.entry_time(0)-strategy.closedtrades.entry_time(0))/(1000*3600*24)
f_fillCell(dashTable,0,3,"PercentPerDay",str.tostring(_profit/_numOfDaysInStrategy,'#########################.#####')+"%",_profit>0?color.teal:color.maroon,color.white)
_winRate=(strategy.wintrades/strategy.closedtrades)*100
f_fillCell(dashTable,0,4,"PercentProfitable:",str.tostring(_winRate,'##.##')+"%",_winRate<50?color.maroon:_winRate<75?#999900:color.teal,color.white)
f_fillCell(dashTable,0,5,"ProfitFactor:",str.tostring(strategy.grossprofit/strategy.grossloss,'##.###'),strategy.grossprofit>strategy.grossloss?color.teal:color.maroon,color.white)
f_fillCell(dashTable,0,6,"TotalTrades:",str.tostring(strategy.closedtrades),bgcolor,color.white)
f_fillCell(dashTable,0,8,"MaxWinsInARow:",str.tostring(maxWinRow,'######'),bgcolor,color.white)
f_fillCell(dashTable,0,9,"MaxLossesInARow:",str.tostring(maxLossRow,'######'),bgcolor,color.white)
//MonthlyTablePerformanceDashboardBy@QuantNomad
//░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
i_showMonthlyPerformance=input.bool(true,'MonthlyPerformance',group='Dashboards',inline="ShowDashboards")
i_monthlyReturnPercision=2
ifi_showMonthlyPerformance
new_month=month(time)!=month(time[1])
new_year=year(time)!=year(time[1])

eq=strategy.equity

bar_pnl=eq/eq[1]-1

cur_month_pnl=0.0
cur_year_pnl=0.0

//CurrentMonthlyP&L
cur_month_pnl:=new_month?0.0:
(1+cur_month_pnl[1])*(1+bar_pnl)-1

//CurrentYearlyP&L
cur_year_pnl:=new_year?0.0:
(1+cur_year_pnl[1])*(1+bar_pnl)-1

//ArraystostoreYearlyandMonthlyP&Ls
varmonth_pnl=array.new_float(0)
varmonth_time=array.new_int(0)

varyear_pnl=array.new_float(0)
varyear_time=array.new_int(0)

last_computed=false

if(notna(cur_month_pnl[1])and(new_monthorbarstate.islastconfirmedhistory))
if(last_computed[1])
array.pop(month_pnl)
array.pop(month_time)

array.push(month_pnl,cur_month_pnl[1])
array.push(month_time,time[1])

if(notna(cur_year_pnl[1])and(new_yearorbarstate.islastconfirmedhistory))
if(last_computed[1])
array.pop(year_pnl)
array.pop(year_time)

array.push(year_pnl,cur_year_pnl[1])
array.push(year_time,time[1])

last_computed:=barstate.islastconfirmedhistory?true:nz(last_computed[1])

//MonthlyP&LTable
varmonthly_table=table(na)

if(barstate.islastconfirmedhistory)
monthly_table:=table.new(position.bottom_right,columns=14,rows=array.size(year_pnl)+1,border_width=1)

table.cell(monthly_table,0,0,"",bgcolor=#cccccc,text_size=tableTextSize)
table.cell(monthly_table,1,0,"Jan",bgcolor=#cccccc,text_size=tableTextSize)
table.cell(monthly_table,2,0,"Feb",bgcolor=#cccccc,text_size=tableTextSize)
table.cell(monthly_table,3,0,"Mar",bgcolor=#cccccc,text_size=tableTextSize)
table.cell(monthly_table,4,0,"Apr",bgcolor=#cccccc,text_size=tableTextSize)
table.cell(monthly_table,5,0,"May",bgcolor=#cccccc,text_size=tableTextSize)
table.cell(monthly_table,6,0,"Jun",bgcolor=#cccccc,text_size=tableTextSize)
table.cell(monthly_table,7,0,"Jul",bgcolor=#cccccc,text_size=tableTextSize)
table.cell(monthly_table,8,0,"Aug",bgcolor=#cccccc,text_size=tableTextSize)
table.cell(monthly_table,9,0,"Sep",bgcolor=#cccccc,text_size=tableTextSize)
table.cell(monthly_table,10,0,"Oct",bgcolor=#cccccc,text_size=tableTextSize)
table.cell(monthly_table,11,0,"Nov",bgcolor=#cccccc,text_size=tableTextSize)
table.cell(monthly_table,12,0,"Dec",bgcolor=#cccccc,text_size=tableTextSize)
table.cell(monthly_table,13,0,"Year",bgcolor=#999999,text_size=tableTextSize)

foryi=0toarray.size(year_pnl)-1
table.cell(monthly_table,0,yi+1,str.tostring(year(array.get(year_time,yi))),bgcolor=#cccccc,text_size=tableTextSize)

y_color=array.get(year_pnl,yi)>0?color.new(color.teal,transp=40):color.new(color.gray,transp=40)
table.cell(monthly_table,13,yi+1,str.tostring(math.round(array.get(year_pnl,yi)*100,i_monthlyReturnPercision)),bgcolor=y_color,text_color=color.new(color.white,0),text_size=tableTextSize)

formi=0toarray.size(month_time)-1
m_row=year(array.get(month_time,mi))-year(array.get(year_time,0))+1
m_col=month(array.get(month_time,mi))
m_color=array.get(month_pnl,mi)>0?color.new(color.teal,transp=40):color.new(color.maroon,transp=40)

table.cell(monthly_table,m_col,m_row,str.tostring(math.round(array.get(month_pnl,mi)*100,i_monthlyReturnPercision)),bgcolor=m_color,text_color=color.new(color.white,0),text_size=tableTextSize)
Expand (335 lines)
