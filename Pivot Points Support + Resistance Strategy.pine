Script Name: Pivot Points Support + Resistance Strategy
Author: UnknownUnicorn36161431
Description: The WHAT
=============>
A strategy based off 3 indicators:
1) the original TV's "Pivot Points Standard" indicator
2) Cyclic RSI High Low With Noise Filter indicator (  ) from @RozaniGhani-RG as basis for determining uptrend or downtrend
3) Mesa Advanced Triggers indicator (  ) from @jordanfung to filter out the best high/low points where to open and close...
PineScript code:

Pine Script™ strategy
Pivot Points Support + Resistance Strategy
//@version=5
strategy("Pivot  Points  Support  +  Resistance  Strategy",  shorttitle="Pivots  SUPP/RES  Strategy",  overlay=true,  process_orders_on_close  =  true,  calc_on_order_fills  =  true,  calc_on_every_tick  =  true,  pyramiding  =  0,  default_qty_type  =  strategy.percent_of_equity,  default_qty_value  =  75,  commission_type  =  strategy.commission.percent,  commission_value  =  0.04,  initial_capital  =  100,  max_lines_count=500,  max_labels_count=500)
AUTO  =  "Auto"
DAILY  =  "Daily"
WEEKLY  =  "Weekly"
MONTHLY  =  "Monthly"
QUARTERLY  =  "Quarterly"
YEARLY  =  "Yearly"
BIYEARLY  =  "Biyearly"
TRIYEARLY  =  "Triyearly"
QUINQUENNIALLY  =  "Quinquennially"
DECENNIALLY  =  "Decennially"
TRADITIONAL  =  "Traditional"
FIBONACCI  =  "Fibonacci"
WOODIE  =  "Woodie"
CLASSIC  =  "Classic"
DEMARK  =  "DM"
CAMARILLA  =  "Camarilla"
show_sl_invalidation_labels  =  input.bool(  true,  "Show  'invalidated  at  SL'  Labels",  group  =  "General"  )
show_levels  =  input.bool(  true,  "Show  Support  /  Resistance  Levels",  group  =  "General"  )
i_use_time_limited_backtesting  =  input.bool(  false,  "Use  Time-Limited  Backtesting",  group  =  "Time-Limit  BackTesting  (0  =  disable)"  )
startDay  =  input.int(0,  "Start  Day",  minval  =  0,  maxval  =  31,  group  =  "Time-Limit  BackTesting  (0  =  disable)")
startMonth  =  input.int(0,  "Start  Month",  minval  =  0,  maxval  =  12,  group  =  "Time-Limit  BackTesting  (0  =  disable)")
startYear  =  input.int(0,  "Start  Year",  minval  =  0,  maxval  =  2100,  group  =  "Time-Limit  BackTesting  (0  =  disable)")
endDay  =  input.int(0,  "End  Day",  minval  =  0,  maxval  =  31,  group  =  "Time-Limit  BackTesting  (0  =  disable)")
endMonth  =  input.int(0,  "End  Month",  minval  =  0,  maxval  =  12,  group  =  "Time-Limit  BackTesting  (0  =  disable)")
endYear  =  input.int(0,  "End  Year",  minval  =  0,  maxval  =  2100,  group  =  "Time-Limit  BackTesting  (0  =  disable)")
tp_level  =  input.string(title="Level  for  TP",  defval="Level  1",  options=["Level  1",  "Level  2",  "Level  3",  "Level  4",  "Level  5"],  group  =  "Pivot  Options"  )
sl_level  =  input.string(title="Level  for  SL",  defval="Level  5",  options=["Level  1",  "Level  2",  "Level  3",  "Level  4",  "Level  5"],  group  =  "Pivot  Options"  )
kind  =  input.string(title="Type",  defval="Traditional",  options=[TRADITIONAL,  FIBONACCI,  WOODIE,  CLASSIC,  DEMARK,  CAMARILLA],  group  =  "Pivot  Options"  )
pivot_time_frame  =  input.string(title="Pivots  Timeframe",  defval=AUTO,  options=[AUTO,  DAILY,  WEEKLY,  MONTHLY,  QUARTERLY,  YEARLY,  BIYEARLY,  TRIYEARLY,  QUINQUENNIALLY,  DECENNIALLY],  group  =  "Pivot  Options"  )
look_back  =  input.int(title="Number  of  Pivots  Back",  defval=15,  minval=1,  maxval=5000,  group  =  "Pivot  Options"  )
is_daily_based  =  input.bool(title="Use  Daily-based  Values",  defval=true,  tooltip="When  this  option  is  unchecked,  Pivot  Points  will  use  intraday  data  while  calculating  on  intraday  charts.  If  Extended  Hours  are  displayedonthechart,theywillbetakenintoaccountduringthepivotlevelcalculation.IfintradayOHLCvaluesaredifferentfromdaily-basedvalues(normalforstocks),thepivotlevelswillalsodiffer.",group="PivotOptions")
show_labels=input.bool(title="ShowLabels",defval=true,group="labels",group="PivotOptions")
show_prices=input.bool(title="ShowPrices",defval=true,group="labels",group="PivotOptions")
position_labels=input.string("Left","LabelsPosition",options=["Left","Right"],group="labels",group="PivotOptions")
line_width=input.int(title="LineWidth",defval=1,minval=1,maxval=100,group="levels",group="PivotOptions")
i_show_crsi=input.bool(false,"ShowcRSIPivots",group="cRSIOptions")
i_i_len=input(15,"cRSIEMAperiod",group="cRSIOptions")
i_src=input.source(close,'cRSISource',group="cRSIOptions")
i_use_mesa=input.bool(true,"OpentradesbyMESAPivots",group="MESAPivotsOptions")
i_show_mesa=input.bool(false,"ShowMESAPivots",group="MESAPivotsOptions")
offsetNum=input(0,"MESAoffset",group="MESAPivotsOptions")
pivot_zone_upper=input(0.4,"MESApivotzoneupper",group="MESAPivotsOptions")
pivot_zone_lower=input(-0.4,"MESApivotzonelower",group="MESAPivotsOptions")
varcRSI_high_extreme_found=0.0
varcRSI_high_extreme_valid=true
varcRSI_low_extreme_found=0.0
varcRSI_low_extreme_valid=true
varlast_cRSI_extreme=""
varcRSI_trend_direction=""
varlast_trade_ts=time
inDateRange=true
over_p=false
over_s1=false
over_s2=false
over_s3=false
over_s4=false
over_s5=false
over_r1=false
over_r2=false
over_r3=false
over_r4=false
over_r5=false
last_p=0.0
last_s1=0.0
last_s2=0.0
last_s3=0.0
last_s4=0.0
last_s5=0.0
last_r1=0.0
last_r2=0.0
last_r3=0.0
last_r4=0.0
last_r5=0.0
//Lookiftheclosetimeofthecurrentbarfallsinsidethedaterange
ifi_use_time_limited_backtestingandstartDay!=0andstartMonth!=0andstartYear!=0andendDay!=0andendMonth!=0andendYear!=0
inDateRange:=(time>=timestamp(syminfo.timezone,startYear,startMonth,startDay,0,0))and(time<timestamp(syminfo.timezone,endYear,endMonth,endDay,0,0))
//------------------------------------------------------------------------------
//MESAcalculationsfromtheMESAindicator
//------------------------------------------------------------------------------
//Basic
//------------------------------------------------------------------------------
DomCycle=15
RealPart=0.0
ImagPart=0.0
forJ=0toDomCycle-1
Weight=(close[J]+close[J]+high[J]+low[J])*10000
ifDomCycle!=0
RealPart:=RealPart+math.cos(90*J/DomCycle)*Weight*2
ImagPart:=((ImagPart+math.sin(90*J/DomCycle)*Weight)+(ImagPart+math.sin(180*J/DomCycle)*Weight))/2
Phase=((math.atan(ImagPart/RealPart))-0.685)*100
//------------------------------------------------------------------------------
//Pivot
//------------------------------------------------------------------------------
ph_mesa=ta.pivothigh(Phase,1,1)
pl_mesa=ta.pivotlow(Phase,1,1)
out_zone=Phase[2]<pivot_zone_lowerorPhase[2]>pivot_zone_upper
plotshape(i_show_mesaandph_mesaandout_zone?ph_mesa:na,title="PivotHigh",color=#f23737,style=shape.circle,location=location.abovebar,offset=-1,size=size.tiny)
plotshape(i_show_mesaandpl_mesaandout_zone?pl_mesa:na,title="PivotLow",color=#169788,style=shape.circle,location=location.belowbar,offset=-1,size=size.tiny)
//------------------------------------------------------------------------------
//cRSIindicatorcode
//------------------------------------------------------------------------------
crsi=0.0
vibration=10
torque=0.618/(vibration+1)
phasingLag=(vibration-1)/0.618
rsi=ta.rsi(i_src,i_i_len)
crsi:=torque*(2*rsi-rsi[phasingLag])+(1-torque)*nz(crsi[1])
floatosc=crsi
floatph=ta.highestbars(high,i_i_len)==0?osc:na
floatpl=ta.lowestbars(low,i_i_len)==0?osc:na
varintdir=0
dir:=phandna(pl)?1:plandna(ph)?-1:dir
varmax_array_size=10
vararr_zz=array.new_float(0)
older_zz=array.copy(arr_zz)
dirchanged=ta.change(dir)
add_to_zigzag(_id,floatvalue,intbindex)=>
array.unshift(_id,bindex)
array.unshift(_id,value)
ifarray.size(_id)>max_array_size
array.pop(_id)
array.pop(_id)
update_zigzag(_id,floatvalue,intbindex,intdir)=>
ifarray.size(_id)==0
add_to_zigzag(_id,value,bindex)
else
ifdir==1andvalue>array.get(_id,0)ordir==-1andvalue<array.get(_id,0)
array.set(_id,0,value)
array.set(_id,1,bindex)
0.
ifphorpl
ifdirchanged
add_to_zigzag(arr_zz,dir==1?ph:pl,bar_index)
else
update_zigzag(arr_zz,dir==1?ph:pl,bar_index,dir)
ifarray.size(arr_zz)>=6
//Variables
varlabellabel_zz=na
//Boolsforor
boolbool_or_1=array.get(arr_zz,0)!=array.get(older_zz,0)
boolbool_or_2=array.get(arr_zz,1)!=array.get(older_zz,1)

//Boolsforand
boolbool_n_1=array.get(arr_zz,2)==array.get(older_zz,2)
boolbool_n_2=array.get(arr_zz,3)==array.get(older_zz,3)

//Boolsformorethanandlessthan
boolbool_0_mt_4=array.get(arr_zz,0)>array.get(arr_zz,4)
boolbool_0_lt_4=array.get(arr_zz,0)<array.get(arr_zz,4)

ifbool_or_1orbool_or_2
ifbool_n_1andbool_n_2
label.delete(label_zz)
str_label=dir==1?bool_0_mt_4?'▼':'◍':
bool_0_lt_4?'▲':'◍'
col_label=dir==1?bool_0_mt_4?color.red:color.teal:
bool_0_lt_4?color.teal:color.red
ifi_show_crsi
label_zz:=label.new(bar_index,high,text=str_label,color=color.new(color.blue,100),textcolor=col_label,style=dir==1?label.style_label_down:label.style_label_up)
ifdir==1
cRSI_high_extreme_found:=close
cRSI_low_extreme_found:=0.0
last_cRSI_extreme:="high"
else
cRSI_low_extreme_found:=close
cRSI_high_extreme_found:=0.0
last_cRSI_extreme:="low"
iflast_cRSI_extreme=="high"andcRSI_high_extreme_found>0.0
cRSI_trend_direction:="sell"
iflast_cRSI_extreme=="low"andcRSI_low_extreme_found>0.0
cRSI_trend_direction:="buy"
varorder_prices=array.new_float(3,0.0)//entryprice
array.push(order_prices,0.0)//exitprice
array.push(order_prices,0.0)//stopprice
varorder_types=array.new_string(1,"")//ordertype
varour_active_orders_count=array.new_int(1,0)
varDEF_COLOR=#FB8C00
vararr_time=array.new_int()
varp=array.new_float()
p_color=input.color(DEF_COLOR,"P[U+200F][U+200F][U+200F]",inline="P",group="levels")
p_show=input.bool(true,"",inline="P",group="levels")
varr1=array.new_float()
vars1=array.new_float()
s1_color=input.color(DEF_COLOR,"S1",inline="S1/R1",group="levels")
s1_show=input.bool(true,"",inline="S1/R1",group="levels")
r1_color=input.color(DEF_COLOR,"[U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F]R1",inline="S1/R1",group="levels")
r1_show=input.bool(true,"",inline="S1/R1",group="levels")
varr2=array.new_float()
vars2=array.new_float()
s2_color=input.color(DEF_COLOR,"S2",inline="S2/R2",group="levels")
s2_show=input.bool(true,"",inline="S2/R2",group="levels")
r2_color=input.color(DEF_COLOR,"[U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F]R2",inline="S2/R2",group="levels")
r2_show=input.bool(true,"",inline="S2/R2",group="levels")
varr3=array.new_float()
vars3=array.new_float()
s3_color=input.color(DEF_COLOR,"S3",inline="S3/R3",group="levels")
s3_show=input.bool(true,"",inline="S3/R3",group="levels")
r3_color=input.color(DEF_COLOR,"[U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F]R3",inline="S3/R3",group="levels")
r3_show=input.bool(true,"",inline="S3/R3",group="levels")
varr4=array.new_float()
vars4=array.new_float()
s4_color=input.color(DEF_COLOR,"S4",inline="S4/R4",group="levels")
s4_show=input.bool(true,"",inline="S4/R4",group="levels")
r4_color=input.color(DEF_COLOR,"[U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F]R4",inline="S4/R4",group="levels")
r4_show=input.bool(true,"",inline="S4/R4",group="levels")
varr5=array.new_float()
vars5=array.new_float()
s5_color=input.color(DEF_COLOR,"S5",inline="S5/R5",group="levels")
s5_show=input.bool(true,"",inline="S5/R5",group="levels")
r5_color=input.color(DEF_COLOR,"[U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F][U+200F]R5",inline="S5/R5",group="levels")
r5_show=input.bool(true,"",inline="S5/R5",group="levels")
pivotX_open=float(na)
pivotX_open:=nz(pivotX_open[1],open)
pivotX_high=float(na)
pivotX_high:=nz(pivotX_high[1],high)
pivotX_low=float(na)
pivotX_low:=nz(pivotX_low[1],low)
pivotX_prev_open=float(na)
pivotX_prev_open:=nz(pivotX_prev_open[1])
pivotX_prev_high=float(na)
pivotX_prev_high:=nz(pivotX_prev_high[1])
pivotX_prev_low=float(na)
pivotX_prev_low:=nz(pivotX_prev_low[1])
pivotX_prev_close=float(na)
pivotX_prev_close:=nz(pivotX_prev_close[1])
get_pivot_resolution()=>
resolution="M"
ifpivot_time_frame==AUTO
iftimeframe.isintraday
resolution:=timeframe.multiplier<=15?"D":"W"
elseiftimeframe.isweeklyortimeframe.ismonthly
resolution:="12M"
elseifpivot_time_frame==DAILY
resolution:="D"
elseifpivot_time_frame==WEEKLY
resolution:="W"
elseifpivot_time_frame==MONTHLY
resolution:="M"
elseifpivot_time_frame==QUARTERLY
resolution:="3M"
elseifpivot_time_frame==YEARLYorpivot_time_frame==BIYEARLYorpivot_time_frame==TRIYEARLYorpivot_time_frame==QUINQUENNIALLYorpivot_time_frame==DECENNIALLY
resolution:="12M"
resolution
varlines=array.new_line()
varlabels=array.new_label()
draw_line(i,pivot,col)=>
ifarray.size(arr_time)>1
array.push(lines,line.new(array.get(arr_time,i),array.get(pivot,i),array.get(arr_time,i+1),array.get(pivot,i),color=col,xloc=xloc.bar_time,width=line_width))
draw_label(i,y,txt,txt_color)=>
ifshow_levelsand(show_labelsorshow_prices)andnotna(y)
display_text=(show_labels?txt:"")+(show_prices?str.format("({0})",math.round_to_mintick(y)):"")
label_style=position_labels=="Left"?label.style_label_right:label.style_label_left
x=position_labels=="Left"?array.get(arr_time,i):array.get(arr_time,i+1)
array.push(labels,label.new(x=x,y=y,text=display_text,textcolor=txt_color,style=label_style,color=#00000000,xloc=xloc.bar_time))
traditional()=>
pivotX_Median=(pivotX_prev_high+pivotX_prev_low+pivotX_prev_close)/3
array.push(p,pivotX_Median)
array.push(r1,pivotX_Median*2-pivotX_prev_low)
array.push(s1,pivotX_Median*2-pivotX_prev_high)
array.push(r2,pivotX_Median+1*(pivotX_prev_high-pivotX_prev_low))
array.push(s2,pivotX_Median-1*(pivotX_prev_high-pivotX_prev_low))
array.push(r3,pivotX_Median*2+(pivotX_prev_high-2*pivotX_prev_low))
array.push(s3,pivotX_Median*2-(2*pivotX_prev_high-pivotX_prev_low))
array.push(r4,pivotX_Median*3+(pivotX_prev_high-3*pivotX_prev_low))
array.push(s4,pivotX_Median*3-(3*pivotX_prev_high-pivotX_prev_low))
array.push(r5,pivotX_Median*4+(pivotX_prev_high-4*pivotX_prev_low))
array.push(s5,pivotX_Median*4-(4*pivotX_prev_high-pivotX_prev_low))
fibonacci()=>
pivotX_Median=(pivotX_prev_high+pivotX_prev_low+pivotX_prev_close)/3
pivot_range=pivotX_prev_high-pivotX_prev_low
array.push(p,pivotX_Median)
array.push(r1,pivotX_Median+0.382*pivot_range)
array.push(s1,pivotX_Median-0.382*pivot_range)
array.push(r2,pivotX_Median+0.618*pivot_range)
array.push(s2,pivotX_Median-0.618*pivot_range)
array.push(r3,pivotX_Median+1*pivot_range)
array.push(s3,pivotX_Median-1*pivot_range)
woodie()=>
pivotX_Woodie_Median=(pivotX_prev_high+pivotX_prev_low+pivotX_open*2)/4
pivot_range=pivotX_prev_high-pivotX_prev_low
array.push(p,pivotX_Woodie_Median)
array.push(r1,pivotX_Woodie_Median*2-pivotX_prev_low)
array.push(s1,pivotX_Woodie_Median*2-pivotX_prev_high)
array.push(r2,pivotX_Woodie_Median+1*pivot_range)
array.push(s2,pivotX_Woodie_Median-1*pivot_range)
pivot_point_r3=pivotX_prev_high+2*(pivotX_Woodie_Median-pivotX_prev_low)
pivot_point_s3=pivotX_prev_low-2*(pivotX_prev_high-pivotX_Woodie_Median)
array.push(r3,pivot_point_r3)
array.push(s3,pivot_point_s3)
array.push(r4,pivot_point_r3+pivot_range)
array.push(s4,pivot_point_s3-pivot_range)
classic()=>
pivotX_Median=(pivotX_prev_high+pivotX_prev_low+pivotX_prev_close)/3
pivot_range=pivotX_prev_high-pivotX_prev_low
array.push(p,pivotX_Median)
array.push(r1,pivotX_Median*2-pivotX_prev_low)
array.push(s1,pivotX_Median*2-pivotX_prev_high)
array.push(r2,pivotX_Median+1*pivot_range)
array.push(s2,pivotX_Median-1*pivot_range)
array.push(r3,pivotX_Median+2*pivot_range)
array.push(s3,pivotX_Median-2*pivot_range)
array.push(r4,pivotX_Median+3*pivot_range)
array.push(s4,pivotX_Median-3*pivot_range)
demark()=>
pivotX_Demark_X=pivotX_prev_high+pivotX_prev_low*2+pivotX_prev_close
ifpivotX_prev_close==pivotX_prev_open
pivotX_Demark_X:=pivotX_prev_high+pivotX_prev_low+pivotX_prev_close*2
ifpivotX_prev_close>pivotX_prev_open
pivotX_Demark_X:=pivotX_prev_high*2+pivotX_prev_low+pivotX_prev_close
array.push(p,pivotX_Demark_X/4)
array.push(r1,pivotX_Demark_X/2-pivotX_prev_low)
array.push(s1,pivotX_Demark_X/2-pivotX_prev_high)
camarilla()=>
pivotX_Median=(pivotX_prev_high+pivotX_prev_low+pivotX_prev_close)/3
pivot_range=pivotX_prev_high-pivotX_prev_low
array.push(p,pivotX_Median)
array.push(r1,pivotX_prev_close+pivot_range*1.1/12.0)
array.push(s1,pivotX_prev_close-pivot_range*1.1/12.0)
array.push(r2,pivotX_prev_close+pivot_range*1.1/6.0)
array.push(s2,pivotX_prev_close-pivot_range*1.1/6.0)
array.push(r3,pivotX_prev_close+pivot_range*1.1/4.0)
array.push(s3,pivotX_prev_close-pivot_range*1.1/4.0)
array.push(r4,pivotX_prev_close+pivot_range*1.1/2.0)
array.push(s4,pivotX_prev_close-pivot_range*1.1/2.0)
r5_val=pivotX_prev_high/pivotX_prev_low*pivotX_prev_close
array.push(r5,r5_val)
array.push(s5,2*pivotX_prev_close-r5_val)
calc_pivot()=>
ifkind==TRADITIONAL
traditional()
elseifkind==FIBONACCI
fibonacci()
elseifkind==WOODIE
woodie()
elseifkind==CLASSIC
classic()
elseifkind==DEMARK
demark()
elseifkind==CAMARILLA
camarilla()
resolution=get_pivot_resolution()
SIMPLE_DIVISOR=-1
custom_years_divisor=switchpivot_time_frame
BIYEARLY=>2
TRIYEARLY=>3
QUINQUENNIALLY=>5
DECENNIALLY=>10
=>SIMPLE_DIVISOR
calc_high(prev,curr)=>
ifna(prev)orna(curr)
nz(prev,nz(curr,na))
else
math.max(prev,curr)

calc_low(prev,curr)=>
ifnotna(prev)andnotna(curr)
math.min(prev,curr)
else
nz(prev,nz(curr,na))
calc_OHLC_for_pivot(custom_years_divisor)=>
ifcustom_years_divisor==SIMPLE_DIVISOR
[open,high,low,close,open[1],high[1],low[1],close[1],time[1],time_close]
else
varprev_sec_open=float(na)
varprev_sec_high=float(na)
varprev_sec_low=float(na)
varprev_sec_close=float(na)
varprev_sec_time=int(na)
varcurr_sec_open=float(na)
varcurr_sec_high=float(na)
varcurr_sec_low=float(na)
varcurr_sec_close=float(na)
ifyear(time_close)%custom_years_divisor==0
curr_sec_open:=open
curr_sec_high:=high
curr_sec_low:=low
curr_sec_close:=close
prev_sec_high:=high[1]
prev_sec_low:=low[1]
prev_sec_close:=close[1]
prev_sec_time:=time[1]
fori=2tocustom_years_divisor
prev_sec_open:=nz(open[i],prev_sec_open)
prev_sec_high:=calc_high(prev_sec_high,high[i])
prev_sec_low:=calc_low(prev_sec_low,low[i])
prev_sec_time:=nz(time[i],prev_sec_time)
[curr_sec_open,curr_sec_high,curr_sec_low,curr_sec_close,prev_sec_open,prev_sec_high,prev_sec_low,prev_sec_close,prev_sec_time,time_close]
[sec_open,sec_high,sec_low,sec_close,prev_sec_open,prev_sec_high,prev_sec_low,prev_sec_close,prev_sec_time,sec_time]=request.security(syminfo.tickerid,resolution,calc_OHLC_for_pivot(custom_years_divisor),lookahead=barmerge.lookahead_on)
sec_open_gaps_on=request.security(syminfo.tickerid,resolution,open,gaps=barmerge.gaps_on,lookahead=barmerge.lookahead_on)
is_change_years=custom_years_divisor>0andta.change(time(resolution))andyear(time_close)%custom_years_divisor==0
varis_change=false
varuses_current_bar=timeframe.isintradayandkind==WOODIE
varchange_time=int(na)
is_time_change=(ta.change(time(resolution))andcustom_years_divisor==SIMPLE_DIVISOR)oris_change_years
ifis_time_change
change_time:=time
varstart_time=time
varwas_last_premarket=false
varstart_calculate_in_premarket=false
is_last_premarket=barstate.islastandsession.ispremarketandtime_close>sec_timeandnotwas_last_premarket
ifis_last_premarket
was_last_premarket:=true
start_calculate_in_premarket:=true
ifsession.ismarket
was_last_premarket:=false

without_time_change=barstate.islastandarray.size(arr_time)==0
is_can_calc_pivot=(notuses_current_barandis_time_changeandsession.ismarket)or(ta.change(sec_open)andnotstart_calculate_in_premarket)oris_last_premarketor(uses_current_barandnotna(sec_open_gaps_on))orwithout_time_change
enough_bars_for_calculate=prev_sec_time>=start_timeoris_daily_based
ifis_can_calc_pivotandenough_bars_for_calculate
ifarray.size(arr_time)==0andis_daily_based
pivotX_prev_open:=prev_sec_open[1]
pivotX_prev_high:=prev_sec_high[1]
pivotX_prev_low:=prev_sec_low[1]
pivotX_prev_close:=prev_sec_close[1]
pivotX_open:=sec_open[1]
pivotX_high:=sec_high[1]
pivotX_low:=sec_low[1]
array.push(arr_time,start_time)
calc_pivot()

ifis_daily_based
ifis_last_premarket
pivotX_prev_open:=sec_open
pivotX_prev_high:=sec_high
pivotX_prev_low:=sec_low
pivotX_prev_close:=sec_close
pivotX_open:=open
pivotX_high:=high
pivotX_low:=low
else
pivotX_prev_open:=prev_sec_open
pivotX_prev_high:=prev_sec_high
pivotX_prev_low:=prev_sec_low
pivotX_prev_close:=prev_sec_close
pivotX_open:=sec_open
pivotX_high:=sec_high
pivotX_low:=sec_low
else
pivotX_prev_high:=pivotX_high
pivotX_prev_low:=pivotX_low
pivotX_prev_open:=pivotX_open
pivotX_prev_close:=close[1]
pivotX_open:=open
pivotX_high:=high
pivotX_low:=low
ifbarstate.islastandnotis_changeandarray.size(arr_time)>0andnotwithout_time_change
array.set(arr_time,array.size(arr_time)-1,change_time)
elseifwithout_time_change
array.push(arr_time,start_time)
else
array.push(arr_time,nz(change_time,time))
calc_pivot()
ifarray.size(arr_time)>look_back
ifarray.size(arr_time)>0
array.shift(arr_time)
ifarray.size(p)>0andp_show
array.shift(p)
ifarray.size(r1)>0andr1_show
array.shift(r1)
ifarray.size(s1)>0ands1_show
array.shift(s1)
ifarray.size(r2)>0andr2_show
array.shift(r2)
ifarray.size(s2)>0ands2_show
array.shift(s2)
ifarray.size(r3)>0andr3_show
array.shift(r3)
ifarray.size(s3)>0ands3_show
array.shift(s3)
ifarray.size(r4)>0andr4_show
array.shift(r4)
ifarray.size(s4)>0ands4_show
array.shift(s4)
ifarray.size(r5)>0andr5_show
array.shift(r5)
ifarray.size(s5)>0ands5_show
array.shift(s5)
is_change:=true
elseifnotis_daily_based
pivotX_high:=math.max(pivotX_high,high)
pivotX_low:=math.min(pivotX_low,low)
ifbarstate.islastandnotis_daily_basedandarray.size(arr_time)==0
runtime.error("NotenoughintradaydatatocalculatePivotPoints.LowerthePivotsTimeframeorturnonthe'UseDaily-basedValues'optionintheindicatorsettings.")
ifarray.size(arr_time)>0
//label.new(bar_index,high,text="close"+str.tostring(close)+",p"+str.tostring(array.get(p,array.size(p)-1))+",s2"+str.tostring(array.get(s2,array.size(s2)-1))+",s1x"+str.tostring(ta.cross(array.get(s1,array.size(s1)-1),close)),color=color.white,textcolor=color.black)
ifarray.size(p)>0
last_p:=array.get(p,array.size(p)-1)
ifta.cross(array.get(p,array.size(p)-1),close)
over_p:=true
ifarray.size(s1)>0
last_s1:=array.get(s1,array.size(s1)-1)
ifta.cross(array.get(s1,array.size(s1)-1),close)
over_s1:=true
ifarray.size(s2)>0
last_s2:=array.get(s2,array.size(s2)-1)
ifta.cross(array.get(s2,array.size(s2)-1),close)
over_s2:=true
ifarray.size(s3)>0
last_s3:=array.get(s3,array.size(s3)-1)
ifta.cross(array.get(s3,array.size(s3)-1),close)
over_s3:=true
ifarray.size(s4)>0
last_s4:=array.get(s4,array.size(s4)-1)
ifta.cross(array.get(s4,array.size(s4)-1),close)
over_s4:=true
ifarray.size(s5)>0
last_s5:=array.get(s5,array.size(s5)-1)
ifta.cross(array.get(s5,array.size(s5)-1),close)
over_s5:=true
ifarray.size(r1)>0
last_r1:=array.get(r1,array.size(r1)-1)
ifta.cross(array.get(r1,array.size(r1)-1),close)
over_r1:=true
ifarray.size(r2)>0
last_r2:=array.get(r2,array.size(r2)-1)
ifta.cross(array.get(r2,array.size(r2)-1),close)
over_r2:=true
ifarray.size(r3)>0
last_r3:=array.get(r3,array.size(r3)-1)
ifta.cross(array.get(r3,array.size(r3)-1),close)
over_r3:=true
ifarray.size(r4)>0
last_r4:=array.get(r4,array.size(r1)-1)
ifta.cross(array.get(r4,array.size(r4)-1),close)
over_r4:=true
ifarray.size(r5)>0
last_r5:=array.get(r5,array.size(r5)-1)
ifta.cross(array.get(r5,array.size(r5)-1),close)
over_r5:=true
ifbarstate.islastandarray.size(arr_time)>0andis_change
is_change:=false
ifcustom_years_divisor>0
last_pivot_time=array.get(arr_time,array.size(arr_time)-1)
pivot_timeframe=str.tostring(12*custom_years_divisor)+"M"
estimate_pivot_time=last_pivot_time+timeframe.in_seconds(pivot_timeframe)*1000
array.push(arr_time,estimate_pivot_time)
else
array.push(arr_time,time_close(resolution))
fori=0toarray.size(lines)-1
ifarray.size(lines)>0
line.delete(array.shift(lines))
ifarray.size(labels)>0
label.delete(array.shift(labels))
fori=0toarray.size(arr_time)-2
ifarray.size(p)>0andp_showandshow_levels
draw_line(i,p,p_color)
draw_label(i,array.get(p,i),"P",p_color)
ifarray.size(r1)>0andr1_showandshow_levels
draw_line(i,r1,r1_color)
draw_label(i,array.get(r1,i),"R1",r1_color)
ifarray.size(s1)>0ands1_showandshow_levels
draw_line(i,s1,s1_color)
draw_label(i,array.get(s1,i),"S1",s1_color)
ifarray.size(r2)>0andr2_showandshow_levels
draw_line(i,r2,r2_color)
draw_label(i,array.get(r2,i),"R2",r2_color)
ifarray.size(s2)>0ands2_showandshow_levels
draw_line(i,s2,s2_color)
draw_label(i,array.get(s2,i),"S2",s2_color)
ifarray.size(r3)>0andr3_showandshow_levels
draw_line(i,r3,r3_color)
draw_label(i,array.get(r3,i),"R3",r3_color)
ifarray.size(s3)>0ands3_showandshow_levels
draw_line(i,s3,s3_color)
draw_label(i,array.get(s3,i),"S3",s3_color)
ifarray.size(r4)>0andr4_showandshow_levels
draw_line(i,r4,r4_color)
draw_label(i,array.get(r4,i),"R4",r4_color)
ifarray.size(s4)>0ands4_showandshow_levels
draw_line(i,s4,s4_color)
draw_label(i,array.get(s4,i),"S4",s4_color)
ifarray.size(r5)>0andr5_showandshow_levels
draw_line(i,r5,r5_color)
draw_label(i,array.get(r5,i),"R5",r5_color)
ifarray.size(s5)>0ands5_showandshow_levels
draw_line(i,s5,s5_color)
draw_label(i,array.get(s5,i),"S5",s5_color)
//checkifweshouldbecheckingforanentry
ifstrategy.opentrades==0andover_p
tradeType=cRSI_trend_direction=="buy"?"Buy":"Sell"
target_real=-1.0
sl_real=-1.0
//determinetarget
iftradeType=="Buy"
target_real:=switchtp_level
"Level1"=>last_r1>0.0?last_r1:na
"Level2"=>last_r2>0.0?last_r2:last_r1>0.0?last_r1:na
"Level3"=>last_r3>0.0?last_r3:last_r2>0.0?last_r2:last_r1>0.0?last_r1:na
"Level4"=>last_r4>0.0?last_r4:last_r3>0.0?last_r3:last_r2>0.0?last_r2:last_r1>0.0?last_r1:na
"Level5"=>last_r5>0.0?last_r5:last_r4>0.0?last_r4:last_r3>0.0?last_r3:last_r2>0.0?last_r2:last_r1>0.0?last_r1:na
else
target_real:=switchtp_level
"Level1"=>last_s1>0.0?last_s1:na
"Level2"=>last_s2>0.0?last_s2:last_s1>0.0?last_s1:na
"Level3"=>last_s3>0.0?last_s3:last_s2>0.0?last_s2:last_s1>0.0?last_s1:na
"Level4"=>last_s4>0.0?last_s4:last_s3>0.0?last_s3:last_s2>0.0?last_s2:last_s1>0.0?last_s1:na
"Level5"=>last_s5>0.0?last_s5:last_s4>0.0?last_s4:last_s3>0.0?last_s3:last_s2>0.0?last_s2:last_s1>0.0?last_s1:na
//determineSL
iftradeType=="Buy"
sl_real:=switchsl_level
"Level1"=>last_s1>0.0?last_s1:na
"Level2"=>last_s2>0.0?last_s2:last_s1>0.0?last_s1:na
"Level3"=>last_s3>0.0?last_s3:last_s2>0.0?last_s2:last_s1>0.0?last_s1:na
"Level4"=>last_s4>0.0?last_s4:last_s3>0.0?last_s3:last_s2>0.0?last_s2:last_s1>0.0?last_s1:na
"Level5"=>last_s5>0.0?last_s5:last_s4>0.0?last_s4:last_s3>0.0?last_s3:last_s2>0.0?last_s2:last_s1>0.0?last_s1:na
else
sl_real:=switchsl_level
"Level1"=>last_r1>0.0?last_r1:na
"Level2"=>last_r2>0.0?last_r2:last_r1>0.0?last_r1:na
"Level3"=>last_r3>0.0?last_r3:last_r2>0.0?last_r2:last_r1>0.0?last_r1:na
"Level4"=>last_r4>0.0?last_r4:last_r3>0.0?last_r3:last_r2>0.0?last_r2:last_r1>0.0?last_r1:na
"Level5"=>last_r5>0.0?last_r5:last_r4>0.0?last_r4:last_r3>0.0?last_r3:last_r2>0.0?last_r2:last_r1>0.0?last_r1:na
//checkifwehaveallrequireddata
iflast_p>0.0andtarget_real>-1.0andsl_real>-1.0
//entryprice,settothenewPlevel
array.set(order_prices,0,last_p)
array.set(order_prices,1,target_real)
array.set(order_prices,2,sl_real)
array.set(order_types,0,tradeType)
array.set(our_active_orders_count,0,0)
//brokersection
trade_type=array.get(order_types,0)
entry_price=array.get(order_prices,0)
exit_price=array.get(order_prices,1)
stop_price=array.get(order_prices,2)
//closetradeswhenpricereachesourtarget
exit_bool=array.get(our_active_orders_count,0)>0and(trade_type=="Buy"?close>=exit_price:close<=exit_price)
//label.new(bar_index,high,trade_type+","+str.tostring(close)+"/"+str.tostring(exit_price))
ifexit_price>0andstrategy.opentrades>0andexit_bool
strategy.close(trade_type,comment=trade_type+"TPreached")
array.set(order_prices,0,0.0)
array.set(order_prices,1,0.0)
array.set(order_prices,2,0.0)
array.set(order_types,0,"")
array.set(our_active_orders_count,0,0)
//opentradeswhenthepricereachedourentry
entry_bool=array.get(our_active_orders_count,0)==0and(trade_type=="Buy"?close<=entry_price:close>=entry_price)
ifentry_price>0and(strategy.opentrades==0orstrategy.opentrades.entry_id(strategy.opentrades-1)!=trade_type)andentry_bool
//checkifwe'realsousingMESAtowaitforabetterentry
//firstcheckthatwe'venotbeyondourSL...
ifi_use_mesaand(trade_type=="Buy"?close<=stop_price:close>=stop_price)
//SLreached,invalidatethistradeandmarkitonchart
array.set(order_prices,0,0.0)
array.set(order_prices,1,0.0)
array.set(order_prices,2,0.0)
array.set(order_types,0,"")
array.set(our_active_orders_count,0,0)
ifinDateRangeandshow_sl_invalidation_labels
label.new(bar_index,high,trade_type+"invalidatedatSL",color=color.white,textcolor=color.black)
//nowcheckthatwehaveabetterentrythroughMESa
if(inDateRangeand((time-last_trade_ts)/1000>=(60*30))and(noti_use_mesaor(trade_type=="Buy"and((ph_mesaandout_zone)?ph_mesa:na))or(trade_type=="Sell"and((pl_mesaandout_zone)?pl_mesa:na))))
strategy.entry(trade_type,trade_type=="Buy"?strategy.long:strategy.short)
strategy.exit(trade_type,stop=stop_price,comment="closedbySL")
array.set(our_active_orders_count,0,1)
iftrade_type=="Buy"
cRSI_low_extreme_found:=0.0
else
cRSI_high_extreme_found:=0.0
//Exitopenmarketpositionwhendaterangeends
if(notinDateRange)
strategy.close_all()
Expand (756 lines)
