Script Name: Stochastic Moving Average
Author: LucasVivien
Description: Hi all,

This Strategy script combines the power of EMAs along with the Stochastic Oscillator in a trend following / continuation manner, along with some cool functionalities.
I designed this script especially for trading altcoins, but it works just as good on Bitcoin itself and on some Forex pairs.

 ______ SIGNALS ______

The script has 4 mandatory conditions...
PineScript code:

Pine Script™ strategy
Stochastic Moving Average
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  LucasVivien
//  Since  this  Strategy  may  have  its  stop  loss  hit  within  the  opening  candle,  consider  turning  on  'Recalculate  :  After  Order  is  filled'  in  the  strategy  settings,  in  the  "Properties"  tabs
//@version=5
strategy("Stochastic  Moving  Average",  shorttitle="Stoch.  EMA",  overlay=true,  default_qty_type=  strategy.cash,  initial_capital=10000,  default_qty_value=100)
//==============================================================================
//==============================      USER  INPUT      ================================
//==============================================================================
var  g_tradeSetup  =  "       Trade  Setup"
activateLongs    =  input.bool  (title="Long  Trades"                ,  defval=true                                                                        ,  inline="A1",  group=g_tradeSetup,  tooltip="")
activateShorts  =  input.bool  (title="Short  Trades"              ,  defval=true                                                                        ,  inline="A1",  group=g_tradeSetup,  tooltip="")
rr                          =  input.float(title="Risk  :  Reward"            ,  defval=1.1  ,  minval=0,  maxval=100        ,  step=0.1,  inline=""    ,  group=g_tradeSetup,  tooltip="")
RiskEquity          =  input.bool  (title="Risk  =  %  Equity    ",  defval=false                                                                      ,  inline="A2",  group=g_tradeSetup,  tooltip="Set  stop  loss  size  as  a  percentage  of  'Initial  Capital'  ->  Strategy  Parameter  ->  Properties  tab  (Low  liquidity  markets  will  affect  will  prevent  to  get  an  exact  amount  du  to  gaps)")
riskPrctEqui      =  input.float(title=""                                      ,  defval=1      ,  minval=0,  maxval=100        ,  step=0.1,  inline="A2",  group=g_tradeSetup,  tooltip="")
RiskUSD                =  input.bool  (title="Risk  =  $  Amount   "  ,  defval=true                                                                        ,  inline="A3",  group=g_tradeSetup,  tooltip="Set  stop  loss  size  as  a  fixed  Base  currency  amount  (Low  liquidity  markets  will  affect  will  prevent  to  get  an  exact  amount  du  to  gaps)")
riskUSD                =  input.float(title=""                                      ,  defval=200  ,  minval=0,  maxval=1000000,  step=100,  inline="A3",  group=g_tradeSetup,  tooltip="")
var  g_stopLoss  =  "       Stop  Loss"
atrMult  =  input.float(title="ATR  Multiplier",  defval=3  ,  minval=0,  maxval=100  ,  step=0.1,  tooltip="",  inline="",  group=g_stopLoss)
atrLen    =  input.int    (title="ATR  Lookback"    ,  defval=14,  minval=0,  maxval=1000,  step=1    ,  tooltip="",  inline="",  group=g_stopLoss)
var  g_stochastic  =  "       Stochastic"
Klen                        =  input.int    (title="K%"                                      ,  defval=14,  minval=0,  maxval=1000,  step=1,  inline="S2",  group=g_stochastic,  tooltip="")
Dlen                        =  input.int    (title=" D%"                                    ,  defval=2  ,  minval=0,  maxval=1000,  step=1,  inline="S2",  group=g_stochastic,  tooltip="")
OBstochLvl            =  input.int    (title="OB"                                      ,  defval=80,  minval=0,  maxval=100  ,  step=1,  inline="S1",  group=g_stochastic,  tooltip="")
OSstochLvl            =  input.int    (title=" OS"                                    ,  defval=20,  minval=0,  maxval=100  ,  step=1,  inline="S1",  group=g_stochastic,  tooltip="")
OBOSlookback        =  input.int    (title="Stoch.  OB/OS  lookback",  defval=0  ,  minval=0,  maxval=100  ,  step=1,  inline=""    ,  group=g_stochastic,  tooltip="This  option  allow  to  look  'x'  bars  back  for  a  value  of  the  Stochastic  K  line  to  be  overbought  or  oversold  when  detecting  an  entry  signal  (if  0,  looks  only  at  current  bar.  if  1,  looks  at  current  and  previous  and  so  on)")
OBOSlookbackAll  =  input.bool  (title="All  must  be  OB/OS"        ,  defval=false                                                        ,  inline=""    ,  group=g_stochastic,  tooltip="If  turned  on,  all  bars  within  the  Stochastic  K  line  lookback  period  must  be  overbought  or  oversold  to  return  a  true  signal")
entryColor            =  input.color(title="   "                                    ,  defval=#00ffff                                                    ,  inline="S3",  group=g_stochastic,  tooltip="")
baseColor              =  input.color(title="  "                                      ,  defval=#333333                                                    ,  inline="S3",  group=g_stochastic,  tooltip="Will  trun  to  designated  color  when  stochastic  gets  to  opposite  extrem  zone  of  current  trend  /  Number  =  transparency")
transp                    =  input.int    (title="   "                                    ,  defval=50,  minval=0,  maxval=100,  step=10,  inline="S3",  group=g_stochastic,  tooltip="")
var  g_ema  =  "       Exp.  Moving  Average"
ema1len  =  input.int    (title="Fast  EMA       ",  defval=4  ,  minval=0,  maxval=1000,  step=1,  inline="E1",  group=g_ema,  tooltip="")
ema2len  =  input.int    (title="Slow  EMA       ",  defval=40,  minval=0,  maxval=1000,  step=1,  inline="E2",  group=g_ema,  tooltip="")
ema1col  =  input.color(title="       "                ,  defval=#0066ff                                                    ,  inline="E1",  group=g_ema,  tooltip="")
ema2col  =  input.color(title="       "                ,  defval=#0000ff                                                    ,  inline="E2",  group=g_ema,  tooltip="")
var  g_referenceMarket  ="       Reference  Market"
refMfilter  =  input.bool          (title="Reference  Market  Filter",  defval=false                        ,  inline="",  group=g_referenceMarket)
market          =  input.symbol      (title="Market"                                  ,  defval="BINANCE:BTCUSDT",  inline="",  group=g_referenceMarket)
res                =  input.timeframe(title="Timeframe"                            ,  defval="30"                          ,  inline="",  group=g_referenceMarket)
len                =  input.int            (title="EMA  Length"                          ,  defval=50                          ,inline="",group=g_referenceMarket)
varg_alertMessages="   3CommasAlertMessages"
openLongAlertMessage=input.string(title="OpenLongAlertMessage",defval="",group=g_alertMessages,tooltip="Paste''Messagefordealstartsignal''fromlongbot")
openShortAlertMessage=input.string(title="OpenShortAlertMessage",defval="",group=g_alertMessages,tooltip="Paste''Messagefordealstartsignal''fromshortbot")
closeLongAlertMessage=input.string(title="CloseLongAlertMessage",defval="",group=g_alertMessages,tooltip="Paste''MessagetocloseorderatMarketPrice''fromlongbot")
closeShortAlertMessage=input.string(title="CloseShortAlertMessage",defval="",group=g_alertMessages,tooltip="Paste''MessagetocloseorderatMarketPrice''fromshortbot")
//==============================================================================
//==========================FILTERS&SIGNALS=============================
//==============================================================================
//------------------------------Stochastic--------------------------------
K=ta.stoch(close,high,low,Klen)
D=ta.sma(K,Dlen)
stochBullCross=ta.crossover(K,D)
stochBearCross=ta.crossover(D,K)
OSstoch=false
OBstoch=false
fori=0toOBOSlookback
ifK[i]<OSstochLvl
OSstoch:=true
else
ifOBOSlookbackAll
OSstoch:=false
fori=0toOBOSlookback
ifK[i]>OBstochLvl
OBstoch:=true
else
ifOBOSlookbackAll
OBstoch:=false
//----------------------------MovingAverages-----------------------------
ema1=ta.ema(close,ema1len)
ema2=ta.ema(close,ema2len)
emaBull=ema1>ema2
emaBear=ema1<ema2
//----------------------------Pricesource--------------------------------
bullRetraceZone=(close<ema1andclose>=ema2)
bearRetraceZone=(close>ema1andclose<=ema2)
//---------------------------Referencemarket-----------------------------
ema=ta.ema(close,len)
emaHTF=request.security(market,res,ema[barstate.isconfirmed?0:1])
closeHTF=request.security(market,res,close[barstate.isconfirmed?0:1])
bullRefMarket=(closeHTF>emaHTForcloseHTF[1]>emaHTF[1])
bearRefMarket=(closeHTF<emaHTForcloseHTF[1]<emaHTF[1])
//--------------------------SIGNALVALIDATION-----------------------------
validLong=stochBullCrossandOSstochandemaBullandbullRetraceZone
andactivateLongsand(refMfilter?bullRefMarket:true)andstrategy.position_size==0
validShort=stochBearCrossandOBstochandemaBearandbearRetraceZone
andactivateShortsand(refMfilter?bearRefMarket:true)andstrategy.position_size==0
//==============================================================================
//===========================STOPS&TARGETS==============================
//==============================================================================
//SL&TPcalculation
SLdist=ta.atr(atrLen)*atrMult
longSL=close-SLdist
longSLDist=close-longSL
longTP=close+(longSLDist*rr)
shortSL=close+SLdist
shortSLDist=shortSL-close
shortTP=close-(shortSLDist*rr)
varSLsaved=0.0
varTPsaved=0.0
ifvalidLongorvalidShort
SLsaved:=validLong?longSL:validShort?shortSL:na
TPsaved:=validLong?longTP:validShort?shortTP:na
//SL&TPhits
varlongSLTPhit=false
varshortSLTPhit=false
ifstrategy.position_size[1]>0andstrategy.position_size==0and(high>=TPsavedorlow<=SLsaved)
longSLTPhit:=true
else
longSLTPhit:=false
ifstrategy.position_size[1]<0andstrategy.position_size==0and(low<=TPsavedorhigh>=SLsaved)
shortSLTPhit:=true
else
shortSLTPhit:=false
//==============================================================================
//==========================STRATEGYCOMMANDS=============================
//==============================================================================

ifvalidLong
strategy.entry("Long",strategy.long,
qty=RiskEquity?((riskPrctEqui/100)*strategy.equity)/longSLDist:RiskUSD?riskUSD/longSLDist:na)
ifvalidShort
strategy.entry("Short",strategy.short,
qty=RiskEquity?((riskPrctEqui/100)*strategy.equity)/shortSLDist:RiskUSD?riskUSD/shortSLDist:na)
strategy.exit(id="LongExit",from_entry="Long",limit=TPsaved,stop=SLsaved,when=strategy.position_size>0)
strategy.exit(id="ShortExit",from_entry="Short",limit=TPsaved,stop=SLsaved,when=strategy.position_size<0)
//==============================================================================
//================================ALERTS==================================
//==============================================================================
ifvalidLong
alert(openLongAlertMessage,alert.freq_once_per_bar_close)
ifvalidShort
alert(openShortAlertMessage,alert.freq_once_per_bar_close)
iflongSLTPhit
alert(closeLongAlertMessage,alert.freq_once_per_bar)
ifshortSLTPhit
alert(closeShortAlertMessage,alert.freq_once_per_bar)
//==============================================================================
//=============================CHARTPLOTS================================
//==============================================================================

//----------------------------Stops&Targets-----------------------------
plot(strategy.position_size!=0or(strategy.position_size[1]!=0andstrategy.position_size==0)?SLsaved:na,color=color.red,style=plot.style_linebr)
plot(strategy.position_size!=0or(strategy.position_size[1]!=0andstrategy.position_size==0)?TPsaved:na,color=color.green,style=plot.style_linebr)
//---------------------------------EMAs-----------------------------------
l1=plot(ema1,color=ema1col,linewidth=2)
l2=plot(ema2,color=ema2col,linewidth=2)
//--------------------------Stochasticgradient---------------------------
fill(l1,l2,color.new(color.from_gradient(K,OSstochLvl,OBstochLvl,
emaBull?entryColor:emaBear?baseColor:na,
emaBull?baseColor:emaBear?entryColor:na),transp))

//----------------------------TradingSignals-----------------------------
plotshape(validLong,color=color.green,location=location.belowbar,style=shape.xcross,size=size.small)
plotshape(validShort,color=color.red,location=location.abovebar,style=shape.xcross,size=size.small)
//----------------------------ReferenceMarket----------------------------
bgcolor(bullRefMarketandrefMfilter?color.new(color.green,90):na)
bgcolor(bearRefMarketandrefMfilter?color.new(color.red,90):na)
Expand (193 lines)
