Script Name: FFT Strategy Bi-Directional Stop-Profit-Trailing + VMA + Aroon
Author: Gentleman-Goat
Description: This strategy uses the  Fast Fourier Transform  inspired from the source code of  @tbiktag  for the Fast Fourier Transform &  @lazybear  for the VMA filter.

If you are not familiar with the  Fast Fourier transform  it is a variation of the Discrete Fourier Transform.   Veritasium  on youtube has a great video on it with a follow up recommendation from...
PineScript code:

Pine Script™ strategy
FFT Strategy Bi-Directional Stop/Profit/Trailing + VMA + Aroon
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  Gentleman-Goat
//  credit  to  tbiktag  for  FFT
//  credit  to  lazybear  for  VMA
//  House  Rules:  This  code  borrows  from  the  user  tbiktag's  source  code  (many  thanks  for  making  it  open  source!)  and  what  I  did  was  modify  it  slightly  and  turned  it  into  a  strategy.    His  notes  regarding  it  are  below.    I  also  borrowed  and  revised  lazybears  variable  moving  average  (thank  you  as  well!)
//  tbiktag  --notes  below  regarding  usage
//  This  tool  computes  the  one-dimensional  N-point  discrete  Fourier  Transform
//  (DFT)  with  the  efficient  Fast  Fourier  Transform  (FFT)  algorithm.
//
//  The  tool  uses  FFT  to  decompose  the  input  time  series  into  its
//  periodic  constituents  and  seasonalities,  in  other  words,  its  frequency
//  components.
//
//  Subsequently  it  allows  reconstructing  the  time-domain  data  while  using
//  only  the  frequency  components  within  a  user-defined  range  (band-pass  filtering).
//  Thereby,  this  tool  can  reveal  the  cyclical  characteristics  of  the  studied  market,
//  and  also  remove  high-frequency  noise  from  the  time  series.
//  --  end  tbiktag  notes
//@version=5
strategy(title="FFT  Strategy",shorttitle  =  "FFT  Strat",  overlay=false,max_lines_count=500,max_labels_count  =  500,max_bars_back=5000,initial_capital  =  1000,default_qty_type  =  strategy.percent_of_equity,default_qty_value  =  100,calc_on_every_tick  =  false,process_orders_on_close=true)
import  tbiktag/FFTLibrary/1  as  fft
//--  FFT  --
src  =  input.source(title='Source',  defval=ohlc4,  group='Fourier  Input',  inline='linei1')
N  =  input.int(title='Length',  defval=128,  options=[8,  16,  32,  64,  128,  256,  512,  1024,  2048,  4096],  group='Fourier  Input',  tooltip='Source  and  number  of  elements  in  the  input  dataset',inline='linei1')
ispp=input.bool(title='StandardizeInputDataset',defval=true,group='FourierInput',tooltip='Subtractsthemeanofthedatasetfromeachelementandnormalizestheresult'+'bythestandarddeviation')
freqdomain=input.bool(title='ShowFrequency-DomainPowerSpectrum',defval=false,group='FourierOutput',tooltip='Plotsthefrequencyspectrumofthesquaredmagnitudes'+'oftheFouriercoefficients(whichareameasureofspectralpower).'+'Zerofrequencyisomitted.')
istable=input.bool(title='DominantCycles,Rows:',defval=false,group='FourierOutput',inline='lineo1')
ntabfreqs=input.int(title='',defval=5,minval=1,group='FourierOutput',inline='lineo1',tooltip='ShowsthetablewiththeinfoaboutNmostsignificantfreqeuncycomponents.\n'+'-1stcolumn:componentnumber(N)\n'+'-2ndcolumn:periodofthecomponent(intheunitsofinputdataresolution)\n'+'-3dcolumn:relativepower(normalizedtothemaximumpower)')
//timedomain=input.bool(title='ShowInverseFourierTransform(Filtered)',defval=false,group='FourierOutput',tooltip='Reconstructsandplotsthedatasetinthetimedomain,blocking'+'frequencycomponentsoutsideofthecutofffrequenciesdefinedbelow.')
ismoving=input.bool(title='ApplyFFTFilterinaMovingWindow',defval=true,group='FourierOutput',tooltip='Appliesthefilterforeachbarwithin'+'thetimerangedefinedbelow.')
islowthrs=input.bool(title='',defval=true,group='FilteredFourierComponents',inline='linef1')
N_first=input.int(title='LowestAllowedN',defval=1,minval=0,group='FilteredFourierComponents',tooltip='Thenumberofthelowestfrequencycomponentallowedtopass.'+'Frequencycomponentsaboveitwillbeblocked.',inline='linef1')
ishghthrs=input.bool(title='',defval=true,group='FilteredFourierComponents',inline='linef2')
N_last=input.int(title='HighestAllowedN',defval=12,minval=0,group='FilteredFourierComponents',tooltip='Thenumberofthehighestfrequencycomponentallowedtopass.'+'Frequencycomponentsaboveitwillbeblocked.',inline='linef2')
fixedstart=input.bool(title='',group='FourierFilteringTimeRange',inline='linebac1',defval=false)
filter_start=input.time(title='',inline='linebac1',group='FourierFilteringTimeRange',defval=timestamp('01Jan202013:30+0000'),tooltip='Ifdeactivated,filteringstarsfromthefirstavailablebar.')
fixedend=input.bool(title='',group='FourierFilteringTimeRange',inline='linebac2',defval=false)
filter_end=input.time(title='',inline='linebac2',group='FourierFilteringTimeRange',defval=timestamp('30Dec208023:30+0000'),tooltip='Ifdeactivated,filteringendsatthelastavailablebar.')
//--VMAFilter--
use_vma_filter=input.bool(defval=true,title="UseVMAFilter",group="VMAFilter")
vma_src=input.source(defval=close,title="VMASrc",group="VMAFilter")
vma_length=input.int(defval=65,title="VMALength",group="VMAFilter")
vma_timeframe=input.timeframe(defval="240",title="VMATimeFrame",group="VMAFilter")
allow_vma_filter_long=input.string(defval="GreenorBlue",options=["Green","Blue","Red","GreenorBlue","BlueorRed","RedorGreen"],title="AllowLongWhen",group="VMAFilter")
allow_vma_filter_short=input.string(defval="Blue",options=["Green","Blue","Red","GreenorBlue","BlueorRed","RedorGreen"],title="AllowShortWhen",group="VMAFilter")
use_vma_filter_stop_loss=input.bool(defval=false,title="UseVMAFilterStopLoss",group="VMAFilterStopLoss")
cancel_long_when_vma_filter=input.string(defval="Red",options=["Green","Blue","Red","GreenorBlue","BlueorRed","RedorGreen"],title="CancelLongWhen",group="VMAFilterStopLoss")
cancel_short_when_vma_filter=input.string(defval="Green",options=["Green","Blue","Red","GreenorBlue","BlueorRed","RedorGreen"],title="CancelShortWhen",group="VMAFilterStopLoss")
//--AroonFilter--
use_aroon_filter_long=input.bool(defval=true,title="UseAroonFilterLong",group="AroonFilter")
use_aroon_filter_short=input.bool(defval=true,title="UseAroonFilterShort",group="AroonFilter")
aroon_length_long=input.int(defval=13,title="LengthLong",minval=1,group="AroonFilter")
aroon_length_short=input.int(defval=13,title="LengthShort",minval=1,group="AroonFilter")
aroon_upper_long_req=input.float(defval=1,title="Green(Upper)LineBelow%(Long)",minval=0,maxval=100,group="AroonFilter",inline='aroon_l1')
aroon_lower_long_req=input.float(defval=99,title="Red(Lower)LineAbove%(Long)",minval=0,maxval=100,group="AroonFilter",inline='aroon_l1')
aroon_upper_short_req=input.float(defval=99,title="Green(Upper)LineAbove%(Short)",minval=0,maxval=100,group="AroonFilter",inline='aroon_l2')
aroon_lower_short_req=input.float(defval=1,title="Red(Lower)LineBelow%(Short)",minval=0,maxval=100,group="AroonFilter",inline='aroon_l2')
aroon_upper_long=100*(ta.highestbars(high,aroon_length_long+1)+aroon_length_long)/aroon_length_long
aroon_lower_long=100*(ta.lowestbars(low,aroon_length_long+1)+aroon_length_long)/aroon_length_long
aroon_upper_short=100*(ta.highestbars(high,aroon_length_short+1)+aroon_length_short)/aroon_length_short
aroon_lower_short=100*(ta.lowestbars(low,aroon_length_short+1)+aroon_length_short)/aroon_length_short
aroonLongCross=false
if(aroon_upper_long<aroon_upper_long_reqandaroon_lower_long>aroon_lower_long_reqandstrategy.position_size>0)
aroonLongCross:=true
aroonShortCross=false
if(aroon_upper_short>aroon_upper_short_reqandaroon_lower_short<aroon_lower_short_reqandstrategy.position_size<0)
aroonShortCross:=true
plot(aroon_upper_long*0.05-2.5,"AroonUpLong",color=color.rgb(0,255,0,70),linewidth=1,display=(use_aroon_filter_long?display.all:display.none))
plot(aroon_lower_long*0.05-2.5,"AroonDownLong",color=color.rgb(255,0,0,70),linewidth=1,display=(use_aroon_filter_long?display.all:display.none))
plot(aroon_upper_long*0.05-2.5,"AroonUpShort",color=color.rgb(0,255,0,70),linewidth=1,display=(use_aroon_filter_short?display.all:display.none))
plot(aroon_lower_long*0.05-2.5,"AroonDownShort",color=color.rgb(255,0,0,70),linewidth=1,display=(use_aroon_filter_short?display.all:display.none))
//ArroonPoints
//long
aroon_high_boundary_long=5*(0+aroon_upper_long_req*0.01)-2.5
aroon_low_boundary_long=5*(0+aroon_lower_long_req*0.01)-2.5
h1_arroon_long_upper=hline(aroon_high_boundary_long,color=color.green,display=(use_aroon_filter_long?display.all:display.none))
h2_arroon_long_lower=hline(aroon_low_boundary_long,color=color.red,display=(use_aroon_filter_long?display.all:display.none))
//short
aroon_high_boundary_short=5*(0+aroon_upper_short_req*0.01)-2.5
aroon_low_boundary_short=5*(0+aroon_lower_short_req*0.01)-2.5
h1_arroon_short_upper=hline(aroon_high_boundary_short,color=color.green,display=(use_aroon_filter_short?display.all:display.none))
h2_arroon_short_lower=hline(aroon_low_boundary_short,color=color.red,display=(use_aroon_filter_short?display.all:display.none))
//--StrategySpecific--
allow_long=input.bool(defval=true,title="Long",group="AllowEntry")
allow_short=input.bool(defval=true,title="Short",group="AllowEntry")
use_stop_loss_long=input.bool(defval=true,title="UseLong",group="StopLoss")
stop_loss_long_percentage=input.float(defval=7.5,title="Long%",group="StopLoss")*.01
use_stop_loss_short=input.bool(defval=true,title="UseShort",group="StopLoss")
stop_loss_short_percentage=input.float(defval=8.0,title="Short%",group="StopLoss")*.01
use_trailing_stop_loss_long=input.bool(defval=false,title="UseLong",group="TrailingStopLoss")
trailing_stop_loss_long_percentage=input.float(defval=2.0,title="Long%",group="TrailingStopLoss")*.01
use_trailing_stop_loss_short=input.bool(defval=false,title="UseShort",group="TrailingStopLoss")
trailing_stop_loss_short_percentage=input.float(defval=2.0,title="Short%",group="TrailingStopLoss")*.01
use_take_profit_long=input.bool(defval=true,title="UseLong",group="TakeProfit")
take_profit_long_percentage=input.float(defval=105,title="Long%",group="TakeProfit")*.01
use_take_profit_short=input.bool(defval=true,title="UseShort",group="TakeProfit")
take_profit_short_percentage=input.float(defval=50,title="Short%",group="TakeProfit")*.01
use_trailing_take_profit_long=input.bool(defval=false,title="UseLong",group="TrailingTakeProfit")
trailing_take_profit_long_min_profit_percentage=input.float(defval=10,title="ActivationMinimumProfitLong%",group="TrailingTakeProfit")*.01
trailing_take_profit_long_percentage=input.float(defval=2.0,title="TrailingStopLong%",group="TrailingTakeProfit")*.01
use_trailing_take_profit_short=input.bool(defval=false,title="UseShort",group="TrailingTakeProfit")
trailing_take_profit_short_min_profit_percentage=input.float(defval=10,title="ActivationMinimumProfitShort%",group="TrailingTakeProfit")*.01
trailing_take_profit_short_percentage=input.float(defval=2.0,title="TrailingStopShort%",group="TrailingTakeProfit")*.01
//
//
//---Initialiation---
boolisinrange=(fixedstart?time>=filter_start:true)and(fixedend?time<=filter_end:true)
varline[]tLines=array.new_line(N-1)
varline[]fLines=array.new_line(N/2-2)
//
//Lookbackandseehowmanydatapointsareavailable
intm=int(math.log(N)/math.log(2))//approximatelog2
intnewM=0
forj=1tom
ifna(src[math.pow(2,j)])
break
newM:=j
//Usefewerdatapoints,ifthereisnotenough
m:=newM
N:=int(math.pow(2,newM))
//
//
//--CollectthedataandapplyFFT---
float[]dat_re=array.new_float(na)
float[]dat_im=array.new_float(na)
ifN>1and(isinrangeandismovingorbarstate.islast)
fori=0toN-1
array.push(dat_re,src[i])
array.push(dat_im,0.0)
ifispp
dat_re:=array.standardize(dat_re)
dat_re
//forwardFFT
fft.fft(dat_re,dat_im,"Forward")
//
//
//CollectFourieramplitudessquared(powers)
float[]power=array.new_float(na)
ifbarstate.islastandN>1
fori=0toN-1
array.push(power,math.pow(array.get(dat_re,i),2)+math.pow(array.get(dat_im,i),2))
array.set(power,0,0.0)//makesurethatthe0thcomponentdoesn'taffectthepowerspectrum
//
//
//--ApplyinverseFFTusingselectedfrequencycomponents--
float[]dat_re_filt=array.new_float(N)
float[]dat_im_filt=array.new_float(N)
N_first:=islowthrs?math.min(math.min(N_first,N_last),N/2):0
N_last:=ishghthrs?math.min(N_last,N/2):N/2
//Applythebandpassfilter
ifN>1and(isinrangeandismovingorbarstate.islast)
array.fill(dat_re_filt,0.0)
array.fill(dat_im_filt,0.0)
fori=N_firsttoN_lastby1
array.set(dat_re_filt,i,array.get(dat_re,i))
array.set(dat_im_filt,i,array.get(dat_im,i))
ifi!=0
array.set(dat_re_filt,N-i,array.get(dat_re,N-i))
array.set(dat_im_filt,N-i,array.get(dat_im,N-i))
//inverseFFT
fft.fft(dat_re_filt,dat_im_filt,"Inverse")
//
//Applythefiltertoreal-timedata
floatsrc_filtered=ismovingandisinrange?array.get(dat_re_filt,0):na
//
//
//---Plotting---
//Time-domainsubplot
//if(barstate.islast)andtimedomainandN>1
//fori=1toN-1
//floaty_plt1=array.get(dat_re_filt,i)
//floaty_plt2=array.get(dat_re_filt,i-1)
//array.push(tLines,line.new(bar_index[i],y_plt1,bar_index[i-1],y_plt2,width=2,color=#DE3163))
//line.delete(array.shift(tLines))
//
//Frequency-domainsubplot
if(barstate.islast)andfreqdomainandN>1
floaty_zero=array.max(dat_re_filt)
floaty_scale=(array.max(dat_re_filt)-array.min(dat_re_filt))/array.max(power)
lineyax=line.new(bar_index,y_zero,bar_index[int(N/2)+5],y_zero,style=line.style_arrow_right,color=color.silver)
labelylb=label.new(bar_index[int(N/2)+6],y_zero,text='f',style=label.style_none,textcolor=color.silver)
line.delete(yax[1])
label.delete(ylb[1])
fori=0toint(N/2)-2
isinwindow=i>=N_firstandi<=N_last
floaty_plt=array.get(power,i)
array.push(fLines,line.new(bar_index[i],y_zero,bar_index[i],y_plt*y_scale+y_zero,width=3,color=isinwindow?#DE3163:#AED6F1))
line.delete(array.shift(fLines))
//
//
//---Table---
vartablepanel=table.new(position.top_right,3,ntabfreqs+1)
if(barstate.islast)andistableandN>1
ntabfreqs:=math.min(ntabfreqs,N/2)
//Tableheader
table.cell(panel,0,0,'N',bgcolor=#AED6F1,text_size=size.small)
table.cell(panel,1,0,'CyclePeriod',bgcolor=#AED6F1,text_size=size.small)
table.cell(panel,2,0,'Rel.Power',bgcolor=#AED6F1,text_size=size.small)
//dropzerofrequencyfrompowerarrayandsortit
power_sorted=array.copy(power)
array.remove(power_sorted,0)
array.sort(power_sorted,order.descending)
//
fori=0tontabfreqs-1by1
//Periodinleftcolumn
id=array.indexof(power,array.get(power_sorted,2*i))
table.cell(panel,0,i+1,str.format("{0,number,#}",id),bgcolor=#DFEEF7,text_size=size.small)
table.cell(panel,1,i+1,str.format("{0,number,#.#}",float(N)/float(id)),text_color=color.black,bgcolor=#DFEEF7,text_size=size.small)
table.cell(panel,2,i+1,str.format("{0,number,#.####}",array.get(power_sorted,2*i)/array.get(power_sorted,0)),text_color=color.black,bgcolor=#DFEEF7,text_size=size.small)
//
//VMA(credittoLazyBear)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
makevma(src,l)=>
k=1.0/l
pdm=math.max((src-src[1]),0)
mdm=math.max((src[1]-src),0)
pdmS=0.0
pdmS:=((1-k)*nz(pdmS[1])+k*pdm)
mdmS=0.0
mdmS:=((1-k)*nz(mdmS[1])+k*mdm)
s=pdmS+mdmS
pdi=pdmS/s
mdi=mdmS/s
pdiS=0.0
pdiS:=((1-k)*nz(pdiS[1])+k*pdi)
mdiS=0.0
mdiS:=((1-k)*nz(mdiS[1])+k*mdi)
d=math.abs(pdiS-mdiS)
s1=pdiS+mdiS
iS=0.0
iS:=((1-k)*nz(iS[1])+k*d/s1)
hhv=ta.highest(iS,l)
llv=ta.lowest(iS,l)
d1=hhv-llv
vI=(iS-llv)/d1
vma=0.0
vma:=(1-k*vI)*nz(vma[1])+k*vI*src
vmaC=(vma>vma[1])?color.green:(vma<vma[1])?color.red:(vma==vma[1])?color.blue:color.black
[vma,vmaC]
[vma,vmaC]=makevma(vma_src,vma_length)
vma_val=request.security(syminfo.tickerid,vma_timeframe=="Sameaschart"?timeframe.period:vma_timeframe,vma[1],barmerge.gaps_off,barmerge.lookahead_on)
vmaC_val=request.security(syminfo.tickerid,vma_timeframe=="Sameaschart"?timeframe.period:vma_timeframe,vmaC[1],barmerge.gaps_off,barmerge.lookahead_on)
met_vma_filter_rules(direction,vma_color)=>
met_filter_rules=false
//["Green","Blue","Red","GreenorBlue","BlueorRed","RedorGreen"]
if(direction=="long")
if(allow_vma_filter_long=="Green"andvma_color==color.green)
met_filter_rules:=true
if(allow_vma_filter_long=="Red"andvma_color==color.red)
met_filter_rules:=true
if(allow_vma_filter_long=="Blue"andvma_color==color.blue)
met_filter_rules:=true
if(allow_vma_filter_long=="GreenorBlue"and(vma_color==color.greenorvma_color==color.blue))
met_filter_rules:=true
if(allow_vma_filter_long=="BlueorRed"and(vma_color==color.blueorvma_color==color.red))
met_filter_rules:=true
if(allow_vma_filter_long=="RedorGreen"and(vma_color==color.redorvma_color==color.green))
met_filter_rules:=true
if(direction=="short")
if(allow_vma_filter_short=="Green"andvma_color==color.green)
met_filter_rules:=true
if(allow_vma_filter_short=="Red"andvma_color==color.red)
met_filter_rules:=true
if(allow_vma_filter_short=="Blue"andvma_color==color.blue)
met_filter_rules:=true
if(allow_vma_filter_short=="GreenorBlue"and(vma_color==color.greenorvma_color==color.blue))
met_filter_rules:=true
if(allow_vma_filter_short=="BlueorRed"and(vma_color==color.blueorvma_color==color.red))
met_filter_rules:=true
if(allow_vma_filter_short=="RedorGreen"and(vma_color==color.redorvma_color==color.green))
met_filter_rules:=true
met_filter_rules
met_vma_cancel_rules(direction,vma_color)=>
met_cancel_rules=false
//["Green","Blue","Red","GreenorBlue","BlueorRed","RedorGreen"]
if(direction=="long")
if(cancel_long_when_vma_filter=="Green"andvma_color==color.green)
met_cancel_rules:=true
if(cancel_long_when_vma_filter=="Red"andvma_color==color.red)
met_cancel_rules:=true
if(cancel_long_when_vma_filter=="Blue"andvma_color==color.blue)
met_cancel_rules:=true
if(cancel_long_when_vma_filter=="GreenorBlue"and(vma_color==color.greenorvma_color==color.blue))
met_cancel_rules:=true
if(cancel_long_when_vma_filter=="BlueorRed"and(vma_color==color.blueorvma_color==color.red))
met_cancel_rules:=true
if(cancel_long_when_vma_filter=="RedorGreen"and(vma_color==color.redorvma_color==color.green))
met_cancel_rules:=true
if(direction=="short")
if(cancel_short_when_vma_filter=="Green"andvma_color==color.green)
met_cancel_rules:=true
if(cancel_short_when_vma_filter=="Red"andvma_color==color.red)
met_cancel_rules:=true
if(cancel_short_when_vma_filter=="Blue"andvma_color==color.blue)
met_cancel_rules:=true
if(cancel_short_when_vma_filter=="GreenorBlue"and(vma_color==color.greenorvma_color==color.blue))
met_cancel_rules:=true
if(cancel_short_when_vma_filter=="BlueorRed"and(vma_color==color.blueorvma_color==color.red))
met_cancel_rules:=true
if(cancel_short_when_vma_filter=="RedorGreen"and(vma_color==color.redorvma_color==color.green))
met_cancel_rules:=true
met_cancel_rules
//Plots&Boundaries
plot(src_filtered,color=(use_vma_filter?vmaC_val:color.orange),title='filtered',linewidth=3)
plot(aroonLongCross?src_filtered:na,color=color.green,style=plot.style_cross,linewidth=4,display=(use_aroon_filter_long?display.all:display.none))
plot(aroonShortCross?src_filtered:na,color=color.red,style=plot.style_cross,linewidth=4,display=(use_aroon_filter_short?display.all:display.none))
hline(0)
//ActualStrategyEntries
if(src_filtered>0andsrc_filtered[1]<=0)
//Ifanythefilterfailsforanyreasonthennoentryisallowed
passed_vma_filter=true
if(use_vma_filter)
passed_vma_filter:=met_vma_filter_rules("long",vmaC_val)

if(passed_vma_filter)//Ifit'sdisableditassumesitpassedbydefaultingtotrue
if(allow_long==true)
strategy.entry("long",strategy.long)
else
strategy.close("short")
if(src_filtered<0andsrc_filtered[1]>=0)
//Ifanythefilterfailsforanyreasonthennoentryisallowed
passed_vma_filter=true
if(use_vma_filter)
passed_vma_filter:=met_vma_filter_rules("short",vmaC_val)
if(passed_vma_filter)
if(allow_short==true)
strategy.entry("short",strategy.short)
else
strategy.close("long")
//VMAStopLoss
passed_vma_cancel_long=false
passed_vma_cancel_short=false
if(use_vma_filter_stop_loss)
if(allow_long==trueandstrategy.position_size>0)
passed_vma_cancel_long:=met_vma_cancel_rules("long",vmaC_val)
if(passed_vma_cancel_long==true)
strategy.close("long",comment="vmacancel")
if(allow_short==trueandstrategy.position_size<0)
passed_vma_cancel_short:=met_vma_cancel_rules("short",vmaC_val)
if(passed_vma_cancel_short==true)
strategy.close("short",comment="vmacancel")
//AroonStopLoss
if(allow_long==trueandstrategy.position_size>0andaroonLongCrossanduse_aroon_filter_long)
strategy.close("long",comment="aroonlongstoploss")
if(allow_short==trueandstrategy.position_size<0andaroonShortCrossanduse_aroon_filter_short)
strategy.close("short",comment="aroonshortstoploss")
//StopLoss,TakeProfit,TrailingStopLoss&TrailingTakeProfit
stop_loss_value_long=strategy.position_avg_price*(1-stop_loss_long_percentage)
take_profit_value_long=strategy.position_avg_price*(1+take_profit_long_percentage)
stop_loss_value_short=strategy.position_avg_price*(1+stop_loss_short_percentage)
take_profit_value_short=strategy.position_avg_price*(1-take_profit_short_percentage)
//Determinetrailstoplossprices
longStopPrice=0.0
longStopPrice:=if(strategy.position_size>0)
stopValue=close*(1-trailing_stop_loss_long_percentage)
math.max(stopValue,longStopPrice[1])
else
0
//Determinetrailingshortprice
shortStopPrice=0.0
shortStopPrice:=if(strategy.position_size<0)
stopValue=close*(1+trailing_stop_loss_short_percentage)
math.min(stopValue,shortStopPrice[1])
else
999999
//Determinetrailingtakeprofitlongprice
longTPStopPrice=0.0
varlongTPActive=false//Tokeeptrackofoncethestoplossbecomesactive
if(close>(strategy.opentrades.entry_price(0)*(1+trailing_take_profit_long_min_profit_percentage)))
longTPActive:=true
longTPStopPrice:=if(strategy.position_size>0)
stopValue=close*(1-trailing_take_profit_long_percentage)
math.max(stopValue,longTPStopPrice[1])
else
0
//Determinetrailingtakeprofitshortprice
shortTPStopPrice=0.0
varshortTPActive=false//Tokeeptrackofoncethestoplossbecomesactive
if(close<(strategy.opentrades.entry_price(0)*(1-trailing_take_profit_short_min_profit_percentage)))
shortTPActive:=true
shortTPStopPrice:=if(strategy.position_size<0)
stopValue=close*(1+trailing_take_profit_short_percentage)
math.min(stopValue,shortTPStopPrice[1])
else
999999
//plot(longStopPrice,color=color.orange)
//plot(shortStopPrice,color=color.teal)
if(use_trailing_stop_loss_longandclose<=longStopPriceandclose>strategy.opentrades.entry_price(0))
strategy.close("long",comment="TrailingStopLossLong")
if(use_trailing_stop_loss_shortandclose>=shortStopPriceandclose<strategy.opentrades.entry_price(0))
strategy.close("short",comment="TrailingStopLossShort")
//Onlywhenthetrailingtakeprofitbecomesactivatedatitsprofittargetwillthetrailingstoplossesbeallowedtotriggerandthereforeclosebelow
if(use_trailing_take_profit_longandclose<=longTPStopPriceandlongTPActive==true)
strategy.close("long",comment="TrailingTakeProfitStopLossLong")
if(use_trailing_take_profit_shortandclose>=shortTPStopPriceandshortTPActive==true)
strategy.close("short",comment="TrailingTakeProfitStopLossShort")
//StopLoss,TakeProfit&TrailingStopLoss
if(strategy.position_size>0)//Createsexitconditiononcelongorderisdetected
strategy.exit(id="TP/SLLong",from_entry="long",limit=use_take_profit_long?take_profit_value_long:na,stop=use_stop_loss_long?stop_loss_value_long:na,comment_loss="StopLossLong",comment_profit="TakeProfitLong",comment_trailing="TrailingStopLossLong")
if(strategy.position_size<0)//Createsexitconditiononceshortorderisdetected
strategy.exit(id="TP/SLShort",from_entry="short",limit=use_take_profit_short?take_profit_value_short:na,stop=use_stop_loss_short?stop_loss_value_short:na,comment_loss="StopLossShort",comment_profit="TakeProfitShort",comment_trailing="TrailingStopLossShort")
//Resetvariableswhenanyorderisclosed,exitedorflippeddirection
if(strategy.opentrades==0or(strategy.position_size!=strategy.position_size[1]))
longTPActive:=false
shortTPActive:=false
Expand (452 lines)
