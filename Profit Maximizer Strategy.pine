Script Name: Profit Maximizer Strategy
Author: SoftKill21
Description: First I would like to thank to @KivancOzbilgic for developing this indicator.
All the credit goes to him.

I just created a strategy, in order to try to find the perfect parameters, timeframe and currency for it.

I will provide below the same description like he has in the publish of profit maximizer


Profit Maximizer - PMax combines the powerful sides of MOST...
PineScript code:

Pine Scriptâ„¢ strategy
Profit Maximizer Strategy
//@version=4
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//developer  original:  @KivancOzbilgic
//author:  @SoftKill21
strategy("Profit  Maximizer  Strategy","PMax  strat",  overlay=true)
src  =  input(hl2,  title="Source")
Periods  =  input(title="ATR  Length",  type=input.integer,  defval=10)
Multiplier  =  input(title="ATR  Multiplier",  type=input.float,  step=0.1,  defval=3.0)
mav  =  input(title="Moving  Average  Type",  defval="VAR",  options=["SMA",  "EMA",  "WMA",  "TMA",  "VAR",  "WWMA",  "ZLEMA",  "TSF"])
length  =input(12,  "Moving  Average  Length",  minval=1)
changeATR=  input(title="Change  ATR  Calculation  Method  ?",  type=input.bool,  defval=false)
showsupport  =  input(title="Show  Moving  Average?",  type=input.bool,  defval=true)
showsignalsk  =  input(title="Show  Crossing  Signals?",  type=input.bool,  defval=true)
showsignalsc  =  input(title="Show  Price/Pmax  Crossing  Signals?",  type=input.bool,  defval=false)
highlighting  =  input(title="Highlighter  On/Off  ?",  type=input.bool,  defval=true)
atr2  =  sma(tr,  Periods)
atr=  changeATR  ?  atr(Periods)  :  atr2
valpha=2/(length+1)
vud1=src>src[1]  ?  src-src[1]  :  0
vdd1=src<src[1]  ?  src[1]-src  :  0
vUD=sum(vud1,9)
vDD=sum(vdd1,9)
vCMO=nz((vUD-vDD)/(vUD+vDD))
VAR=0.0
VAR:=nz(valpha*abs(vCMO)*src)+(1-valpha*abs(vCMO))*nz(VAR[1])
wwalpha  =  1/  length
WWMA  =  0.0
WWMA  :=  wwalpha*src  +  (1-wwalpha)*nz(WWMA[1])
zxLag  =  length/2==round(length/2)  ?  length/2  :  (length  -  1)  /  2
zxEMAData  =  (src  +  (src  -  src[zxLag]))
ZLEMA  =  ema(zxEMAData,  length)
lrc  =  linreg(src,  length,  0)
lrc1  =  linreg(src,length,1)
lrs  =  (lrc-lrc1)
TSF  =  linreg(src,  length,  0)+lrs
getMA(src,  length)  =>
        ma  =  0.0
        if  mav  ==  "SMA"
                ma  :=  sma(src,  length)
                ma
        if  mav  ==  "EMA"
                ma  :=  ema(src,  length)
                ma
        if  mav  ==  "WMA"
                ma  :=  wma(src,  length)
                ma
        if  mav  ==  "TMA"
                ma  :=  sma(sma(src,  ceil(length  /  2)),  floor(length  /  2)  +  1)
                ma
        if  mav  ==  "VAR"
                ma  :=  VAR
                ma
        if  mav  ==  "WWMA"
                ma  :=  WWMA
                ma
        if  mav  ==  "ZLEMA"
                ma  :=  ZLEMA
                ma
        if  mav  ==  "TSF"
                ma  :=  TSF
                ma
        ma

MAvg=getMA(src,  length)
longStop  =  MAvg  -  Multiplier*atr
longStopPrev  =  nz(longStop[1],  longStop)
longStop  :=  MAvg  >  longStopPrev  ?  max(longStop,  longStopPrev)  :  longStop
shortStop  =  MAvg  +  Multiplier*atr
shortStopPrev  =  nz(shortStop[1],  shortStop)
shortStop  :=  MAvg  <  shortStopPrev  ?  min(shortStop,  shortStopPrev)  :  shortStop
dir  =  1
dir  :=  nz(dir[1],  dir)
dir  :=  dir  ==  -1  and  MAvg  >  shortStopPrev  ?  1  :  dir  ==  1  and  MAvg  <  longStopPrev  ?  -1  :  dir
PMax  =  dir==1  ?  longStop:  shortStop
plot(showsupport  ?  MAvg  :  na,  color=#0585E1,  linewidth=2,  title="Moving  Avg  Line")
pALL=plot(PMax,  color=color.red,  linewidth=2,  title="PMax",  transp=0)
alertcondition(cross(MAvg,  PMax),  title="Cross  Alert",  message="PMax  -  Moving  Avg  Crossing!")
alertcondition(crossover(MAvg,  PMax),  title="Crossover  Alarm",  message="Moving  Avg  BUY  SIGNAL!")
alertcondition(crossunder(MAvg,  PMax),  title="Crossunder  Alarm",  message="Moving  Avg  SELL  SIGNAL!")
alertcondition(cross(src,  PMax),  title="Price  Cross  Alert",  message="PMax  -  Price  Crossing!")
alertcondition(crossover(src,  PMax),  title="Price  Crossover  Alarm",  message="PRICE  OVER  PMax  -  BUY  SIGNAL!")
alertcondition(crossunder(src,  PMax),  title="Price  Crossunder  Alarm",  message="PRICE  UNDER  PMax  -  SELL  SIGNAL!")
buySignalk  =  crossover(MAvg,  PMax)
plotshape(buySignalk  and  showsignalsk  ?  PMax*0.995  :  na,  title="Buy",  text="Buy",  location=location.absolute,  style=shape.labelup,  size=size.tiny,  color=color.green,  textcolor=color.white,  transp=0)
sellSignallk  =  crossunder(MAvg,  PMax)
plotshape(sellSignallk  and  showsignalsk  ?  PMax*1.005  :  na,  title="Sell",  text="Sell",  location=location.absolute,  style=shape.labeldown,  size=size.tiny,  color=color.red,  textcolor=color.white,  transp=0)
buySignalc  =  crossover(src,  PMax)
//  plotshape(buySignalc  and  showsignalsc  ?  PMax*0.995  :  na,  title="Buy",  text="Buy",  location=location.absolute,  style=shape.labelup,  size=size.tiny,  color=#0F18BF,  textcolor=color.white,  transp=0)
sellSignallc  =  crossunder(src,  PMax)
//  plotshape(sellSignallc  and  showsignalsc  ?  PMax*1.005  :  na,  title="Sell",  text="Sell",  location=location.absolute,  style=shape.labeldown,  size=size.tiny,  color=#0F18BF,  textcolor=color.white,  transp=0)
mPlot  =  plot(ohlc4,  title="",  style=plot.style_circles,  linewidth=0,display=display.none)
longFillColor  =  highlighting  ?  (MAvg>PMax  ?  color.green  :  na)  :  na
shortFillColor  =  highlighting  ?  (MAvg<PMax  ?  color.red  :  na)  :  na
fill(mPlot,  pALL,  title="UpTrend  Highligter",  color=longFillColor)
fill(mPlot,  pALL,  title="DownTrend  Highligter",  color=shortFillColor)
fast_length  =  input(title="Fast  Length",  type=input.integer,  defval=12)
slow_length  =  input(title="Slow  Length",  type=input.integer,  defval=26)
srcc  =  input(title="Source",  type=input.source,  defval=close)
signal_length  =  input(title="Signal  Smoothing",  type=input.integer,  minval  =  1,  maxval  =  50,  defval  =  9)
sma_source  =  input(title="Simple  MA(Oscillator)",  type=input.bool,  defval=true)
sma_signal  =  input(title="Simple  MA(Signal  Line)",  type=input.bool,  defval=false)
//sar
start  =  input(0.02)
increment  =  input(0.03)
maximum  =  input(0.3)
var  bool  uptrend  =  na
var  float  EP  =  na
var  float  SAR  =  na
var  float  AF  =  start
var  float  nextBarSAR  =  na
if  bar_index  >  0
        firstTrendBar  =  false
        SAR  :=  nextBarSAR
        if  bar_index  ==  1
                float  prevSAR  =  na
                float  prevEP  =  na
                lowPrev  =  low[1]
                highPrev  =  high[1]
                closeCur  =  close
                closePrev  =  close[1]
                if  closeCur  >  closePrev
                        uptrend  :=  true
                        EP  :=  high
                        prevSAR  :=  lowPrev
                        prevEP  :=  high
                else
                        uptrend  :=  false
                        EP  :=  low
                        prevSAR  :=  highPrev
                        prevEP  :=  low
                firstTrendBar  :=  true
                SAR  :=  prevSAR  +  start  *  (prevEP  -  prevSAR)
        if  uptrend
                if  SAR  >  low
                        firstTrendBar  :=  true
                        uptrend  :=  false
                        SAR  :=  max(EP,  high)
                        EP  :=  low
                        AF  :=  start
        else
                if  SAR  <  high
                        firstTrendBar  :=  true
                        uptrend  :=  true
                        SAR  :=  min(EP,  low)
                        EP  :=  high
                        AF  :=  start
        if  not  firstTrendBar
                if  uptrend
                        if  high  >  EP
                                EP  :=  high
                                AF  :=  min(AF  +  increment,  maximum)
                else
                        if  low  <  EP
                                EP:=low
AF:=min(AF+increment,maximum)
ifuptrend
SAR:=min(SAR,low[1])
ifbar_index>1
SAR:=min(SAR,low[2])
else
SAR:=max(SAR,high[1])
ifbar_index>1
SAR:=max(SAR,high[2])
nextBarSAR:=SAR+AF*(EP-SAR)
//Calculating
fast_ma=sma_source?sma(srcc,fast_length):ema(srcc,fast_length)
slow_ma=sma_source?sma(srcc,slow_length):ema(srcc,slow_length)
macd=fast_ma-slow_ma
signal=sma_signal?sma(macd,signal_length):ema(macd,signal_length)
hist=macd-signal
CCI=input(20)
ATR=input(5)
Multiplierc=input(1,title='ATRMultiplier')
original=input(true,title='originalcoloring')
thisCCI=cci(close,CCI)
lastCCI=nz(thisCCI[1])
bufferDn=high+Multiplierc*sma(tr,ATR)
bufferUp=low-Multiplierc*sma(tr,ATR)
if(thisCCI>=0andlastCCI<0)
bufferUp:=bufferDn[1]
if(thisCCI<=0andlastCCI>0)
bufferDn:=bufferUp[1]
if(thisCCI>=0)
if(bufferUp<bufferUp[1])
bufferUp:=bufferUp[1]
else
if(thisCCI<=0)
if(bufferDn>bufferDn[1])
bufferDn:=bufferDn[1]
x=0.0
x:=thisCCI>=0?bufferUp:thisCCI<=0?bufferDn:x[1]
swap=0.0
swap:=x>x[1]?1:x<x[1]?-1:swap[1]
swap2=swap==1?color.lime:color.red
swap3=thisCCI>=0?color.lime:color.red
swap4=original?swap3:swap2
//elliotwave
srce=input(close,title="source")
sma1length=input(5)
sma2length=input(35)
UsePercent=input(title="ShowDifaspercentofcurrentCandle",type=input.bool,defval=true)
smadif=iff(UsePercent,(sma(srce,sma1length)-sma(srce,sma2length))/srce*100,sma(srce,sma1length)-sma(srce,sma2length))
col=smadif<=0?color.red:color.green
//longC=high>high[1]andhigh[1]>high[2]andclose[2]>high[3]andhist>0anduptrendandsmadif<0andswap4==color.lime//andbuySignalk
longC=hist>0anduptrendandswap4==color.limeandbuySignalk
shortC=hist<0andnotuptrendandswap4==color.redandsellSignallk
//longC=high>high[1]andhigh[1]>high[2]andhigh[2]>high[3]andhigh[3]>high[4]andclose[4]>high[5]
//shortC=low<low[1]andlow[1]<low[2]andclose[2]<low[3]andhist<0andnotuptrendandsmadif>0andswap4==color.red//andsellSignallk
//shortC=low<low[1]andlow[1]<low[2]andlow[2]<low[3]andlow[3]<low[4]andclose[4]<low[5]
tp=input(0.35,title="tp")
sl=input(0.01,title="sl")
strategy.entry("long",1,when=longC)
strategy.entry("short",0,when=shortC)
strategy.exit("x_long","long",loss=close*sl/syminfo.mintick,profit=close*tp/syminfo.mintick,alert_message="closelong")
//strategy.entry("short",0,when=loss=close*sl/syminfo.mintick)
strategy.exit("x_short","short",loss=close*sl/syminfo.mintick,profit=close*tp/syminfo.mintick,alert_message="closeshort")
//strategy.entry("long",1,when=loss=close*sl/syminfo.mintick)
//strategy.entry("long",1,when=buySignalk)
//strategy.entry("short",0,when=sellSignallk)

Expand (250 lines)
