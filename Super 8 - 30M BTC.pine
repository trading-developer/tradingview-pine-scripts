Script Name: Super 8 - 30M BTC
Author: Good-Vibe
Description: Welcome to Super 8, the ultimate automatic trading script for Pine!


 This bad boy is designed to go both long and short, and it's equipped with all the tools you need to maximize your profits. Whether you're looking to take profit, set a trailing stop, or protect yourself with a stop loss, Super 8 has you covered.

 But that's not all! Super 8 is also loaded...
PineScript code:

Pine Script™ strategy
Super 8 - 30M BTC
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  Good-Vibe
//@version=5
//  ————————————————————  Strategy  Settings
strategy('Super  8  -  30M  BTC',
//  The  overlay  parameter  is  set  to  true,  which  means  that  the  strategy  will  be  plotted  on  top  of  the  price  chart
  overlay  =  true,
//  The  default_qty_value  parameter  is  set  to  0,  meaning  that  the  position  size  will  be  calculated  based  on  the  available  capital
  default_qty_value  =  0,
//  The  initial_capital  parameter  is  set  to  10000,  which  is  the  starting  capital  for  the  strategy
  initial_capital  =  10000,
//  The  pyramiding  parameter  is  set  to  0,  because  it  will  be  controlled  by  the  script
  pyramiding  =  0,
//  The  commission_value  parameter  is  set  to  0.04,  which  represents  a  0.04%  commission  for  each  trade
  commission_value  =  0.05,
//  The  commission_type  parameter  is  set  to  strategy.commission.percent,  which  means  that  the  commission  is  a  percentage  of  the  trade  value
  commission_type  =  strategy.commission.percent,
//  The  process_orders_on_close  parameter  is  set  to  true,  which  means  that  orders  will  be  executed  at  the  close  of  the  bar
  process_orders_on_close  =  true,
//  The  margin_long  parameter  is  set  to  100,  which  represents  the  margin  requirement  for  long  positions
  margin_long  =  100,
//  The  margin_short  parameter  is  set  to  100,  which  represents  the  margin  requirement  for  short  positions
  margin_short  =  100,
//  The  use_bar_magnifier  parameter  is  set  to  false,  which  means  that  the  chart  will  not  use  a  bar  magnifier
  use_bar_magnifier  =  false)
//  ————————————————————  Inputs
//  —————  Source  input
//  Define  the  position  to  take  (long,  short,  or  both)
Position  =  input.string('Both',  'Long  /  Short',  options  =  ['Long',  'Short',  'Both'],  tooltip  =  "Choose  the  position  to  take  (long,  short,  or  both)")
//  —————  EMA  inputs
//  Define  the  slow  and  fast  EMA  lengths
sEma_Length  =  input.int(775,  'Slow  EMA  Length',  minval  =  0,  step  =  25,  group  =  'EXPONENTIAL  MOVING  AVERAGE',  tooltip  =  "Set  the  length  of  the  slow  EMA")
fEma_Length  =  input.int(125,  'Fast  EMA  Length',  minval  =  0,  step  =  25,  group  =  'EXPONENTIAL  MOVING  AVERAGE',  tooltip  =  "Set  the  length  of  the  fast  EMA")
//  —————  ADX  inputs
//  Define  the  ADX  parameters
ADX_len  =  input.int(28,  'ADX  Length',  minval  =  1,  group  =  'AVERAGE  DIRECTIONAL  INDEX',  tooltip  =  "Set  the  length  of  the  ADX")
ADX_smo  =  input.int(10,  'ADX  Smoothing',  minval  =  1,  group  =  'AVERAGE  DIRECTIONAL  INDEX',  tooltip  =  "Set  the  smoothing  of  the  ADX")
th  =  input.float(23,  'ADX  Threshold',  minval  =  0,  step  =  0.5,  group  =  'AVERAGE  DIRECTIONAL  INDEX',  tooltip  =  "Set  the  threshold  for  the  ADX")
//  —————  SAR  inputs
//  Define  the  SAR  parameters
Sst  =  input.float(0.08,  'SAR  star',  minval  =  0.01,  step  =  0.01,  group  =  'PARABOLIC  SAR',  tooltip  =  "Set  the  starting  value  for  the  SAR")
Sinc  =  input.float(0.04,  'SAR  inc',  minval  =  0.01,  step  =  0.01,  group  =  'PARABOLIC  SAR',  tooltip  =  "Set  the  increment  value  for  the  SAR")
Smax  =  input.float(0.4,  'SAR  max',  minval  =  0.01,  step  =  0.01,  group  =  'PARABOLIC  SAR',  tooltip  =  "Set  the  maximum  value  for  the  SAR")
//  —————  MOVING  AVERAGE  CONVERGENCE  DIVERGENCE
//  Define  the  MACD  and  the  MAC-Z  parameters
MACD_options  =  input.string('MAC-Z',  'MACD  OPTION',  options  =  ['MACD',  'MAC-Z'],  group  =  'MOVING  AVERAGE  CONVERGENCE  DIVERGENCE',  tooltip="Select  the  type  of  MACD  to  use.  The  MAC-Z  is  designed  to  reduce  false  signals  compared  to  the  standard  MACD")
fastLength  =  input.int(24,  'MACD  Fast  MA  Length',  minval  =  1,  group  =  'MOVING  AVERAGE  CONVERGENCE  DIVERGENCE',  tooltip  =  "Number  of  periods  for  the  fast  moving  average.")
slowLength  =  input.int(54,  'MACD  Slow  MA  Length',  minval  =  1,  group  =  'MOVING  AVERAGE  CONVERGENCE  DIVERGENCE',  tooltip  =  "Number  of  periods  for  the  slow  moving  average.")
signalLength  =  input.int(14,  'MACD  Signal  Length',  minval  =  1,  group  =  'MOVING  AVERAGE  CONVERGENCE  DIVERGENCE',  tooltip  =  "Number  of  periods  for  the  signal  line.")
lengthz  =  input.int(14,  'Z-VWAP  Length',  minval  =  1,  group  =  'MOVING  AVERAGE  CONVERGENCE  DIVERGENCE',  tooltip  =  "Number  of  periods  for  the  Z-VWAP  used  in  the  MAC-Z  calculation.")
lengthStdev  =  input.int(11,  'StDev  Length',  minval  =  1,  group  =  'MOVING  AVERAGE  CONVERGENCE  DIVERGENCE',  tooltip  =  "Number  of  periods  for  the  standard  deviation  used  in  the  MAC-Z  calculation.")
A  =  input.float(0.1,  "MAC-Z  constant  A",  minval  =  -2.0,  maxval  =  2.0,  step  =  0.1,  group  =  'MOVING  AVERAGE  CONVERGENCE  DIVERGENCE',  tooltip  =  "Constant  A  used  in  the  MAC-Z  calculation.")
B  =  input.float(1.0,  "MAC-Z  constant  B",  minval  =  -2.0,  maxval  =  2.0,  step  =  0.1,  group  =  'MOVING  AVERAGE  CONVERGENCE  DIVERGENCE',  tooltip  =  "Constant  B  used  in  the  MAC-Z  calculation.")
//  —————  Volume  inputs  for  entries  condition  and  for  calculate  quantities  later
//  Define  volume  factor  and  simple  moving  average  length  for  volume  condition
volume_f  =  input.float(1.1,  'Volume  Factor',  minval  =  0,  step  =  0.1,  group  =  'VOLUME  CONDITION',  tooltip  =  "Factor  used  to  determine  the  minimum  required  volume  for  an  entry.")
sma_Length  =  input.int(89,  'SMA  Volume  Length',  minval  =  1,  group  =  'VOLUME  CONDITION',  tooltip  =  "Number  of  periods  for  the  simple  moving  average  used  in  the  volume  condition.")
//  —————  Bollinger  Bands  inputs
//  Define  inputs  for  Bollinger  Bands
BB_Length  =  input.int(40,  'BB  Length',  minval  =  1,  group  =  'BOLLINGER  BANDS',  tooltip  =  "Length  of  the  Bollinger  Bands  period")
BB_mult  =  input.float(2.0,  'BB  Multiplier',  minval  =  0.1,  step  =  0.1,  group  =  'BOLLINGER  BANDS',  tooltip  =  "Multiplier  for  the  Bollinger  Bands  width")
bbMinWidth01  =  input.float(5.0,  'Min.  BB  Width  %  (New  Position)',  minval  =  0,  step  =  0.5,  group  =  'BOLLINGER  BANDS',  tooltip  =  "Minimum  width  of  the  Bollinger  Bands  to  enter  a  new  position")
bbMinWidth02  =  input.float(2.0,  'Min.  BB  Width  %  (Pyramiding)',  minval  =  0,  step  =  0.5,  group  =  'BOLLINGER  BANDS',  tooltip  =  "Minimum  width  of  the  Bollinger  Bands  to  add  to  an  existing  position")
//  —————  Take  Profit  /  Trailing  Stop  input
//  Define  take  profit/trailing  stop  options  and  parameters
TP_options  =  input.string('Both',  'Take  Profit  Option',  options  =  ['Normal',  'Donchian',  'Both'],  group  =  'TAKE  PROFIT  /  TRAILING  STOP',  tooltip  =  "Option  for  the  take  profit  /  trailing  stop")
tp  =  input.float(1.8,  'Take  Profit  %',  minval  =  0,  step  =  0.1,  group  =  'TAKE  PROFIT  /  TRAILING  STOP',  tooltip  =  "Percentage  profit  target")
trailOffset  =  input.float(0.3,  'Trail  offset  %',  minval  =  0,  step  =  0.1,  group  =  'TAKE  PROFIT  /  TRAILING  STOP',  tooltip  =  "The  offset  percentage  used  for  the  trailing  stop.  If  set  to  0,  only  the  Take  Profit  option  will  be  used.  If  set  to  a  value  greater  than  0,  the  Trailing  Stop  option  will  be  used  and  the  use_bar_magnifier  parameter  must  also  be  set  to  true  for  more  realistic  results.")
//  —————  TP  Donchian  Channel  Input
//  Define  DonchianChannelperiodfortakeprofitoption
DClength=input.int(52,title='DonchianChannelPeriod',minval=1,group='TAKEPROFIT/TRAILINGSTOP',tooltip='DefinestheperiodoftheDonchianChannelusedforthetakeprofitoption.')
//—————StopLossinput
//Definestoplossoptionsandparameters
SL_options=input.string('Both','StopLossOption',options=['Normal','ATR','Both'],group='STOPLOSS',tooltip='Selectthetypeofstoplossoptionyouwanttouse.')
sl=input.float(9.0,'StopLoss%',minval=0,step=0.5,group='STOPLOSS',tooltip='Definesthepercentagevalueofthestoploss.')
//—————SLATRInputs
//DefineATRperiodandmultiplierforATRstoplossoption
atrPeriodSl=input.int(14,title='ATRPeriod',minval=0,group='STOPLOSS',tooltip='DefinestheperiodoftheAverageTrueRangeusedintheATRstoplossoption.')
multiplierPeriodSl=input.float(13.5,'ATRMultiplier',minval=0,step=0.5,group='STOPLOSS',tooltip='DefinesthemultiplierusedintheATRstoplossoption.')
//—————Riskinput
//Definemaximumriskpercentage
Risk=input.float(5,'Max.Risk%',tooltip="Setthemaximumpercentageofaccountbalanceyou'rewillingtoriskperposition",minval=0,maxval=100,group='RISK')
//—————Pyramiding
//Definepyramidingoptionsandparameters
Pyr=input.int(3,'Max.Pyramiding',tooltip="Setthemaximumnumberoftradesyouarewillingtoopenwithinaposition",minval=1,maxval=10,group='PYRAMIDING')
StepEntry=input.string('Incremental','StepEntryMode',tooltip="Selectthewayyouwanttoaddnewtrades",options=['Normal','Incremental'],group='PYRAMIDING')
bbBetterPrice=input.float(1.1,'Min.BetterPrice%',tooltip="Settheminimumbetterpricepercentageyouwanttogetwhenaddingnewtrades",minval=0.1,step=0.1,group='PYRAMIDING')
//—————Backtestinput
//SettingthestartdateforthebacktestingperiodasJanuary1,2000at1:00UTC
StartDate=timestamp('01Jan200001:00+000')
//Settingthestartofthetradingperiodforthebacktest,usingthestartdateaboveasthedefaultvalue
testPeriodStart=input.time(StartDate,'StartofTrading',tooltip="Setthestartdateandtimeofthebacktestingperiod",group='BACKTEST')
//————————————————————AveragePriceVariable
//Settingtheaveragepricevariabletotheclosepriceofeachcandle,andusingthestrategy'saveragepriceifavailable
floatAveragePrice=close
AveragePrice:=nz(strategy.position_avg_price,close)
//————————————————————ExponentialMovingAverage
//CalculatingtheslowandfastExponentialMovingAverages(EMAs)usingthecloseprice
sEMA=ta.ema(close,sEma_Length)
fEMA=ta.ema(close,fEma_Length)
//SettingtheconditionsforalongorshortsignalbasedontherelationshipbetweenthefastandslowEMAs
boolEMA_longCond=na
boolEMA_shortCond=na
EMA_longCond:=fEMA>sEMAandsEMA>sEMA[1]
EMA_shortCond:=fEMA<sEMAandsEMA<sEMA[1]
//PlottingtheEMAsonthechartandcoloringthembasedonthelongandshortconditions
EMA_color=EMA_longCond?color.new(color.green,50):EMA_shortCond?color.new(color.red,50):color.new(color.orange,50)
plot(sEMA,'SlowEMA',EMA_color,3)
plot(fEMA,'FastEMA',EMA_color,2)
//————————————————————ADX
//CalculatingtheDirectionalIndicatorPlus(+DI),DirectionalIndicatorMinus(-DI),andAverageDirectionalMovementIndex(ADX)
[DIPlus,DIMinus,ADX]=ta.dmi(ADX_len,ADX_smo)
//Settingtheconditionsforalongorshortsignalbasedontherelationshipbetween+DIand-DIandtheADXvalue
boolADX_longCond=na
boolADX_shortCond=na
ADX_longCond:=DIPlus>DIMinusandADX>th
ADX_shortCond:=DIPlus<DIMinusandADX>th
//Coloringthebarsonthechartbasedonthelongandshortconditions
ADX_color=ADX_longCond?color.new(color.green,25):ADX_shortCond?color.new(color.red,25):color.new(color.orange,25)
barcolor(color=ADX_color,title='ADX')
//————————————————————SAR
//CalculatingtheParabolicSAR(SAR)basedontheparameterssetforstep,max,andaccelerationfactor
SAR=ta.sar(Sst,Sinc,Smax)
//SettingtheconditionsforalongorshortsignalbasedontherelationshipbetweentheSARvalueandthecloseprice
boolSAR_longCond=na
boolSAR_shortCond=na
SAR_longCond:=SAR<close
SAR_shortCond:=SAR>close
//PlottingtheSARonthechartandcoloringitbasedonthelongandshortconditions
plot(SAR,'SAR',SAR_longCond?color.new(color.green,50):color.new(color.red,50),style=plot.style_circles)
//————————————————————MACD
//CalculatingtheMovingAverageConvergenceDivergence(MACD)anditssignalline,aswellastheMACD-Zvalue
//DefinethreevariableslMACD,sMACD,andhistbycallingtheta.macd()functionusingthe'close','fastLength','slowLength',and'signalLength'asparameters
[lMACD,sMACD,hist]=ta.macd(close,fastLength,slowLength,signalLength)
//—————MAC-Zcalculation
//Defineafunctioncalc_zvwap(pds)thatcalculatesthez-scoreofthevolume-weightedaverageprice(VWAP)of'close'foragivenperiod'pds'
calc_zvwap(pds)=>
mean=math.sum(volume*close,pds)/math.sum(volume,pds)
vwapsd=math.sqrt(ta.sma(math.pow(close-mean,2),pds))
(close-mean)/vwapsd
//Definefloatvariables
floatzscore=na
floatfastMA=na
floatslowMA=na
floatmacd=na
floatmacz=na
floatsignal=na
floathistmacz=na
//Callthefunctioncalc_zvwap(lengthz)tocalculatethez-scoreoftheVWAPforagivenperiod'lengthz'
zscore:=calc_zvwap(lengthz)
//Calculatethesimplemovingaveragesofthe'close'pricesusing'fastLength'and'slowLength'periods,andassignthemto'fastMA'and'slowMA'respectively
fastMA:=ta.sma(close,fastLength)
slowMA:=ta.sma(close,slowLength)
//Assignthe'lMACD'variableto'macd'
macd:=lMACD
//Calculate'macz'bymultiplyingthez-scorebyaconstant'A',
//addingthe'macd'value,anddividingbytheproductofthestandarddeviationofthe'close'pricesoveraperiod'lengthStdev'andaconstant'B'
macz:=(zscore*A)+(macd/(ta.stdev(close,lengthStdev)*B))
//Calculatethesimplemovingaverageofthe'macz'valuesoveraperiod'signalLength'andassignitto'signal'
signal:=ta.sma(macz,signalLength)
//Calculatethedifferencebetween'macz'and'signal'andassignitto'histmacz'
histmacz:=macz-signal
//—————MACDconditions
//Definetwobooleanvariables'MACD_longCond'and'MACD_shortCond'
boolMACD_longCond=na
boolMACD_shortCond=na
//If'MACD_options'isequalto'MACD',checkifthe'hist'valueisgreaterthan0andassigntheresultto'MACD_longCond';
//otherwise,checkif'histmacz'isgreaterthan0andassigntheresultto'MACD_longCond'
MACD_longCond:=MACD_options=='MACD'?hist>0:histmacz>0
//If'MACD_options'isequalto'MACD',checkifthe
MACD_shortCond:=MACD_options=='MACD'?hist<0:histmacz<0
//————————————————————BollingerBands
//—————BBcalculation
//Calculatesthemiddle,upperandlowerbandsusingtheBollingerBandstechnicalanalysisindicator
[BB_middle,BB_upper,BB_lower]=ta.bb(close,BB_Length,BB_mult)
//—————BollingerBandswidth
//CalculatesthewidthoftheBollingerBands
floatBB_width=na
BB_width:=(BB_upper-BB_lower)/BB_middle
//—————LongBollingerBandsconditions
//DefinestheconditionsforenteringalongpositionusingBollingerBands
//NewLongs
boolBB_long01=na
BB_long01:=Position!='Short'andnotADX_shortCondandta.crossunder(low,BB_lower)andEMA_longCondandBB_width>(bbMinWidth01/100)
//PyramidingLongs
boolBB_long02=na
BB_long02:=Position!='Short'andnotADX_shortCondandta.crossunder(low,BB_lower)andEMA_longCondandBB_width>(bbMinWidth02/100)
//—————ShortBollingerBandsconditions
//DefinestheconditionsforenteringashortpositionusingBollingerBands
//NewShorts
boolBB_short01=na
BB_short01:=Position!='Long'andnotADX_longCondandta.crossover(high,BB_upper)andEMA_shortCondandBB_width>(bbMinWidth01/100)
//PyramidingShorts
boolBB_short02=na
BB_short02:=Position!='Long'andnotADX_longCondandta.crossover(high,BB_upper)andEMA_shortCondandBB_width>(bbMinWidth02/100)
//—————BollingerBandsplotting
//PlotstheBollingerBandsonthechart.
u_BB=plot(BB_upper,'UpperBollingerBand',EMA_color,2)
l_BB=plot(BB_lower,'LowerBollingerBand',EMA_color,2)
fill(u_BB,l_BB,title='BollingerBandBackground',color=fEMA>sEMA?color.new(color.green,95):color.new(color.red,95))
//————————————————————Volume
//Definesconditionsforlongandshortpositionsbasedonvolume
boolVOL_longCond=na
boolVOL_shortCond=na
VOL_longCond:=volume>ta.sma(volume,sma_Length)*volume_f
VOL_shortCond:=VOL_longCond
//————————————————————Strategy
//Definesthelongandshortconditionsforenteringatradebasedonmultipleindicatorsandvolume
boollongCond=na
longCond:=Position!='Short'andEMA_longCondandADX_longCondandSAR_longCondandMACD_longCondandVOL_longCond
boolshortCond=na
shortCond:=Position!='Long'andEMA_shortCondandADX_shortCondandSAR_shortCondandMACD_shortCondandVOL_shortCond
//————————————————————TakeProfit
//—————DonchianChannelsCalculation
//CalculatestheDonchianChannelsfordeterminingtakeprofitlevels
floatDClower=na
floatDCupper=na
floatDCbasis=na
DClower:=ta.lowest(DClength)
DCupper:=ta.highest(DClength)
DCbasis:=math.avg(DCupper,DClower)
//—————TakeProfitConditions
//Determinesthetakeprofitlevelsbasedontheselectedoptions
floatlongPriceProfit=na
floatshortPriceProfit=na
ifTP_options=='Both'
//Calculatethelongandshorttakeprofitlevelsifbothoptionsareselected
longPriceProfit:=math.max(DCupper,(1+(tp/100))*AveragePrice)
shortPriceProfit:=math.min(DClower,(1-(tp/100))*AveragePrice)
elseifTP_options=='Normal'
//Calculatethenormaltakeprofitlevelsifthatoptionisselected
longPriceProfit:=(1+(tp/100))*AveragePrice
shortPriceProfit:=(1-(tp/100))*AveragePrice
elseifTP_options=='Donchian'
//CalculatetheDonchiantakeprofitlevelsifthatoptionisselected
longPriceProfit:=math.max(DCupper,AveragePrice)
shortPriceProfit:=math.min(DClower,AveragePrice)
//—————TakeProfitPlotting
//Plotthetakeprofitlevelsonthechart
plot(strategy.position_size>0?longPriceProfit:strategy.position_size<0?shortPriceProfit:na,
'TakeProfit',strategy.position_size>0?color.new(color.blue,30):color.new(color.red,30),2,plot.style_circles)
//————————————————————ATRStopLoss
//—————ATRCalculation
//CalculatetheATRstoplosslevels
floatATR_SL_Long=low-ta.atr(atrPeriodSl)*multiplierPeriodSl
floatATR_SL_Short=high+ta.atr(atrPeriodSl)*multiplierPeriodSl
floatlongStopPrev=nz(ATR_SL_Long[1],ATR_SL_Long)
floatshortStopPrev=nz(ATR_SL_Short[1],ATR_SL_Short)
ATR_SL_Long:=open>longStopPrev?math.max(ATR_SL_Long,longStopPrev):ATR_SL_Long
ATR_SL_Short:=open<shortStopPrev?math.min(ATR_SL_Short,shortStopPrev):ATR_SL_Short
//—————PriceStop
//Calculatethepricestoplevels
floatlongPriceStop=na
floatshortPriceStop=na
ifSL_options=='Both'
//Calculatethelongandshortpricestoplevelsifbothoptionsareselected
longPriceStop:=math.max(ATR_SL_Long,(1-(sl/100))*AveragePrice)
shortPriceStop:=math.min(ATR_SL_Short,(1+(sl/100))*AveragePrice)
elseifSL_options=='Normal'
//Calculatethenormalpricestoplevelsifthatoptionisselected
longPriceStop:=(1-(sl/100))*AveragePrice
shortPriceStop:=(1+(sl/100))*AveragePrice
elseifSL_options=='ATR'
//CalculatetheATRpricestoplevelsifthatoptionisselected
longPriceStop:=ATR_SL_Long
shortPriceStop:=ATR_SL_Short
//—————VariableStopLoss%
//Calculatethevariablestoplosspercentagelevels
floatslPercentLong=na
slPercentLong:=(math.max(0,(AveragePrice-longPriceStop))/AveragePrice)*100
floatslPercentShort=na
slPercentShort:=(math.max(0,(shortPriceStop-AveragePrice))/AveragePrice)*100
//—————StopLossplotting
//Plotsthestoplosslevelbasedonthecurrentpositionsizeandwhetherit'salongorshortposition
//Usescirclestovisualizethestoplosslevel
plot(strategy.position_size>0?longPriceStop:strategy.position_size<0?shortPriceStop:na,
'StopLoss',strategy.position_size>0?color.new(color.aqua,80):color.new(color.purple,70),2,plot.style_circles)
//—————Averagepriceplotting
//Plotstheaveragepriceofthecurrentposition,usingacrosstovisualizethepricelevel
//Usesdifferentcolorsdependingonwhetherit'salongorshortposition
plot(ta.change(strategy.position_avg_price)?strategy.position_avg_price:na,
'Averageprice',strategy.position_size>0?color.new(color.aqua,20):color.new(color.yellow,20),2,plot.style_cross)
//————————————————————Backtest
//Definethevariable"Equity"andassignitthevalueof"strategy.equity"
floatEquity=strategy.equity
//Definethevariable"Balance"andassignitthesumof"strategy.initial_capital"and"strategy.netprofit"
floatBalance=strategy.initial_capital+strategy.netprofit
//Definethevariable"RealizedPnL"andassignitthevalueof"strategy.netprofit"
floatRealizedPnL=strategy.netprofit
//Definethevariable"Floating"andassignitthevalueof"strategy.openprofit"
floatFloating=strategy.openprofit
//Calculatethepercentageof"Floating"relativeto"Balance"andassignitto"PFloating"
floatPFloating=(Floating/Balance)*100
//Calculatethepercentageof"RealizedPnL"relativeto"strategy.initial_capital"andassignitto"PRealizedPnL"
floatPRealizedPnL=(RealizedPnL/strategy.initial_capital)*100
//Calculatethesumof"Floating"and"RealizedPnL"andassignitto"URealizedPnL"
floatURealizedPnL=Floating+RealizedPnL
//Calculatethepercentageof"URealizedPnL"relativeto"strategy.initial_capital"andassignitto"PURealizedPnL"
floatPURealizedPnL=((URealizedPnL)/strategy.initial_capital)*100
//Calculatetheprofitfactorbydividing"strategy.grossprofit"by"strategy.grossloss"andassignitto"ProfitFactor"
floatProfitFactor=strategy.grossprofit/strategy.grossloss
//Calculatethepositionsizebymultiplying"strategy.position_size"and"strategy.position_avg_price"andassignitto"PositionSize"
floatPositionSize=strategy.position_size*strategy.position_avg_price
//Calculatethecashbysubtractingtheproductof"nz(PositionSize)"and"marginRate"from"Balance"andassignitto"Cash"
floatCash=Balance
//Calculatetheprofitabilitybydividing"strategy.wintrades"bythesumof"strategy.wintrades"and"strategy.losstrades",multiplyingby100,andassignitto"Profitability"
floatProfitability=(strategy.wintrades/(strategy.wintrades+strategy.losstrades))*100
//Calculatetheleverageparameterbydividingtheabsolutevalueof"PositionSize"by"Balance"andassignitto"LeverageParameter"
floatLeverageParameter=math.abs(nz(PositionSize/Balance))
//Calculatethetradingtimebysubtracting"strategy.closedtrades.entry_time(0)"from"time_close"andassignitto"TradingTime"
intTradingTime=time_close-strategy.closedtrades.entry_time(0)
//—————CreatingtheTable
//Createatablewithaspecificformatandassignittoavariable
varInfoPanel=table.new(position.bottom_left,2,10,border_width=1)
//Defineafunctionforthetableformatting
ftable(_table_id,_column,_row,_text,_bgcolor)=>
table.cell(_table_id,_column,_row,_text,0,0,color.black,text.align_left,text.align_center,size.tiny,_bgcolor)
//Functiontoconverttimeinmillisecondstostringformat
tfString(inttimeInMs)=>
//converttoseconds
floats=timeInMs/1000
//converttominutes
floatm=s/60
//converttohours
floath=m/60
//converttodays
floatd=h/24
//converttomonths
floatmo=d/30.416
//getminutes
inttm=math.floor(m%60)
//gethours
inttr=math.floor(h%24)
//getdays
inttd=math.floor(d%30.416)
//getmonths
inttmo=math.floor(mo%12)
//getyears
intys=math.floor(d/365)
//Formatthetimeintheappropriatestringformat
stringresult=switch
//iftimeintervalis1month,return"1M"
d==30andtr==10andtm==30=>"1M"
//iftimeintervalis1week,return"1W"
d==7andtr==0andtm==0=>"1W"
=>
//gettheyearsstring
stringyStr=ys?str.tostring(ys)+"Y":""
//getthemonthsstring
stringmoStr=tmo?str.tostring(tmo)+"M":""
//getthedaysstring
stringdStr=td?str.tostring(td)+"D":""
//getthehoursstring
stringhStr=tr?str.tostring(tr)+"H":""
//gettheminutesstring
stringmStr=tm?str.tostring(tm)+"min":""
//concatenateallthestringstogetthefinalresultstring
yStr+moStr+dStr+hStr+mStr
//Thiscodeisusingtheftablefunctiontocreateatableofinformationinapanel.
//Displayequityinformationintheinfopanelusingtheftablefunction
ftable(InfoPanel,0,0,'Equity:',#9598a1)
//Displaycurrentpositioninformationintheinfopanelusingtheftablefunction
ftable(InfoPanel,0,1,'Position:',#9598a1)
//Displayavailablecashinformationintheinfopanelusingtheftablefunction
ftable(InfoPanel,0,2,'Cash:',#9598a1)
//Displayfloatingprofit/lossinformationintheinfopanelusingtheftablefunction
ftable(InfoPanel,0,3,'Floating:',#9598a1)
//Displayrealizedprofit/lossinformationintheinfopanelusingtheftablefunction
ftable(InfoPanel,0,4,'RealizedPnL:',#9598a1)
//Displayunrealizedprofit/lossinformationintheinfopanelusingtheftablefunction
ftable(InfoPanel,0,5,'UnrealizedPnL:',#9598a1)
//Displayleverageinformationintheinfopanelusingtheftablefunction
ftable(InfoPanel,0,6,'Leverage:',#9598a1)
//Displayprofitabilityinformationintheinfopanelusingtheftablefunction
ftable(InfoPanel,0,7,'Profitability:',#9598a1)
//Displayprofitfactorinformationintheinfopanelusingtheftablefunction
ftable(InfoPanel,0,8,'ProfitFactor:',#9598a1)
//Displaytradingtimeinformationintheinfopanelusingtheftablefunction
ftable(InfoPanel,0,9,'TimeofTrading:',#9598a1)
//Displayequityvaluewithcurrencyinformationintheinfopanelusingtheftablefunction
ftable(InfoPanel,1,0,str.tostring(Equity,'#.##')+''+syminfo.currency,Equity>=0?color.green:color.red)
//Displaypositionsizewithbasecurrencyinformationintheinfopanelusingtheftablefunction
ftable(InfoPanel,1,1,str.tostring(strategy.position_size,'#.#####')+''+syminfo.basecurrency,strategy.position_size>=0?color.green:color.red)
//Displayavailablecashwithcurrencyinformationintheinfopanelusingtheftablefunction
ftable(InfoPanel,1,2,str.tostring(Cash,'#.##')+''+syminfo.currency,Cash>=0?color.green:color.red)
//Displaypercentageoffloatingprofit/lossinformationintheinfopanelusingtheftablefunction
ftable(InfoPanel,1,3,str.tostring(PFloating,'#.##')+'%',PFloating>=0?color.green:color.red)
//Displaypercentageofrealizedprofit/lossinformationintheinfopanelusingtheftablefunction
ftable(InfoPanel,1,4,str.tostring(PRealizedPnL,'#.##')+'%',PRealizedPnL>=0?color.green:color.red)
//Displaypercentageofunrealizedprofit/lossinformationintheinfopanelusingtheftablefunction
ftable(InfoPanel,1,5,str.tostring(PURealizedPnL,'#.##')+'%',PURealizedPnL>=0?color.green:color.red)
//Showleverageparameterintheinfopanel
ftable(InfoPanel,1,6,str.tostring(LeverageParameter,'#.##')+'x',math.round(LeverageParameter,1)<=1?color.green:color.red)
//Showprofitabilitypercentageintheinfopanel
ftable(InfoPanel,1,7,str.tostring(Profitability,'#.##')+'%',Profitability>=1?color.green:color.red)
//Showtheprofitfactorintheinfopanel
ftable(InfoPanel,1,8,str.tostring(ProfitFactor,'#.###'),ProfitFactor>=1?color.green:color.red)
//Showthetimeoftradingintheinfopanelinhuman-readableformat
ftable(InfoPanel,1,9,tfString(TradingTime),#9598a1)
//—————Long/Shortquantitiesaccordingtorisk
//Defineafunctionthatcalculatesthefactorsumofanumber
fSum(_Num)=>
(math.pow(_Num,2)+_Num)/2
//Calculatelongandshortquantitiesbasedondifferentscenarios
floatQuantityLong=na
floatQuantityShort=na
//TheQuantityLongandQuantityShortvariablesrepresentthecalculatedpositionsizesbasedondifferentriskscenarios
ifStepEntry=='Normal'
QuantityLong:=(1/Pyr)*(Balance/close)*((Risk/100)/(slPercentLong/100))
QuantityShort:=(1/Pyr)*(Balance/close)*((Risk/100)/(slPercentShort/100))
else
QuantityLong:=((strategy.opentrades+1)/(fSum(Pyr)))*(Balance/close)*((Risk/100)/(slPercentLong/100))
QuantityShort:=((strategy.opentrades+1)/(fSum(Pyr)))*(Balance/close)*((Risk/100)/(slPercentShort/100))
//—————Longalertmessage
//Definelongalertmessageswithplaceholders
stringLongMessage=na
LongMessage:='{"code":"ENTER-LONG_OKEX-SWAP__Super-8_30M_1234567890","qty":"'+str.tostring(QuantityLong)+'"}'
stringXLongMessage=na
XLongMessage:='{"code":"EXIT-LONG_OKEX-SWAP__Super-8_30M_1234567890","qty":"'+str.tostring(strategy.position_size)+'"}'
//—————Shortalertmessage
//Defineshortalertmessageswithplaceholders
stringShortMessage=na
ShortMessage:='{"code":"ENTER-SHORT_OKEX-SWAP__Super-8_30M_1234567890","qty":"'+str.tostring(QuantityShort)+'"}'
stringXShortMessage=na
XShortMessage:='{"code":"EXIT-SHORT_OKEX-SWAP__Super-8_30M_1234567890","qty":"'+str.tostring(math.abs(strategy.position_size))+'"}'
//TheLongMessageandShortMessagevariablesarestringsthatdefinethealertmessagesforthelongandshortpositionsrespectively,
//includingplaceholdersfordynamicvalueslikethecurrentclosepriceandthecalculatedpositionsize
//TheXLongMessageandXShortMessagevariablesrepresentmessagestocloseoutlongandshortpositionsrespectively
//Copyandpastethismessageonthealertbox:
//{{strategy.order.alert_message}}
//CopyandpastethisurlontheWebHookbox:
//https://wundertrading.com/bot/exchange
//—————Enteringlongpositions
//Checkifit'stimetostartthetestperiodandiftherearelessopentradesthanthemaximumallowed
iftime>=testPeriodStartandstrategy.opentrades<Pyr
//Mainlongentries
//CheckifthelongconditionismetoriftheupperBollingerBandiscrossedandiftherearenoopentradesorashortpositionisalreadyopenorifthepriceislowerthanthepreviousentrypriceminusthepercentageallowed
//Iftheconditionsaremet,executethelongentrywiththedesiredquantityandalertmessage
if(longCondorBB_long01)andstrategy.opentrades==0
or(longCondorBB_long01)andstrategy.position_size<0
or(longCondorBB_long01)andclose<strategy.opentrades.entry_price(strategy.opentrades-1)*(1-(bbBetterPrice/100))
strategy.order('Long',strategy.long,qty=QuantityLong,alert_message=LongMessage)
//BBlongentries
//CheckiftheupperBollingerBandiscrossedandalongpositionisalreadyopenandifthepriceislowerthanthepreviousentrypriceminusthepercentageallowed
//Iftheconditionsaremet,executethelongentrywiththedesiredquantityandalertmessage
ifBB_long02andstrategy.position_size>0
andclose<strategy.opentrades.entry_price(strategy.opentrades-1)*(1-(bbBetterPrice/100))
strategy.order('Long',strategy.long,qty=QuantityLong,alert_message=LongMessage)
//—————Enteringshortpositions
//Checkifit'stimetostartthetestperiodandiftherearelessopentradesthanthemaximumallowed
iftime>=testPeriodStartandstrategy.opentrades<Pyr
//Mainshortentries
//CheckiftheshortconditionismetorifthelowerBollingerBandiscrossedandiftherearenoopentradesoralongpositionisalreadyopenorifthepriceishigherthanthepreviousentrypriceplusthepercentageallowed
//Iftheconditionsaremet,executetheshortentrywiththedesiredquantityandalertmessage
if(shortCondorBB_short01)andstrategy.opentrades==0
or(shortCondorBB_short01)andstrategy.position_size>0
or(shortCondorBB_short01)andclose>strategy.opentrades.entry_price(strategy.opentrades-1)*(1+(bbBetterPrice/100))
strategy.order('Short',strategy.short,qty=QuantityShort,alert_message=ShortMessage)
//BBshortentries
//CheckifthelowerBollingerBandiscrossedandashortpositionisalreadyopenandifthepriceishigherthanthepreviousentrypriceplusthepercentageallowed
//Iftheconditionsaremet,executetheshortentrywiththedesiredquantityandalertmessage
ifBB_short02andstrategy.position_size<0
andclose>strategy.opentrades.entry_price(strategy.opentrades-1)*(1+(bbBetterPrice/100))
strategy.order('Short',strategy.short,qty=QuantityShort,alert_message=ShortMessage)
//—————ClosingpositionswithfirstlongTP
//Checkifthereisalongpositionopen
ifstrategy.position_size>0
//Ifthereis,checkifatrailingoffsetisset
iftrailOffset>0
//Ifthereisatrailingoffset,executetheexitwithatrailingstop
strategy.exit('TPl','Long',trail_price=longPriceProfit,
trail_offset=((trailOffset/100)*high)/syminfo.mintick,
stop=longPriceStop,
comment_profit='TPl',
comment_loss='SLl',alert_message=XLongMessage)
else
//Ifthereisnotrailingoffset,executetheexitwithalimitandstoploss
strategy.exit('TPl','Long',limit=longPriceProfit,
stop=longPriceStop,
comment_profit='TPl',
comment_loss='SLl',
alert_message=XLongMessage)
//—————Cancelinglongexitorderstoavoidsimultaneitywithre-entry
//ThiscodeblockcancelsanypreviouslysetlongexitordersiftheBollingerBandsindicateapotentialre-entryintothemarket
ifBB_long02andstrategy.position_size>0
strategy.cancel('TPl')
//—————ClosingpositionswithfirstshortTP
//Thiscodeblockchecksifthestrategyhasashortpositionandifso,itclosesitwithatrailingstoplossoratakeprofitorder
ifstrategy.position_size<0
iftrailOffset>0
strategy.exit('TPs','Short',trail_price=shortPriceProfit,
trail_offset=((trailOffset/100)*low)/syminfo.mintick,
stop=shortPriceStop,
comment_profit='TPs',
comment_loss='SLs',
alert_message=XShortMessage)
else
strategy.exit('TPs','Short',limit=shortPriceProfit,
stop=shortPriceStop,
comment_profit='TPs',
comment_loss='SLs',
alert_message=XShortMessage)
//—————Cancelingshortexitorderstoavoidsimultaneitywithre-entry
//ThiscodeblockcancelsanypreviouslysetshortexitordersiftheBollingerBandsindicateapotentialre-entryintothemarket
ifBB_short02andstrategy.position_size<0
strategy.cancel('TPs')
Expand (584 lines)
