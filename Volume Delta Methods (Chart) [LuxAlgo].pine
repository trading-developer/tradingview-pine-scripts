Script Name: Volume Delta Methods (Chart) [LuxAlgo]
Author: LuxAlgo
Description: The  Volume Delta Methods (Chart)  aims at highlighting the relationship between Buying or Selling Pressure and Price by presenting  Volume Delta , and multiple derivatives of volume delta such as  Cumulative Volume Delta (CVD) ,  Buy/Sell Volume ,  Total Volume , etc on top of the  Main Price Chart .

The script uses two different intrabar (chart bars at a lower...
PineScript code:

Pine Script™ indicator
Volume Delta Methods (Chart) [LuxAlgo]
//  This  work  is  licensed  under  a  Attribution-NonCommercial-ShareAlike  4.0  International  (CC  BY-NC-SA  4.0)  https://creativecommons.org/licenses/by-nc-sa/4.0/
//  ©  LuxAlgo

//@version=5
indicator("Volume  Delta  Methods  (Chart)  [LuxAlgo]",  "LuxAlgo  -  Volume  Delta  Methods  (Chart)",  true,  max_lines_count  =  500,  max_boxes_count  =  500,  max_labels_count  =  500,  max_bars_back  =  5000)
//------------------------------------------------------------------------------
//  Settings
//-----------------------------------------------------------------------------{
clGR      =  'Calculation  Settings'
vdCT      =  'This  indicator  uses  two  different  intrabar  analysis  methods  for  the  ​volume  delta  calculation:\n'  +
                    '  -  buying/selling  pressure  of  the  intrabar  (default),  or\n  -  polarity  of  the  intrabar\n\n'  +
                    'Note  :  The  most  precise  calculation  method  uses  tick  data  but  requires  huge  amounts  of  data  on  historical  bars,  '  +
                    'which  usually  limits  the  historical  depth  of  charts'
vdT1      =  'Intrabar  Buying/Selling  Pressure'
vdT2      =  'Intrabar  Polarity'
vdCM      =  input.string(vdT1,  'Calculation  Method',  options  =  [vdT1,  vdT2],  group  =  clGR,  tooltip  =  vdCT)
tfTP      =  'The  indicator  Precision  is  set  by  the  input  of  the  Lower  Timeframe  Precision.  '  +
                    'If  the  Lower  Timeframe  Precision  is  set  to  AUTO,  then  the  Lower  Timeframe  is  determined  by  the  following  algorithm:\n\n'  +
                    '  -  Chart  Timeframe,    Lower  Timeframe\n'    +
                    '              <=  1  min                                1  Sec\n'    +
                    '              <=  2  min                                5  Sec\n'    +
                    '              <=  3  min                                10  Sec\n'  +
                    '              <=  5  min                                15  Sec\n'  +
                    '              <=  15  min                            30  Sec\n'    +
                    '              <=  1  hour                              1  min\n'    +
                    '              <=  2  hour                              3  min\n'    +
                    '              <=  4  hour                              5  min\n'    +
                    '              <=  1  day                                15  min\n'  +
                    '              <=  1  week                            1  hour\n'    +
                    '              >      1  week                            1  day'
vdLT      =  input.string('Auto',  'Lower  Timeframe  Precision',
                    options=['Auto',  '1  Sec',  '5  Sec',  '10  Sec',  '15  Sec',  '30  Sec',  '1  Min',  '3  Min',  '5  Min',  '15  Min',  '30  Min',  '1  Hour',  '4  Hour',  '1  Day'],  group  =  clGR,  tooltip  =  tfTP)
prGR      =  'Presentation  Settings'
vdTT      =  'Volume  Delta  is  the  difference  between  buying  and  selling  pressure.  '  +
                    'Theoretically,  Volume  Delta  is  calculated  by  taking  the  difference  of  the  volume  that  traded  at  the  ask  price  and  the  volume  that  traded  at  the  bid  price.\n'  +
                    'This  indicator  uses  intrabar  analysis  to  achieve  the  most  approximate  calculation  of  the  ​volume  delta'
vlT1      =  'Volume  Delta  (Unipolarity)'
vlT2      =  'Volume  Delta  (Buy/Sell  Polarity)'
vlT3      =  'Volume  Delta  +  Regular  Volume  (Overlapping)'
vlT4      =  'Volume  Delta  +  Regular  Volume  (Non-Overlapping)'
vdHG      =  input.string(vlT3,  'Volume  Delta',  options  =  [vlT1,  vlT2,  vlT3,  vlT4,  'None'],  group  =  prGR,  tooltip  =  vdTT)
cvdTT    =  'Cumulative  Volume  Delta  (CVD)  takes  the  delta  values  for  every  bar  and  adds  them  together'
cvdT1    =  'Line  (Overlapping  Price  Bars)'
cvdT2    =  'Line  (Above  Price  Bars)'
cvdT3    =  'Area  (Above  Price  Bars)'
cvdT4    =  'Baseline  (Above  Price  Bars)'
cvdT5    =  'Candles  (Overlapping  Price  Bars)'
cvdSH    =  input.string(cvdT4,  'Cumulative  Volume  Delta',  options  =  [cvdT1,  cvdT5,  cvdT2,  cvdT3,  cvdT4,  'None'],  group  =  prGR,  tooltip  =  cvdTT)
dvTT      =  'Divergences  occur  when  the  polarity  of  ​volume  delta  does  not  match  the  polarity  of  the  chart  bar'
vdDV      =  input.bool(false,  'Volume  Delta/Price  Bar  Divergences',  inline='V7',  group  =  prGR,  tooltip  =  dvTT)
vdCL      =  input.color(color.new(#ff9800,  3),  '',  inline='V7',  group  =  prGR)
nvTT      =  'Displays  numerical  values  of  the  Volume  Delta\n\n'  +
                  '  -  green  above  the  bar  for  positive  delta\n'  +
                  '  -  red  below  the  bar  for  negative  delta\n'  +
                  '  -  orange  when  the  polarity  of  the  volume  delete  does  not  match  the  polarity  of  the  bar'
vdNV      =  input.bool(false,  'Volume  Delta  Numerical  Values',  inline='V73',  group  =  prGR,  tooltip  =  nvTT)
vdLS    =  input.string('Tiny',  "",  options=['Auto',  'Tiny',  'Small',  'Normal'],  inline  =  'V73',  group  =  prGR)
otGR      =  'Other  Features'
vlTT      =  'Toggles  the  visibility  of  the  average  volume  over  a  selected  period  of  time\n\nNote:  Applicable  when  Regular  Volume  Histogram  display  is  enabled'
vlMA      =  input.bool(true,  'Volume  MA',  inline='V3',  group  =  otGR,  tooltip  =  vlTT)
vlLN      =  input.int(13,  '',  inline='V3',  minval  =  1,  group  =  otGR)
vlMC      =  input.color(color.new(#ff9800,  43),  '',  inline='V3',  group  =  otGR)
sigTT    =  'Toggles  the  visibility  of  the  Smoothing  Line,  calculated  by  applying  an  exponentially  weighted  moving  average  over  the  Cumulative  Volume  Delta\n\n'  +
                  'Note:  Applicable  when  Cumulative  Volume  Delta  display  is  enabled'
sigSH    =  input.bool(true,  'CVD  Smoothing',  inline='SMT1',  group  =  otGR,  tooltip  =  sigTT)
sigML    =  input.int(7  ,  "",    minval  =  1,  inline='SMT1',  group  =  otGR)
sigC      =  input.color(color.new(#FF6D00,  33),  '',  inline='SMT1',  group  =  otGR)
vdGR      =  'Volume  Delta,  Others'
vdUC      =  input.color(color.new(#26a69a,  33),  'Volume  Delta  :  Positive'  ,  inline='V1',  group  =  vdGR,  tooltip  =  'Volume  Delta  color  customization  options')
vdDC      =  input.color(color.new(#ef5350,  33),  'Negative',  inline='V1',  group  =  vdGR)
vlUC      =  input.color(color.new(#9598a1,  53),  'VolumeHistogram:Growing',inline='V2',group=vdGR,tooltip='VolumeHistogramcolorcustomizationoptions')
vlDC=input.color(color.new(#9598a1,83),'Falling',inline='V2',group=vdGR)
lnTT='DisplayLengthisthelengthofthevisualobjectspresentedwiththisindicator.Possiblevalues[5-500],wheremaxof500lengthwillbevisualized'+
'onlyifasinglelineand/orasinglehistogramenabled,secondlineorhistogramwillreducelenghtbyhalf\n\n'+
'Note:Whenanindicator\'soutputisinadifferentscalefromthepricescalethenthegeneralapproachistopresenttheminaseparatepane.'+
'Unlikethegeneralapproach,thisscriptpresentsthevisualsontopofthepricechart,whichrequiresadditionalcalculations'+
'tore-scaletheindicator\'soutputtofitontopofthepricechart.Besidesre-scalecalculations,themethodsusedtoplotthem'+
'alsodifferwhichbringsustothelimitationofPineScript(numberofline,box,labellimits)andhencetheneedtolimittheDisplayLengthofthevisuals'
vdLN=input.int(100,'DisplayLength',minval=5,step=5,maxval=500,group=vdGR,tooltip=lnTT)
vdLN:=last_bar_index<vdLN?last_bar_index:vdLN
vdPL=input.string('Bottom','Placement',options=['Top','Bottom'],group=vdGR,tooltip='VolumeDeltaplacmentonthepticechart.\n\nNote:ifVolumeDeltainputoptionisselectedas\'VolumeDelta+RegularVolume(Non-Overlapping)\',thenRegularVolumewillbeplotedintheoppositedirection')
vdHT=input.float(.7,'VolumeDeltaHeight',minval=.1,maxval=7,step=.1,group=vdGR,tooltip='VolumeDeltaHeight-Possiblevalues[0.1-7]')
vlHT=input.float(.7,'VolumeHistogramHeight',minval=.1,maxval=7,step=.1,group=vdGR,tooltip='VolumeHistogramHeight-Possiblevalues[0.1-7]')
vvVO=input.float(.07,'VerticalOffset',minval=-.7,maxval=.7,step=.01,group=vdGR,tooltip='VolumeDeltaandVolumeHistogramVerticalOffset-Possiblevalues[-0.7-0.7]')
cvdGR="CumulativeVolumeDelta,Others"
cvdW=input.int(2,"CVDLine,Width",minval=1,maxval=5,inline='CVD',group=cvdGR,tooltip='CumulativeVolumeDeltaLineWidthandColor')
cvdC=input.color(color.new(#2962FF,33),'Color',inline='CVD',group=cvdGR)
cvdBU=input.color(color.new(#2962FF,89),'CVDArea/Baseline,GradientColoring',inline='CVD1',group=cvdGR,tooltip='CumulativeVolumeDeltaAreaandBaselineGradientColoring')
cvdBD=input.color(color.new(#FF6D00,89),'',inline='CVD1',group=cvdGR)
cvdCU=input.color(color.new(#26a69a,13),'CVDCandlesColor,Positive',inline='CV1',group=cvdGR,tooltip='CumulativeVolumeDeltaCandlesColoring')
cvdCD=input.color(color.new(#ef5350,13),'Negative',inline='CV1',group=cvdGR)
sigBG=input.bool(true,"CVD/SmoothingBackground",inline='BG',group=cvdGR,tooltip='HighlightsandadjuststhetransparencyoftheareabetweentheCumulativeVolumeDeltaLineandit\'sSmoothingLine')
sigBT=input.int(89,"",inline='BG',minval=0,maxval=100,group=cvdGR)
//-----------------------------------------------------------------------------}
//UserDefinedTypes
//-----------------------------------------------------------------------------{
//@typebarpropertieswiththeirvalues
//
//@fieldo(float)openpriceofthebar
//@fieldh(float)highpriceofthebar
//@fieldl(float)lowpriceofthebar
//@fieldc(float)closepriceofthebar
//@fieldv(float)volumeofthebar
//@fieldi(int)indexofthebar
typebar
floato=open
floath=high
floatl=low
floatc=close
floatv=volume
inti=bar_index
//-----------------------------------------------------------------------------}
//Variables
//-----------------------------------------------------------------------------{
barb=bar.new()
nzV=nz(b.v)
varaCVD=array.new_line()
varaVD=array.new_box()
varaBG=array.new_linefill()
varaDV=array.new_label()
mInMS=60*1000
//-----------------------------------------------------------------------------}
//Functions/Methods
//-----------------------------------------------------------------------------{
//@functionCalculatesthevolumeofupanddownbars
//
//@returns[float,float]thevolumeofupbars,andthevolumeofdownbars
f_calcV()=>
uV=0.,dV=0.
switch
vdCM==vdT1and(b.c-b.l)>(b.h-b.c)=>uV+=nzV
vdCM==vdT1and(b.c-b.l)<(b.h-b.c)=>dV-=nzV
vdCM==vdT2andb.c>b.o=>uV+=nzV
vdCM==vdT2andb.c<b.o=>dV-=nzV
b.c>nz(b.c[1])=>uV+=nzV
b.c<nz(b.c[1])=>dV-=nzV
nz(uV[1])>0=>uV+=nzV
nz(dV[1])<0=>dV-=nzV

[uV,dV]
//@functionCalculatestheLowerTimeframebasedontheInputorChartResolution
//
//@returns[string]LowerTimeframestring
f_calcLTF(_tf)=>
inttfInMs=timeframe.in_seconds()*1000
switch_tf
'Auto'=>tfInMs<=1*mInMS?'1S':
tfInMs<=2*mInMS?'5S':
tfInMs<=3*mInMS?'10S':
tfInMs<=5*mInMS?'15S':
tfInMs<=15*mInMS?'30S':
tfInMs<=60*mInMS?'1':
tfInMs<=120*mInMS?'3':
tfInMs<=240*mInMS?'5':
tfInMs<=1440*mInMS?'15':
tfInMs<=7*1440*mInMS?'60':'D'
'1Sec'=>'1S'
'5Sec'=>'5S'
'10Sec'=>'10S'
'15Sec'=>'15S'
'30Sec'=>'30S'
'1Min'=>'1'
'3Min'=>'3'
'5Min'=>'5'
'15Min'=>'15'
'30Min'=>'30'
'1Hour'=>'60'
'4Hour'=>'240'
'1Day'=>'1D'
//-----------------------------------------------------------------------------}
//Calculations
//-----------------------------------------------------------------------------{
[uV,dV]=request.security_lower_tf(syminfo.tickerid,f_calcLTF(vdLT),f_calcV())
tuV=uV.sum()
tdV=dV.sum()
vd=tuV+tdV
cvd=ta.cum(vd)
sig=sigSH?ta.rma(cvd,sigML):na
pHST=ta.highest(b.h,vdLN)
pLST=ta.lowest(b.l,vdLN)
pCHG=(pHST-pLST)/pHST
oHST=ta.highest(cvd,vdLN)
oLST=ta.lowest(cvd,vdLN)
vdHS=ta.highest(vd,vdLN)
vHST=ta.highest(nzV,vdLN)
vCHG=nzV/ta.sma(nzV,vlLN)
bull=b.c>b.o
vlPL=vdHG==vlT3?vdPL:vdPL=='Top'?'Bottom':'Top'
vdHT:=vdHG==vlT3orvdHG==vlT4?vdHT+1.5:vdHT
nvS=switchvdLS
'Auto'=>size.auto
'Tiny'=>size.tiny
'Small'=>size.small
'Normal'=>size.normal
ifbarstate.islastandnzV
ifaCVD.size()>0
fori=1toaCVD.size()
line.delete(aCVD.shift())
ifaVD.size()>0
fori=1toaVD.size()
box.delete(aVD.shift())
ifaBG.size()>0
fori=1toaBG.size()
linefill.delete(aBG.shift())
ifaDV.size()>0
fori=1toaDV.size()
label.delete(aDV.shift())

forbI=0tovdLN-1
ifarray.size(aCVD)<500
ifcvdSH!='None'andcvdSH!=cvdT5
aCVD.push(line.new(b.i[bI],(cvdSH==cvdT1?pLST:cvdSH==cvdT3?pHST*(1+pCHG*.1):pHST)+(cvd[bI]-oLST)*(pHST-pLST)/(oHST-oLST),
b.i[bI+1],(cvdSH==cvdT1?pLST:cvdSH==cvdT3?pHST*(1+pCHG*.1):pHST)+(cvd[bI+1]-oLST)*(pHST-pLST)/(oHST-oLST),
xloc.bar_index,extend.none,cvdSH==cvdT4?color.from_gradient(pHST+(cvd[bI]-oLST)*(pHST-pLST)/(oHST-oLST),pHST,pHST+(pHST-pLST),sigC,cvdC):cvdC,line.style_solid,cvdW))
ifcvdSH==cvdT3orcvdSH==cvdT4
aCVD.push(line.new(b.i[bI],pHST*(1+pCHG*(cvdSH==cvdT4?.5:.1)),b.i[bI+1],pHST*(1+pCHG*(cvdSH==cvdT4?.5:.1)),xloc.bar_index,extend.none,color(na),line.style_solid,cvdW))
aBG.push(linefill.new(aCVD.get(vlMAandvdHG==vlT3orvlMAandvdHG==vlT4andsigSH?4*bI:vlMAandvdHG==vlT3orvlMAandvdHG==vlT4orsigSH?3*bI:2*bI),aCVD.get((vlMAandvdHG==vlT3orvlMAandvdHG==vlT4andsigSH?4*bI:vlMAandvdHG==vlT3orvlMAandvdHG==vlT4orsigSH?3*bI:2*bI)+1),color.from_gradient(pHST+(cvd[bI]-oLST)*(pHST-pLST)/(oHST-oLST),pHST,pHST+(pHST-pLST),cvdBD,cvdBU)))
ifsigSHandcvdSH!='None'
aCVD.push(line.new(b.i[bI],(cvdSH==cvdT1orcvdSH==cvdT5?pLST:cvdSH==cvdT3?pHST*(1+pCHG*.1):pHST)+(sig[bI]-oLST)*(pHST-pLST)/(oHST-oLST),
b.i[bI+1],(cvdSH==cvdT1orcvdSH==cvdT5?pLST:cvdSH==cvdT3?pHST*(1+pCHG*.1):pHST)+(sig[bI+1]-oLST)*(pHST-pLST)/(oHST-oLST),
xloc.bar_index,extend.none,sigC,line.style_solid,1))
ifsigBGandcvdSH!='None'andsigSHandcvdSH!=cvdT3andcvdSH!=cvdT4andcvdSH!=cvdT5
aBG.push(linefill.new(aCVD.get(vlMAandvdHG==vlT3orvlMAandvdHG==vlT4?3*bI:2*bI),aCVD.get((vlMAandvdHG==vlT3orvlMAandvdHG==vlT4?3*bI:2*bI)+1),cvd[bI]>sig[bI]?color.new(cvdC,sigBT):color.new(sigC,sigBT)))
ifvlMAandvdHG==vlT3orvlMAandvdHG==vlT4
aCVD.push(line.new(b.i[bI],(vlPL=='Top'?pHST*(1+pCHG*vvVO):pLST*(1-pCHG*vvVO))*(1+(vlPL=='Top'?1:-1)*nzV[bI]/vHST*pCHG*vlHT/vCHG[bI]),
b.i[bI+1],(vlPL=='Top'?pHST*(1+pCHG*vvVO):pLST*(1-pCHG*vvVO))*(1+(vlPL=='Top'?1:-1)*nzV[bI+1]/vHST*pCHG*vlHT/vCHG[bI+1]),
xloc.bar_index,extend.none,vlMC,line.style_solid,1))
ifarray.size(aVD)<500
ifvdHG==vlT3orvdHG==vlT4
aVD.push(box.new(b.i[bI],vlPL=='Top'?pHST*(1+pCHG*vvVO):pLST*(1-pCHG*vvVO),
b.i[bI],(vlPL=='Top'?pHST*(1+pCHG*vvVO):pLST*(1-pCHG*vvVO))*(1+(vlPL=='Top'?1:-1)*nzV[bI]/vHST*pCHG*vlHT),
bull[bI]?vlUC:vlDC,2,bgcolor=color(na)))
ifvdHG!=vlT2andvdHG!='None'
aVD.push(box.new(b.i[bI],vdPL=='Top'?pHST*(1+pCHG*vvVO):pLST*(1-pCHG*vvVO),
b.i[bI],(vdPL=='Top'?pHST*(1+pCHG*vvVO):pLST*(1-pCHG*vvVO))*(1+(vdPL=='Top'?1:-1)*math.abs(vd[bI])/(vdHG==vlT3?vHST:vdHS)*pCHG/2*vdHT),
vd[bI]>0?vdUC:vdDC,2,bgcolor=color(na)))
ifvdHG==vlT2
aVD.push(box.new(b.i[bI],vdPL=='Top'?pHST*(1+pCHG*vvVO)+((oHST-oLST)/2)*(pHST-pLST)/(oHST-oLST):pLST*(1-pCHG*vvVO)-((oHST-oLST)/2)*(pHST-pLST)/(oHST-oLST),
b.i[bI],(vdPL=='Top'?pHST*(1+pCHG*vvVO)+((oHST-oLST)/2)*(pHST-pLST)/(oHST-oLST):pLST*(1-pCHG*vvVO)-((oHST-oLST)/2)*(pHST-pLST)/(oHST-oLST))*(1+vd[bI]/(vdHG==vlT3?vHST:vdHS)*pCHG/2*vdHT),
vd[bI]>0?vdUC:vdDC,2,bgcolor=color(na)))
ifcvdSH==cvdT5
aVD.push(box.new(b.i[bI],pLST+(cvd[bI]-oLST)*(pHST-pLST)/(oHST-oLST),
b.i[bI],pLST+(cvd[bI+1]-oLST)*(pHST-pLST)/(oHST-oLST),
vd[bI]>0?cvdCU:cvdCD,2,bgcolor=color(na)))

vdS='TotalVolume:'+str.tostring(nzV[bI],format.volume)+
'\nBuyVolume:'+str.tostring(tuV[bI],format.volume)+
'\nSellVolume:'+str.tostring(-tdV[bI],format.volume)+
'\nVolumeDelta:'+str.tostring(vd[bI],format.volume)
ifvdNV
ifmath.sign(b.c[bI]-b.o[bI])!=math.sign(vd[bI])
aDV.push(label.new(b.i[bI],bull[bI]?b.h[bI]:b.l[bI],str.tostring(vd[bI],format.volume),color=color(na),style=bull[bI]?label.style_label_down:label.style_label_up,size=nvS,textcolor=color.orange,tooltip='Divergence\nthepolarityof​volumedeltadoesnotmatchthepolarityofthechartbar\n\n'+vdS))
else
aDV.push(label.new(b.i[bI],bull[bI]?b.h[bI]:b.l[bI],str.tostring(vd[bI],format.volume),color=color(na),style=bull[bI]?label.style_label_down:label.style_label_up,size=nvS,textcolor=bull[bI]?color.green:color.red,tooltip=vdS))
ifvdDVandmath.sign(b.c[bI]-b.o[bI])!=math.sign(vd[bI])
aDV.push(label.new(b.i[bI],b.h[bI]*(1+pCHG*.04),'',color=vdCL,style=label.style_label_down,size=size.auto,tooltip='Divergence\nthepolarityof​volumedeltadoesnotmatchthepolarityofthechartbar\n\n'+vdS))
//-----------------------------------------------------------------------------}
Expand (310 lines)
