Script Name: Ichimoku Backtester with TP, SL, and Cloud Confirmation Option
Author: gregh2
Description: Started with the Basic Ichimoku strategy from Mizuki32. Added Take Profit, Stop Loss (for both long and short), and a toggle to wait for confirmation from the cloud.
PineScript code:

Pine Scriptâ„¢ strategy
Ichimoku Backtester with TP, SL, and Cloud Confirmation Option
strategy("Ichimoku  Backtester  with  Optional  RSI,  TP,  and  SL",  overlay=true,
          currency  =  currency.USD,  default_qty_type  =  strategy.percent_of_equity,
          default_qty_value  =  95)
//@version=4
//Ichimoku  Inputs
ts_bars  =  input(9,  minval=1,  title="Tenkan-Sen  Bars",  group="Ichimoku  Cloud")
ks_bars  =  input(26,  minval=1,  title="Kijun-Sen  Bars",  group="Ichimoku  Cloud")
ssb_bars  =  input(52,  minval=1,  title="Senkou-Span  B  Bars",  group="Ichimoku  Cloud")
cs_offset  =  input(26,  minval=1,  title="Chikou-Span  Offset",  group="Ichimoku  Cloud")
ss_offset  =  input(26,  minval=1,  title="Senkou-Span  Offset",  group="Ichimoku  Cloud")
trade_long  =  input(true,  title="Long  Entry",  group="Ichimoku  Cloud")
trade_short  =  input(true,  title="Short  Entry",  group="Ichimoku  Cloud")
//  REMOVED  wait_for_cloud  =  input(true,  title="Wait  for  Cloud  Confirmation",  group="Ichimoku  Cloud")
//TODO:  Add  option  to  TP  on  Chikou  Span  Cross
//tp_on_chikou_cross  =  input(false,  title="Exit  Deal  on  Chikou  Cross")
//Stop  Loss  Inputs
use_short_stop_loss  =  input(false,  title="Short  Stop  Loss",  group="Stop  Loss  and  Take  Profit",  inline="Short_SL")
short_stop_loss  =  input(title="(%)",  type=input.float,  minval=0.0,  step=0.1,
          defval=5,  group="Stop  Loss  and  Take  Profit",  inline="Short_SL")  *  0.01
use_long_stop_loss  =  input(false,  title="Long  Stop  Loss",  group="Stop  Loss  and  Take  Profit",  inline="Long_SL")
long_stop_loss  =  input(title="(%)",  type=input.float,  minval=0.0,  step=0.1,
          defval=5,  group="Stop  Loss  and  Take  Profit",  inline="Long_SL")  *  0.01
//Take  Profit  Inputs
use_short_take_profit  =  input(false,  title="Short  Take  Profit",  group="Stop  Loss  and  Take  Profit",  inline="Short_TP")
short_take_profit  =  input(title="(%)",  type=input.float,  minval=0.0,  step=0.1,
          defval  =  20,  group="Stop  Loss  and  Take  Profit",  inline="Short_TP")  *  .01
use_long_take_profit  =  input(false,  title="LongTakeProfit",group="StopLossandTakeProfit",inline="Long_TP")
long_take_profit=input(title="(%)",type=input.float,minval=0.0,step=0.1,
defval=20,group="StopLossandTakeProfit",inline="Long_TP")*.01
//RSIInputs
use_rsi_entry=input(false,title="UseforEntry",group="RSI")
use_rsi_tp=input(false,title="UseforTakeProfit",group="RSI")
//seq_rsi=input(defval=1,title="TPafterXSequentialbarspastRSI",type=input.integer)
rsi_period=input(defval=7,title="RSIPeriod",type=input.integer,group="RSI")
overbought_rsi=input(defval=80,title="OverboughtLevel",type=input.float,group="RSI")
oversold_rsi=input(defval=20,title="OversoldLevel",type=input.float,group="RSI")
//toggle_stoch_rsi=input(defval=false,
//title="ToggleRSIinputstouseStochRSI(experimental)")
//stoch_rsi_length=input(defval=7,title="StochRSILength")
//AccountforremovalofSequentialRSIandStochRSIinputs.
seq_rsi=1
toggle_stoch_rsi=false
//===INPUTSHOWPLOT===
showDate=input(defval=false,title="ShowDateRange",type=input.bool,group="DateRange")
start=input(defval=timestamp("01Jan201900:00+0000"),title="Start",type=input.time,group="DateRange",inline="StartDate")
finish=input(defval=timestamp("31Dec202123:59+0000"),title="End",type=input.time,group="DateRange",inline="EndDate")

window()=>time>=startandtime<=finish?true:false//createfunction"withinwindowoftime"
middle(len)=>avg(lowest(len),highest(len))
//IchimokuComponents
tenkan=middle(ts_bars)
kijun=middle(ks_bars)
senkouA=avg(tenkan,kijun)
senkouB=middle(ssb_bars)
chikou=close[cs_offset]
bgcolor(color=showDateandwindow()?color.gray:na,transp=90)//plotwithintimewindow
//PlotIchimokuKinkoHyo
plot(tenkan,color=#0496ff,title="Tenkan-Sen")
plot(kijun,color=#991515,title="Kijun-Sen")
plot(chikou,color=#caeb36,title="Chikou-Span")
sa=plot(senkouA,offset=ss_offset,color=color.green,title="Senkou-SpanA")
sb=plot(senkouB,offset=ss_offset,color=color.red,title="Senkou-SpanB")
fill(sa,sb,color=senkouA>senkouB?color.green:color.red,title="Cloudcolor")
ss_high=max(senkouA[ss_offset],senkouB[ss_offset])
ss_low=min(senkouA[ss_offset],senkouB[ss_offset])
//LongandShortSignals
//ThiswasupdatedtospecificallybethecrossoverandcrossundersincethisisthemainalertforIchimoku;notjusttheconfirmation.
//TherestofthepiecesofIchimokuareusedforconfirmationinthisindicator
tk_cross_bull=crossover(tenkan,kijun)
tk_cross_bear=crossunder(tenkan,kijun)
//Entry/ExitConfirmation
cs_cross_bull=mom(close,cs_offset)>0
cs_cross_bear=mom(close,cs_offset)<0
price_above_kumo=close>ss_high
price_below_kumo=close<ss_low
senkou_green=senkouA>senkouB?true:false
rsi1=rsi(close,rsi_period)
rsi_value=toggle_stoch_rsi?stoch(rsi1,rsi1,rsi1,rsi_period):rsi1
in_long=false
in_long:=in_long[1]
in_short=false
in_short:=in_short[1]
long_entry=tk_cross_bullandcs_cross_bullandprice_above_kumoandsenkou_greenandnotin_long
short_entry=tk_cross_bearandcs_cross_bearandprice_below_kumoandnotsenkou_greenandnotin_short
long_exit=short_entryandin_long
short_exit=long_entryandin_short
//Weusetheconditionof>or<forunderboughtandundersoldbecausetheyarebeingusedforadditionalconfirmation
//UsethecrossoverontheoverboughtandoversoldconditionsbecausetheyareusedfortakeprofitwithoutIchimoku
overbought=crossover(rsi_value,overbought_rsi)
oversold=crossunder(rsi_value,oversold_rsi)
underbought=rsi_value<overbought_rsi
undersold=rsi_value>oversold_rsi
if(use_rsi_entry)
long_entry:=long_entryandunderbought
short_entry:=short_entryandundersold
if(use_rsi_tp)
long_exit:=overboughtandin_long
short_exit:=oversoldandin_short
//ThefollowinglogicexiststokeepRSITPfromfiringwhenyouaren'talreadyinalongorshort
//ItmaybeusedlatetocontrolotherTPconditions
if(long_entry)
in_long:=true
in_short:=false
if(long_exit)
in_long:=false
if(short_entry)
in_short:=true
in_long:=false
if(short_exit)
in_short:=false
longStopPrice=strategy.position_avg_price*(1-long_stop_loss)
shortStopPrice=strategy.position_avg_price*(1+short_stop_loss)
longLimitPrice=strategy.position_avg_price*(1+long_take_profit)
shortLimitPrice=strategy.position_avg_price*(1-short_take_profit)
strategy.entry("Long",strategy.long,when=long_entryandtrade_longand(showDate?window():true))
strategy.entry("Short",strategy.short,when=short_entryandtrade_shortand(showDate?window():true))
if(strategy.position_size>0.0)
if(use_long_stop_lossandnotuse_long_take_profit)
strategy.exit("Long",stop=longStopPrice)
if(use_long_take_profitandnotuse_long_stop_loss)
strategy.exit("Long",limit=longLimitPrice)
if(use_long_take_profitanduse_long_stop_loss)
strategy.exit("Long",stop=longStopPrice,limit=longLimitPrice)
if(strategy.position_size<0.0)
if(use_short_stop_lossandnotuse_short_take_profit)
strategy.exit("Short",stop=shortStopPrice)
if(use_short_take_profitandnotuse_short_stop_loss)
strategy.exit("Short",limit=shortLimitPrice)
if(use_short_take_profitanduse_short_stop_loss)
strategy.exit("Short",stop=shortStopPrice,limit=shortLimitPrice)
strategy.close("Long",when=long_exitand(showDate?window():true))
strategy.close("Short",when=short_exitand(showDate?window():true))
Expand (160 lines)
