Script Name: 3SmmaCrossUp + Fractal + RSI
Author: ajahanbin1374
Description: This script is a combination of 3 smoothed moving averages, and RSI. When moving averages are aligned upward (downward) and RSI is above (below) 50 and a down (up) William fractal appears, it enters long (short) position. Exiting from long and short entries are defined by StopLoss and TargetProfit.
PineScript code:

Pine Scriptâ„¢ strategy
3SmmaCrossUp + Fractal + RSI
//This  script  is  a  combination  of  3  smoothed  moving  averages,  and  RSI.  When  moving  averages  are  aligned  upward  (downward)  and  RSI  is  above  (below)  50  and  a  down  (up)  William  fractal  appears,  it  enters  long  (short)  position.  Exiting  from  long  and  short  entries  are  defined  by  StopLoss  and  TargetProfit.
//@version=5
strategy(title="3SmmaCrossUp  +  Fractal  +  RSI",  overlay=true,  default_qty_type=strategy.percent_of_equity,  default_qty_value=100,  currency=currency.USD,  commission_type=strategy.commission.percent,  commission_value=0.03)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////  inputs
//  Global
src  =  input(close,  title="Source")
stopLoss  =  input.float(defval  =  0.1,  title  =  "Stop  Loss  %",  minval  =  0,  maxval=100,  step  =  0.1)
targetProfit  =  input.float(defval  =  0.4,  title  =  "Target  Profit  %",  minval  =  0,  maxval=100,  step  =  0.1)
//  Smooth  Moving  Average
fastSmmaLen  =  input.int(21,  minval=1,  title="Fast  Length",  group  =  "Smooth  Moving  Average")
midSmmaLen  =  input.int(50,  minval=1,  title="Mid  Length",group  =  "Smooth  Moving  Average")
slowSmmaLen  =  input.int(200,  minval=1,  title="Slow  Length",group  =  "Smooth  Moving  Average")
//  RSI
rsiLen  =  input.int(defval=14,  title="length",  minval=1,  maxval=1000,  step=1,  group="RSI")
//  Fractals
n  =  input.int(title="Periods",  defval=2,  minval=2,  group  =  "Fractals")
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////  initialization
var  waitingFirstTradeInUpwardTrend  =  false
var  waitingFirstTradeInDownwardTrend  =  false
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////  functions
smma(ma,  src,  len)  =>
        smma  =  0.0
        smma  :=  na(smma[1])  ?  ma  :  (smma[1]  *  (len  -  1)  +  src)  /  len
        smma

fractals(n,  highs,  lows)  =>
        //  UpFractal
        bool  upflagDownFrontier  =  true
        bool  upflagUpFrontier0  =  true
        bool  upflagUpFrontier1  =  true
        bool  upflagUpFrontier2  =  true
        bool  upflagUpFrontier3  =  true
        bool  upflagUpFrontier4  =  true
        for  i  =  1  to  n
                upflagDownFrontier:=upflagDownFrontierand(highs[n-i]<highs[n])
upflagUpFrontier0:=upflagUpFrontier0and(highs[n+i]<highs[n])
upflagUpFrontier1:=upflagUpFrontier1and(highs[n+1]<=highs[n]andhighs[n+i+1]<highs[n])
upflagUpFrontier2:=upflagUpFrontier2and(highs[n+1]<=highs[n]andhighs[n+2]<=highs[n]andhighs[n+i+2]<highs[n])
upflagUpFrontier3:=upflagUpFrontier3and(highs[n+1]<=highs[n]andhighs[n+2]<=highs[n]andhighs[n+3]<=highs[n]andhighs[n+i+3]<highs[n])
upflagUpFrontier4:=upflagUpFrontier4and(highs[n+1]<=highs[n]andhighs[n+2]<=highs[n]andhighs[n+3]<=highs[n]andhighs[n+4]<=highs[n]andhighs[n+i+4]<highs[n])
flagUpFrontier=upflagUpFrontier0orupflagUpFrontier1orupflagUpFrontier2orupflagUpFrontier3orupflagUpFrontier4

upFractal=(upflagDownFrontierandflagUpFrontier)

//downFractal
booldownflagDownFrontier=true
booldownflagUpFrontier0=true
booldownflagUpFrontier1=true
booldownflagUpFrontier2=true
booldownflagUpFrontier3=true
booldownflagUpFrontier4=true

fori=1ton
downflagDownFrontier:=downflagDownFrontierand(lows[n-i]>lows[n])
downflagUpFrontier0:=downflagUpFrontier0and(lows[n+i]>lows[n])
downflagUpFrontier1:=downflagUpFrontier1and(lows[n+1]>=lows[n]andlows[n+i+1]>lows[n])
downflagUpFrontier2:=downflagUpFrontier2and(lows[n+1]>=lows[n]andlows[n+2]>=lows[n]andlows[n+i+2]>lows[n])
downflagUpFrontier3:=downflagUpFrontier3and(lows[n+1]>=lows[n]andlows[n+2]>=lows[n]andlows[n+3]>=lows[n]andlows[n+i+3]>lows[n])
downflagUpFrontier4:=downflagUpFrontier4and(lows[n+1]>=lows[n]andlows[n+2]>=lows[n]andlows[n+3]>=lows[n]andlows[n+4]>=lows[n]andlows[n+i+4]>lows[n])
flagDownFrontier=downflagUpFrontier0ordownflagUpFrontier1ordownflagUpFrontier2ordownflagUpFrontier3ordownflagUpFrontier4

downFractal=(downflagDownFrontierandflagDownFrontier)
[upFractal,downFractal]
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////calcs
[upFractal,downFractal]=fractals(n,high,low)
rsiIsHigh=ta.rsi(src,rsiLen)>=50
slowMa=ta.sma(src,slowSmmaLen)
midMa=ta.sma(src,midSmmaLen)
fastMa=ta.sma(src,fastSmmaLen)
slowSmma=smma(slowMa,src,slowSmmaLen)
midSmma=smma(midMa,src,midSmmaLen)
fastSmma=smma(fastMa,src,fastSmmaLen)
isFastSmmaUpward=ta.rising(fastSmma,1)
isMidSmmaUpward=ta.rising(midSmma,1)
isSlowSmmaUpward=ta.rising(slowSmma,1)
isFastSmmaDownward=ta.falling(fastSmma,1)
isMidSmmaDownward=ta.falling(midSmma,1)
isSlowSmmaDownward=ta.falling(slowSmma,1)
slowMovingAveragesAreUpward=isMidSmmaUpwardandisSlowSmmaUpward
slowMovingAveragesAreDownward=isMidSmmaDownwardandisSlowSmmaDownward
justEnteredUpwardTrend=ta.crossover(fastSmma,midSmma)?true:false
justEnteredDownwardTrend=ta.crossunder(fastSmma,midSmma)?true:false
waitingFirstTradeInUpwardTrend:=justEnteredUpwardTrend==true?true:(isFastSmmaDownwardorisMidSmmaDownwardorisSlowSmmaDownward?false:waitingFirstTradeInUpwardTrend)
waitingFirstTradeInDownwardTrend:=justEnteredDownwardTrend==true?true:(isFastSmmaUpwardorisMidSmmaUpwardorisSlowSmmaUpward?false:waitingFirstTradeInDownwardTrend)
priceCrossedOverSlowMa=ta.crossover(close,slowSmma)
priceCrossedUnderSlowMa=ta.crossunder(close,slowSmma)
enterLongCondition=barstate.isconfirmedandlow>fastSmmaandrsiIsHighand(downFractalorpriceCrossedOverSlowMa)andwaitingFirstTradeInUpwardTrendandstrategy.position_size==0
enterShortCondition=barstate.isconfirmedandhigh<fastSmmaand(notrsiIsHigh)and(upFractalorpriceCrossedUnderSlowMa)andwaitingFirstTradeInDownwardTrendandstrategy.position_size==0
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////strategy
if(enterLongCondition)
strategy.entry(id="L",direction=strategy.long)
waitingFirstTradeInUpwardTrend:=false
if(enterShortCondition)
strategy.entry(id="S",direction=strategy.short)
waitingFirstTradeInDownwardTrend:=false

if(strategy.position_size>0)
strategy.exit(id="EL",stop=strategy.position_avg_price*(1-stopLoss/100),limit=strategy.position_avg_price*(1+targetProfit/100))
if(strategy.position_size<0)
strategy.exit(id="ES",stop=strategy.position_avg_price*(1+stopLoss/100),limit=strategy.position_avg_price*(1-targetProfit/100))
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////plots
plot(series=slowSmma,title="SlowSMMA",linewidth=3)
plot(series=midSmma,title="MidSMMA",linewidth=2)
plot(series=fastSmma,title="FastSMMA",linewidth=1)
plotchar(series=rsiIsHigh,title='rsiIsHigh',char='')
plotchar(series=justEnteredUpwardTrend,title='justEnteredUpwardTrend',char='')
plotchar(series=justEnteredDownwardTrend,title='justEnteredDownwardTrend',char='')
plotchar(series=waitingFirstTradeInUpwardTrend,title='waitingFirstTradeInUpwardTrend',char='')
plotchar(series=waitingFirstTradeInDownwardTrend,title='waitingFirstTradeInDownwardTrend',char='')
plotchar(series=enterLongCondition,title='enterLongCondition',char='')
plotchar(series=enterShortCondition,title='enterShortCondition',char='')
plotshape(series=upFractal,title='upFractal',style=shape.triangleup,location=location.abovebar,color=#009688,size=size.tiny)
plotshape(series=downFractal,title='downFractal',style=shape.triangledown,location=location.belowbar,color=color.red,size=size.tiny)
Expand (156 lines)
