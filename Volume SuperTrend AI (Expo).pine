Script Name: Volume SuperTrend AI (Expo)
Author: Zeiierman
Description: █  Overview
The  Volume SuperTrend AI  is an advanced technical indicator used to predict trends in price movements by utilizing a combination of traditional SuperTrend calculation and AI techniques, particularly the k-nearest neighbors (KNN) algorithm.

The Volume SuperTrend AI is designed to provide traders with insights into potential market trends, using...
PineScript code:

Pine Script™ indicator
Volume SuperTrend AI (Expo)
//  This  work  is  licensed  under  a  Attribution-NonCommercial-ShareAlike  4.0  International  (CC  BY-NC-SA  4.0)  https://creativecommons.org/licenses/by-nc-sa/4.0/
//  ©  Zeiierman
//@version=5
indicator("Volume  SuperTrend  AI  (Expo)",  overlay=true)
//  ~~  ToolTips  {
t1="Number  of  nearest  neighbors  in  KNN  algorithm  (k):  Increase  to  consider  more  neighbors,  providing  a  more  balanced  view  but  possibly  smoothing  out  local  patterns.  Decrease  for  fewer  neighbors  to  make  the  algorithm  more  responsive  to  recent  changes.  \n\nNumber  of  data  points  to  consider  (n):  Increase  for  more  historical  data,  providing  a  broader  context  but  possibly  diluting  recent  trends.  Decrease  for  less  historical  data  to  focus  more  on  recent  behavior."
t2="Length  of  weighted  moving  average  for  price  (KNN_PriceLen):  Higher  values  create  a  smoother  price  line,  influencing  the  KNN  algorithm  to  be  more  stable  but  less  sensitive  to  short-term  price  movements.  Lower  values  enhance  responsiveness  in  KNN  predictions  to  recent  price  changes  but  may  lead  to  more  noise.  \n\nLength  of  weighted  moving  average  for  SuperTrend  (KNN_STLen):  Higher  values  lead  to  a  smoother  SuperTrend  line,  affecting  the  KNN  algorithm  to  emphasize  long-term  trends.  Lower  values  make  KNN  predictions  more  sensitive  to  recent  SuperTrend  changes  but  may  result  in  more  volatility."
t3="Length  of  the  SuperTrend  (len):  Increase  for  a  smoother  trend  line,  ideal  for  identifying  long-term  trends  but  possibly  ignoring  short-term  fluctuations.  Decrease  for  more  responsiveness  to  recent  changes  but  risk  of  more  false  signals.  \n\nMultiplier  for  ATR  in  SuperTrend  calculation  (factor):  Increase  for  wider  bands,  capturing  larger  price  movements  but  possibly  missing  subtle  changes.  Decrease  for  narrower  bands,  more  sensitive  to  small  shifts  but  risk  of  more  noise."
t4="Type  of  moving  average  for  SuperTrend  calculation  (maSrc):  Choose  based  on  desired  characteristics.  SMA  is  simple  and  clear,  EMA  emphasizes  recent  prices,  WMA  gives  more  weight  to  recent  data,  RMA  is  less  sensitive  to  recent  changes,  and  VWMA  considers  volume."
t5="Color  for  bullish  trend  (upCol):  Select  to  visually  identify  upward  trends.  \n\nColor  for  bearish  trend  (dnCol):  Select  to  visually  identify  downward  trends.\n\nColor  for  neutral  trend  (neCol):  Select  to  visually  identify  neutral  trends."
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
//  ~~  Input  settings  for  K  and  N  values
k    =  input.int(3,  title  =  "Neighbors",  minval=1,  maxval=100,inline="AI",  group="AISettings")
n_=input.int(10,title="Data",minval=1,maxval=100,inline="AI",group="AISettings",tooltip=t1)
n=math.max(k,n_)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
//~~Inputsettingsforpredictionvalues
KNN_PriceLen=input.int(20,title="PriceTrend",minval=2,maxval=500,step=10,inline="AITrend",group="AITrend")
KNN_STLen=input.int(100,title="PredictionTrend",minval=2,maxval=500,step=10,inline="AITrend",group="AITrend",tooltip=t2)
aisignals=input.bool(true,title="AITrendSignals",inline="signal",group="AITrend")
Bullish_col=input.color(color.lime,"",inline="signal",group="AITrend")
Bearish_col=input.color(color.red,"",inline="signal",group="AITrend")
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
//~~DefineSuperTrendparameters
len=input.int(10,"Length",minval=1,inline="SuperTrend",group="SuperTrendSettings")
factor=input.float(3.0,step=.1,inline="SuperTrend",group="SuperTrendSettings",tooltip=t3)
maSrc=input.string("WMA","MovingAverageSource",["SMA","EMA","WMA","RMA","VWMA"],inline="",group="SuperTrendSettings",tooltip=t4)
upCol=input.color(color.lime,"BullishColor",inline="col",group="SuperTrendColoring")
dnCol=input.color(color.red,"BearishColor",inline="col",group="SuperTrendColoring")
neCol=input.color(color.blue,"NeutralColor",inline="col",group="SuperTrendColoring",tooltip=t5)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
//~~CalculatetheSuperTrendbasedontheuser'schoice
vwma=switchmaSrc
"SMA"=>ta.sma(close*volume,len)/ta.sma(volume,len)
"EMA"=>ta.ema(close*volume,len)/ta.ema(volume,len)
"WMA"=>ta.wma(close*volume,len)/ta.wma(volume,len)
"RMA"=>ta.rma(close*volume,len)/ta.rma(volume,len)
"VWMA"=>ta.vwma(close*volume,len)/ta.vwma(volume,len)
atr=ta.atr(len)
upperBand=vwma+factor*atr
lowerBand=vwma-factor*atr
prevLowerBand=nz(lowerBand[1])
prevUpperBand=nz(upperBand[1])
lowerBand:=lowerBand>prevLowerBandorclose[1]<prevLowerBand?lowerBand:prevLowerBand
upperBand:=upperBand<prevUpperBandorclose[1]>prevUpperBand?upperBand:prevUpperBand
intdirection=na
floatsuperTrend=na
prevSuperTrend=superTrend[1]
ifna(atr[1])
direction:=1
elseifprevSuperTrend==prevUpperBand
direction:=close>upperBand?-1:1
else
direction:=close<lowerBand?1:-1
superTrend:=direction==-1?lowerBand:upperBand
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
//~~Collectdatapointsandtheircorrespondinglabels
price=ta.wma(close,KNN_PriceLen)
sT=ta.wma(superTrend,KNN_STLen)
data=array.new_float(n)
labels=array.new_int(n)
fori=0ton-1
data.set(i,superTrend[i])
label_i=price[i]>sT[i]?1:0
labels.set(i,label_i)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
//~~Defineafunctiontocomputedistancebetweentwodatapoints
distance(x1,x2)=>
math.abs(x1-x2)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
//~~Definetheweightedk-nearestneighbors(KNN)function
knn_weighted(data,labels,k,x)=>
n1=data.size()
distances=array.new_float(n1)
indices=array.new_int(n1)
//Computedistancesfromthecurrentpointtoallotherpoints
fori=0ton1-1
x_i=data.get(i)
dist=distance(x,x_i)
distances.set(i,dist)
indices.set(i,i)
//Sortdistancesandcorrespondingindicesinascendingorder
//Bubblesortmethod
fori=0ton1-2
forj=0ton1-i-2
ifdistances.get(j)>distances.get(j+1)
tempDist=distances.get(j)
distances.set(j,distances.get(j+1))
distances.set(j+1,tempDist)
tempIndex=indices.get(j)
indices.set(j,indices.get(j+1))
indices.set(j+1,tempIndex)
//Computeweightedsumoflabelsoftheknearestneighbors
weighted_sum=0.
total_weight=0.
fori=0tok-1
index=indices.get(i)
label_i=labels.get(index)
weight_i=1/(distances.get(i)+1e-6)
weighted_sum+=weight_i*label_i
total_weight+=weight_i
weighted_sum/total_weight
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
//~~Classifythecurrentdatapoint
current_superTrend=superTrend
label_=knn_weighted(data,labels,k,current_superTrend)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
//~~Plot
col=label_==1?upCol:label_==0?dnCol:neCol
plot(current_superTrend,color=col,title="VolumeSuperTrendAI")
upTrend=plot(superTrend==lowerBand?current_superTrend:na,title="UpVolumeSuperTrendAI",color=col,style=plot.style_linebr)
Middle=plot((open+close)/2,display=display.none,editable=false)
downTrend=plot(superTrend==upperBand?current_superTrend:na,title="DownVolumeSuperTrendAI",color=col,style=plot.style_linebr)
fill_col=color.new(col,90)
fill(Middle,upTrend,fill_col,fillgaps=false,title="UpVolumeSuperTrendAI")
fill(Middle,downTrend,fill_col,fillgaps=false,title="DownVolumeSuperTrendAI")
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
//~~AiSuperTrendSignals
Start_TrendUp=col==upColand(col[1]!=upColorcol[1]==neCol)andaisignals
Start_TrendDn=col==dnColand(col[1]!=dnColorcol[1]==neCol)andaisignals
TrendUp=direction==-1anddirection[1]==1andlabel_==1andaisignals
TrendDn=direction==1anddirection[1]==-1andlabel_==0andaisignals
plotshape(Start_TrendUp?superTrend:na,location=location.absolute,style=shape.circle,size=size.tiny,color=Bullish_col,title="AIBullishTrendStart")
plotshape(Start_TrendDn?superTrend:na,location=location.absolute,style=shape.circle,size=size.tiny,color=Bearish_col,title="AIBearishTrendStart")
plotshape(TrendUp?superTrend:na,location=location.absolute,style=shape.triangleup,size=size.small,color=Bullish_col,title="AIBullishTrendSignal")
plotshape(TrendDn?superTrend:na,location=location.absolute,style=shape.triangledown,size=size.small,color=Bearish_col,title="AIBearishTrendSignal")
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
//~~Alerts{
alertcondition(Start_TrendUp,title="1BullishTrendStart",message="AIBullishTrendStart")
alertcondition(Start_TrendDn,title="2BearishTrendStart",message="AIBearishTrendStart")
alertcondition((Start_TrendUporStart_TrendDn),title="3AnyTrendStart",message="AnyAITrendStart")
alertcondition(TrendUp,title="4BullishTrendSignal",message="AIBullishTrendSignal")
alertcondition(TrendDn,title="5BearishTrendSignal",message="AIBearishTrendSignal")
alertcondition((TrendUporTrendDn),title="6AnyTrendSignal",message="AnyAITrendSignal")
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
Expand (152 lines)
