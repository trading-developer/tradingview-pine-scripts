Script Name: BEST Strategy Template Autoview
Author: Daveatt
Description: Hello Traders

I've build a strategy template building for you the  AUTOVIEW  commands
I made this template based on this documentation: use.autoview.with.pink

You can select whether you want to use an SL or not, a TP or not, using the borrow/repay feature (only for Binance), ... and it will build dynamically the Autoview commands and will send them when...
PineScript code:

Pine Script™ strategy
BEST Strategy Template Autoview
//@version=5
//  #  =========================================================================  #
//  #                                      |      Strategy    |
//  #  =========================================================================  #
SystemName  =  "Strategy  Template  Autoview"
TradeId  =  "S"
//  These  values  are  used  both  in  the  strategy()  header  and  in  the  script's  relevant  inputs  as  default  values  so  they  match.
//  Unless  these  values  match  in  the  script's  Inputs  and  the  TV  backtesting  Properties,  results  between  them  cannot  be  compared.
InitCapital  =  1000000
InitPosition  =  2
InitCommission  =  0.075
InitPyramidMax  =  1
CalcOnorderFills  =  false
ProcessOrdersOnClose  =  true  //  display  the  signals  one  candle  earlier
CalcOnEveryTick  =  true  //  forward  testing
//CloseEntriesRule  =  "ANY"
strategy(title=SystemName,  shorttitle=SystemName,
  overlay=true,  pyramiding=InitPyramidMax,  initial_capital=InitCapital,  default_qty_type=strategy.fixed,  process_orders_on_close=ProcessOrdersOnClose,
  default_qty_value=InitPosition,  commission_type=strategy.commission.percent,  commission_value=InitCommission,  calc_on_order_fills=CalcOnorderFills,
  calc_on_every_tick=CalcOnEveryTick,
  precision=6,  max_lines_count=500,  max_labels_count=500)
//  #  =========================================================================  #
//  #  =========================================================================  #
//  #                                      ||      Alerts    ||
//  #  =========================================================================  #
//  #  =========================================================================  #
show_alerts_debug  =  input.bool(true,  title  =  "Show  Alerts  Debug  Label?",  group  =  "Debug")
//i_alert_txt_entry_long  =  input.text_area(defval  =  "",  title  =  "Long  Entry  Message",  group  =  "Alerts")
//i_alert_txt_entry_short  =  input.text_area(defval  =  "",  title  =  "Short  Entry  Message",  group  =  "Alerts")
//i_alert_txt_exit_long  =  input.text_area(defval  =  "",  title  =  "Long  Exit  Message",  group  =  "Alerts")
//i_alert_txt_exit_short  =  input.text_area(defval  =  "",  title  =  "Short  Exit  Message",  group  =  "Alerts")
i_broker_mode  =  input.string("DEMO",  title  =  "Use  Demo  or  Live  Broker",  options=["DEMO",  "LIVE"],  group  =  "Automation")
i_broker_name  =  input.string("Tradovate",  title  =  "Broker  Name",  options=["Tradovate",  "AscendEX",  "Binance",  "Binance  Futures",  "Binance  US",  "Binance  Delivery",  "Kraken",  "Deribit",  "Poloniex",  "Okcoin",  "Bitfinex",  "Oanda",  "Kucoin",  "Okex",  "Bybit",  "FTX",  "Bitmex",  "Alpaca",  "Gemini"],  group  =  "Automation")
i_enable_trades  =  input.bool(true,  title  =  "Enable  trades?",  group  =  "Automation",  tooltip  =  "If  not  enabled,  disables  live  trades,  but  more  importantly,  it  will  output  what  Autoview  is  going  to  do  when  you  go  live.")
i_account_name  =  input.string("*",  title  =  "Account  Name",  group  =  "Automation")
i_symbol_name    =  input.string("btcusd_perp",  title  =  "Symbol  Name",  group  =  "Automation")
nb_contracts  =  input.int(2,  title  =  "Nb  Contracts",  group  =  "Automation")
use_delay  =  input.bool(false,  title  =  "Use  Delay  between  orders",  group  =  "Automation",  inline  =  "delay")
i_delay_qty  =  input.int(1,  title  =  "Delay  in  seconds",  group  =  "Automation",  inline  =  "delay")
i_use_borrow_repay      =  input.bool(false,  title  =  "Use  Borrow/Repay  Mode?",  group  =  "Binance  Automation")
i_asset_borrow_repay  =  input.string("BTC",  title  =  "Asset  to  Borrow/Repay",  group  =  "Binance  Automation")
i_qty_borrow_repay      =  input.float(1.,  title  =  "Quantity  of  assets  to  borrow?",  group  =  "Binance  Automation")
//  #  =========================================================================  #
//  #  =========================================================================  #
//  #                                      ||      Dates  Range  Filtering    ||
//  #  =========================================================================  #
//  #  =========================================================================  #
DateFilter  =  input(false,  "Date  Range  Filtering",  group="Date")
//  —————  Syntax  coming  from  https://www.tradingview.com/blog/en/new-parameter-for-date-input-added-to-pine-21812/
i_startTime  =  input.time(defval  =  timestamp("01  Jan  2019  13:30  +0000"),  title  =  "Start  Time",  group="Date")
i_endTime  =  input.time(defval  =  timestamp("30  Dec  2021  23:30  +0000"),  title  =  "End  Time",  group="Date")
TradeDateIsAllowed()  =>  DateFilter  ?  time  >=  i_startTime  and  time  <=  i_endTime  :  true
//  #  =========================================================================  #
//  #                                      |      Custom  Exits  |
//  #  =========================================================================  #
//use_custom_exit  =  input.bool(true,  title  =  "Use  Custom  Exits?",  group  =  "Custom  Exits")
//  #  =========================================================================  #
//  #                                      |      Stop  Loss  |
//  #  =========================================================================  #
use_sl                =  input.string("None",  title  =  "Select  Stop  Loss  Mode",  options=["None",  "Percent",  "Price"],  group  =  "Stop  Loss")
sl_input_perc  =  input.float(3,  minval  =  0,  title  =  "Stop  Loss  (%)",  group  =  "Stop  Loss  (%)")  *  0.01
sl_input_pips  =  input.float(30,  minval  =  0,  title  =  "Stop  Loss  (USD)",  group  =  "Stop  Loss  (USD)")
//  #  =========================================================================  #
//  #                                      |      Take  Profit  |
//  #  =========================================================================  #
use_tp              =  input.string("None",  title  =  "Select  Take  Profit  Mode",  options=["None",  "Percent",  "Price"],  group  =  "Take  Profit")
tp_input_perc  =  input.float(3,  minval  =  0,  title  =  "Take  Profit  (%)",  group  =  "Take  Profit  (%)")  *  0.01
tp_input_pips  =  input.float(30,  minval  =  0,  title  =  "Take  Profit  (USD)",  group  =  "Take  Profit  (USD)")
//  #  =========================================================================  #
//  #                                      |      Consolidated  Entries  |
//  #  =========================================================================  #
bull  =  close  >  open  and  close  >  math.max(close[2],  open[2])  and  low[1]  <  low[2]  and  high[1]  <  high[2]  //  low  <  low[1]  and  low[1]  <  low[2]
bear  =  close  <  open  and  close  <  math.min(close[2],  open[2])  and  low[1]  >  low[2]  and  high[1]  >  high[2]  //  low  <  low[1]  and  low[1]  <  low[2]
//  #  =========================================================================  #
//  #              |      Entry  Price  |
//  #  =========================================================================  #
entry_long_price    =  ta.valuewhen(condition=bull  and  strategy.position_size[1]  <=  0,  source=close,  occurrence=0)
entry_short_price  =  ta.valuewhen(condition=bear  and  strategy.position_size[1]  >=  0,  source=close,  occurrence=0)
var  float  entry_price  =  0.
if  bull
        entry_price  :=  entry_long_price
if  bear
        entry_price  :=  entry_short_price
//  #  =========================================================================  #
//  #                                      ||      Global  Trend  Variables  ||
//  #  =========================================================================  #
T1_sinceUP  =  ta.barssince(bull)
T1_sinceDN  =  ta.barssince(bear)
T1_nUP  =  ta.crossunder(T1_sinceUP,T1_sinceDN)
T1_nDN  =  ta.crossover(T1_sinceUP,T1_sinceDN)
T1_sinceNUP  =  ta.barssince(T1_nUP)
T1_sinceNDN  =  ta.barssince(T1_nDN)
T1_BuyTrend    =  T1_sinceDN  >  T1_sinceUP
T1_SellTrend  =  T1_sinceDN  <  T1_sinceUP
T1_SellToBuy      =  T1_BuyTrend  and  T1_SellTrend[1]
T1_BuyToSell      =  T1_SellTrend  and  T1_BuyTrend[1]
T1_ChangeTrend  =  T1_BuyToSell  or  T1_SellToBuy
//  #  =========================================================================  #
//  #                                      |      Stop  Loss  |
//  #  =========================================================================  #
var  float  final_SL_Long    =  0.
var  float  final_SL_Short  =  0.
if  use_sl  ==  "Percent"
        final_SL_Long  :=  entry_long_price  *  (1  -  sl_input_perc)
        final_SL_Short  :=  entry_short_price  *  (1  +  sl_input_perc)
else  if  use_sl  ==  "Price"
        final_SL_Long  :=  entry_long_price  -  (sl_input_pips)
        final_SL_Short  :=  entry_short_price  +  (sl_input_pips)
plot(strategy.position_size  >  0  and  use_sl  !=  "None"  ?  final_SL_Long  :  na,  title  =  "SL  Long",  color  =  color.fuchsia,  linewidth=2,  style=plot.style_linebr)
plot(strategy.position_size  <  0  and  use_sl  !=  "None"  ?  final_SL_Short  :  na,  title  =  "SL  Short",  color  =  color.fuchsia,  linewidth=2,  style=plot.style_linebr)
//  #  =========================================================================  #
//  #                        |TakeProfit|
//#=========================================================================#
varfloatfinal_TP_Long=0.
varfloatfinal_TP_Short=0.
ifuse_tp=="Percent"
final_TP_Long:=entry_long_price*(1+tp_input_perc)
final_TP_Short:=entry_short_price*(1-tp_input_perc)
elseifuse_tp=="Price"
final_TP_Long:=entry_long_price+(tp_input_pips)
final_TP_Short:=entry_short_price-(tp_input_pips)
plot(strategy.position_size>0anduse_tp!="None"?final_TP_Long:na,title="TPLong",color=color.orange,linewidth=2,style=plot.style_linebr)
plot(strategy.position_size<0anduse_tp!="None"?final_TP_Short:na,title="TPShort",color=color.orange,linewidth=2,style=plot.style_linebr)
//#=========================================================================#
//#|AutoViewCalls|
//#=========================================================================#
floatquantity=nb_contracts
stringproduct_type_ticker=i_symbol_name
varstringbroker_mode=""
ifi_broker_mode=="DEMO"
broker_mode:=switchi_broker_name
"Tradovate"=>"tradovatesim"
"Ascendex"=>"ascendex-sandbox"
"BinanceFutures"=>"binancefuturestestnet"
"BinanceDelivery"=>"binancedeliverytestnet"
"Oanda"=>"oandapractice"
"Bitmex"=>"bitmextestnet"
"Bybit"=>"bybittestnet"
"Alpaca"=>"alpacapaper"
"Kucoin"=>"kucoinsandbox"
"Deribit"=>"deribittestnet"
"Gemini"=>"gemini-sandbox"
=>i_broker_name
else//"LIVE"
broker_mode:=switchi_broker_name
"Tradovate"=>"tradovate"
"Ascendex"=>"ascendex"
"BinanceFutures"=>"binancefutures"
"BinanceDelivery"=>"binancedelivery"
"Binance"=>"binance"
"Oanda"=>"oanda"
"Kraken"=>"kraken"
"Deribit"=>"deribit"
"Bitfinex"=>"bitfinex"
"Poloniex"=>"poloniex"
"Bybit"=>"bybit"
"Okcoin"=>"okcoin"
"Kucoin"=>"kucoin"
"FTX"=>"ftx"
"Bitmex"=>"bitmex"
"Alpaca"=>"alpaca"
"Gemini"=>"gemini"
=>i_broker_name
enable_trades=i_enable_trades?"":"d=1"
stringdelay_qty=use_delay?"delay="+str.tostring(i_delay_qty):""
i_alert_txt_entry_long="a="+i_account_name+"e="+broker_mode+"s="+product_type_ticker+enable_trades+"b=shortc=positiont=market"+
"\na="+i_account_name+"e="+broker_mode+"s="+product_type_ticker+"b=longq="+str.tostring(quantity,"#")+"t=market"+enable_trades+delay_qty

i_alert_txt_entry_short="a="+i_account_name+"e="+broker_mode+"s="+product_type_ticker+enable_trades+"b=longc=positiont=market"+
"\na="+i_account_name+"e="+broker_mode+"s="+product_type_ticker+"b=shortq="+str.tostring(quantity,"#")+"t=market"+enable_trades+delay_qty
varstringtemp_txt_SL_long=""
varstringtemp_txt_SL_short=""
varstringtemp_txt_TP_long=""
varstringtemp_txt_TP_short=""
ifuse_sl=="Percent"
temp_txt_SL_long:="sl=-"+str.tostring(sl_input_perc*100)+"%"
temp_txt_SL_short:="sl="+str.tostring(sl_input_perc*100)+"%"
elseifuse_sl=="Price"
temp_txt_SL_long:="fsl="+str.tostring(final_SL_Long)
temp_txt_SL_short:="fsl="+str.tostring(final_SL_Short)
ifuse_tp=="Percent"
temp_txt_TP_long:="p="+str.tostring(tp_input_perc*100)+"%"
temp_txt_TP_short:="p=-"+str.tostring(tp_input_perc*100)+"%"
elseifuse_tp=="Price"
temp_txt_TP_long:="fp="+str.tostring(final_TP_Long)
temp_txt_TP_short:="fp="+str.tostring(final_TP_Short)
i_alert_txt_exit_SL_long="a="+i_account_name+"e="+broker_mode+"s="+product_type_ticker+"b=longc=positiont=market"+temp_txt_SL_long+enable_trades
i_alert_txt_exit_SL_short="a="+i_account_name+"e="+broker_mode+"s="+product_type_ticker+"b=shortc=positiont=market"+temp_txt_SL_short+enable_trades
i_alert_txt_exit_TP_long="a="+i_account_name+"e="+broker_mode+"s="+product_type_ticker+"b=longc=positiont=market"+temp_txt_TP_long+enable_trades
i_alert_txt_exit_TP_short="a="+i_account_name+"e="+broker_mode+"s="+product_type_ticker+"b=shortc=positiont=market"+temp_txt_TP_short+enable_trades
stringfinal_alert_txt_entry_long=i_alert_txt_entry_long
stringfinal_alert_txt_entry_short=i_alert_txt_entry_short
ifi_use_borrow_repayandi_broker_name=="Binance"
final_alert_txt_entry_long:="a="+i_account_name+"e="+broker_mode+"y=borroww="+i_asset_borrow_repay+"q="+str.tostring(i_qty_borrow_repay,"#")+enable_trades+
"\na="+i_account_name+"e="+broker_mode+"s="+product_type_ticker+enable_trades+"b=shortc=positiont=market"+delay_qty+
"\na="+i_account_name+"e="+broker_mode+"s="+product_type_ticker+"b=longq="+str.tostring(quantity,"#")+"t=market"+enable_trades+delay_qty+
"\na="+i_account_name+"e="+broker_mode+"y=repayw="+i_asset_borrow_repay+"q="+str.tostring(i_qty_borrow_repay,"#")+enable_trades
final_alert_txt_entry_short:="a="+i_account_name+"e="+broker_mode+"y=borroww="+i_asset_borrow_repay+"q="+str.tostring(i_qty_borrow_repay,"#")+enable_trades+
"\na="+i_account_name+"e="+broker_mode+"s="+product_type_ticker+enable_trades+"b=longc=positiont=market"+delay_qty+
"\na="+i_account_name+"e="+broker_mode+"s="+product_type_ticker+"b=shortq="+str.tostring(quantity,"#")+"t=market"+enable_trades+delay_qty+
"\na="+i_account_name+"e="+broker_mode+"y=repayw="+i_asset_borrow_repay+"q="+str.tostring(i_qty_borrow_repay,"#")+enable_trades
//i_alert_txt_entry_long:=final_alert_txt_entry_long
//i_alert_txt_entry_short:=final_alert_txt_entry_short
ifshow_alerts_debugandbarstate.islastconfirmedhistory
varlabellblTest=na
label.delete(lblTest)
stringlabel_txt=i_alert_txt_entry_long
ifuse_sl!="None"
label_txt:=label_txt+"\n"+i_alert_txt_exit_SL_long
ifuse_tp!="None"
label_txt:=label_txt+"\n"+i_alert_txt_exit_TP_long
t=time+(time-time[1])*25
lblTest:=label.new(
x=t,
y=ta.highest(50),
text=label_txt,
xloc=xloc.bar_time,
yloc=yloc.price,
color=color.new(color=color.gray,transp=0),
style=label.style_label_left,
textcolor=color.new(color=color.white,transp=0),
size=size.large
)
//#=========================================================================#
//#|StrategyCallsandAlerts|
//#=========================================================================#
ifbullandTradeDateIsAllowed()
strategy.entry(id="Long",direction=strategy.long,comment="Long",alert_message=i_alert_txt_entry_long,qty=nb_contracts)
alert(i_alert_txt_entry_long,alert.freq_once_per_bar)

elseifbearandTradeDateIsAllowed()
strategy.entry(id="Short",direction=strategy.short,comment="Short",alert_message=i_alert_txt_entry_short,qty=nb_contracts)
alert(i_alert_txt_entry_short,alert.freq_once_per_bar)
//quantity:=quantity*2
strategy.exit(id="ExitLong",from_entry="Long",stop=(use_sl!="None")?final_SL_Long:na,comment_loss="LongExitSL",alert_loss=(use_sl!="None")?i_alert_txt_exit_SL_long:na,limit=(use_tp!="None")?final_TP_Long:na,comment_profit="LongExitTP",alert_profit=(use_tp!="None")?i_alert_txt_exit_TP_long:na)
strategy.exit(id="ExitShort",from_entry="Short",stop=(use_sl!="None")?final_SL_Short:na,comment_loss="ShortExitSL",alert_loss=(use_sl!="None")?i_alert_txt_exit_SL_short:na,limit=(use_tp!="None")?final_TP_Short:na,comment_profit="ShortExitTP",alert_profit=(use_tp!="None")?i_alert_txt_exit_TP_short:na)
ifstrategy.position_size>0andlow<final_SL_Longanduse_sl!="None"
alert(i_alert_txt_exit_SL_long,alert.freq_once_per_bar)
elseifstrategy.position_size<0andhigh>final_SL_Shortanduse_sl!="None"
alert(i_alert_txt_exit_SL_short,alert.freq_once_per_bar)
ifstrategy.position_size>0andhigh>final_TP_Longanduse_tp!="None"
alert(i_alert_txt_exit_TP_long,alert.freq_once_per_bar)
elseifstrategy.position_size<0andlow<final_TP_Shortanduse_tp!="None"
alert(i_alert_txt_exit_TP_short,alert.freq_once_per_bar)
//#=========================================================================#
//#|ResetVariables|
//#=========================================================================#
Expand (334 lines)
