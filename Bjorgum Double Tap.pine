Script Name: Bjorgum Double Tap
Author: Bjorgum
Description: █   OVERVIEW


Double Tap is a pattern recognition script aimed at detecting Double Tops and Double Bottoms. Double Tap can be applied to the broker emulator to observe historical results, run as a trading bot for live trade alerts in real time with entry signals, take profit, and stop orders, or to simply detect patterns.



█   CONCEPTS


 How Is A Pattern...
PineScript code:

Pine Script™ strategy
Bjorgum Double Tap
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  Bjorgum
//      ________________________________________________________________
//    |\______________________________________________________________/|
//    ||      ________________                                                                                      ||
//    ||      ___    __  )_____(_)___________________  ____    ________  ___        ||
//    ||      __    __    |____    /_    __  \_    ___/_    __  `/    /  /  /_    __  `__  \      ||
//    ||      _    /_/  /____    /  /  /_/  /    /      _    /_/  //  /_/  /_    /  /  /  /  /      ||
//    ||      /_____/  ___    /    \____//_/        _\__,  /  \__,_/  /_/  /_/  /_/        ||
//    ||                      /___/                                /____/                                                ||
//    ||______________________________________________________________||
//    |/______________________________________________________________\|
//@version=5
//  @strategy_alert_message  {{strategy.order.alert_message}}
strategy(
  title                                    =      "Bjorgum  Double  Tap",
  shorttitle                          =      "Bj  Double  Tap",
  overlay                                =      true,
  max_lines_count                =      500,
  max_labels_count              =      500,
  precision                            =      3,
  default_qty_type              =      strategy.cash,
  commission_value              =      0.04,
  commission_type                =      strategy.commission.percent,
  slippage                              =      1,
  currency                              =      currency.USD,
  default_qty_value            =      1000,
  initial_capital                =      1000)
//  ══════════════════════════════════  //
//  —————>  Immutable  Constants  <——————  //
//  ══════════════════════════════════  //
string            useStratTip  =      "Enables  or  disables  the  strategy  tester  allowing  a  change  between  either  an  indicator  or  a  strategy."
string            dLongTip        =      "Detect  long  setups."
string            dShortTip      =      "Detect  short  setups."
string            FLIPTip          =      "Allow  entry  in  the  opposite  bias  while  already  in  a  position."
string            startTip        =      "Start  date  &  time  to  begin  backtest  period.  Useful  for  beginning  new  bot.  eg.  Set  time  to  now  to  make  broker  emulator  in  a  flat  position  with  the  proper  starting  captial  before  setting  alerts"
string            endTip            =      "End  date  &  time  to  stop  searching  for  setups  for  back  testing."
string            tolTip            =      "The  difference  in  height  allowable  for  the  signifcant  points  of  the  pattern  expressed  as  a  percent  of  the  pattern  height.  Example:  The  points  can  vary  in  height  by  15%  of  the  pattern  height  from  one  another."
string            lenTip            =      "The  length  used  to  calcuate  significant  points  to  form  pivots  for  pattern  detection.  Example:  The  highest  or  lowest  point  in  50  bars."
string            fibTip            =      "The  fib  target  extension  projected  from  the  neckline  of  the  pattern  in  the  direction  of  the  pattern  bias  expressed  as  a  percent.  Example:  100%  is  a  1:1  measurment  of  the  height  from  the  pattern  neckline."
string            stopPerTip    =      "The  fib  extension  of  the  pattern  height  measured  from  the  point  of  invalidation.  Example:  0%  would  be  the  high  point  of  a  double  top.  50%  would  be  halfway  between  the  top  and  the  neckline."
string            offsetTip      =      "The  number  of  bars  lines  are  extended  into  the  future  duringanongoingpattern."
stringatrStopTip="EnablesanATRtrailingstoponcethetargetextensionisbreached.NOTE:Thisdisablesatakeprofitorderinthestrategyformat."
stringatrLenTip="ThenumberofbarsusedintheATRcalculation."
stringatrMultTip="ThemultiplieroftheATRvaluetosubtractfromtheswingloworswinghighpoint.Example:1is100%oftheATR,2is2xtheATRvalue."
stringlookbackTip="Thenumberofbarstolookbacktofindaswinghighorswinglowtobeusedinthetrailingstopcalculation.Example:1ATRsubtractedfromthelowestpointin5bars.1wouldusethelowestpointwithinthelastbar."
stringtableTip="Showthedatatablefortradelimitlevelsduringanactivetrade.(tablewillonlyshowwhenapatternispresentonthechart,orinbarreplay)."
stringlabelTip="Updatesthedoubletop/bottomlabelwith'Success'or'Failure'andupdatescolorbasedontheoutcomeofthepattern."
stringthirdTip="Wherewouldyouliketosendyouralerts?"
stringpPhraseTip="Acustompassphrasetoauthenticateyourjsonmessagewithatouchmoresecurity."
stringaTronKeyTip="ThenameofyourAlertatronAPIkeys.(Addthetickerinbrackets).Example:MyKeys(XBTUSD)."
stringtickerTip="ThetickertobetradedwhenusingTradingConnector"
stringLongTip="3Commasstartlongdealbotkeys."
stringLongEndTip="3Commasendlongdealbotkeys."
stringShortTip="3Commasstartshortdealbotkeys."
stringShortEndTip="3Commasendshortdealbotkeys."
stringdt="DoubleTop"
stringdb="DoubleBottom"
stringsuc="-Success"
stringfail="-Failure"
stringwinStr="Targetreached!💰"
stringloseStr="Stoppedout...🤷‍♂"
stringtabPerc="{0,number,#.##}\n({1,number,#.##}%)"
stringtcStop="slmodslprice={0}tradeid={1}"
stringdExit="'{'\"content\":\"```Bjorgum{0}\\n\\n\\t'{{ticker}}''{{interval}}'\\n\\n\\t{1}```\"'}'"
stringS1="tiny",stringP1="top"
stringS2="small",stringP2="middle"
stringS3="normal",stringP3="bottom"
stringS4="large",stringP4="left"
stringS5="huge",stringP5="center"
stringS6="auto",stringP6="right"
varstringtnB="",stringA1="CustomJson"
stringaltStr="",stringA2="TradingConnector"
stringtUp="",stringA3="Alertatron"
stringdCordWin="",stringA4="3Commas"
stringdCordLose="",stringA5="Discord"

floatpos=strategy.position_size
intsync=bar_index
boolconfirm=barstate.isconfirmed
varintdir=na
varfloatlmt=na
varfloatstp=na
stringaltExit=na
boolFLAT=pos==0
boolLONG=pos>0
boolSHORT=pos<0
varinttradeId=0
colorcol1=color.new(#b2b5be,15)
colorcol2=color.new(#b2b5be,87)
colorcol3=color.new(#ffffff,0)
colorcol4=color.new(#17ff00,15)
colorcol5=color.new(#ff0000,15)
colorcol6=color.new(#ff5252,0)
varmatrix<float>logs=matrix.new<float>(5,3)
varline[]zLines=array.new_line(5)
varline[]tLines=array.new_line(5)
varline[]bLines=array.new_line(5)
varlabel[]bullLb=array.new_label()
varlabel[]bearLb=array.new_label()
inttimeStart=timestamp("01Jan2000")
inttimeEnd=timestamp("01Jan2099")
//══════════════════════════════════//
//—————————>UserInput<———————————//
//══════════════════════════════════//
stringGRP1="════ DetectionandTradeParameters ════"
booluseStrat=input.bool(true,"UseStrategy",group=GRP1,tooltip=useStratTip)
booldLong=input.bool(true,"DetectBottoms",group=GRP1,tooltip=dLongTip)
booldShort=input.bool(true,"DetectTops",group=GRP1,tooltip=dShortTip)
boolFLIP=input.bool(true,"FlipTrades",group=GRP1,tooltip=FLIPTip)
floattol=input.float(15,"PivotTolerance",group=GRP1,tooltip=tolTip,minval=1)
intlen=input.int(50,"PivotLength",group=GRP1,tooltip=lenTip,minval=1)
floatfib=input.float(100,"TargetFib",group=GRP1,tooltip=fibTip,minval=0)
intstopPer=input.int(0,"StopLossFib",group=GRP1,tooltip=stopPerTip)
intoffset=input.int(30,"LineOffset",group=GRP1,tooltip=offsetTip,minval=0)
stringGRP2="═══════════TimeFilter═══════════"
intstartTime=input.time(timeStart,"StartFilter",group=GRP2,tooltip=startTip)
intendTime=input.time(timeEnd,"EndFilter",group=GRP2,tooltip=endTip)
stringGRP3="══════════TrailingStop══════════"
boolatrStop=input.bool(false,"UseTrailStop",group=GRP3,tooltip=atrStopTip)
intatrLength=input.int(14,"ATRLength",group=GRP3,tooltip=atrLenTip,minval=1)
floatatrMult=input.float(1,"ATRMultiplier",group=GRP3,tooltip=atrMultTip,minval=0)
intlookback=input.int(5,"SwingLookback",group=GRP3,tooltip=lookbackTip,minval=1)
stringGRP5="════════════Colors════════════"
colorcol=input.color(col1,"Lines        ",group=GRP5,inline="41")
colorzCol=input.color(col3,"Patterns       ",group=GRP5,inline="42")
inthWidth=input.int(1,"",group=GRP5,inline="41",minval=1)
intzWidth=input.int(1,"",group=GRP5,inline="42",minval=1)
colorcolf=input.color(col2,"StopFill",group=GRP5)
colortCol=input.color(col4,"TargetColor",group=GRP5)
colorsCol=input.color(col5,"StopColor",group=GRP5)
colortrailCol=input.color(col6,"TrailColor",group=GRP5)
stringGRP6="═════════ TableandLabel ═════════"
boolshowTable=input.bool(true,"ShowTable",group=GRP6,tooltip=tableTip)
boolsetLab=input.bool(true,"UpdateLabel",group=GRP6,tooltip=labelTip)
stringlabSize=input.string("small","LabelTextSize",group=GRP6,options=[S1,S2,S3,S4,S5,S6])
stringtextSize=input.string("normal","TableTextSize",group=GRP6,options=[S1,S2,S3,S4,S5,S6])
stringtableYpos=input.string("bottom","TablePosition",group=GRP6,options=[P1,P2,P3])
stringtableXpos=input.string("right","",group=GRP6,options=[P4,P5,P6])
stringGRP7="══════════AlertStrings══════════"
stringthirdParty=input.string(A1,"3rdParty",group=GRP7,tooltip=thirdTip,options=[A1,A2,A3,A4,A5])
stringpPhrase=input.string("1234","JsonPassphrase",group=GRP7,tooltip=pPhraseTip)
stringaTronKey=input.string("myKeys","AlertatronKey",group=GRP7,tooltip=aTronKeyTip)
stringtcTicker=input.string("","TCTicker",group=GRP7,tooltip=tickerTip)
stringc3Long=input.string("","3CommaLong",group=GRP7,tooltip=LongTip)
stringc3LongEnd=input.string("","3CommaLongEnd",group=GRP7,tooltip=LongEndTip)
stringc3Short=input.string("","3CommaShort",group=GRP7,tooltip=ShortTip)
stringc3ShortEnd=input.string("","3CommaShortEnd",group=GRP7,tooltip=ShortEndTip)
//══════════════════════════════════//
//————>VariableCalculations<—————//
//══════════════════════════════════//

booldif=stopPer!=0
intset=sync+offset
floatatr=ta.atr(14)
floatsLow=ta.lowest(lookback)-(atr*atrMult)
floatsHigh=ta.highest(lookback)+(atr*atrMult)
floatpivHigh=ta.highest(len)
floatpivLows=ta.lowest(len)
floathbar=ta.highestbars(len)
floatlbar=ta.lowestbars(len)
//══════════════════════════════════//
//———>FunctionalDeclarations<————//
//══════════════════════════════════//
High(m)=>
floatresult=(m==1?high:low)

Low(m)=>
floatresult=(m==1?low:high)

perD(_p)=>
floatresult=(_p-close)/close*100
_coords(_x,_i)=>
x=matrix.get(_x,_i,0)
y=matrix.get(_x,_i,1)
[int(x),y]
_arrayLoad(_x,_max,_val)=>
array.unshift(_x,_val)
ifarray.size(_x)>_max
array.pop(_x)
_matrixPush(_mx,_max,_row)=>
matrix.add_row(_mx,matrix.rows(_mx),_row)
ifmatrix.rows(_mx)>_max
matrix.remove_row(_mx,0)
_mxLog(_cond,_x,_y)=>
float[]_row=array.from(sync,_y,0)
if_cond
_matrixPush(_x,5,_row)
_mxUpdate(_cond,_dir,_x,y)=>
intm=_dir?1:-1
int_end=matrix.rows(_x)-1
if_condandy*m>matrix.get(_x,_end,1)*m
matrix.set(_x,_end,0,sync)
matrix.set(_x,_end,1,y)
_extend(_x,_len)=>
forlin_x
line.set_x2(l,_len)
_hLine(_l,x2,y2,y3,y4,y5,_t)=>
linel1=line.new(x2,y2,set,y2,color=col,width=hWidth)
linel2=line.new(x2,y4,set,y4,color=col,width=hWidth)
array.set(_l,3,l1)
array.set(_l,2,l2)
array.set(_l,1,line.new(x2,y3,set,y3,color=col,width=hWidth))
array.set(_l,0,line.new(sync-1,_t,set,_t,color=col,width=hWidth))
linefill.new(l1,l2,colf)
ifstopPer!=0
array.set(_l,4,line.new(sync-1,y5,set,y5,color=col,width=hWidth))
_zLine(x1,y1,x2,y2,x3,y3,x4,y4)=>
array.set(zLines,3,line.new(x1,y1,x2,y2,color=zCol,width=zWidth))
array.set(zLines,2,line.new(x2,y2,x3,y3,color=zCol,width=zWidth))
array.set(zLines,1,line.new(x3,y3,x4,y4,color=zCol,width=zWidth))
array.set(zLines,0,line.new(x4,y4,sync,close,color=zCol,width=zWidth))
_label(x,y,m)=>
m>0?
_arrayLoad(bearLb,1,label.new(x,y,dt,color=color(na),style=label.style_label_down,textcolor=col,size=labSize)):
_arrayLoad(bullLb,1,label.new(x,y,db,color=color(na),style=label.style_label_up,textcolor=col,size=labSize))
_labelUpdate(_x,_y,m)=>
if(_xor_y)andsetLab
labellab=array.get(m>0?bearLb:bullLb,0)
stringoStr=(m>0?dt:db)
stringnStr=oStr+(_x?suc:fail)
label.set_text(lab,nStr)
label.set_textcolor(lab,_x?tCol:sCol)
_atrTrail(_cond,_lt,_s,m)=>
varfloat_stop=na
varbool_flag=na
varbool_trail=na
_flag:=_cond
_stop:=_s
_trail:=_flag?false:_trail
ifatrStopanduseStrat
if_lt
_flag:=false
_trail:=true
_stop:=m==-1?_lt?sLow:math.max(_stop,sLow):_stop
_stop:=m==1?_lt?sHigh:math.min(_stop,sHigh):_stop
ifHigh(m)*m>_stop*m
_flag:=true
_trail:=false
[_flag,_stop,_trail]
_inTrade(_cond,_x,_e,m)=>
varbool_flag=na
varfloat_stop=na
varfloat_limit=na
linel1=array.get(_x,0)
floatlp=line.get_price(l1,sync)
linel2=array.get(_x,dif?4:2)
floatls=line.get_price(l2,sync)
boolwin=Low(m)*m<=lp*mandnot_e
boollose=High(m)*m>=ls*mandnot_e
_flag:=_cond
_stop:=_e?ls:_stop
_limit:=_e?lp:_limit
ifwinorlose
_flag:=true
_extend(_x,sync)
_labelUpdate(win,lose,m)
line.set_color(win?l1:l2,win?tCol:sCol)
array.fill(_x,na)
array.fill(zLines,na)
[_f,_s,_t]=_atrTrail(_flag,win,_stop,m)
_flag:=atrStop?_f:_flag
_stop:=_tand_s*m<_stop*mandconfirm?_s:_stop
[_flag,_stop,_t,_limit]
_double(_cond,_l,_x,m)=>
varbool_flag=na
int_rows=matrix.rows(_x)
_flag:=_cond
if_flag
[x1,y1]=_coords(_x,_rows-5)
[x2,y2]=_coords(_x,_rows-4)
[x3,y3]=_coords(_x,_rows-3)
[x4,y4]=_coords(_x,_rows-2)
booltraded=matrix.get(_x,_rows-2,2)
floatheight=math.avg(y2,y4)-y3
float_high=y2+height*(tol/100)
float_low=y2-height*(tol/100)
float_t=y3-height*(fib/100)
floaty5=y2*m<y4*m?y2:y4
floaty6=y2*m>y4*m?y2:y4
floaty7=y6-height*(stopPer/100)
boolresult=y1*m<y3*mandy4*m<=_high*mandy4*m>=_low*mandclose*m<y3*mandnot(close[1]*m<y3*m)andnottraded
ifresultand_flagand(m>0?dShort:dLong)
_hLine(_l,x2,y5,y3,y6,y7,_t)
_zLine(x1,y1,x2,y2,x3,y3,x4,y4)
_label(x4,y6,m)
matrix.set(_x,_rows-2,2,1)
_flag:=false
_flag
_scan(_l,_x,m)=>
varbool_cond=true
_cond:=_double(_cond,_l,_x,m)
boolenter=_cond[1]andnot_cond
[f,s,t,l]=_inTrade(_cond,_l,enter,m)
_cond:=f
_extend(_l,set)
[f,s,t,l]
_populate(_n,_x,_i,_col)=>
for[i,_a]in_x
ifnotna(_a)
table.cell(table_id=_n,column=_i,
row=i,bgcolor=na,
text=_a,text_color=_col,
text_size=textSize)

//══════════════════════════════════//
//————————>LogicalOrder<—————————//
//══════════════════════════════════//
dir:=nothbar?1:notlbar?0:dir
booldirUp=dir!=dir[1]anddir
booldirDn=dir!=dir[1]andnotdir
boolsetUp=nothbaranddir
boolsetDn=notlbarandnotdir
_mxLog(dirUpordirDn,logs,dirUp?pivHigh:pivLows)
_mxUpdate(setUporsetDn,dir,logs,setUp?pivHigh:pivLows)
[bear,ss,ts,sl]=_scan(tLines,logs,1)
[bull,ls,tl,ll]=_scan(bLines,logs,-1)
boolst=SHORT?ts:false
boollt=LONG?tl:false
boolsell=bear[1]andnotbear
boolbuy=bull[1]andnotbull
colorssCol=storst[1]?trailCol:na
colorlsCol=ltorlt[1]?trailCol:na
boollongEntry=buyand(FLATor(SHORTandFLIP))
boolshortEntry=selland(FLATor(LONGandFLIP))
booldateFilter=time>=startTimeandtime<=endTime
tradeId+=longEntryorshortEntry?1:0
lmt:=atrStop?na:
shortEntry?sl:longEntry?ll:lmt
stp:=shortEntryorSHORTandatrStop?ss:
longEntryorLONGandatrStop?ls:stp

plot(atrStop?ss:na,"ShortStop",ssCol,style=plot.style_linebr)
plot(atrStop?ls:na,"LongStop",lsCol,style=plot.style_linebr)
bgcolor(notdateFilter?color.new(color.red,80):na,title="FilterColor")
//══════════════════════════════════//
//—————————>DataDisplay<—————————//
//══════════════════════════════════//
ifshowTable

stringtls=bull?na:str.format(tabPerc,ls,perD(ls))
stringtss=bear?na:str.format(tabPerc,ss,perD(ss))
stringtll=bull?na:str.format(tabPerc,ll,perD(ll))
stringtsl=bear?na:str.format(tabPerc,sl,perD(sl))

string[]titles=array.from(na,bull?na:"Bullish",bear?na:"Bearish")

string[]stops=array.from("Stop",tls,tss)
string[]limtis=array.from("Target",tll,tsl)

tablebjTab=table.new(tableYpos+"_"+tableXpos,3,3,border_color=color.new(color.gray,60),border_width=1)

ifnotbearornotbull
_populate(bjTab,titles,0,color.white)
_populate(bjTab,stops,1,color.red)
ifnot(na(ll)orlt)ornot(na(sl)orst)
_populate(bjTab,limtis,2,color.green)
//══════════════════════════════════//
//——————>StringVariables<————————//
//══════════════════════════════════//
boolcSon=thirdParty==A1
booltCon=thirdParty==A2
boolaTron=thirdParty==A3
boolc3=thirdParty==A4
booldCord=thirdParty==A5
ifcSonanduseStrat

stringjson=

"'{'
\n\"passphrase\":\"{0}\",
\n\"time\":'\"{{timenow}}\"',
\n\"ticker\":'\"{{ticker}}\"',
\n\"plot\":'{'
\n\"stop_price\":{1,number,#.########},
\n\"limit_price\":{2,number,#.########}
\n'}',
\n\"strategy\":'{'
\n\"position_size\":'{{strategy.position_size}}',
\n\"order_action\":'\"{{strategy.order.action}}\"',
\n\"market_position\":'\"{{strategy.market_position}}\"',
\n\"market_position_size\":'{{strategy.market_position_size}}',
\n\"prev_market_position\":'\"{{strategy.prev_market_position}}\"',
\n\"prev_market_position_size\":'{{strategy.prev_market_position_size}}'
\n'}'
\n'}'"

altStr:=str.format(json,pPhrase,stp,lmt)
iftConanduseStrat
stringtcTrade=
"'{{strategy.order.action}}'tradesymbol={0}tradeid={1}"
+(atrStop?"":'tpprice={2,number,#.########}')
+'slprice={3,number,#.########}'

altStr:=str.format(tcTrade,tcTicker,tradeId,lmt,stp)
tUp:=str.format(tcStop,stp,tradeId)
ifaTronanduseStrat
stringaltEnt=aTronKey+"'{'\ncancel(which=all);\nmarket(position='{{strategy.position_size}}');\n"
stringaltEnd="'}'\n#bot"
stringaltBrkt=
(atrStop?"stopOrder(":"stopOrTakeProfit(")
+(atrStop?"":"tp=@{0,number,#.########},")
+(atrStop?"offset=@":"sl=@")+"{1,number,#.########},position=0,reduceOnly=true"
+(atrStop?",tag=trail":"")
+");\n"

stringenter=altEnt+altBrkt+altEnd
stringexit=altEnt+altEnd

altStr:=str.format(enter,lmt,stp)
altExit:=na(altExit)?exit:altExit
stringstopUpdate=aTronKey+"'{'\ncancel(which=tagged,tag=trail);\n"+altBrkt+altEnd

tUp:=atrStop?str.format(stopUpdate,lmt,stp):tUp
ifdCordanduseStrat
tnB:=longEntry?db:shortEntry?dt:tnB
stringpostTrade=

"'{'\"content\":\"```🚨Bjorgum{0}detected🚨\\n\\n\\t'{{ticker}}''{{interval}}'\\n\\n\\t"
+(atrStop?"":"🎯Target:{1,number,#.########}\\n\\t")
+"🛑Stop:{2,number,#.########}```\"'}'"
altStr:=str.format(postTrade,tnB,lmt,stp)
dCordWin:=str.format(dExit,tnB,winStr)
dCordLose:=str.format(dExit,tnB,loseStr)
ifc3anduseStrat
c3Long:=SHORTandbuy?str.format("[{0},{1}]",c3ShortEnd,c3Long):c3Long
c3Short:=LONGandsell?str.format("[{0},{1}]",c3LongEnd,c3Short):c3Short
//══════════════════════════════════//
//——————>StrategyExecution<——————//
//══════════════════════════════════//
strategy.entry("Long",strategy.long,comment="Long",when=useStratandlongEntryanddateFilter,alert_message=c3?c3Long:altStr)
strategy.entry("Short",strategy.short,comment="Short",when=useStratandshortEntryanddateFilter,alert_message=c3?c3Short:altStr)
strategy.exit("LongExit",
"Long",
stop=stp,
limit=lmt,
comment="LExit",
alert_message=c3?c3LongEnd:aTron?altExit:tCon?"closelong":dCord?na:altStr,
alert_profit=dCord?dCordWin:na,
alert_loss=dCord?dCordLose:na)
strategy.exit("ShortExit",
"Short",
stop=stp,
limit=lmt,
comment="SExit",
alert_message=c3?c3ShortEnd:aTron?altExit:tCon?"closeshort":dCord?na:altStr,
alert_profit=dCord?dCordWin:na,
alert_loss=dCord?dCordLose:na)

//══════════════════════════════════//
//—————>AlertFunctionality<——————//
//══════════════════════════════════//
if(ltandls!=ls[1]orstandss!=ss[1])and(tConoraTron)
alert(tUp,alert.freq_once_per_bar_close)
ifnotuseStratand(buyorsell)
alert((buy?db:dt)+'Detected',alert.freq_once_per_bar)
//___________
//(__)((\(\
//)_)//)D(
//(____)\_)__)(____/
Expand (544 lines)
