Script Name: Full CRYPTO pack macd, rsi, obv, ema strategy
Author: SoftKill21
Description: This is a simple, yet very efficient crypto strategy, adapted to 4h time frame, on big coins like ETH and BTC. However it can be adapted to other markets, timeframes etc

For this strategy I use a combination of a trend line, an oscillator, price action and volume.

This strategy has both the opportunity to go long and short.

As well, it has a leverage simulator...
PineScript code:

Pine Script™ strategy
Full CRYPTO pack macd, rsi, obv, ema strategy
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  SoftKill21
//@version=4
strategy("Full  strategy  ",  overlay=true,  initial_capital  =  1000,  default_qty_type=strategy.percent_of_equity,  default_qty_value=100,  commission_type=strategy.commission.percent  ,  commission_value=0.1  )
//heiking  ashi  calculation
UseHAcandles        =  input(false,  title="Use  Heikin  Ashi  Candles  in  Algo  Calculations")
////
//  ===  /INPUTS  ===
//  ===  BASE  FUNCTIONS  ===
haClose  =  UseHAcandles  ?  security(heikinashi(syminfo.tickerid),  timeframe.period,  close)  :  close
haOpen    =  UseHAcandles  ?  security(heikinashi(syminfo.tickerid),  timeframe.period,  open)  :  open
haHigh    =  UseHAcandles  ?  security(heikinashi(syminfo.tickerid),  timeframe.period,  high)  :  high
haLow      =  UseHAcandles  ?  security(heikinashi(syminfo.tickerid),  timeframe.period,  low)  :  low
//timecondition
fromDay  =  input(defval  =  1,  title  =  "From  Day",  minval  =  1,  maxval  =  31)
fromMonth  =  input(defval  =  1,  title  =  "From  Month",  minval  =  1,  maxval  =  12)
fromYear  =  input(defval  =  2020,  title  =  "From  Year",  minval  =  1970)
  //monday  and  session

//  To  Date  Inputs
toDay  =  input(defval  =  31,  title  =  "To  Day",  minval  =  1,  maxval  =  31)
toMonth  =  input(defval  =  12,  title  =  "To  Month",  minval  =  1,  maxval  =  12)
toYear  =  input(defval  =  2021,  title  =  "To  Year",  minval  =  1970)
startDate  =  timestamp(fromYear,  fromMonth,  fromDay,  00,  00)
finishDate  =  timestamp(toYear,  toMonth,  toDay,  00,  00)
time_cond  =  time  >=  startDate  and  time  <=  finishDate
//ema  data    --  moving  average
len  =  input(9,  minval=1,  title="Length")
src  =  input(hl2,  title="Source")
out  =  ema(src,  len)
//plot(out,  title="EMA",  color=color.blue)
//histogram
fast_length  =  input(title="Fast  Length",  type=input.integer,  defval=12)
slow_length  =  input(title="Slow  Length",  type=input.integer,  defval=26)
signal_length  =  input(title="Signal  Smoothing",  type=input.integer,  minval  =  1,  maxval  =  50,  defval  =  9)
sma_source  =  input(title="Simple  MA  (Oscillator)",  type=input.bool,  defval=false)
sma_signal  =  input(title="Simple  MA  (Signal  Line)",  type=input.bool,  defval=false)
//  Calculating
fast_ma  =  sma_source  ?  sma(src,  fast_length)  :  ema(src,  fast_length)
slow_ma  =  sma_source  ?  sma(src,  slow_length)  :  ema(src,  slow_length)
macd  =  fast_ma  -  slow_ma
signal  =  sma_signal  ?  sma(macd,  signal_length)  :  ema(macd,  signal_length)
hist  =  macd  -  signal
//rsi
length  =  input(  14  )
overSold  =  input(  35  )
overBought  =  input(  100  )
price  =  close
vrsi  =  rsi(price,  length)
co  =  crossover(vrsi,  overSold)
cu  =  crossunder(vrsi,  overBought)
//volume
r  =  cum(sign(change(src))  *  volume)
outvolume=  sma(obv,10)
//main  variables  to  apply  conditions  are  going  to  be  out(moving  avg)  and  hist(macd)
long  =  haClose  >  out  and  haClose  >  haClose[1]  and  out  >  out[1]  and  hist>  0  and  hist[1]  <  0  and  time_cond    and  vrsi<overBought  and  obv>  outvolume
short  =  haClose  <  out  and  haClose  <  haClose[1]  and  out  <  out[1]  and  hist  <  0  and  hist[1]  >  0  and  time_cond    and  vrsi>overSold  and  obv<  outvolume
//limit  to  1  entry
var  longOpeneda  =  false
var  shortOpeneda  =  false
var  int  timeOfBuya  =  na
longCondition=  long  and  not  longOpeneda
if  longCondition
        longOpeneda  :=  true
        timeOfBuya  :=  time
longExitSignala  =  short
exitLongCondition  =  longOpeneda[1]  and  longExitSignala
if  exitLongCondition
        longOpeneda  :=  false
        timeOfBuya  :=  na
plotshape(longCondition,  style=shape.labelup,  location=location.belowbar,  color=color.green,  size=size.tiny,  title="BUY",  text="BUY",  textcolor=color.white)
plotshape(exitLongCondition,  style=shape.labeldown,  location=location.abovebar,  color=color.red,  size=size.tiny,  title="SELL",  text="SELL",  textcolor=color.white)
//automatization
longEntry=  input(true)
shortEntry=input(false)
g(v,  p)  =>  round(v  *  (pow(10,  p)))  /  pow(10,  p)
risk          =  input(100)
leverage  =  input(1)
c  =  g((strategy.equity  *  leverage  /  open)  *  (risk  /  100),  4)
if(longEntry)
        strategy.entry("long",strategy.long,c,when=longCondition)
        strategy.close("long",when=exitLongCondition)
if(shortEntry)
        strategy.entry("short",strategy.short,c,when=exitLongCondition)
        strategy.close("short",when=longCondition)
Expand (125 lines)
