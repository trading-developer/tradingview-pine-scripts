Script Name: Strategy - Trend Chaser - PSe
Author: ElvinKennedyHernandezLatayan
Description: Trend Chaser for Philippine Stock Exchange - LONG ONLY

-Elvin Kennedy Latayan 2022
PineScript code:

Pine Script™ strategy
Strategy - Trend Chaser - PSe
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  Dillon_Grech  /  Elvin  Latayan
//@version=5
strategy('Strategy  -  Trend  Chaser  -  PSe',  overlay=true,  currency=currency.USD,  pyramiding=1,  initial_capital=25000)
//==============================================================================
//FOREX  EXCHANGE  -  Currency  Conversion
//==============================================================================
//Select  quote  currency
quoteCurrency  =  syminfo.currency    //gets  quote  currency  automatically  by  looking  using  syminfo  function  -  thank  you  Rodenwild
//Get  currency  pair  rate  quoted  against  USD  (base  currency)
usdUSDrate  =  request.security('USDUSD',  'D',  close[1])
gbpUSDrate  =  request.security('GBPUSD',  'D',  close[1])
audUSDrate  =  request.security('AUDUSD',  'D',  close[1])
nzdUSDrate  =  request.security('NZDUSD',  'D',  close[1])
cadUSDrate  =  request.security('CADUSD',  'D',  close[1])
chfUSDrate  =  request.security('CHFUSD',  'D',  close[1])
eurUSDrate  =  request.security('EURUSD',  'D',  close[1])
jpyUSDrate  =  request.security('JPYUSD',  'D',  close[1])
phpUSDrate  =  request.security('PHPUSD',  'D',  close[1])
//Fuction  to  get  currency  rate  into  variable
cr_function(source)  =>
        if  quoteCurrency  ==  'USD'
                1
        else
                if  quoteCurrency  ==  'GBP'
                        gbpUSDrate
                else
                        if  quoteCurrency  ==  'AUD'
                                audUSDrate
                        else
                                if  quoteCurrency  ==  'NZD'
                                        nzdUSDrate
                                else
                                        if  quoteCurrency  ==  'CAD'
                                                cadUSDrate
                                        else
                                                if  quoteCurrency  ==  'CHF'
                                                        chfUSDrate
                                                else
                                                        if  quoteCurrency  ==  'EUR'
                                                                eurUSDrate
                                                        else
                                                                if  quoteCurrency  ==  'PHP'
                                                                        phpUSDrate
                                                                else
                                                                        jpyUSDrate
//Put  currency  rate  function  into  variable
cr_multi  =  cr_function(ta.tr(true))
//==============================================================================
//==============================================================================
//BACKTEST  DATE  RANGE  -  Select  Dates
//==============================================================================
//Input  for  date  window
startDay  =  input.int(defval=1,  title='Start  Day',  minval=1,  maxval=31)
startMonth  =  input.int(defval=1,  title='Start  Month',  minval=1,  maxval=12)
startYear  =  input.int(defval=2008,  title='Start  Year',  minval=1970)
endDay  =  input.int(defval=1,  title='End  Day',  minval=1,  maxval=31)
endMonth  =  input.int(defval=12,  title='End  Month',  minval=1,  maxval=12)
endYear  =  input.int(defval=2022,  title='End  Year',  minval=1970)
//Submit  date  window
startDate  =  timestamp(startYear,  startMonth,  startDay,  00,  00,  00)    //  backtest  start  date
endDate  =  timestamp(endYear,  endMonth,  endDay,  23,  59,  59)    //  backtest  end  date
dateRange()  =>    //  specify  where  date  range  is  true
        time  >=  startDate  and  time  <=  endDate  ?  true  :  false
//  Remove  EurChf  from  testing
EURCHFCrashDate  =  syminfo.currency  ==  'CHF'  or  syminfo.basecurrency  ==  'CHF'  ?  time  >=  timestamp(2015,  01,  01)  and  time  <=  timestamp(2015,  01,  18)  ?  false  :  true  :  true
//==============================================================================
//==============================================================================
//MONEY  MANAGEMENT  -  ATR
//==============================================================================
//Entrer  intial  capital  and  percentage  risk  inputs
percentRisk  =  input.float(title='Risk  Per  Trade',  defval=0.02,  minval=0.001,  maxval=1)
//Enter  ATR  inputs
atrLength  =  14
atrMulti_Loss  =  input(title='Atr  Loss  Multiple',  defval=1.25)
tsMulti  =  input(title='Trailing  Stop  Multiple',  defval=1.25)
//ATR  function
truncate(number,  decimals)  =>
        factor  =  math.pow(10,  decimals)
        int(number  *  factor)  /  factor
atr  =  truncate(ta.atr(atrLength),  5)
//Fuction  for  pse  lot  size
pse_lotsize(tickSize)  =>
        if  tickSize  ==  0.0001
                10000
        else
                if  tickSize  >=  0.001  and  tickSize  <=  0.005
                        1000
                else
                        if  tickSize  >=  0.01  and  tickSize  <=  0.05
                        100
else
iftickSize>=0.10andtickSize<=0.50
10
else
iftickSize>=1andtickSize<=5
1
//Getpositionsize
//posSize=round((((strategy.initial_capital/100)*percentRisk)/(atrMulti_Loss*atr))/syminfo.mintick)
riskMoney=strategy.initial_capital/pse_lotsize(syminfo.mintick)*percentRisk
posSize=math.round(riskMoney/(atrMulti_Loss*atr*syminfo.pointvalue)/syminfo.mintick)
//==============================================================================
//==============================================================================
//INDICATOR1-Trigger
//==============================================================================
//IndicatorName
[macdLine,signalLine,histLine]=ta.macd(close,12,26,9)
Ind_1_L=ta.crossover(histLine,0)andmacdLine>0
Ind_1_S=false
//==============================================================================
//==============================================================================
//INDICATOR2
//==============================================================================
//IndicatorName
//
//@authorLazyBear
//Listofallmyindicators:
//https://docs.google.com/document/d/15AGCufJZ8CIUvwFJ9W-IKns88gkWOKBCvByMEvm5MLo/edit?usp=sharing
//
//ModifiedforCryptoMarketbyShayanKM
sensitivity=input(150,title='Sensitivity')
fastLength=input(20,title='FastEMALength')
slowLength=input(40,title='SlowEMALength')
channelLength=input(20,title='BBChannelLength')
mult=input(2.0,title='BBStdevMultiplier')
DEAD_ZONE=nz(ta.rma(ta.tr(true),100))*3.7
calc_macd(source,fastLength,slowLength)=>
fastMA=ta.ema(source,fastLength)
slowMA=ta.ema(source,slowLength)
fastMA-slowMA
calc_BBUpper(source,length,mult)=>
basis=ta.sma(source,length)
dev=mult*ta.stdev(source,length)
basis+dev
calc_BBLower(source,length,mult)=>
basis=ta.sma(source,length)
dev=mult*ta.stdev(source,length)
basis-dev
t1=(calc_macd(close,fastLength,slowLength)-calc_macd(close[1],fastLength,slowLength))*sensitivity
e1=calc_BBUpper(close,channelLength,mult)-calc_BBLower(close,channelLength,mult)
trendUp=t1>=0?t1:0
trendDown=t1<0?-1*t1:0
//LongandShortOrders(ConfirmationConditions)
Ind_2_L=trendUp>e1
Ind_2_S=false
//==============================================================================
//ENTRYCONDITIONS-SubmitOrders
//==============================================================================
//Longandshortstrategyconditions
entry_long=strategy.position_size<=0anddateRange()andEURCHFCrashDateandInd_1_LandInd_2_L
entry_short=strategy.position_size>=0anddateRange()andEURCHFCrashDateandInd_1_SandInd_2_S
plotshape(entry_long,color=color.new(color.lime,0),style=shape.arrowup,location=location.belowbar,text='Buy')
plotshape(entry_short,color=color.new(color.red,0),style=shape.arrowdown,location=location.abovebar,text='Sell')
//StoreATRandPriceuponentryoftrade.
entry_atr=float(0.0)//setfloat
entry_price=float(0.0)//setfloat
entry_atr:=strategy.position_size==0orentry_longorentry_short?atr:entry_atr[1]
entry_price:=strategy.position_size==0orentry_longorentry_short?close:entry_price[1]
//Submitlongandshortordersbasedonentryconditions
ifentry_long
strategy.entry(id='LongEntry1',direction=strategy.long,qty=posSize)
ifentry_short
strategy.entry(id='ShortEntry1',direction=strategy.short,qty=posSize)
//==============================================================================
//==============================================================================
//TAKEPROFIT&STOPLOSSVALUES
//==============================================================================
//Calculatestoplossandtakeprofitdistance(inprice)
nLoss=entry_atr*atrMulti_Loss
nProfit=entry_atr
ts_loss=entry_atr*tsMulti
//Findlongtakeprofitandstoplosslevels
long_profit_level=float(0.0)//setfloat
long_stop_level=float(0.0)//setfloat
long_profit_level:=entry_price+nLoss
long_stop_level:=entry_price-nLoss
ifmath.max(close,close[1])>long_profit_level
long_stop_level:=entry_price
long_stop_level
iflong_stop_level<math.max(close-(ts_loss+ts_loss),nz(long_stop_level[1],0))
long_stop_level:=math.max(close-(ts_loss+ts_loss),nz(long_stop_level[1],0),strategy.position_avg_price)
long_stop_level
//Findshorttakeprofitandstoplosslevels
short_profit_level=float(0.0)//setfloat
short_stop_level=float(0.0)//setfloat
short_profit_level:=entry_price-nProfit
short_stop_level:=entry_price+nLoss
//Plotstoplossandprofitlevelongraph;hidelevelswhennotrade
plot(strategy.position_size<=0orentry_longorentry_short?na:long_stop_level,color=color.new(color.red,0),style=plot.style_linebr,linewidth=2)
plot(strategy.position_size<=0orentry_longorentry_short?na:long_profit_level,color=color.new(color.green,0),style=plot.style_linebr,linewidth=2)
plot(strategy.position_size>=0orentry_longorentry_short?na:short_stop_level,color=color.new(color.red,0),style=plot.style_linebr,linewidth=2)
plot(strategy.position_size>=0orentry_longorentry_short?na:short_profit_level,color=color.new(color.green,0),style=plot.style_linebr,linewidth=2)
//==============================================================================
//==============================================================================
//EXITCONDITIONS-SubmitOrders
//==============================================================================
//Submitexitordersonstaticprofitandloss
strategy.exit('TP/SL1','LongEntry1',stop=long_stop_level)
strategy.exit('TP/SL1','ShortEntry1',stop=short_stop_level)
//Submitexitordersonexitindicator-Exit1
strategy.close(id='LongEntry1',comment='Exit1L1',when=Ind_1_S)
strategy.close(id='ShortEntry1',comment='Exit1S1',when=Ind_1_L)
//==============================================================================
ifentry_long
label.new(bar_index,na,"•ENTRY•\nPositionSize="+str.tostring(posSize)+"\nPotentialStopLoss="+str.tostring(close-nLoss)+"\nActualStopLoss="+str.tostring(long_stop_level),yloc=yloc.abovebar,style=label.style_none,textcolor=color.black,size=size.normal)
Expand (250 lines)
