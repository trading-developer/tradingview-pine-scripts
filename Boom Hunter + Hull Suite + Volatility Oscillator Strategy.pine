Script Name: Boom Hunter + Hull Suite + Volatility Oscillator Strategy
Author: kevinmck100
Description: TRADE CONDITIONS

 Long entry:

  Boom Hunter (leading indicator): Trigger line crosses over Quotient 2 line (white cross over red)
  Hull Suite (trend confirmation): Price closed above hull suite line and hull suite is green (represented by horizontal line at -10 in strategy pane)
  Volatility Oscillator (volatility confirmation): Volatility spike trigger line...
PineScript code:

Pine Scriptâ„¢ strategy
Boom Hunter + Hull Suite + Volatility Oscillator Strategy
//  Strategy  based  on  the  3  indicators:
//    -  Boom  Hunter  Pro
//    -  Hull  Suite
//    -  Volatility  Oscillator
//
//  Strategy  was  designed  for  the  purpose  of  back  testing.
//  See  strategy  documentation  for  info  on  trade  entry  logic.
//
//  Credits:
//    -  Boom  Hunter  Pro:  veryfid  (https://www.tradingview.com/u/veryfid/)
//    -  Hull  Suite:  InSilico  (https://www.tradingview.com/u/InSilico/)
//    -  Volatility  Oscillator:  veryfid  (https://www.tradingview.com/u/veryfid/)
//@version=5
strategy("Boom  Hunter  +  Hull  Suite  +  Volatility  Oscillator  Strategy",  overlay=false,  initial_capital=1000,  currency=currency.NONE,  max_labels_count=500,  default_qty_type=strategy.cash,  commission_type=strategy.commission.percent,  commission_value=0.01)
//  =============================================================================
//  STRATEGY  INPUT  SETTINGS
//  =============================================================================
//  ---------------
//  Risk  Management
//  ---------------
swingLength  =  input.int(20,  "Swing  High/Low  Lookback  Length",  group='Strategy:  Risk  Management',  tooltip='Stop  Loss  is  calculated  by  the  swing  high  or  low  over  the  previous  X  candles')
accountRiskPercent  =  input.float(3,  "Account  percent  loss  per  trade",  step=0.1,  group='Strategy:  Risk  Management',  tooltip='Each  trade  will  risk  X%  of  the  account  balance')
profitFactor  =  input.float(3,  "Profit  Factor(R:RRatio)",step=0.1,group='Strategy:RiskManagement')
//----------
//DateRange
//----------
start_year=input.int(title='StartDate',defval=2022,minval=2010,maxval=3000,group='Strategy:DateRange',inline='1')
start_month=input.int(title='',defval=1,group='Strategy:DateRange',inline='1',options=[1,2,3,4,5,6,7,8,9,10,11,12])
start_date=input.int(title='',defval=1,group='Strategy:DateRange',inline='1',options=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31])
end_year=input.int(title='EndDate',defval=2030,minval=1800,maxval=3000,group='Strategy:DateRange',inline='2')
end_month=input.int(title='',defval=1,group='Strategy:DateRange',inline='2',options=[1,2,3,4,5,6,7,8,9,10,11,12])
end_date=input.int(title='',defval=1,group='Strategy:DateRange',inline='2',options=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31])
in_date_range=time>=timestamp(syminfo.timezone,start_year,start_month,start_date,0,0)andtime<timestamp(syminfo.timezone,end_year,end_month,end_date,0,0)
//=============================================================================
//INDICATORS
//=============================================================================
//---------------
//BoomHunterPro
//---------------
square=input.bool(true,title='SquareLine?',group='MainSettings')
//Quotient
LPPeriod=input.int(6,title='Quotient|LPPeriod',inline='quotient',group='EOT1(MainOscillator)')
K1=input.int(0,title='K1',inline='quotient',group='EOT1(MainOscillator)')
esize=60//,title="Size",inline="quotient2",group="EOT1(MainOscillator)")
ey=50//,title="Yaxis",inline="quotient2",group="EOT1(MainOscillator)")
trigno=input.int(1,'TriggerLength',group='EOT1(MainOscillator)',inline='quotient2')
trigcol=input.color(color.white,title='TriggerColor:',group='EOT1(MainOscillator)',inline='q2')
//EOT2
//Inputs
LPPeriod2=input.int(28,title='LPPeriod2',group='EOT2(RedWave)',inline='q2')
K22=input.float(0.3,title='K2',group='EOT2(RedWave)',inline='q2')
//EOT1
//Vars
alpha1=0.00
HP=0.00
a1=0.00
b1=0.00
c1=0.00
c2=0.00
c3=0.00
Filt=0.00
Peak=0.00
X=0.00
Quotient1=0.00
pi=2*math.asin(1)
//Highpassfiltercycliccomponents
//whoseperiodsareshorterthan100bars
alpha1:=(math.cos(.707*2*pi/100)+math.sin(.707*2*pi/100)-1)/math.cos(.707*2*pi/100)
HP:=(1-alpha1/2)*(1-alpha1/2)*(close-2*nz(close[1])+nz(close[2]))+2*(1-alpha1)*nz(HP[1])-(1-alpha1)*(1-alpha1)*nz(HP[2])
//SuperSmootherFilter
a1:=math.exp(-1.414*pi/LPPeriod)
b1:=2*a1*math.cos(1.414*pi/LPPeriod)
c2:=b1
c3:=-a1*a1
c1:=1-c2-c3
Filt:=c1*(HP+nz(HP[1]))/2+c2*nz(Filt[1])+c3*nz(Filt[2])
//FastAttack-SlowDecayAlgorithm
Peak:=.991*nz(Peak[1])
ifmath.abs(Filt)>Peak
Peak:=math.abs(Filt)
Peak
//NormalizedRoofingFilter
ifPeak!=0
X:=Filt/Peak
X
Quotient1:=(X+K1)/(K1*X+1)
//EOT2
//Vars
alpha1222=0.00
HP2=0.00
a12=0.00
b12=0.00
c12=0.00
c22=0.00
c32=0.00
Filt2=0.00
Peak2=0.00
X2=0.00
Quotient4=0.00
alpha1222:=(math.cos(.707*2*pi/100)+math.sin(.707*2*pi/100)-1)/math.cos(.707*2*pi/100)
HP2:=(1-alpha1222/2)*(1-alpha1222/2)*(close-2*nz(close[1])+nz(close[2]))+2*(1-alpha1222)*nz(HP2[1])-(1-alpha1222)*(1-alpha1222)*nz(HP2[2])
//SuperSmootherFilter
a12:=math.exp(-1.414*pi/LPPeriod2)
b12:=2*a12*math.cos(1.414*pi/LPPeriod2)
c22:=b12
c32:=-a12*a12
c12:=1-c22-c32
Filt2:=c12*(HP2+nz(HP2[1]))/2+c22*nz(Filt2[1])+c32*nz(Filt2[2])
//FastAttack-SlowDecayAlgorithm
Peak2:=.991*nz(Peak2[1])
ifmath.abs(Filt2)>Peak2
Peak2:=math.abs(Filt2)
Peak2
//NormalizedRoofingFilter
ifPeak2!=0
X2:=Filt2/Peak2
X2
Quotient4:=(X2+K22)/(K22*X2+1)
q4=Quotient4*esize+ey
//PlotEOT
q1=Quotient1*esize+ey
trigger=ta.sma(q1,trigno)
Plot3=plot(trigger,color=trigcol,linewidth=2,title='Quotient1')
Plot44=plot(q4,color=color.new(color.red,0),linewidth=2,title='Quotient2')
//----------
//HULLSUITE
//----------
//INPUT
src=input(close,title='Source')
modeSwitch=input.string('Hma',title='HullVariation',options=['Hma','Thma','Ehma'])
length=input(200,title='Length(180-200forfloatingS/R,55forswingentry)')
lengthMult=input(2.4,title='Lengthmultiplier(Usedtoviewhighertimeframeswithstraightband)')
useHtf=input(false,title='ShowHullMAfromXtimeframe?(goodforscalping)')
htf=input.timeframe('240',title='Highertimeframe')
//FUNCTIONS
//HMA
HMA(_src,_length)=>
ta.wma(2*ta.wma(_src,_length/2)-ta.wma(_src,_length),math.round(math.sqrt(_length)))
//EHMA
EHMA(_src,_length)=>
ta.ema(2*ta.ema(_src,_length/2)-ta.ema(_src,_length),math.round(math.sqrt(_length)))
//THMA
THMA(_src,_length)=>
ta.wma(ta.wma(_src,_length/3)*3-ta.wma(_src,_length/2)-ta.wma(_src,_length),_length)
//SWITCH
Mode(modeSwitch,src,len)=>
modeSwitch=='Hma'?HMA(src,len):modeSwitch=='Ehma'?EHMA(src,len):modeSwitch=='Thma'?THMA(src,len/2):na
//OUT
_hull=Mode(modeSwitch,src,int(length*lengthMult))
HULL=useHtf?request.security(syminfo.ticker,htf,_hull):_hull
MHULL=HULL[0]
SHULL=HULL[2]
//COLOR
hullColor=MHULL>SHULL?color.green:color.red
//PLOT
///<Frame
Fi1=plot(-10,title='MHULL',color=hullColor,linewidth=2)
//-----------------
//VOLUMEOSCILLATOR
//-----------------
volLength=input(80)
spike=close-open
x=ta.stdev(spike,volLength)
y=ta.stdev(spike,volLength)*-1
volOscCol=spike>x?color.green:spike<y?color.red:color.gray
plot(-30,color=color.new(volOscCol,transp=0),linewidth=2)
//=============================================================================
//STRATEGYLOGIC
//=============================================================================
//BoomHunterProentryconditions
boomLong=ta.crossover(trigger,q4)
boomShort=ta.crossunder(trigger,q4)
//HullSuiteentryconditions
hullLong=MHULL>SHULLandclose>MHULL
hullShort=MHULL<SHULLandclose<SHULL
//VolatilityOscillatorentryconditions
volLong=spike>x
volShort=spike<y
inLong=strategy.position_size>0
inShort=strategy.position_size<0
longCondition=boomLongandhullLongandvolLongandin_date_range
shortCondition=boomShortandhullShortandvolShortandin_date_range
swingLow=ta.lowest(source=low,length=swingLength)
swingHigh=ta.highest(source=high,length=swingLength)
atr=ta.atr(14)
longSl=math.min(close-atr,swingLow)
shortSl=math.max(close+atr,swingHigh)
longStopPercent=math.abs((1-(longSl/close))*100)
shortStopPercent=math.abs((1-(shortSl/close))*100)
longTpPercent=longStopPercent*profitFactor
shortTpPercent=shortStopPercent*profitFactor
longTp=close+(close*(longTpPercent/100))
shortTp=close-(close*(shortTpPercent/100))
//Positionsizing(defaultrisk3%pertrade)
riskAmt=strategy.equity*accountRiskPercent/100
longQty=math.abs(riskAmt/longStopPercent*100)/close
shortQty=math.abs(riskAmt/shortStopPercent*100)/close
if(longConditionandnotinLong)
strategy.entry("Long",strategy.long,qty=longQty)
strategy.exit("LongSL/TP",from_entry="Long",stop=longSl,limit=longTp,alert_message='LongSLHit')
buyLabel=label.new(x=bar_index,y=high[1],color=color.green,style=label.style_label_up)
label.set_y(id=buyLabel,y=-40)
label.set_tooltip(id=buyLabel,tooltip="RiskAmt:"+str.tostring(riskAmt)+"Qty:"+str.tostring(longQty)+"Swinglow:"+str.tostring(swingLow)+"StopPercent:"+str.tostring(longStopPercent)+"TPPercent:"+str.tostring(longTpPercent))
if(shortConditionandnotinShort)
strategy.entry("Short",strategy.short,qty=shortQty)
strategy.exit("ShortSL/TP",from_entry="Short",stop=shortSl,limit=shortTp,alert_message='ShortSLHit')
sellLabel=label.new(x=bar_index,y=high[1],color=color.red,style=label.style_label_up)
label.set_y(id=sellLabel,y=-40)
label.set_tooltip(id=sellLabel,tooltip="RiskAmt:"+str.tostring(riskAmt)+"Qty:"+str.tostring(shortQty)+"Swinghigh:"+str.tostring(swingHigh)+"StopPercent:"+str.tostring(shortStopPercent)+"TPPercent:"+str.tostring(shortTpPercent))
Expand (255 lines)
