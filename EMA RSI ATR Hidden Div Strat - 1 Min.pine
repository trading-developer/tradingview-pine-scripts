Script Name: EMA RSI ATR Hidden Div Strat - 1 Min
Author: TradingStrategyCheck
Description: Hey there!

Hereby I present you the EMA RSI Lowest Low Hidden Divergence strategy, which I discovered on a youtube channel.
He has tested the strategy hundreds of times manually, herewith I try to automate the whole thing.

Since I use the strategy with a bot, it can only enter long positions for now. But in the future I will add the possibility to trade short...
PineScript code:

Pine Scriptâ„¢ strategy
EMA RSI ATR Hidden Div Strat - 1 Min
//@version=4
strategy(title="EMA  RSI  ATR  Hidden  Div  Strat",  shorttitle="Hidden  Div  Strat",  overlay  =  true,  pyramiding  =  0,  max_bars_back=3000,  calc_on_order_fills  =  false,  commission_type  =    strategy.commission.percent,  commission_value  =  0,  default_qty_type  =  strategy.percent_of_equity,  default_qty_value  =  100,  initial_capital=5000,  currency=currency.USD)
//  {  Time  Range
FromMonth=input(defval=1,title="FromMonth",minval=1,maxval=12)
FromDay=input(defval=1,title="FromDay",minval=1,maxval=31)
FromYear=input(defval=2020,title="FromYear",minval=2016)
ToMonth=input(defval=1,title="ToMonth",minval=1,maxval=12)
ToDay=input(defval=1,title="ToDay",minval=1,maxval=31)
ToYear=input(defval=9999,title="ToYear",minval=2017)
start=timestamp(FromYear,FromMonth,FromDay,00,00)
finish=timestamp(ToYear,ToMonth,ToDay,23,59)
window()=>time>=start  and  time<=finish?true:false
//  Bar's  time  happened  on/after  start  date?
afterStartDate  =  time  >=  start  and  time<=finish?true:false
//  }  Time  Range
//  {  EMA'S
emasrc  =  close
len1  =  input(50,  minval=1,  title="EMA1")
ema1  =  ema(emasrc,  len1)
col1  =  color.white
len2  =  input(150,  minval=1,  title="EMA2")
ema2  =  ema(emasrc,  len2)
col2  =  color.yellow
//  }  EMA'S
//  {  Plots
//plot(ema1,  title="EMA1",  linewidth=1,  color=col1)
//plot(ema2,  title="EMA2",  linewidth=1,  color=col2)
//  }  Plots
//  {  Stoch
periodK  =  input(3,  title="K",  minval=1)
periodD  =  input(3,  title="D",  minval=1)
smoothK  =  input(4,  title="Smooth",  minval=1)
k  =  sma(stoch(close,  high,  low,  periodK),  smoothK)
d  =  sma(k,  periodD)
//  }  Stoch
//  {  Hidden  Divergence  Indikator
len  =  input(title="RSI  Period",  minval=1,  defval=9)
src  =  input(title="RSI  Source",  defval=close)
lbR  =  input(title="Pivot  Lookback  Right",  defval=0)
lbL  =  input(title="Pivot  Lookback  Left",  defval=4)
rangeUpper  =  input(title="Max  of  Lookback  Range",  defval=6)
rangeLower  =  input(title="Min  of  Lookback  Range",  defval=5)
hiddenBullColor  =  color.new(color.green,  80)
hiddenBearColor  =  color.new(color.red,  80)
textColor  =  color.white
noneColor  =  color.new(color.white,  100)
osc  =  rsi(src,  len)
plFound  =  na(pivotlow(osc,  lbL,  lbR))  ?  false  :  true
phFound  =  na(pivothigh(osc,  lbL,  lbR))  ?  false  :  true
_inRange(cond)  =>
        bars  =  barssince(cond  ==  true)
        rangeLower  <=  bars  and  bars  <=  rangeUpper
//------------------------------------------------------------------------------
//  Hidden  Bullish
//  Osc:  Lower  Low
oscLL  =  osc[lbR]  <  valuewhen(plFound,  osc[lbR],  1)  and  _inRange(plFound[1])
//  Price:  Higher  Low
priceHL  =  low[lbR]  >  valuewhen(plFound,  low[lbR],  1)
hiddenBullCond  =  priceHL  and  oscLL  and  plFound
//------------------------------------------------------------------------------
//  Hidden  Bearish
//  Osc:  Higher  High
oscHH  =  osc[lbR]  >  valuewhen(phFound,  osc[lbR],  1)  and  _inRange(phFound[1])
//  Price:  Lower  High
priceLH  =  high[lbR]  <  valuewhen(phFound,  high[lbR],  1)
hiddenBearCond  =  priceLH  and  oscHH  and  phFound
//  }  Hidden  Divergence  Indikator
//  {  Order  Conditions
enablelong  =  input(true,  title="Enable  long?")
enableshort  =  input(true,  title="Enable  short?")
buyhiddenbull  =  hiddenBullCond[1]  or  hiddenBullCond[2]  or  hiddenBullCond[3]  or  hiddenBullCond[4]  or  hiddenBullCond[5]
sellhiddenbear  =  hiddenBearCond[1]  or  hiddenBearCond[2]  or  hiddenBearCond[3]  or  hiddenBearCond[4]  or  hiddenBearCond[5]
emalongcondition  =  ema1  >  ema2
closelongcondition  =  close  >  ema1  and  ema2
closeshortcondition  =  close  <  ema1  and  ema2
emashortcondition  =  ema1  <  ema2
upcondition  =  close[1]  >  ema1[1]  and  ema2[1]  and  close[2]  >  ema1[2]  and  ema2[2]  and  close[3]  >  ema1[3]  and  ema2[3]
downcondition  =  close[2]  <  ema1[1]  and  ema2[1]  and  close[2]  <  ema1[2]  and  ema2[2]  and  close[3]  <  ema1[3]  and  ema2[3]
crossup  =  k[0]  >  d[0]  and  k[1]  <=  d[1]
crossdown  =  k[0]  <  d[0]  and  k[1]  >=  d[1]
barbuy  =  emalongcondition  and  upcondition  and  crossup  and  buyhiddenbull  and  closelongcondition
barsell  =  emashortcondition  and  downcondition  and  crossdown  and  sellhiddenbear  and  closeshortcondition
longcondition  =  barbuy
shortcondition  =  barsell
//  }  Order  Conditions
//  {  Entrys
if  (afterStartDate)  and  enablelong  ==  true  and  strategy.opentrades  <  1
        strategy.entry("long",  strategy.long,  when  =  longcondition)
if  (afterStartDate)  and  enableshort  ==  true  and  strategy.opentrades  <  1
        strategy.entry("short",  strategy.short,  when  =  shortcondition)
//  }  Entrys
//  {  Exit  Conditions
bought  =  strategy.position_size[1]  <  strategy.position_size
sold  =  strategy.position_size[1]  >  strategy.position_size
barsbought  =  barssince(bought)
barssold  =  barssince(sold)
slbuffer  =  input(title="SL  Buffer",  type=input.float,  step=0.1,  defval=0)
var  table  exittable  =  table.new(position.top_right,  4,  3,  bgcolor  =  color.gray,  frame_width  =  2,  frame_color  =  color.black)
//  }  Exit  Conditions
//  {  Lowest  Low/  Highes  High  Exit  Condition
enablelowhigh  =  input(false,  title="Enable  lowest  low/  highest  high  exit?")
//Lowest  Low  LONG
profitfactorlong  =  input(title="ProfitfactorLong",  type=input.float,  step=0.1,  defval=2)
loLen  =  input(title="Lowest  Low  Lookback",  type=input.integer,
    defval=60,  minval=2)
stop_level_long  =  lowest(low,  loLen)[1]
if  enablelowhigh  ==  true  and  strategy.position_size>0  and  strategy.position_entry_name  ==  "long"
        profit_level  =  strategy.position_avg_price  +  ((strategy.position_avg_price  -  stop_level_long[barsbought])*profitfactorlong)  +  slbuffer
        table.cell(exittable,  0,  0,  "SL  Long")
        table.cell(exittable,  0,  1,  "TP  Long")
        table.cell(exittable,  1,  0,  tostring(stop_level_long[barsbought]))
        table.cell(exittable,  1,  1,  tostring(profit_level))
        strategy.exit(id="TP/  SL",  stop=stop_level_long[barsbought]  -  slbuffer,  limit=profit_level)
//Lowest  Low  SHORT
profitfactorshort  =  input(title="ProfitfactorShort",  type=input.float,  step=0.1,  defval=0.5)
highLen  =  input(title="highest  high  lookback",  type=input.integer,
    defval=50,  minval=2)
stop_level_short  =  highest(high,  highLen)[1]
if  enablelowhigh  ==  true  and  strategy.position_size<0  and  strategy.position_entry_name  ==  "short"
        profit_level  =  strategy.position_avg_price  -  ((stop_level_short[barssold]  -  strategy.position_avg_price)*profitfactorshort)  -  slbuffer
        table.cell(exittable,  2,  0,  "SL  Short")
        table.cell(exittable,  2,  1,  "TP  Long")
        table.cell(exittable,  3,  0,  tostring(stop_level_short[barsbought]))
        table.cell(exittable,  3,  1,  tostring(profit_level))
        strategy.exit(id="TP/  SL",  stop=stop_level_short[barssold]  +  slbuffer,  limit=profit_level)
//  }  Lowest  Low/  Highes  High  Exit  Condition
//  {  ATR  Take  Profit/  Stop  Loss
enableatr  =  input(true,  title="Enable  ATR  exit?")
atrprofitfactorlong  =  input(title="ATR  Profitfactor  Long",  type=input.float,  step=0.1,  defval=9)
atrstopfactorlong  =  input(title="ATR  Stopfactor  Long",  type=input.float,  step=0.1,  defval=5)
atrprofitfactorshort  =  input(title="ATR  Profitfactor  Short",  type=input.float,  step=0.1,  defval=9)
atrstopfactorshort  =  input(title="ATR  Stopfactor  Short",  type=input.float,  step=0.1,  defval=5)
//ATR
lengthATR  =  input(title="ATR  Length",  defval=11,  minval=1)
atr  =  atr(lengthATR)
//LONG  EXIT
if  (afterStartDate)  and  (enableatr  ==  true)  and  (strategy.opentrades  >  0)  and  (strategy.position_entry_name  ==  "long")
        profit_level  =  strategy.position_avg_price  +  (atr*atrprofitfactorlong)
        stop_level  =  strategy.position_avg_price  -  (atr*atrstopfactorlong)
        table.cell(exittable,  0,  0,  "SL  Long")
        table.cell(exittable,  0,  1,  "TP  Long")
        table.cell(exittable,  0,  2,  "Last  Long  Position")
        table.cell(exittable,  1,  0,  tostring(stop_level[barsbought]))
        table.cell(exittable,  1,  1,  tostring(profit_level[barsbought]))
        table.cell(exittable,  1,  2,  tostring(strategy.position_avg_price))
        strategy.exit("Take  Profit/  Stop  Loss",  "long",  stop=stop_level[barsbought],  limit=profit_level[barsbought])
profit_level_atr_long  =  strategy.position_avg_price  +  (atr*atrprofitfactorlong)
stop_level_atr_long  =  strategy.position_avg_price  -  (atr*atrstopfactorlong)
stop_atr_long=stop_level_atr_long[barsbought]
profit_atr_long=profit_level_atr_long[barsbought]
plot(profit_atr_long,  title="Take  Profit  Long",  linewidth=1,  style=plot.style_linebr,  color=color.green)
plot(stop_atr_long,  title="Stop  Loss  Long",  linewidth=1,  style=plot.style_linebr,  color=color.red)
//SHORT  EXIT
if  (afterStartDate)  and  (enableatr  ==  true)  and  (strategy.opentrades  >  0)  and  strategy.position_entry_name  ==  "short"
        profit_level  =  strategy.position_avg_price  -  (atr*atrprofitfactorshort)
        stop_level  =  strategy.position_avg_price  +  (atr*atrstopfactorshort)
        table.cell(exittable,  2,  0,  "SL  Short")
        table.cell(exittable,  2,  1,  "TP  Short")
        table.cell(exittable,  2,  2,  "Last  Short  Position")
        table.cell(exittable,  3,  0,  tostring(stop_level[barssold]))
        table.cell(exittable,  3,  1,  tostring(profit_level[barssold]))
        table.cell(exittable,  3,  2,  tostring(strategy.position_avg_price))
        strategy.exit("Take  Profit/  Stop  Loss",  "short",  stop=stop_level[barssold],  limit=profit_level[barssold])
profit_level_atr_short  =  strategy.position_avg_price  -  (atr*atrprofitfactorshort)
stop_level_atr_short  =  strategy.position_avg_price  +  (atr*atrstopfactorshort)
stop_atr_short=stop_level_atr_short[barssold]
profit_atr_short=profit_level_atr_short[barssold]
plot(profit_atr_short,  title="Take  Profit  Short",  linewidth=1,  style=plot.style_linebr,  color=color.green)
plot(stop_atr_short,  title="Stop  Loss  Short",  linewidth=1,  style=plot.style_linebr,  color=color.red)
//  }  ATR  Take  Profit/  Stop  Loss
//  {  Update  Calc
//risc  =  input(title="Risc  (0.02  =  2%)",  type=input.float,  step=0.1,  defval=0.02)
//capital  =  strategy.equity
//quantityofcoins  =  (strategy.equity  *  risc)  /  ((strategy.position_avg_price  -  stop_level)  /  strategy.position_avg_price)
//leverage  =  ((strategy.position_avg_price  -  stop_level)  /  strategy.position_avg_price)  /  capital
//  }  Update  Calc
Expand (223 lines)
