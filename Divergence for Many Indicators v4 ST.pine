Script Name: Divergence for Many Indicators v4 ST
Author: CannyTolany01
Description: Hello Traders.

This is the Strategy version of Divergence for Many Indicators v4, an easy and comfortable indicator.

- - - -

*It's been modified a little bit from the original.
*I got permission from the original author.

*I'm not good at English, I'm sorry.

- - - -

< 4 things to check >

1. Since repainting is not performed, the first imprinted signal can be...
PineScript code:

Pine Script™ strategy
Divergence for Many Indicators v4 ST
//  It  was  made  with  the  permission  of  the  original  author.
//  Thank  you  very  much  to  "Lonesome  The  Blue"  for  creating  the  indicator.  -CannyTolany
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  LonesomeTheBlue
//@version=4
strategy("Divergence  for  Many  Indicators  v4  ST",  overlay  =  true,  max_bars_back  =  1000,  max_lines_count  =  400,  max_labels_count  =  400)
prd  =  input(defval  =  9,  title  =  "Pivot  Period",  minval  =  1,  maxval  =  50)
source  =  input(defval  =  "Close",  title  =  "Source  for  Pivot  Points",  options  =  ["Close",  "High/Low"])
searchdiv  =  input(defval  =  "Regular",  title  =  "Divergence  Type",  options  =  ["Regular",  "Hidden",  "Regular/Hidden"])
showindis  =  input(defval  =  "Don't  Show",  title  =  "Show  Indicator  Names",  options  =  ["Full",  "First  Letter",  "Don't  Show"])
showlimit  =  input(1,  title="Minimum  Number  of  Divergence",  minval  =  1,  maxval  =  11)
maxpp  =  input(defval  =  10,  title  =  "Maximum  Pivot  Points  to  Check",  minval  =  10,  maxval  =  20)
maxbars  =  input(defval  =  100,  title  =  "Maximum  Bars  to  Check",  minval  =  100,  maxval  =  200)
shownum  =  input(defval  =  true,  title  =  "Show  Divergence  Number")
showlast  =  input(defval  =  false,  title  =  "Show  Only  Last  Divergence")
dontconfirm  =  input(defval  =  false,  title  =  "Don't  Wait  for  Confirmation")
showlines  =  input(defval  =  false,  title  =  "Show  Divergence  Lines")
showpivot  =  input(defval  =  false,  title  =  "Show  Pivot  Points")
calcmacd  =  input(defval  =  true,  title  =  "MACD")
calcmacda  =  input(defval  =  true,  title  =  "MACD  Histogram")
calcrsi  =  input(defval  =  true,  title  =  "RSI")
calcstoc  =  input(defval  =  true,  title  =  "Stochastic")
calccci  =  input(defval  =  true,  title  =  "CCI")
calcmom  =  input(defval  =  true,  title  =  "Momentum")
calcobv  =  input(defval  =  true,  title  =  "OBV")
calcvwmacd  =  input(true,  title  =  "VWmacd")
calccmf  =  input(false,  title  =  "Chaikin  Money  Flow")
calcmfi  =  input(false,  title  =  "Money  Flow  Index")
calcext  =  input(false,  title  =  "Check  External  Indicator")
externalindi  =  input(defval  =  close,  title  =  "External  Indicator")
pos_reg_div_col  =  input(defval  =  color.yellow,  title  =  "Positive  Regular  Divergence")
neg_reg_div_col  =  input(defval  =  color.navy,  title  =  "Negative  Regular  Divergence")
pos_hid_div_col  =  input(defval  =  color.lime,  title  =  "Positive  Hidden  Divergence")
neg_hid_div_col  =  input(defval  =  color.red,  title  =  "Negative  Hidden  Divergence")
pos_div_text_col  =  input(defval  =  color.black,  title  =  "Positive  Divergence  Text  Color")
neg_div_text_col  =  input(defval  =  color.white,  title  =  "Negative  Divergence  Text  Color")
reg_div_l_style_  =  input(defval  =  "Solid",  title  =  "Regular  Divergence  Line  Style",  options  =  ["Solid",  "Dashed",  "Dotted"])
hid_div_l_style_  =  input(defval  =  "Dashed",  title  =  "Hdden  Divergence  Line  Style",  options  =  ["Solid",  "Dashed",  "Dotted"])
reg_div_l_width  =  input(defval  =  2,  title  =  "Regular  Divergence  Line  Width",  minval  =  1,  maxval  =  5)
hid_div_l_width  =  input(defval  =  1,  title  =  "Hidden  Divergence  Line  Width",  minval  =  1,  maxval  =  5)
showmas  =  input(defval  =  false,  title  =  "Show  MAs  50  &  200",  inline  =  "ma12")
cma1col  =  input(defval  =  color.lime,  title  =  "",  inline  =  "ma12")
cma2col  =  input(defval  =  color.red,  title  =  "",  inline  =  "ma12")
plot(showmas  ?  sma(close,  50)  :  na,  color  =  showmas  ?  cma1col  :  na)
plot(showmas  ?  sma(close,  200)  :  na,  color  =  showmas  ?  cma2col:  na)
//  set  line  styles
var  reg_div_l_style  =  reg_div_l_style_  ==  "Solid"  ?  line.style_solid  :
                                              reg_div_l_style_  ==  "Dashed"  ?  line.style_dashed  :
                                              line.style_dotted
var  hid_div_l_style  =  hid_div_l_style_  ==  "Solid"  ?  line.style_solid  :
                                              hid_div_l_style_  ==  "Dashed"  ?  line.style_dashed  :
                                              line.style_dotted
//  Testing  Start  dates
testStartYear  =  input(2021,  "Backtest  Start  Year")
testStartMonth  =  input(1,  "Backtest  Start  Month")
testStartDay  =  input(1,  "Backtest  Start  Day")
testPeriodStart  =  timestamp(testStartYear,testStartMonth,testStartDay,0,0)
//Stop  date  if  you  want  to  use  a  specific  range  of  dates
testStopYear  =  input(2030,  "Backtest  Stop  Year")
testStopMonth  =  input(12,  "Backtest  Stop  Month")
testStopDay  =  input(30,  "Backtest  Stop  Day")
testPeriodStop  =  timestamp(testStopYear,testStopMonth,testStopDay,0,0)
testPeriod()  =>
        time  >=  testPeriodStart  and  time  <=  testPeriodStop  ?  true  :  false


//  get  indicators
rsi  =  rsi(close,  14)  //  RSI
[macd,  signal,  deltamacd]  =  macd(close,  12,  26,  9)  //  MACD
moment  =  mom(close,  10)  //  Momentum
cci  =  cci(close,  10)  //  CCI
Obv  =  obv  //  OBV
stk  =  sma(stoch(close,  high,  low,  14),  3)  //  Stoch
maFast  =  vwma(close,  12),  maSlow  =  vwma(close,  26),  vwmacd  =  maFast  -  maSlow  //  volume  weighted  macd
Cmfm  =  ((close-low)  -  (high-close))  /  (high  -  low),  Cmfv  =  Cmfm  *  volume,  cmf  =  sma(Cmfv,  21)  /  sma(volume,21)  //  Chaikin  money  flow
Mfi  =  mfi(close,  14)  //  Moneyt  Flow  Index
//  keep  indicators  names  and  colors  in  arrays
var  indicators_name  =  array.new_string(11)
var  div_colors  =  array.new_color(4)
if  barstate.isfirst
        //  names
        array.set(indicators_name,  0,  showindis  ==  "Full"  ?  "MACD"  :  "M")
        array.set(indicators_name,  1,  showindis  ==  "Full"  ?  "Hist"  :  "H")
        array.set(indicators_name,  2,  showindis  ==  "Full"  ?  "RSI"  :  "E")
        array.set(indicators_name,  3,  showindis  ==  "Full"  ?  "Stoch"  :  "S")
        array.set(indicators_name,  4,  showindis  ==  "Full"  ?  "CCI"  :  "C")
        array.set(indicators_name,  5,  showindis  ==  "Full"  ?  "MOM"  :  "M")
        array.set(indicators_name,  6,  showindis  ==  "Full"  ?  "OBV"  :  "O")
        array.set(indicators_name,  7,  showindis  ==  "Full"  ?  "VWMACD"  :  "V")
        array.set(indicators_name,  8,  showindis  ==  "Full"  ?  "CMF"  :  "C")
        array.set(indicators_name,  9,  showindis  ==  "Full"  ?  "MFI"  :  "M")
        array.set(indicators_name,10,  showindis  ==  "Full"  ?  "Extrn"  :  "X")
        //colors
        array.set(div_colors,  0,  pos_reg_div_col)
        array.set(div_colors,  1,  neg_reg_div_col)
        array.set(div_colors,  2,  pos_hid_div_col)
        array.set(div_colors,  3,  neg_hid_div_col)
//  Check  if  we  get  new  Pivot  High  Or  Pivot  Low
float  ph  =  pivothigh((source  ==  "Close"  ?  close  :  high),  prd,  prd)
float  pl  =  pivotlow((source  ==  "Close"  ?  close:low),prd,prd)
plotshape(phandshowpivot,text="H",style=shape.labeldown,color=color.new(color.white,100),textcolor=color.red,location=location.abovebar,offset=-prd)
plotshape(plandshowpivot,text="L",style=shape.labelup,color=color.new(color.white,100),textcolor=color.lime,location=location.belowbar,offset=-prd)
//keepvaluesandpositionsofPivotHighs/Lowsinthearrays
varintmaxarraysize=20
varph_positions=array.new_int(maxarraysize,0)
varpl_positions=array.new_int(maxarraysize,0)
varph_vals=array.new_float(maxarraysize,0.)
varpl_vals=array.new_float(maxarraysize,0.)
//addPHstothearray
ifph
array.unshift(ph_positions,bar_index)
array.unshift(ph_vals,ph)
ifarray.size(ph_positions)>maxarraysize
array.pop(ph_positions)
array.pop(ph_vals)
//addPLstothearray
ifpl
array.unshift(pl_positions,bar_index)
array.unshift(pl_vals,pl)
ifarray.size(pl_positions)>maxarraysize
array.pop(pl_positions)
array.pop(pl_vals)
//functionstocheckRegularDivergencesandHiddenDivergences
//functiontocheckpositiveregularornegativehiddendivergence
//cond==1=>positive_regular,cond==2=>negative_hidden
positive_regular_positive_hidden_divergence(src,cond)=>
divlen=0
prsc=source=="Close"?close:low
//ifindicatorshigherthanlastvalueandclosepriceishigherthanlasclose
ifdontconfirmorsrc>src[1]orclose>close[1]
startpoint=dontconfirm?0:1//don'tchecklastcandle
//wesearchlast15PPs
forx=0tomaxpp-1
len=bar_index-array.get(pl_positions,x)+prd
//ifwereachnonvaluedarrayelementorarrived101.orpreviousbarsthenwedon'tsearchmore
ifarray.get(pl_positions,x)==0orlen>maxbars
break
iflen>5and
((cond==1andsrc[startpoint]>src[len]andprsc[startpoint]<nz(array.get(pl_vals,x)))or
(cond==2andsrc[startpoint]<src[len]andprsc[startpoint]>nz(array.get(pl_vals,x))))
slope1=(src[startpoint]-src[len])/(len-startpoint)
virtual_line1=src[startpoint]-slope1
slope2=(close[startpoint]-close[len])/(len-startpoint)
virtual_line2=close[startpoint]-slope2
arrived=true
fory=1+startpointtolen-1
ifsrc[y]<virtual_line1ornz(close[y])<virtual_line2
arrived:=false
break
virtual_line1:=virtual_line1-slope1
virtual_line2:=virtual_line2-slope2

ifarrived
divlen:=len
break
divlen
//functiontochecknegativeregularorpositivehiddendivergence
//cond==1=>negative_regular,cond==2=>positive_hidden
negative_regular_negative_hidden_divergence(src,cond)=>
divlen=0
prsc=source=="Close"?close:high
//ifindicatorshigherthanlastvalueandclosepriceishigherthanlasclose
ifdontconfirmorsrc<src[1]orclose<close[1]
startpoint=dontconfirm?0:1//don'tchecklastcandle
//wesearchlast15PPs
forx=0tomaxpp-1
len=bar_index-array.get(ph_positions,x)+prd
//ifwereachnonvaluedarrayelementorarrived101.orpreviousbarsthenwedon'tsearchmore
ifarray.get(ph_positions,x)==0orlen>maxbars
break
iflen>5and
((cond==1andsrc[startpoint]<src[len]andprsc[startpoint]>nz(array.get(ph_vals,x)))or
(cond==2andsrc[startpoint]>src[len]andprsc[startpoint]<nz(array.get(ph_vals,x))))
slope1=(src[startpoint]-src[len])/(len-startpoint)
virtual_line1=src[startpoint]-slope1
slope2=(close[startpoint]-nz(close[len]))/(len-startpoint)
virtual_line2=close[startpoint]-slope2
arrived=true
fory=1+startpointtolen-1
ifsrc[y]>virtual_line1ornz(close[y])>virtual_line2
arrived:=false
break
virtual_line1:=virtual_line1-slope1
virtual_line2:=virtual_line2-slope2

ifarrived
divlen:=len
break
divlen
//calculate4typesofdivergenceifenabledintheoptionsandreturndivergencesinanarray
calculate_divs(cond,indicator)=>
divs=array.new_int(4,0)
array.set(divs,0,condand(searchdiv=="Regular"orsearchdiv=="Regular/Hidden")?positive_regular_positive_hidden_divergence(indicator,1):0)
array.set(divs,1,condand(searchdiv=="Regular"orsearchdiv=="Regular/Hidden")?negative_regular_negative_hidden_divergence(indicator,1):0)
array.set(divs,2,condand(searchdiv=="Hidden"orsearchdiv=="Regular/Hidden")?positive_regular_positive_hidden_divergence(indicator,2):0)
array.set(divs,3,condand(searchdiv=="Hidden"orsearchdiv=="Regular/Hidden")?negative_regular_negative_hidden_divergence(indicator,2):0)
divs
//arraytokeepalldivergences
varall_divergences=array.new_int(44)//11indicators*4divergence=44elements
//setrelatedarrayelements
array_set_divs(div_pointer,index)=>
forx=0to3
array.set(all_divergences,index*4+x,array.get(div_pointer,x))
//setdivergencesarray
array_set_divs(calculate_divs(calcmacd,macd),0)
array_set_divs(calculate_divs(calcmacda,deltamacd),1)
array_set_divs(calculate_divs(calcrsi,rsi),2)
array_set_divs(calculate_divs(calcstoc,stk),3)
array_set_divs(calculate_divs(calccci,cci),4)
array_set_divs(calculate_divs(calcmom,moment),5)
array_set_divs(calculate_divs(calcobv,Obv),6)
array_set_divs(calculate_divs(calcvwmacd,vwmacd),7)
array_set_divs(calculate_divs(calccmf,cmf),8)
array_set_divs(calculate_divs(calcmfi,Mfi),9)
array_set_divs(calculate_divs(calcext,externalindi),10)
//checkminimumnumberofdivergence,iflessthanshowlimitthendeletealldivergence
total_div=0
forx=0toarray.size(all_divergences)-1
total_div:=total_div+round(sign(array.get(all_divergences,x)))
iftotal_div<showlimit
array.fill(all_divergences,0)
//keeplineinanarray
varpos_div_lines=array.new_line(0)
varneg_div_lines=array.new_line(0)
varpos_div_labels=array.new_label(0)
varneg_div_labels=array.new_label(0)
//removeoldlinesandlabelsifshowlastoptionisenabled
delete_old_pos_div_lines()=>
ifarray.size(pos_div_lines)>0
forj=0toarray.size(pos_div_lines)-1
line.delete(array.get(pos_div_lines,j))
array.clear(pos_div_lines)
delete_old_neg_div_lines()=>
ifarray.size(neg_div_lines)>0
forj=0toarray.size(neg_div_lines)-1
line.delete(array.get(neg_div_lines,j))
array.clear(neg_div_lines)
delete_old_pos_div_labels()=>
ifarray.size(pos_div_labels)>0
forj=0toarray.size(pos_div_labels)-1
label.delete(array.get(pos_div_labels,j))
array.clear(pos_div_labels)
delete_old_neg_div_labels()=>
ifarray.size(neg_div_labels)>0
forj=0toarray.size(neg_div_labels)-1
label.delete(array.get(neg_div_labels,j))
array.clear(neg_div_labels)
//deletelastcretedlinesandlabelsuntilwemetnewPH/PV
delete_last_pos_div_lines_label(n)=>
ifn>0andarray.size(pos_div_lines)>=n
asz=array.size(pos_div_lines)
forj=1ton
line.delete(array.get(pos_div_lines,asz-j))
array.pop(pos_div_lines)
ifarray.size(pos_div_labels)>0
label.delete(array.get(pos_div_labels,array.size(pos_div_labels)-1))
array.pop(pos_div_labels)
delete_last_neg_div_lines_label(n)=>
ifn>0andarray.size(neg_div_lines)>=n
asz=array.size(neg_div_lines)
forj=1ton
line.delete(array.get(neg_div_lines,asz-j))
array.pop(neg_div_lines)
ifarray.size(neg_div_labels)>0
label.delete(array.get(neg_div_labels,array.size(neg_div_labels)-1))
array.pop(neg_div_labels)

//variablesforAlerts
pos_reg_div_detected=false
neg_reg_div_detected=false
pos_hid_div_detected=false
neg_hid_div_detected=false
//toremovelines/labelsuntilwemetnew//PH/PL
varlast_pos_div_lines=0
varlast_neg_div_lines=0
varremove_last_pos_divs=false
varremove_last_neg_divs=false
ifpl
remove_last_pos_divs:=false
last_pos_div_lines:=0
ifph
remove_last_neg_divs:=false
last_neg_div_lines:=0
//drawdivergenceslinesandlabels
divergence_text_top=""
divergence_text_bottom=""
distances=array.new_int(0)
dnumdiv_top=0
dnumdiv_bottom=0
top_label_col=color.white
bottom_label_col=color.white
old_pos_divs_can_be_removed=true
old_neg_divs_can_be_removed=true
startpoint=dontconfirm?0:1//usedfordon'tconfirmoption
forx=0to10
div_type=-1
fory=0to3
ifarray.get(all_divergences,x*4+y)>0//anydivergence?
div_type:=y
if(y%2)==1
dnumdiv_top:=dnumdiv_top+1
top_label_col:=array.get(div_colors,y)
if(y%2)==0
dnumdiv_bottom:=dnumdiv_bottom+1
bottom_label_col:=array.get(div_colors,y)
ifnotarray.includes(distances,array.get(all_divergences,x*4+y))//linenotexist?
array.push(distances,array.get(all_divergences,x*4+y))
new_line=showlines?line.new(x1=bar_index-array.get(all_divergences,x*4+y),
y1=(source=="Close"?close[array.get(all_divergences,x*4+y)]:
(y%2)==0?low[array.get(all_divergences,x*4+y)]:
high[array.get(all_divergences,x*4+y)]),
x2=bar_index-startpoint,
y2=(source=="Close"?close[startpoint]:
(y%2)==0?low[startpoint]:
high[startpoint]),
color=array.get(div_colors,y),
style=y<2?reg_div_l_style:hid_div_l_style,
width=y<2?reg_div_l_width:hid_div_l_width
)
:na
if(y%2)==0
ifold_pos_divs_can_be_removed
old_pos_divs_can_be_removed:=false
ifnotshowlastandremove_last_pos_divs
delete_last_pos_div_lines_label(last_pos_div_lines)
last_pos_div_lines:=0
ifshowlast
delete_old_pos_div_lines()
array.push(pos_div_lines,new_line)
last_pos_div_lines:=last_pos_div_lines+1
remove_last_pos_divs:=true

if(y%2)==1
ifold_neg_divs_can_be_removed
old_neg_divs_can_be_removed:=false
ifnotshowlastandremove_last_neg_divs
delete_last_neg_div_lines_label(last_neg_div_lines)
last_neg_div_lines:=0
ifshowlast
delete_old_neg_div_lines()
array.push(neg_div_lines,new_line)
last_neg_div_lines:=last_neg_div_lines+1
remove_last_neg_divs:=true

//setvariablesforalerts
ify==0
pos_reg_div_detected:=true
ify==1
neg_reg_div_detected:=true
ify==2
pos_hid_div_detected:=true
ify==3
neg_hid_div_detected:=true
//gettextforlabels
ifdiv_type>=0
divergence_text_top:=divergence_text_top+((div_type%2)==1?(showindis!="Don'tShow"?array.get(indicators_name,x)+"\n":""):"")
divergence_text_bottom:=divergence_text_bottom+((div_type%2)==0?(showindis!="Don'tShow"?array.get(indicators_name,x)+"\n":""):"")
//drawlabels
ifshowindis!="Don'tShow"orshownum
ifshownumanddnumdiv_top>0
divergence_text_top:=divergence_text_top+tostring(dnumdiv_top)
ifshownumanddnumdiv_bottom>0
divergence_text_bottom:=divergence_text_bottom+tostring(dnumdiv_bottom)
ifdivergence_text_top!=""
ifshowlast
delete_old_neg_div_labels()
array.push(neg_div_labels,
label.new(x=bar_index,
y=max(high,high[1]),
text=divergence_text_top,
color=top_label_col,
textcolor=neg_div_text_col,
style=label.style_label_down
))

ifdivergence_text_bottom!=""
ifshowlast
delete_old_pos_div_labels()
array.push(pos_div_labels,
label.new(x=bar_index,
y=min(low,low[1]),
text=divergence_text_bottom,
color=bottom_label_col,
textcolor=pos_div_text_col,
style=label.style_label_up
))


alertcondition(pos_reg_div_detected,title='PositiveRegularDivergenceDetected',message='PositiveRegularDivergenceDetected')
alertcondition(neg_reg_div_detected,title='NegativeRegularDivergenceDetected',message='NegativeRegularDivergenceDetected')
alertcondition(pos_hid_div_detected,title='PositiveHiddenDivergenceDetected',message='PositiveHiddenDivergenceDetected')
alertcondition(neg_hid_div_detected,title='NegativeHiddenDivergenceDetected',message='NegativeHiddenDivergenceDetected')
alertcondition(pos_reg_div_detectedorpos_hid_div_detected,title='PositiveDivergenceDetected',message='PositiveDivergenceDetected')
alertcondition(neg_reg_div_detectedorneg_hid_div_detected,title='NegativeDivergenceDetected',message='NegativeDivergenceDetected')
l=pos_reg_div_detected
s1=neg_reg_div_detected

ifl
strategy.entry("buy",strategy.long)
ifs1
strategy.entry("sell",strategy.short)
//TheFixedPercentStopLossCode
//UserOptionstoChangeInputs(%)
stopPer=input(100,title='StopLoss%',type=input.float)/100
takePer=input(100,title='TakeProfit%',type=input.float)/100
//Determinewhereyou'veenteredandinwhatdirection
longStop=strategy.position_avg_price*(1-stopPer)
shortStop=strategy.position_avg_price*(1+stopPer)
shortTake=strategy.position_avg_price*(1-takePer)
longTake=strategy.position_avg_price*(1+takePer)
ifstrategy.position_size>0
strategy.exit(id="CloseLong",stop=longStop,limit=longTake)
ifstrategy.position_size<0
strategy.exit(id="CloseShort",stop=shortStop,limit=shortTake)
Expand (456 lines)
