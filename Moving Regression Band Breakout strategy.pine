Script Name: Moving Regression Band Breakout strategy
Author: tbiktag
Description: Following the introduction of the Moving Regression Prediction Bands indicator (see link below), I'd like to propose how to utilize it in a simple  band breakout strategy :


 Go  long  after the candle closes above the  upper band . The  lower band  (alternatively, the  lower band minus the 14-period ATR  or the  central line ) will serve as a  support line .
...
PineScript code:

Pine Script™ strategy
Moving Regression Band Breakout strategy
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  tbiktag
//
//  Moving  Regression  Band  Breakout  strategy
//
//  The  strategy  based  on  the  Moving  Regression  Prediction  Bands  indicator:
//
//  https://www.tradingview.com/script/zOaMXJ65-Moving-Regression-Prediction-Bands/
//
//  Entry  condition:
//        Long:  the  price  crosses  the  Upper  Band  from  below.
//        Short:  the  price  crosses  the  Lower  Band  from  above.
//  Exit  condition  Long:
//        the  price  crosses  the  Lower  Band  (the  Lower  Band  -  ATR,  or  Central  Line)
//  Exit  condition  Short:
//        the  price  crosses  the  Upper  Band  (the  Upper  Band  +  ATR,  or  Central  Line)
//
//
//@version=4
strategy("Moving  Regression  Band  Breakout  strategy",  shorttitle  =  "MRBand  Strat",  overlay=true)
matrix_get(_A,_i,_j,_nrows)  =>
        //  Get  the  value  of  the  element  of  an  implied  2d  matrix
        //input:
        //  _A  ::  array:  pseudo  2d  matrix  _A  =  [[column_0],[column_1],...,[column_(n-1)]]
        //  _i  ::  integer:  row  number
        //  _j  ::  integer:  column  number
        //  _nrows  ::  integer:  number  of  rows  in  the  implied  2d  matrix
        array.get(_A,_i+_nrows*_j)
matrix_set(_A,_value,_i,_j,_nrows)  =>
        //  Set  a  value  to  the  element  of  an  implied  2d  matrix
        //input:
        //  _A  ::  array,  changed  on  output:  pseudo  2d  matrix  _A  =  [[column_0],[column_1],...,[column_(n-1)]]
        //  _value  ::  float:  the  new  value  to  be  set
        //  _i  ::  integer:  row  number
        //  _j  ::  integer:  column  number
        //  _nrows  ::  integer:  number  of  rows  in  the  implied  2d  matrix
        array.set(_A,_i+_nrows*_j,_value)
transpose(_A,_nrows,_ncolumns)  =>
        //  Transpose  an  implied  2d  matrix
        //  input:
        //  _A  ::  array:  pseudo  2d  matrix  _A  =  [[column_0],[column_1],...,[column_(n-1)]]
        //  _nrows  ::  integer:  number  ofrowsin_A
//_ncolumns::integer:numberofcolumnsin_A
//output:
//_AT::array:pseudo2dmatrixwithimplieddimensions:_ncolumsx_nrows
var_AT=array.new_float(_nrows*_ncolumns,0)
fori=0to_nrows-1
forj=0to_ncolumns-1
matrix_set(_AT,matrix_get(_A,i,j,_nrows),j,i,_ncolumns)
_AT
multiply(_A,_B,_nrowsA,_ncolumnsA,_ncolumnsB)=>
//Calculatescalarproductoftwomatrices
//input:
//_A::array:pseudo2dmatrix
//_B::array:pseudo2dmatrix
//_nrowsA::integer:numberofrowsin_A
//_ncolumnsA::integer:numberofcolumnsin_A
//_ncolumnsB::integer:numberofcolumnsin_B
//output:
//_C::array:pseudo2dmatrixwithimplieddimensions_nrowsAx_ncolumnsB
var_C=array.new_float(_nrowsA*_ncolumnsB,0)
int_nrowsB=_ncolumnsA
floatelementC=0.0
fori=0to_nrowsA-1
forj=0to_ncolumnsB-1
elementC:=0
fork=0to_ncolumnsA-1
elementC:=elementC+matrix_get(_A,i,k,_nrowsA)*matrix_get(_B,k,j,_nrowsB)
matrix_set(_C,elementC,i,j,_nrowsA)
_C
vnorm(_X,_n)=>
//Squarenormofvector_Xwithsize_n
float_norm=0.0
fori=0to_n-1
_norm:=_norm+pow(array.get(_X,i),2)
sqrt(_norm)
qr_diag(_A,_nrows,_ncolumns)=>
//QRDecompositionwithModifiedGram-SchmidtAlgorithm(Column-Oriented)
//input:
//_A::array:pseudo2dmatrix_A=[[column_0],[column_1],...,[column_(n-1)]]
//_nrows::integer:numberofrowsin_A
//_ncolumns::integer:numberofcolumnsin_A
//output:
//_Q:unitarymatrix,implieddimenstions_nrowsx_ncolumns
//_R:uppertriangularmatrix,implieddimansions_ncolumnsx_ncolumns
var_Q=array.new_float(_nrows*_ncolumns,0)
var_R=array.new_float(_ncolumns*_ncolumns,0)
var_a=array.new_float(_nrows,0)
var_q=array.new_float(_nrows,0)
float_r=0.0
float_aux=0.0
//getfirstcolumnof_Aanditsnorm:
fori=0to_nrows-1
array.set(_a,i,matrix_get(_A,i,0,_nrows))
_r:=vnorm(_a,_nrows)
//assignfirstdiagonalelementofRandfirstcolumnofQ
matrix_set(_R,_r,0,0,_ncolumns)
fori=0to_nrows-1
matrix_set(_Q,array.get(_a,i)/_r,i,0,_nrows)
if_ncolumns!=1
//repeatfortherestofthecolumns
fork=1to_ncolumns-1
fori=0to_nrows-1
array.set(_a,i,matrix_get(_A,i,k,_nrows))
forj=0tok-1
//getR_jkasscalarproductofQ_jcolumnandA_kcolumn:
_r:=0
fori=0to_nrows-1
_r:=_r+matrix_get(_Q,i,j,_nrows)*array.get(_a,i)
matrix_set(_R,_r,j,k,_ncolumns)
//updatevector_a
fori=0to_nrows-1
_aux:=array.get(_a,i)-_r*matrix_get(_Q,i,j,_nrows)
array.set(_a,i,_aux)
//getdiagonalR_kkandQ_kcolumn
_r:=vnorm(_a,_nrows)
matrix_set(_R,_r,k,k,_ncolumns)
fori=0to_nrows-1
matrix_set(_Q,array.get(_a,i)/_r,i,k,_nrows)
[_Q,_R]
pinv(_A,_nrows,_ncolumns)=>
//Pseudoinverseofmatrix_AcalculatedusingQRdecomposition
//Input:
//_A::array:impliedasa(_nrowsx_ncolumns)matrix_A=[[column_0],[column_1],...,[column_(_ncolumns-1)]]
//Output:
//_Ainv::arrayimpliedasa(_ncolumnsx_nrows)matrix_A=[[row_0],[row_1],...,[row_(_nrows-1)]]
//----
//FirstfindtheQRfactorizationofA:A=QR,
//whereRisuppertriangularmatrix.
//Then_Ainv=R^-1*Q^T.
//----
[_Q,_R]=qr_diag(_A,_nrows,_ncolumns)
_QT=transpose(_Q,_nrows,_ncolumns)
//CalculateRinv:
var_Rinv=array.new_float(_ncolumns*_ncolumns,0)
float_r=0.0
matrix_set(_Rinv,1/matrix_get(_R,0,0,_ncolumns),0,0,_ncolumns)
if_ncolumns!=1
forj=1to_ncolumns-1
fori=0toj-1
_r:=0.0
fork=itoj-1
_r:=_r+matrix_get(_Rinv,i,k,_ncolumns)*matrix_get(_R,k,j,_ncolumns)
matrix_set(_Rinv,_r,i,j,_ncolumns)
fork=0toj-1
matrix_set(_Rinv,-matrix_get(_Rinv,k,j,_ncolumns)/matrix_get(_R,j,j,_ncolumns),k,j,_ncolumns)
matrix_set(_Rinv,1/matrix_get(_R,j,j,_ncolumns),j,j,_ncolumns)
//
_Ainv=multiply(_Rinv,_QT,_ncolumns,_ncolumns,_nrows)
_Ainv
mae(_x,_xhat)=>
//MeanAverageError
//_x.::arrayfloat,originaldata
//_xhat::arrayfloat,modelestimate
//output
//_nrmse::float
float_mae=0.0
ifarray.size(_x)!=array.size(_xhat)
_mae:=na
else
_N=array.size(_x)
fori=0to_N-1
_mae:=_mae+abs(array.get(_x,i)-array.get(_xhat,i))/_N
_mae
mr(_src,_window,_degree)=>
//Vandermondematrixwithimplieddimensions(windowxdegree+1)
//Linearform:J=[[z]^0,[z]^1,...[z]^degree],withz=[(1-window)/2to(window-1)/2]
var_J=array.new_float(_window*(_degree+1),0)
fori=0to_window-1
forj=0to_degree
matrix_set(_J,pow(i,j),i,j,_window)
//Vectorofrawdatapoints:
var_Y_raw=array.new_float(_window,na)
forj=0to_window-1
array.set(_Y_raw,j,_src[_window-1-j])
//Calculatepolynomialcoefficientswhichminimizethelossfunction
_C=pinv(_J,_window,_degree+1)
_a_coef=multiply(_C,_Y_raw,_degree+1,_window,1)
//Forsmoothing,approximatethelastpoint(i.e.z=window-1)bya0
float_Y=0.0
fori=0to_degree
_Y:=_Y+array.get(_a_coef,i)*pow(_window-1,i)
//TrendDirectionForecast
float_Y_f=0.0
fori=0to_degree
_Y_f:=_Y_f+array.get(_a_coef,i)*pow(_window,i)
//Calculatesdataestimate(neededforrmse)
_Y_hat=multiply(_J,_a_coef,_window,_degree+1,1)
float_err=mae(_Y_raw,_Y_hat)
[_Y,_Y_f,_err]
///---main---
src=input(title="Source",defval=close,group="ModelParameters:")
degree=input(title="LocalPolynomialDegree",type=input.integer,defval=2,minval=0,group="ModelParameters:")
window=input(title="Length(mustbelargerthandegree)",type=input.integer,defval=80,minval=2,group="ModelParameters:")
mult=input(title="Multiplier",type=input.float,defval=2.0,minval=0.0,
group="ModelParameters:",tooltip="DefinestheBandWidth.")
doLong=input(title="AllowLongEntries",type=input.bool,defval=true,inline="linealwd",group="AllowedEntries:")
doShort=input(title="AllowShortEntries",type=input.bool,defval=false,inline="linealwd",group="AllowedEntries:")
stoplong=input(title="ExitLongAt",defval="LowerBand-ATR",
options=["LowerBand","LowerBand-ATR","CentralLine"],
inline="lineexit",group="ExitConditions:")
stopshort=input(title="ExitShortAt",defval="CentralLine",
options=["UpperBand","UpperBand+ATR","CentralLine"],
inline="lineexit",group="ExitConditions:")
fixedstart=input(title="",group="FixedBacktestPeriodStart/EndDates:",
inline="linebac1",type=input.bool,defval=true)
backtest_start=input(title="",type=input.time,inline="linebac1",
group="FixedBacktestPeriodStart/EndDates:",
defval=timestamp("01Jan201713:30+0000"),
tooltip="Ifdeactivated,backteststaringfromthefirstavailablepricebar.")
fixedend=input(title="",group="FixedBacktestPeriodStart/EndDates:",
inline="linebac2",type=input.bool,defval=false)
backtest_end=input(title="",type=input.time,inline="linebac2",
group="FixedBacktestPeriodStart/EndDates:",
defval=timestamp("30Dec208023:30+0000"),
tooltip="Ifdeactivated,backtestingendsatthelastavailablepricebar.")
istoploss=input(title="ShowStop-LossLine",type=input.bool,defval=true,group="AdditionalOptions")
slopefilter=input(title="EnterOnlyWhenMRSlopeisPositive/Negative",type=input.bool,defval=false,group="AdditionalOptions")
issignal=input(title="ShowBreakoutSignalsLabels",type=input.bool,defval=false,group="AdditionalOptions")
clinetype=input(title="ShowCentralLineAs",defval="Previous-PeriodMRPrediction",
options=["Ribbon","MR","Previous-PeriodMRPrediction"],group="AdditionalOptions")
[MR,MR_f,div]=mr(src,window,degree)
div:=div*mult
//plotbands
highband=MR_f[1]+div[1]
lowband=MR_f[1]-div[1]
centralline=MR_f[1]
hbplt=plot(highband,title='UpperBand',color=#3C94B8,linewidth=2,transp=40)
lbplt=plot(lowband,title='LowerBand',color=#B83C94,linewidth=2,transp=40)
fill(hbplt,lbplt,color=#3C94B8)
//plotcentralline
varplt_color=#3C94B8
ifMR_f[1]<MRandclinetype=="Ribbon"
plt_color:=#94B83C
elseifMR_f[1]>MRandclinetype=="Ribbon"
plt_color:=#B83C71
mrplt=plot(MR,title='MR',color=plt_color,linewidth=1,
transp=clinetype=="Previous-PeriodMRPrediction"?100:20)
mrfplt=plot(centralline,title='MRPrediction',color=plt_color,linewidth=1,
transp=clinetype=="MR"?100:20)
fill(mrplt,mrfplt,color=plt_color,transp=clinetype!="Ribbon"?100:20)
//breakoutsignals
ATR=atr(14)
Breakout=crossover(src,highband)
Breakdown=crossunder(src,lowband)
ATRBreakout=crossover(src,highband+ATR)
ATRBreakdown=crossunder(src,lowband-ATR)
MRSlopesUp=MR>MR[1]
MRSlopesDw=MR<MR[1]
plotshape(Breakoutandissignal?high:na,location=location.abovebar,
style=shape.triangleup,color=#88d4ca,size=size.tiny,title='Breakout')
plotshape(Breakdownandissignal?low:na,location=location.belowbar,
style=shape.triangledown,color=#f67e7d,size=size.tiny,title='Breakdown')
goLong=Breakoutand(slopefilter?MRSlopesUp:true)
goShort=Breakdownand(slopefilter?MRSlopesDw:true)
//trailingstop/stoploss
trailinglong=stoplong=="CentralLine"?centralline:(stoplong=="LowerBand"?lowband:lowband-ATR)
trailingshort=stopshort=="CentralLine"?centralline:(stopshort=="UpperBand"?highband:highband+ATR)
//ifsignalhasbeentriggeredatpreviousbar,setpositionopenpriceandinitialSL
varfloatopprice=0.0
varfloatstoploss=0.0
if(strategy.position_entry_name[1]=="short"orstrategy.position_size[1]==0)andgoLong[1]
opprice:=open
stoploss:=trailinglong
elseif(strategy.position_entry_name[1]=="long"orstrategy.position_size[1]==0)andgoShort[1]
opprice:=open
stoploss:=trailingshort
//moveSLtopositionopeningpriceiflowbandcrossestheinitialSL
if(strategy.position_entry_name=="long"andcrossover(trailinglong,opprice))or(strategy.position_entry_name=="short"andcrossunder(trailingshort,opprice))
stoploss:=opprice
stoplosscolor=strategy.position_entry_name=="long"?#B83C94:(strategy.position_entry_name=="short"?#3C94B8:color.silver)
plot(istoploss?stoploss:na,title='sl',color=stoplosscolor,linewidth=1,transp=50)
endLong=crossunder(src,trailinglong)
endShort=crossover(src,trailingshort)
//backtest
isinrange=(fixedstart?time>=backtest_start:true)and(fixedend?time<=backtest_end:true)
ifgoLongandisinrangeanddoLong
strategy.entry("long",true)
alert(syminfo.tickerid+"LongSignalTriggered",alert.freq_once_per_bar_close)
ifgoShortandisinrangeanddoShort
strategy.entry("short",false)
alert(syminfo.tickerid+"ShortSignalTriggered",alert.freq_once_per_bar_close)
ifendLongorcrossunder(src,stoploss)
strategy.close("long")
alert(syminfo.tickerid+"ExitSignalTriggeredforLongPosition",alert.freq_once_per_bar_close)
ifendShortorcrossover(src,stoploss)
strategy.close("short")
alert(syminfo.tickerid+"ExitSignalTriggeredforShortPosition",alert.freq_once_per_bar_close)
if(notisinrange)
strategy.close_all()
Expand (316 lines)
