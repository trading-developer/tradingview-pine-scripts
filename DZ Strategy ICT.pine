Script Name: DZ Strategy ICT
Author: boumaizamoncef
Description: The script presented is a trading strategy called "Breaker Block Strategy with Price Channel". This strategy uses multiple time frames (1 minute, 5 minutes, 15 minutes, 1 hour, and 4 hours) to detect support and resistance areas on the chart.

The strategy uses parameters such as length, deviations, multiplier, Fibonacci level, move lag and volume threshold for...
PineScript code:

Pine Script™ strategy
DZ Strategy ICT
//@version=5
strategy("DZ  Strategy  ICT",  overlay=true)
//  Paramètres  de  l'indicateur
length1  =  input.int(14,  minval=1,  title='Longueur  1  min')
deviations1  =  input.float(2.0,  title='Déviations  1  min')
multiplier1  =  input.float(1.0,  minval=0.1,  maxval=10,  title='Multiplicateur  1  min')
fibonacciLevel1  =  input.float(0.618,  title='Niveau  de  Fibonacci  1  min')
displacement1  =  input.int(3,  minval=1,  title='Décalage  de  Displacement  1  min')
volumeThreshold1  =  input.float(1.0,  minval=0,  title='Seuil  de  Volume  1  min')
fibLevelInput1  =  input.float(0.0,  "Niveau  de  Limite  de  Profit  1  min",  minval=0.0)
length5  =  input.int(14,  minval=1,  title='Longueur  5  min')
deviations5  =  input.float(2.0,  title='Déviations  5  min')
multiplier5  =  input.float(1.0,  minval=0.1,  maxval=10,  title='Multiplicateur  5  min')
fibonacciLevel5  =  input.float(0.618,  title='Niveau  de  Fibonacci  5  min')
displacement5  =  input.int(3,  minval=1,  title='Décalage  de  Displacement  5  min')
volumeThreshold5  =  input.float(1.0,  minval=0,  title='Seuil  de  Volume  5  min')
fibLevelInput5  =  input.float(0.0,  "Niveau  de  Limite  de  Profit  5  min",  minval=0.0)
length15  =  input.int(14,  minval=1,  title='Longueur  15  min')
deviations15  =  input.float(2.0,  title='Déviations  15  min')
multiplier15  =  input.float(1.0,  minval=0.1,  maxval=10,  title='Multiplicateur  15  min')
fibonacciLevel15  =  input.float(0.618,  title='Niveau  de  Fibonacci  15  min')
displacement15  =  input.int(3,  minval=1,  title='Décalage  de  Displacement  15  min')
volumeThreshold15  =  input.float(1.0,  minval=0,  title='Seuil  de  Volume  15  min')
fibLevelInput15  =  input.float(0.0,  "Niveau  de  Limite  de  Profit  15  min",  minval=0.0)
length60  =  input.int(14,  minval=1,  title='Longueur  1  h')
deviations60  =  input.float(2.0,  title='Déviations  1  h')
multiplier60  =  input.float(1.0,  minval=0.1,  maxval=10,  title='Multiplicateur  1  h')
fibonacciLevel60  =  input.float(0.618,  title='Niveau  de  Fibonacci  1  h')
displacement60  =  input.int(3,  minval=1,  title='Décalage  de  Displacement  1  h')
volumeThreshold60  =  input.float(1.0,  minval=0,  title='Seuil  de  Volume  1  h')
fibLevelInput60  =  input.float(0.0,  "Niveau  de  Limite  de  Profit  1  h",  minval=0.0)
length240  =  input.int(14,  minval=1,  title='Longueur  4  h')
deviations240  =  input.float(2.0,  title='Déviations  4  h')
multiplier240  =  input.float(1.0,  minval=0.1,  maxval=10,  title='Multiplicateur  4  h')
fibonacciLevel240  =  input.float(0.618,  title='Niveau  de  Fibonacci  4  h')
displacement240  =  input.int(3,  minval=1,  title='Décalage  de  Displacement  4  h')
volumeThreshold240  =  input.float(1.0,  minval=0,  title='Seuil  de  Volume  4  h')
fibLevelInput240  =  input.float(0.0,  "Niveau  de  Limite  de  Profit  4  h",  minval=0.0)
//  Calcul  des  supports  et  résistances  pour  chaque  plage  de  temps
basis1  =  ta.sma(close,  length1)
range_1  =  multiplier1  *  ta.stdev(close,  length1)
upper1  =  basis1  +  deviations1  *  range_1
lower1  =  basis1  -  deviations1  *  range_1
basis5  =  ta.sma(close,  length5)
range_5  =  multiplier5  *  ta.stdev(close,  length5)
upper5  =  basis5  +  deviations5  *  range_5
lower5  =  basis5  -  deviations5  *  range_5
basis15  =  ta.sma(close,  length15)
range_15  =  multiplier15  *  ta.stdev(close,  length15)
upper15  =  basis15  +  deviations15  *  range_15
lower15  =  basis15  -  deviations15  *  range_15
basis60  =  ta.sma(close,  length60)
range_60  =  multiplier60  *  ta.stdev(close,  length60)
upper60  =  basis60  +  deviations60  *  range_60
lower60  =  basis60  -  deviations60  *  range_60
basis240  =  ta.sma(close,  length240)
range_240  =  multiplier240  *  ta.stdev(close,  length240)
upper240  =  basis240  +  deviations240  *  range_240
lower240  =  basis240  -  deviations240  *  range_240
//  Calcul  du  volume  moyen  sur  chaque  période  donnée
averageVolume1  =  ta.sma(volume,  length1)
averageVolume5  =  ta.sma(volume,  length5)
averageVolume15  =  ta.sma(volume,  length15)
averageVolume60  =  ta.sma(volume,  length60)
averageVolume240  =  ta.sma(volume,  length240)
//  Détection  du  Breaker  Block  en  fonction  du  déplacement  et  du  volume  pour  chaque  plage  de  temps
breakerBlock1  =  ta.crossover(close[displacement1],  lower1)  and  volume  >  volumeThreshold1  *  averageVolume1
breakerBlock1  :=  breakerBlock1  or  (ta.crossunder(close[displacement1],  upper1)  and  volume  >  volumeThreshold1  *  averageVolume1)
breakerBlock5  =  ta.crossover(close[displacement5],  lower5)  and  volume  >  volumeThreshold5  *  averageVolume5
breakerBlock5  :=  breakerBlock5  or  (ta.crossunder(close[displacement5],  upper5)  and  volume  >  volumeThreshold5  *  averageVolume5)
breakerBlock15  =  ta.crossover(close[displacement15],  lower15)  and  volume  >  volumeThreshold15  *  averageVolume15
breakerBlock15  :=  breakerBlock15  or  (ta.crossunder(close[displacement15],  upper15)  and  volume  >  volumeThreshold15  *  averageVolume15)
breakerBlock60  =  ta.crossover(close[displacement60],  lower60)  and  volume  >  volumeThreshold60  *  averageVolume60
breakerBlock60  :=  breakerBlock60  or(ta.crossunder(close[displacement60],upper60)andvolume>volumeThreshold60*averageVolume60)
breakerBlock240=ta.crossover(close[displacement240],lower240)andvolume>volumeThreshold240*averageVolume240
breakerBlock240:=breakerBlock240or(ta.crossunder(close[displacement240],upper240)andvolume>volumeThreshold240*averageVolume240)
//AffichageduBreakerBlocksurlegraphique
bgcolor(breakerBlock1?color.new(color.yellow,70):na)
bgcolor(breakerBlock5?color.new(color.yellow,70):na)
bgcolor(breakerBlock15?color.new(color.yellow,70):na)
bgcolor(breakerBlock60?color.new(color.yellow,70):na)
bgcolor(breakerBlock240?color.new(color.yellow,70):na)
//Définitiondelazonelimitedel'ordredeprofitpourchaqueplagedetemps
fibLevel1=basis1*fibonacciLevel1
fibLevel5=basis5*fibonacciLevel5
fibLevel15=basis15*fibonacciLevel15
fibLevel60=basis60*fibonacciLevel60
fibLevel240=basis240*fibonacciLevel240
//Signald'achatmodifiéenfonctionduBreakerBlocketdudéplacementpourchaqueplagedetemps
buySignal1=ta.crossover(close[displacement1],lower1)andvolume>volumeThreshold1*averageVolume1
buySignal5=ta.crossover(close[displacement5],lower5)andvolume>volumeThreshold5*averageVolume5
buySignal15=ta.crossover(close[displacement15],lower15)andvolume>volumeThreshold15*averageVolume15
buySignal60=ta.crossover(close[displacement60],lower60)andvolume>volumeThreshold60*averageVolume60
buySignal240=ta.crossover(close[displacement240],lower240)andvolume>volumeThreshold240*averageVolume240
//SignaldeventemodifiéenfonctionduBreakerBlocketdudéplacementpourchaqueplagedetemps
sellSignal1=ta.crossunder(close[displacement1],upper1)andvolume>volumeThreshold1*averageVolume1
sellSignal5=ta.crossunder(close[displacement5],upper5)andvolume>volumeThreshold5*averageVolume5
sellSignal15=ta.crossunder(close[displacement15],upper15)andvolume>volumeThreshold15*averageVolume15
sellSignal60=ta.crossunder(close[displacement60],upper60)andvolume>volumeThreshold60*averageVolume60
sellSignal240=ta.crossunder(close[displacement240],upper240)andvolume>volumeThreshold240*averageVolume240
//Tracédesniveauxdelimitedeprofitpourchaqueplagedetemps
hline(fibLevelInput1,color=color.green,linestyle=hline.style_dashed,title="NiveaudeLimitedeProfit1min")
hline(fibLevelInput5,color=color.green,linestyle=hline.style_dashed,title="NiveaudeLimitedeProfit5min")
hline(fibLevelInput15,color=color.green,linestyle=hline.style_dashed,title="NiveaudeLimitedeProfit15min")
hline(fibLevelInput60,color=color.green,linestyle=hline.style_dashed,title="NiveaudeLimitedeProfit1h")
hline(fibLevelInput240,color=color.green,linestyle=hline.style_dashed,title="NiveaudeLimitedeProfit4h")
//Définitiondesordresdeventeetd'achatpourchaqueplagedetemps
ifbuySignal1
strategy.entry("Achat1min",strategy.long)

ifsellSignal1
strategy.entry("Vente1min",strategy.short)
ifbuySignal5
strategy.entry("Achat5min",strategy.long)

ifsellSignal5
strategy.entry("Vente5min",strategy.short)
ifbuySignal15
strategy.entry("Achat15min",strategy.long)

ifsellSignal15
strategy.entry("Vente15min",strategy.short)
ifbuySignal60
strategy.entry("Achat1h",strategy.long)

ifsellSignal60
strategy.entry("Vente1h",strategy.short)
ifbuySignal240
strategy.entry("Achat4h",strategy.long)

ifsellSignal240
strategy.entry("Vente4h",strategy.short)
//Configurationdesordresdesortie(TakeProfit)pourchaqueplagedetemps
profitRatio=2
stopLossRatio=1
stopLossLevel1=strategy.position_avg_price*(1-stopLossRatio/(stopLossRatio+profitRatio))
stopLossLevel5=strategy.position_avg_price*(1-stopLossRatio/(stopLossRatio+profitRatio))
stopLossLevel15=strategy.position_avg_price*(1-stopLossRatio/(stopLossRatio+profitRatio))
stopLossLevel60=strategy.position_avg_price*(1-stopLossRatio/(stopLossRatio+profitRatio))
stopLossLevel240=strategy.position_avg_price*(1-stopLossRatio/(stopLossRatio+profitRatio))
strategy.exit("StopLoss1min","Achat1min",stop=stopLossLevel1)
strategy.exit("StopLoss1min","Vente1min",stop=stopLossLevel1)
strategy.exit("StopLoss5min","Achat5min",stop=stopLossLevel5)
strategy.exit("StopLoss5min","Vente5min",stop=stopLossLevel5)
strategy.exit("StopLoss15min","Achat15min",stop=stopLossLevel15)
strategy.exit("StopLoss15min","Vente15min",stop=stopLossLevel15)
strategy.exit("StopLoss1h","Achat1h",stop=stopLossLevel60)
strategy.exit("StopLoss1h","Vente1h",stop=stopLossLevel60)
Expand (181 lines)
