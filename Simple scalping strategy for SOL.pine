Script Name: Simple scalping strategy for SOL
Author: hugodanielcom
Description: This is a simple scalping strategy for trading SOL made on top of the  Rebalance Oscillator  and the  Rebalance Bear/Bull market  indicators.

It is intended mostly as proof that these two indicators have their benefits even in simpler strategies.

This strategy in particular works well for the Bear months (check Nov. in the data window) but considerably...
PineScript code:

Pine Script™ strategy
Simple scalping strategy for SOL
//  This  source  code  is  subject  to  the  terms  of  the  Mozilla  Public  License  2.0  at  https://mozilla.org/MPL/2.0/
//  ©  hugodanielcom
//@version=5
//
//  Welcome,  this  is  a  simple  scalping  strategy  for  trading  SOL.
//
//  It  works  well  for  the  Bear  months  (check  Nov.)  but  considerably  underperforms  Buy&Hold  for  the  Bull  months.
//
//  It  tries  to  do  a  market  operation  per  candle  whenever  the  candle  happens  in  a  buy/sell  trading  window  of  the
//  Rebalance  Bear/Bull  indicator  (https://www.tradingview.com/script/Y0omflqx-Rebalance-as-a-Bear-Bull-indicator/).
//
//  It  always  buys/sells  the  same  amount  by  default  (you  can  set  it  in  the  cog  menu  in  the  option  "Base  Crypto  Amount  To  Trade"),
//  for  SOL  this  is  set  to  1.0SOL.
//
//  This  is  my  first  attempt  at  scalping,  it  differs  slightly  from  the  standards  because  it  does  not  require  fast
//  response  candles  or  immediate  market  operations  (it  can  work  well  with  limit  trading)  and  on  top  of  this  it  also
//  does  not  require  a  stop  loss  since  it  uses  an  indicator  that  provides  the  trading  windows  (surprises  can  still  happen  though).
//
//  The  main  logic  for  this  strategy  is  simple  and  happens  down  at  the  bottom,  in  the  "Actions"  section.
//
//
//  This  code  makes  use  of  the  following  libraries,  they  are  open-source  as  well
//  and  you  can  check  them  out  here:  https://www.tradingview.com/u/hugodanielcom/#published-scripts
import  hugodanielcom/PureRebalance/3  as  rebalancer
import  hugodanielcom/TradingPortfolio/1  as  portfolio
strategy("S1",  overlay=false,  calc_on_order_fills  =  false,  initial_capital  =  10000.0)
base_amount  =  input.float(defval  =  1.0,      title  =  "Base  Crypto  Amount  To  Trade",    minval  =  0.1,  maxval  =  100.0)
min_value  =  input.float(defval  =  11.0,      title  =  "Min  Fiat  Trading  Value",    minval  =  1.0,  maxval  =  100.0)
float  precision  =  input.float(defval  =  15.0,      title  =  "Rebalance  Precision",    minval  =  1.0,  maxval  =  100.0)
fromHour    =  input.int(defval  =  1,        title  =  "hh",              group  =  "From",  inline="fromClock",  minval  =  1,  maxval  =  24)
fromMin      =  input.int(defval  =  0,        title  =  "mm",              group  =  "From",  inline="fromClock",  minval  =  0,  maxval  =  60)
fromMonth  =  input.int(defval  =  11,      title  =  "MM",            group  =  "From",  inline="fromDate",    minval  =  1,  maxval  =  12)
fromDay      =  input.int(defval  =  1,        title  =  "DD",            group  =  "From",  inline="fromDate",    minval  =  1,  maxval  =  31)
fromYear    =  input.int(defval  =  2021,  title  =  "YYYY",        group  =  "From",  inline="fromDate",    minval  =  1970)
thruMonth  =  input.int(defval  =  11,      title  =  "MM",          group  =  "Thru",  inline="thruDate",    minval  =  1,  maxval  =  12)
thruDay      =  input.int(defval  =  31,      title  =  "DD",          group  =  "Thru",  inline="thruDate",    minval  =  1,  maxval  =  31)
thruYear    =  input.int(defval  =  2021,  title  =  "YYYY",        group  =  "Thru",  inline="thruDate",    minval  =  1970)
float  MIN_AMOUNT  =  min_value  /  close
//  ===  FUNCTION  EXAMPLE  ===
start          =  timestamp(fromYear,  fromMonth,  fromDay,  fromHour,  fromMin)                //  backtest  start  window
finish        =  timestamp(thruYear,  thruMonth,  thruDay,  23,  59)                //  backtest  finish  window
window()    =>  time  >=  start  and  time  <=  finish  ?  true  :  false              //  create  function  "within  window  of  time"
rebull_rebear_precision    =  input.float(defval  =  2.5,                    group  =  "Bear/Bull  Market  Indicator",  title  =  "Rebalance  when  portfolio  differs  by  %",    tooltip="Bigger  values  make  the  rebalance  hold  more  and  become  less  sensitive  to  peaks/bottoms  and  act  less  often.",  minval  =  0.1,  maxval  =  99.9)
rebull_rebear_from_month  =  fromMonth  //  input.int(defval  =  11,                          group  =  "Bear/Bull  Market  Indicator",  title  =  "Start  At  Month",                minval  =  1,  maxval  =  12)
rebull_rebear_from_day      =  input.int(defval  =  1,                            group  =  "Bear/Bull  Market  Indicator",  title  =  "Start  At  Day",                    minval  =  1,  maxval  =  31)
rebull_rebear_from_year    =  fromYear  //  input.int(defval  =  2021,                      group  =  "Bear/Bull  Market  Indicator",  title  =  "Start  At  Year",                  minval  =  2020)
rebull_rebear_capital        =  input.float(defval  =  10000.0,            group  =  "Bear/Bull  Market  Indicator",  title  =  "Initial  capital",      minval  =  1,  tooltip="The  total  portfolio  value  to  start  with.  A  higher  value  makes  the  rebalancer  more  sensitive  to  peaks/bottoms  and  act  more  often")
rebull_rebear_percentage  =  input.float(defval  =  60.0,                  group  =  "Bear/Bull  Market  Indicator",  title  =  "Rebalance  Token  %",  minval  =  0.01,  maxval  =  100.0,  tooltip="Percentage  of  Token  /  Money.\n60  means  the  targeted  balance  is  60%  token  and  40%  money")
rebull_rebear_show_force  =  input.bool(defval  =  false,                  group  =  "Bear/Bull  Market  Indicator",  title  =  "Show  force")
rebull_rebear_show_opos    =  input.bool(defval  =  true,                    group  =  "Bear/Bull  Market  Indicator",  title  =  "Show  buy/sell  windows  of  opportunities")
//  Backtest  start  window
rebull_rebear_start          =  timestamp(rebull_rebear_from_year,  rebull_rebear_from_month,  rebull_rebear_from_day)
//  Function  returns  true  when  the  current  bar  time  is
//  "within  the  window  of  time"  for  this  indicator
rebull_rebear_window()    =>  time  >=  rebull_rebear_start
//  The  two  market  trend  indicator  portfolios
var  float[]  percentage_portfolio  =  portfolio.init()
var  float[]  signal_portfolio  =  portfolio.init()
//  Initialization  starts  by  doing  a  rebalance  at  the  first  bar  within
//  the  window
var  bool  rebull_rebear_init1  =  true
if  rebull_rebear_window()  and  rebull_rebear_init1
        //  Only  do  this  once,  for  the  first  bar,  set  init1  to  false  to  disallow
        //  this  block  from  running  again
        rebull_rebear_init1  :=  false
        first_rebalance_amount  =  rebalancer.rebalance(close,  0.0,  rebull_rebear_capital,  rebull_rebear_percentage  /  100)
        portfolio.set_balance(percentage_portfolio,  first_rebalance_amount,  rebull_rebear_capital  -  (first_rebalance_amount  *  close))
        float  signal_capital  =  close*100.0
        signal_first_rebalance_amount  =  rebalancer.rebalance(close,  0.0,  signal_capital,  rebull_rebear_percentage  /  100)
        portfolio.set_balance(signal_portfolio,  signal_first_rebalance_amount,  signal_capital  -  (signal_first_rebalance_amount  *  close))
var  float  signal  =  0.0
float  signal_rebalance_amount  =  rebalancer.rebalance(close,  portfolio.crypto(signal_portfolio),  portfolio.fiat(signal_portfolio),  rebull_rebear_percentage  /  100.0)
float  signal_percentage_change  =  math.abs(signal_rebalance_amount)  /  portfolio.crypto(signal_portfolio)
bool  signal_is_rebalance_needed  =  signal_percentage_change  >=  ((rebull_rebear_precision  /  4.0)  /  100.0)
bool  signal_is_rebalance_buying    =  signal_is_rebalance_needed  and  signal_rebalance_amount  >  0
bool  signal_is_rebalance_selling  =  signal_is_rebalance_needed  and  signal_rebalance_amount  <  0
//  This  is  where  the  rebalance  gets  done
float  percentage_rebalance_amount  =  rebalancer.rebalance(close,  portfolio.crypto(percentage_portfolio),  portfolio.fiat(percentage_portfolio),  rebull_rebear_percentage  /  100.0)
//  Check  if  the  amount  to  rebalance  is  bigger  than  the  percentage
float  percentage_change  =  math.abs(percentage_rebalance_amount)  /  portfolio.crypto(percentage_portfolio)
bool  percentage_is_rebalance_needed  =  percentage_change  >=  (rebull_rebear_precision  /  100.0)
bool  percentage_is_rebalance_buying  =  percentage_is_rebalance_needed  and  percentage_rebalance_amount  >  0
bool  percentage_is_rebalance_selling  =  percentage_is_rebalance_needed  and  percentage_rebalance_amount  <  0
var  int  bear_bull_balance  =  0
var  int  bear_balance  =  0
var  int  bull_balance  =  0
var  int  signal_bear_balance  =  0
var  int  signal_bull_balance  =  0
var  float  percentage_signal=0.0
//Updatethepercentageportfolioandthesignalportfolionumberofoperations
//andbear/bullmarketbalance.Thevaluescalculatedherewillthenbeused
//tosetthe"market_value"and"signal_market_value"below,whicharethe
//mainindicatorsofthebear/bullmarketstrength.
ifrebull_rebear_window()
ifpercentage_is_rebalance_buying
portfolio.buy(percentage_portfolio,percentage_rebalance_amount,close)
bear_balance+=1

ifpercentage_is_rebalance_selling
portfolio.sell(percentage_portfolio,math.abs(percentage_rebalance_amount),close)
bull_balance+=1

ifsignal_is_rebalance_buying
ifportfolio.buy(signal_portfolio,signal_rebalance_amount,close)
signal+=signal_rebalance_amount
signal_bear_balance+=1
ifsignal_is_rebalance_selling
ifportfolio.sell(signal_portfolio,math.abs(signal_rebalance_amount),close)
signal+=signal_rebalance_amount
signal_bull_balance+=1
market_value=bull_balance-bear_balance
signal_market_value=signal_bull_balance-signal_bear_balance
//Storethesignal_market_valueattheentrypointofanewmarket_value,this
//isusedtosubtracttothecurrentsignalvalue,usefulasanindicatorof
//themarketforcewithinthecurrentmarket_valuequantity.
varmarket_value_start=signal_market_value
ifmarket_value[0]!=market_value[1]
market_value_start:=signal_market_value
//Thecolorstobeusedwhenthemarketisconsideredbearorbull
bear_down_color=color.new(color.red,15)
bear_up_color=color.new(color.red,15)
bull_down_color=color.new(color.green,15)
bull_up_color=color.new(color.green,15)
//Aspecialcolortobeusedwhenitisneither.
nothing_color=color.new(color.gray,0)
//Bydefaultitisneither:
colormarket_color=nothing_color
//Lookatthemarket_valueanddecidewhichcolortouse
market_color:=nothing_color
boolis_signal_going_up=signal>0
boolis_signal_going_down=notis_signal_going_up
ifmarket_value>0andis_signal_going_up
market_color:=bull_up_color
ifmarket_value>0andis_signal_going_down
market_color:=bull_down_color
ifmarket_value<0andis_signal_going_up
market_color:=bear_up_color
ifmarket_value<0andis_signal_going_down
market_color:=bear_down_color
//Themarketforceisthesecondindicatorthatthiscodeoutputs,itrepresents
//thetendencyofthemarkettogoupordownwithina"market_value"block.
force=signal_market_value-market_value_start
//Itcanbeusedtofindbuyingandsellingwindows
boolis_force_selling_opportunity=force>0and((market_value<0andforce>=2)or(market_value>0andforce>=1))
boolis_force_buying_opportunity=force<0and((market_value<0andforce<=-2)or(market_value>0andforce<=-3))
boolis_buying_opportunity=is_force_buying_opportunityor(is_force_buying_opportunity[1]andclose[1]>=close[0])
boolis_selling_opportunity=is_force_selling_opportunityor(is_force_selling_opportunity[1]andclose[1]<=close[0])
//Painttheseextravaluesiftheyarebeingdrawn:
colorforce_color=na
ifis_selling_opportunity
force_color:=color.new(color.red,80)
ifis_buying_opportunity
force_color:=color.new(color.blue,80)
//Thefinalbear/bulloutput
bgcolor(rebull_rebear_show_opos?force_color:na,title="Buy/Sellopportunities")
plot(market_value,"Bear/BullStrength",color=market_color,style=plot.style_area)
plot(force,"Force",color=rebull_rebear_show_force?color.orange:na)
hline(0,"MiddleBand",color=color.new(#787B86,50))
////////////////////////////////////////////////////////////////////////////////////
//Rebalanceroscillator
////////////////////////////////////////////////////////////////////////////////////
//CalculatetheHODLmoneyintheportfolio-thisisnecessarybecausethe
//TradingViewstrategytesteristargetedforsinglepositionstrategies,which
//isnotthecaseofthisone.
varfloattoken_start=0.0
ifwindow()andtoken_start==0.0
token_start:=close
varfloathold=0
varfloatwindow_close=0.0
ifwindow()
window_close:=close
hold:=(strategy.initial_capital/token_start)
floathold_profit=hold*window_close-token_start*hold
plot(hold_profit,"HoldProfit",color=na)
//Arraystokeeptrackofpreviousorders(theTradingViewstrategyobject
//workswithasingleposition,thisstrategydoesn'tfollowpyramidingora
//position-thesearrayshelptokeeptrackoftheordersbeingissuedand
//getupdatedwhentheygetmatchedbyanrequivalentupper/lowersale/buy)
varbuy_orders_value=array.new_float()
varbuy_orders_amount=array.new_float()
varbuy_orders_fullfillment=array.new_float()
varsell_orders_value=array.new_float()
varsell_orders_amount=array.new_float()
varsell_orders_fullfillment=array.new_float()
vartmp_fullfillment_indices=array.new_int()
vartmp_fullfillment_amounts=array.new_float()
//Returns[tickervalue,totalamountsold,amountavailable]
get_past_unfulfilled_sell(inti)=>
ifi>=0andi<array.size(sell_orders_value)andi<array.size(sell_orders_amount)andi<array.size(sell_orders_fullfillment)
fullfillment=array.get(sell_orders_fullfillment,i)
iffullfillment<1.0
initial_amount_sold=array.get(sell_orders_amount,i)
available_amount=initial_amount_sold*(1.0-fullfillment)
[array.get(sell_orders_value,i),initial_amount_sold,available_amount]
else
[0.0,0.0,0.0]
else
[0.0,0.0,0.0]
set_fullfillment_amount_in_sell(inti,floatamount)=>
[_,initial_sell_amount,sell_available_amount]=get_past_unfulfilled_sell(i)
fullfilled_amount=initial_sell_amount-sell_available_amount
array.set(sell_orders_fullfillment,i,(amount+fullfilled_amount)/initial_sell_amount)
fullfill_sell_at(floatvalue,floatfiat_account_balance,intat)=>
amount_to_buy=0.0
[sell_close,initial_sell_amount,sell_available_amount]=get_past_unfulfilled_sell(at)
ifsell_available_amount*value<fiat_account_balance
//Fullfill100%immediately
amount_to_buy+=sell_available_amount
else
//Trytofullfillinparcels
amount_fullfilled=0.0
total_parcels=20
forj=0tototal_parcels-1
current_parcel_amount=j*sell_available_amount/total_parcels
//Dowehavefiatenoughtobuyaparcelthisbig?
iffiat_account_balance>current_parcel_amount*value
amount_fullfilled:=current_parcel_amount
//Fullfillthis
amount_to_buy+=amount_fullfilled
profit=sell_close*amount_to_buy-value*amount_to_buy
[amount_to_buy,sell_close,profit]
//Triestobuyenough
fullfill_sells_gt(floatvalue,floatfiat_account_balance)=>
array.clear(tmp_fullfillment_indices)
array.clear(tmp_fullfillment_amounts)
floatprofit=0.0
floatamount_to_buy=0.0
floattmp_fiat_balance=fiat_account_balance
int_size=array.size(sell_orders_value)
if_size>0andfiat_account_balance>1.0
fori=0to_size-1
cur_order_value=array.get(sell_orders_value,i)
ifcur_order_value>value
[amount_possible,sell_value,order_profit]=fullfill_sell_at(value,tmp_fiat_balance,i)
tmp_fiat_balance-=amount_possible*sell_value
amount_to_buy+=amount_possible
profit+=order_profit
//Markthistobefullfilled
array.push(tmp_fullfillment_indices,i)
array.push(tmp_fullfillment_amounts,amount_possible)
[amount_to_buy,profit]
fullfill_oldest_sale(floatvalue,floatfiat_account_balance)=>
array.clear(tmp_fullfillment_indices)
array.clear(tmp_fullfillment_amounts)
int_size=array.size(sell_orders_value)
floatamount_to_buy=MIN_AMOUNT
bool_is_done=false
if_size>0
fori=0to_size-1
[amount_possible,sell_close,_]=fullfill_sell_at(value,fiat_account_balance,i)
ifnot_is_done
//Thisisthepercentageoftheprofittotakeinfloat:1.XXX
price_adjustment=(1.0-(sell_close/value))+1.0
ifamount_possible>0.0andamount_possible*price_adjustment<fiat_account_balance
amount_to_buy:=amount_possible*price_adjustment
_is_done:=true
array.push(tmp_fullfillment_indices,i)
array.push(tmp_fullfillment_amounts,amount_to_buy)
amount_to_buy
else
amount_to_buy:=0.03
else
amount_to_buy


clear_fullfilled_sells()=>
old_sell_orders_value=array.copy(sell_orders_value)
old_sell_orders_amount=array.copy(sell_orders_amount)
old_sell_orders_fullfillment=array.copy(sell_orders_fullfillment)
array.clear(sell_orders_value)
array.clear(sell_orders_amount)
array.clear(sell_orders_fullfillment)
_size=array.size(old_sell_orders_fullfillment)
if_size>0
fori=0to_size-1
ifarray.get(old_sell_orders_fullfillment,i)<1.0
array.push(sell_orders_fullfillment,array.get(old_sell_orders_fullfillment,i))
array.push(sell_orders_value,array.get(old_sell_orders_value,i))
array.push(sell_orders_amount,array.get(old_sell_orders_amount,i))
close_buy()=>
_size=array.size(tmp_fullfillment_indices)
if_size>0
fori=0to_size-1
sell_index=array.get(tmp_fullfillment_indices,i)
sell_amount=array.get(tmp_fullfillment_amounts,i)
set_fullfillment_amount_in_sell(sell_index,sell_amount)
clear_fullfilled_sells()

register_sell(value,amount)=>
array.push(sell_orders_value,value)
array.push(sell_orders_amount,amount)
array.push(sell_orders_fullfillment,0.0)
//Returns[tickervalue,totalamountsold,amountavailable]
get_past_unfulfilled_buy(inti)=>
ifi>=0andi<array.size(buy_orders_value)andi<array.size(buy_orders_amount)andi<array.size(buy_orders_fullfillment)
fullfillment=array.get(buy_orders_fullfillment,i)
iffullfillment<1.0
initial_amount_bought=array.get(buy_orders_amount,i)
available_amount=initial_amount_bought*(1.0-fullfillment)
[array.get(buy_orders_value,i),initial_amount_bought,available_amount]
else
[0.0,0.0,0.0]
else
[0.0,0.0,0.0]
set_fullfillment_amount_in_buy(inti,floatamount)=>
[_,initial_buy_amount,buy_available_amount]=get_past_unfulfilled_buy(i)
fullfilled_amount=initial_buy_amount-buy_available_amount
array.set(buy_orders_fullfillment,i,(amount+fullfilled_amount)/initial_buy_amount)
fullfill_buy_at(floatvalue,floatfiat_account_balance,intat)=>
amount_to_sell=0.0
[buy_close,initial_buy_amount,buy_available_amount]=get_past_unfulfilled_buy(at)
ifbuy_available_amount*value<fiat_account_balance
//Fullfill100%immediately
amount_to_sell+=buy_available_amount
else
//Trytofullfillinparcels
amount_fullfilled=0.0
total_parcels=20
forj=0tototal_parcels-1
current_parcel_amount=j*buy_available_amount/total_parcels
//Dowehavefiatenoughtobuyaparcelthisbig?
iffiat_account_balance>current_parcel_amount*value
amount_fullfilled:=current_parcel_amount
//Fullfillthis
amount_to_sell+=amount_fullfilled
profit=buy_close*amount_to_sell-value*amount_to_sell
[amount_to_sell,buy_close,profit]
//Triestobuyenough
fullfill_buys_lt(floatvalue,floatfiat_account_balance)=>
array.clear(tmp_fullfillment_indices)
array.clear(tmp_fullfillment_amounts)
floatprofit=0.0
floatamount_to_sell=0.0
floattmp_fiat_balance=fiat_account_balance
int_size=array.size(buy_orders_value)
if_size>0andfiat_account_balance>1.0
fori=0to_size-1
cur_order_value=array.get(buy_orders_value,i)
ifcur_order_value<value
[amount_possible,buy_value,order_profit]=fullfill_buy_at(value,tmp_fiat_balance,i)
tmp_fiat_balance-=amount_possible*buy_value
amount_to_sell+=amount_possible
profit+=order_profit
//Markthistobefullfilled
array.push(tmp_fullfillment_indices,i)
array.push(tmp_fullfillment_amounts,amount_possible)
[amount_to_sell,profit]
fullfill_oldest_buy(floatvalue,floatfiat_account_balance)=>
array.clear(tmp_fullfillment_indices)
array.clear(tmp_fullfillment_amounts)
int_size=array.size(buy_orders_value)
floatamount_to_sell=1.0
bool_is_done=false
if_size>0
fori=0to_size-1
[amount_possible,buy_close,_]=fullfill_buy_at(value,fiat_account_balance,i)
ifnot_is_done
price_adjustment=(1.0-(buy_close/value))+1.0
ifamount_possible>0.0andamount_possible*price_adjustment<fiat_account_balance
amount_to_sell:=amount_possible*price_adjustment
_is_done:=true
array.push(tmp_fullfillment_indices,i)
array.push(tmp_fullfillment_amounts,amount_to_sell)
amount_to_sell
else
amount_to_sell:=0.03
else
amount_to_sell


clear_fullfilled_buys()=>
old_buy_orders_value=array.copy(buy_orders_value)
old_buy_orders_amount=array.copy(buy_orders_amount)
old_buy_orders_fullfillment=array.copy(buy_orders_fullfillment)
array.clear(buy_orders_value)
array.clear(buy_orders_amount)
array.clear(buy_orders_fullfillment)
_size=array.size(old_buy_orders_fullfillment)
if_size>0
fori=0to_size-1
ifarray.get(old_buy_orders_fullfillment,i)<1.0
array.push(buy_orders_fullfillment,array.get(old_buy_orders_fullfillment,i))
array.push(buy_orders_value,array.get(old_buy_orders_value,i))
array.push(buy_orders_amount,array.get(old_buy_orders_amount,i))
close_sell()=>
_size=array.size(tmp_fullfillment_indices)
if_size>0
fori=0to_size-1
buy_index=array.get(tmp_fullfillment_indices,i)
buy_amount=array.get(tmp_fullfillment_amounts,i)
set_fullfillment_amount_in_buy(buy_index,buy_amount)
clear_fullfilled_buys()

register_buy(value,amount)=>
array.push(buy_orders_value,value)
array.push(buy_orders_amount,amount)
array.push(buy_orders_fullfillment,0.0)
//VirtualPortfolio(usefultogettherebalancerbuy/sellpointswithout
//sufferinginterferencefromtherealbuy/salesbeingdone)
varfloat[]virtual=portfolio.init()
//TheRealPortfolio
varfloat[]balance=portfolio.init()
buy_order(floatamount)=>
strategy.order("buy",strategy.long,amount,when=window(),alert_message=str.tostring(amount))

sell_order(floatamount)=>
strategy.order("sell",strategy.short,amount,when=window(),alert_message=str.tostring(-amount))
//InitializationstartsbybuyingMIN_AMOUNTtokenandsellingitrightaway.
//thisistoensurepropervaluesintheStrategyTesterthatstartatthe
//firstblock.StrategyTesterbydefaultstartsattheblockofthefirst
//order-abuy/sellorderisdoneonthefirstblocksothatitstartsatit.
varinit1=true
varinit2=false
varinit3=false
varfirst_full_amount=MIN_AMOUNT
varlast_rebalance_at=0
ratio_of_first_rebalance=0.5
floatcapital=float(strategy.initial_capital[0])
//Startbysellingenoughcryptotohavethis
//amountoffiat
fiat_offset=2000
on_the_side=0
ifwindow()andinit1
init1:=false
init2:=true
strategy.order("buy",strategy.long,first_full_amount,when=window())
init1
elseifwindow()andinit2
init2:=false
init3:=true
strategy.order("sell",strategy.short,first_full_amount,when=window())
init2
elseifwindow()andinit3
init3:=false
first_rebalance_amount=rebalancer.rebalance(close,0.0,capital,ratio_of_first_rebalance)
portfolio.set_balance(virtual,first_rebalance_amount,strategy.initial_capital-(first_rebalance_amount*close))
//first_amount_to_buy=(strategy.initial_capital-fiat_offset)/close//100%crypto-offset
//Startwith`offset`FIATontheside
initial_crypto=(strategy.initial_capital-fiat_offset)/close
portfolio.set_balance(balance,initial_crypto,fiat_offset+on_the_side)
//last_rebalance_at:=month(time)
//strategy.order("buy",strategy.long,first_rebalance_amount,when=window(),alert_message=str.tostring(first_rebalance_amount))
init3
//Adjusttheprecisiontothecurrenttokenvalue,
//Thiswaytheamounttorebalanceisadjustedtobemeaningfulinveryhigh
//valuetokens,orverylowvaluetokens
floattoken_adjustment=2000.0/(strategy.initial_capital/close)
//Thevirtualportfolioisfrequentlyrebalancedat60%crypto
//thisallowsittobeusedtooutputbuy/salespointswhilethereal
//portfoliogetsmessedupwiththetradingaction
//amount=portfolio.get_rebalance_amount(virtual,0.60,close)
floatvirtual_amount=window()?rebalancer.rebalance(close,portfolio.crypto(virtual),portfolio.fiat(virtual),0.60):0.0
colorvirtual_rebalance_color=na
boolis_rebalance_selling=virtual_amount*token_adjustment<-precision
boolis_rebalance_buying=virtual_amount*token_adjustment>precision
ifwindow()
ifis_rebalance_buying
portfolio.buy(virtual,virtual_amount,close)
virtual_rebalance_color:=color.new(color.teal,80)

ifis_rebalance_selling
portfolio.sell(virtual,math.abs(virtual_amount),close)
virtual_rebalance_color:=color.new(color.maroon,80)
bgcolor(window()?virtual_rebalance_color:na,title="Buy/SellBar")
////////////////////////////////////////////////////////////////////////////////
//MAIN-balance=portfolio.init()
////////////////////////////////////////////////////////////////////////////////
boolis_selling_opportunity_finished=(notis_selling_opportunity)andis_selling_opportunity[1]
boolis_buying_opportunity_finished=(notis_buying_opportunity)andis_buying_opportunity[1]
boolis_selling_opportunity_starting=(notis_selling_opportunity[1])andis_selling_opportunity[0]
boolis_buying_opportunity_starting=(notis_buying_opportunity[1])andis_buying_opportunity[0]
buy(portfolio,amount,value)=>
[prev_sold_amount,profit_if_bought]=fullfill_sells_gt(value*1.12,portfolio.fiat(balance))
ifmath.abs(amount)>MIN_AMOUNT
ifportfolio.buy(portfolio,math.abs(amount)+math.abs(prev_sold_amount),value)
buy_order(math.abs(amount)+math.abs(prev_sold_amount))
register_buy(value,math.abs(amount))
close_buy()
sell(portfolio,amount,value)=>
[prev_bought_amount,profit_if_sold]=fullfill_buys_lt(value*0.88,portfolio.fiat(balance))
ifmath.abs(amount)>MIN_AMOUNT
ifportfolio.sell(portfolio,math.abs(amount)+math.abs(prev_bought_amount),value)
sell_order(math.abs(amount)+math.abs(prev_bought_amount))
register_sell(value,math.abs(amount))
close_sell()
//Overallperformanceofthisstrategy
floatstrategy_total=portfolio.fiat(balance)+portfolio.crypto(balance)*window_close
floatvs_hold=(strategy_total+portfolio.retained(balance))-(hold*window_close)
floatdid_profit=(portfolio.retained(balance)+strategy_total)-strategy.initial_capital
///////////////
//Actions
///////////////
ifwindow()
//Doubletheamounttotradeiftherebalanceoscillatorissayinthatthisisagood
//tradeopportunity.
floatamount=is_rebalance_sellingoris_rebalance_buying?base_amount*2.0:base_amount

//Performtheexpectedtradingactionswheneverthecurrentcandleiswithina
//tradingwindowofthebear/bullmarketindicator.
ifis_selling_opportunityandopen>close[1]
sell(balance,amount,open)

ifis_buying_opportunityandopen<close[1]
buy(balance,amount,open)

ifportfolio.crypto(balance)<=amountandis_rebalance_buying
buy(balance,amount,close)

ifportfolio.fiat(balance)<=closeandis_rebalance_selling
sell(balance,amount,close)
//////////////////////////////////////////////////////////////////////////////
//ANALYSIS-OpentheTradingWindowintherightmenutoseethesevalues//
//////////////////////////////////////////////////////////////////////////////
plot(portfolio.fiat(balance)+portfolio.retained(balance),title="FiatinBalance")
plot(portfolio.crypto(balance),title="CryptoinBalance")
//Howmuchprofitdidthisstrategymakewhencomparedtotheinitialinvestmentcapital?
plot(did_profit,title="DidProfit?(dif.frominitialcapital)",color=((portfolio.retained(balance)+strategy_total)-strategy.initial_capital)>0?color.green:color.red)
//Howmuchprofitdidthisstrategymakewhencomparedtoa100%buyatthefirstcandle?
plot(vs_hold,title="TotalprofitvsHold(inFiat)",color=(vs_hold>0?color.green:color.red))
Expand (578 lines)
