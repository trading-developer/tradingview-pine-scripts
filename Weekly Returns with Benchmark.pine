Script Name: Weekly Returns with Benchmark
Author: QuantNomad
Description: Some time ago I published Monthly returns table. Now It's time for weekly one.
To get it work you need a pretty big screen, but I hope it will be useful for some of you.

Features of this table includes:


  Display weekly returns of your strategy, benchmark, and alpha over this benchmark.
  Select benchmark to be another instrument
  Select the date from...
PineScript code:

Pine Scriptâ„¢ strategy
Weekly Returns with Benchmark
//@version=5
strategy('Weekly  Returns  with  Benchmark',  overlay=true,
          default_qty_type=strategy.percent_of_equity,  default_qty_value=25,
          commission_type=strategy.commission.percent,  commission_value=0.1)
////////////
//  Inputs  //
//  Pivot  points  inputs
leftBars      =  input(2,  group  =  "Pivot  Points")
rightBars    =  input(1,  group  =  "Pivot  Points")
//  Styling  inputs
prec              =  input(1,  title='Return  Precision',                                                        group  =  "Weekly  Table")
from_date    =  input.time(timestamp("01  Jan  2000  00:00  +0000"),  "From  Date",  group  =  "Weekhly  Table")
prof_color  =  input.color(color.green,  title  =  "Gradient  Colors",  group  =  "Weeky  Table",  inline  =  "colors")
loss_color  =  input.color(color.red,      title  =  "",                                group  =  "Weeky  Table",  inline  =  "colors")
//  Benchmark  inputs
use_cur        =  input.bool(true,                title  =  "Use  current  Symbol  for  Benchmark",  group  =  "Benchmark")
symb_bench  =  input.symbol('BTCUSDT',  title  =  "Benchmark",                                                group  =  "Benchmark")
disp_bench  =  input.bool(false,              title  =  "Display  Benchmark?",                              group  =  "Benchmark")
disp_alpha  =  input.bool(false,              title  =  "Display  Alpha?",                                      group  =  "Benchmark")
//  Pivot  Points  Strategy
swh  =  ta.pivothigh(leftBars,  rightBars)
swl  =  ta.pivotlow  (leftBars,  rightBars)
hprice  =  0.0
hprice  :=  not  na(swh)  ?  swh  :  hprice[1]
lprice  =  0.0
lprice  :=  not  na(swl)  ?  swl  :  lprice[1]
le  =  false
le  :=  not  na(swh)  ?  true  :  le[1]  and  high  >  hprice  ?  false  :  le[1]
se  =  false
se  :=  not  na(swl)  ?  true  :  se[1]  and  low  <  lprice  ?  false  :  se[1]
if  le
        strategy.entry('PivRevLE',  strategy.long,  comment='PivRevLE',  stop=hprice  +  syminfo.mintick)
if  se
        strategy.entry('PivRevSE',  strategy.short,  comment='PivRevSE',  stop=lprice  -  syminfo.mintick)
plot(hprice,  color=color.new(color.green,  0),  linewidth=2)
plot(lprice,  color=color.new(color.red,  0),  linewidth=2)
///////////////////
//  WEEKLY  TABLE  //
new_week  =  weekofyear(time[1])  !=  weekofyear(time)
new_year  =  year(time)  !=  year(time[1])
eq              =  strategy.equity
bench_eq  =  close
//  benchmark  eq
bench_eq_htf  =  request.security(symb_bench,  timeframe.period,  close)
if  (not  use_cur)
        bench_eq  :=  bench_eq_htf
bar_pnl      =  eq  /  eq[1]  -  1
bench_pnl  =  bench_eq  /  bench_eq[1]  -  1
//  Current  Weekly  P&L
cur_week_pnl    =  0.0
cur_week_pnl  :=  bar_index  ==  0  ?  0  :
                                  time  >=  from_date  and  (time[1]  <  from_date  or  new_week)  ?  bar_pnl  :
                                  (1  +  cur_week_pnl[1])  *  (1  +  bar_pnl)  -  1
//  Current  Yearly  P&L
cur_year_pnl    =  0.0
cur_year_pnl  :=  bar_index  ==  0  ?  0  :
                                  time  >=  from_date  and  (time[1]  <  from_date  or  new_year)  ?  bar_pnl  :
                              (1+cur_year_pnl[1])*(1+bar_pnl)-1
//CurrentWeeklyP&L-Bench
bench_cur_week_pnl=0.0
bench_cur_week_pnl:=bar_index==0or(time[1]<from_dateandtime>=from_date)?0:
time>=from_dateandnew_week?bench_pnl:
(1+bench_cur_week_pnl[1])*(1+bench_pnl)-1
//CurrentYearlyP&L-Bench
bench_cur_year_pnl=0.0
bench_cur_year_pnl:=bar_index==0?0:
time>=from_dateand(time[1]<from_dateornew_year)?bench_pnl:
(1+bench_cur_year_pnl[1])*(1+bench_pnl)-1
varweek_time=array.new_int(0)
varyear_time=array.new_int(0)
varweek_pnl=array.new_float(0)
varyear_pnl=array.new_float(0)
varbench_week_pnl=array.new_float(0)
varbench_year_pnl=array.new_float(0)
//Fillingweekly/yearlypnlarrays
ifarray.size(week_time)>0
ifweekofyear(time)==weekofyear(array.get(week_time,array.size(week_time)-1))
array.pop(week_pnl)
array.pop(bench_week_pnl)
array.pop(week_time)
ifarray.size(year_time)>0
ifyear(time)==year(array.get(year_time,array.size(year_time)-1))
array.pop(year_pnl)
array.pop(bench_year_pnl)
array.pop(year_time)
if(time>=from_date)
array.push(week_time,time)
array.push(year_time,time)

array.push(week_pnl,cur_week_pnl)
array.push(year_pnl,cur_year_pnl)

array.push(bench_year_pnl,bench_cur_year_pnl)
array.push(bench_week_pnl,bench_cur_week_pnl)
//WeeklyP&LTable
table_size=size.tiny
varweekly_table=table(na)
ifarray.size(year_pnl)>0andbarstate.islastconfirmedhistory
weekly_table:=table.new(position.bottom_right,
columns=56,rows=array.size(year_pnl)*3+5,border_width=1)
//Fillweeklyperformance
table.cell(weekly_table,0,0,'Perf',
bgcolor=#999999,text_size=table_size)
fornumW=1to53by1
table.cell(weekly_table,numW,0,str.tostring(numW),
bgcolor=#999999,text_size=table_size)
table.cell(weekly_table,54,0,'',
bgcolor=#999999,text_size=table_size)
table.cell(weekly_table,55,0,'Year',
bgcolor=#999999,text_size=table_size)
max_abs_y=math.max(math.abs(array.max(year_pnl)),math.abs(array.min(year_pnl)))
max_abs_m=math.max(math.abs(array.max(week_pnl)),math.abs(array.min(week_pnl)))

foryi=0toarray.size(year_pnl)-1by1
table.cell(weekly_table,0,yi+1,
str.tostring(year(array.get(year_time,yi))),
bgcolor=#cccccc,text_size=table_size)

table.cell(weekly_table,53,yi+1,'',
bgcolor=#999999,text_size=table_size)

table.cell(weekly_table,54,yi+1,'',
bgcolor=#999999,text_size=table_size)
y_color=color.from_gradient(array.get(year_pnl,yi),-max_abs_y,max_abs_y,loss_color,prof_color)
table.cell(weekly_table,55,yi+1,
str.tostring(math.round(array.get(year_pnl,yi)*100,prec)),
bgcolor=y_color,text_size=table_size)

intiw_row=na
intiw_col=na
forwi=0toarray.size(week_time)-2by1
w_row=year(array.get(week_time,wi))-year(array.get(year_time,0))+1
w_col=weekofyear(array.get(week_time,wi))
w_color=color.from_gradient(array.get(week_pnl,wi),-max_abs_m,max_abs_m,loss_color,prof_color)

ifiw_row+1==w_rowandiw_col+1==w_col
table.cell(weekly_table,w_col,w_row-1,
str.tostring(math.round(array.get(week_pnl,wi)*100,prec)),
bgcolor=w_color,text_size=table_size)
else
table.cell(weekly_table,w_col,w_row,
str.tostring(math.round(array.get(week_pnl,wi)*100,prec)),
bgcolor=w_color,text_size=table_size)


iw_row:=w_row
iw_col:=w_col
//Fillbenchmarkperformance
next_row=array.size(year_pnl)+1
if(disp_bench)

table.cell(weekly_table,0,next_row,'Bench',
bgcolor=#999999,text_size=table_size)

fornumW=1to53by1
table.cell(weekly_table,numW,next_row,str.tostring(numW),
bgcolor=#999999,text_size=table_size)
table.cell(weekly_table,54,next_row,'',
bgcolor=#999999,text_size=table_size)
table.cell(weekly_table,55,next_row,'Year',
bgcolor=#999999,text_size=table_size)

max_bench_abs_y=math.max(math.abs(array.max(bench_year_pnl)),math.abs(array.min(bench_year_pnl)))
max_bench_abs_w=math.max(math.abs(array.max(bench_week_pnl)),math.abs(array.min(bench_week_pnl)))

foryi=0toarray.size(year_time)-1by1
table.cell(weekly_table,0,yi+1+next_row+1,
str.tostring(year(array.get(year_time,yi))),
bgcolor=#cccccc,text_size=table_size)
table.cell(weekly_table,53,yi+1+next_row+1,'',
bgcolor=#999999,text_size=table_size)

table.cell(weekly_table,54,yi+1+next_row+1,'',
bgcolor=#999999,text_size=table_size)

y_color=color.from_gradient(array.get(bench_year_pnl,yi),-max_bench_abs_y,max_bench_abs_y,loss_color,prof_color)
table.cell(weekly_table,55,yi+1+next_row+1,
str.tostring(math.round(array.get(bench_year_pnl,yi)*100,prec)),
bgcolor=y_color,text_size=table_size)


intiw_row1=na
intiw_col1=na
forwi=0toarray.size(week_time)-1by1
w_row=year(array.get(week_time,wi))-year(array.get(year_time,0))+1
w_col=weekofyear(array.get(week_time,wi))

w_color=color.from_gradient(array.get(bench_week_pnl,wi),-max_bench_abs_w,max_bench_abs_w,loss_color,prof_color)

ifiw_row1+1==w_rowandiw_col1+1==w_col
table.cell(weekly_table,w_col,w_row+next_row,
str.tostring(math.round(array.get(bench_week_pnl,wi)*100,prec)),
bgcolor=w_color,text_size=table_size)
else
table.cell(weekly_table,w_col,w_row+next_row+1,
str.tostring(math.round(array.get(bench_week_pnl,wi)*100,prec)),
bgcolor=w_color,text_size=table_size)

iw_row1:=w_row
iw_col1:=w_col


//FillAlpha
if(disp_alpha)

//columns
next_row:=array.size(year_pnl)*2+3
table.cell(weekly_table,0,next_row,'Alpha',
bgcolor=#999999,text_size=table_size)
fornumW=1to53by1
table.cell(weekly_table,numW,next_row,str.tostring(numW),
bgcolor=#999999,text_size=table_size)
table.cell(weekly_table,54,next_row,'',
bgcolor=#999999,text_size=table_size)
table.cell(weekly_table,55,next_row,'Year',
bgcolor=#999999,text_size=table_size)



max_alpha_abs_y=0.0
foryi=0toarray.size(year_time)-1by1
if(math.abs(array.get(year_pnl,yi)-array.get(bench_year_pnl,yi))>max_alpha_abs_y)
max_alpha_abs_y:=math.abs(array.get(year_pnl,yi)-array.get(bench_year_pnl,yi))

max_alpha_abs_w=0.0
forwi=0toarray.size(week_pnl)-1by1
if(math.abs(array.get(week_pnl,wi)-array.get(bench_week_pnl,wi))>max_alpha_abs_w)
max_alpha_abs_w:=math.abs(array.get(week_pnl,wi)-array.get(bench_week_pnl,wi))


foryi=0toarray.size(year_time)-1by1
table.cell(weekly_table,0,yi+1+next_row+1,
str.tostring(year(array.get(year_time,yi))),
bgcolor=#cccccc,text_size=table_size)

table.cell(weekly_table,53,yi+1+next_row+1,'',
bgcolor=#999999,text_size=table_size)

table.cell(weekly_table,54,yi+1+next_row+1,'',
bgcolor=#999999,text_size=table_size)
y_color=color.from_gradient(array.get(year_pnl,yi)-array.get(bench_year_pnl,yi),-max_alpha_abs_y,max_alpha_abs_y,loss_color,prof_color)
table.cell(weekly_table,55,yi+1+next_row+1,
str.tostring(math.round((array.get(year_pnl,yi)-array.get(bench_year_pnl,yi))*100,prec)),
bgcolor=y_color,text_size=table_size)


intiw_row2=na
intiw_col2=na

forwi=0toarray.size(week_time)-1by1
w_row=year(array.get(week_time,wi))-year(array.get(year_time,0))+1
w_col=weekofyear(array.get(week_time,wi))
w_color=color.from_gradient(array.get(week_pnl,wi)-array.get(bench_week_pnl,wi),-max_alpha_abs_w,max_alpha_abs_w,loss_color,prof_color)

ifiw_row2+1==w_rowandiw_col2+1==w_col
table.cell(weekly_table,w_col,w_row+next_row,
str.tostring(math.round((array.get(week_pnl,wi)-array.get(bench_week_pnl,wi))*100,prec)),
bgcolor=w_color,text_size=table_size)
else
table.cell(weekly_table,w_col,w_row+next_row+1,
str.tostring(math.round((array.get(week_pnl,wi)-array.get(bench_week_pnl,wi))*100,prec)),
bgcolor=w_color,text_size=table_size)

iw_row2:=w_row
iw_col2:=w_col
Expand (331 lines)
