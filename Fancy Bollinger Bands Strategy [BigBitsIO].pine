Script Name: Fancy Bollinger Bands Strategy [BigBitsIO]
Author: BigBitsIO
Description: This script is for a Bollinger Band type indicator with built-in TradingView strategy including as many features as I can possibly fit into a Bollinger Band type indicator including a wide variety of options to create the most flexible Bollinger Bands strategy possible.

Features:
- A single custom moving average serving as the middle band.

- Standard MA...
PineScript code:

Pine Scriptâ„¢ strategy
Fancy Bollinger Bands Strategy [BigBitsIO]
//@version=4
//
//  Pine  Script  v4
//  @author  BigBitsIO
//  Script  Library:  https://www.tradingview.com/u/BigBitsIO/#published-scripts
//
strategy(title="Fancy  Bollinger  Bands  Strategy  [BigBitsIO]",  shorttitle="Fancy  Bollinger  Bands  Strategy  [BigBitsIO]",  overlay=true,  pyramiding=1,  default_qty_type=strategy.percent_of_equity,  default_qty_value=100,  commission_type=strategy.commission.percent,  commission_value=.1,  slippage=0,  initial_capital=100)
MAPeriod  =  input(20,  title="Middle  Band  Period",  minval=1,  step=1)
MAType  =  input(title="Middle  Band  Type",  defval="SMA",  options=["RMA",  "SMA",  "EMA",  "WMA",  "HMA",  "DEMA",  "TEMA",  "VWMA"])
MASource  =  input(title="Middle  Band  Source",  type=input.source,  defval=close)
MAResolution  =  input(title="Middle  Band  Resolution",  defval="00  Current",  options=["00  Current",  "01  1m",  "02  3m",  "03  5m",  "04  15m",  "05  30m",  "06  45m",  "07  1h",  "08  2h",  "09  3h",  "10  4h",  "11  1D",  "12  1W",  "13  1M"])
MACandleType  =  input(title="Middle  Band  Candle  Type",  defval="00  Current",  options=["00  Current",  "01  Heikin  Ashi",  "02  Renko",  "03  Line  Break",  "04  Kagi",  "05  Point  &  Figure"])
MAVisible  =  input(title="Middle  Band  Visible",  type=input.bool,  defval=true)
UpperBandMultiplier  =  input(title="Upper  Band  Deviation  Multiplier",  defval=2,  minval=0.001,  maxval=50,  step=.25,  type=input.float)
LowerBandMultiplier  =  input(title="Lower  Band  Deviation  Multiplier",  defval=2,  minval=0.001,  maxval=50,  step=.25,  type=input.float)
UseATRDeviation  =  input(false,  title="Use  ATR  Deviation  Instead  of  Standard  Deviation?")
ATRPeriod  =  input(14,  title="ATR  Deviation  Period",  minval=1,  step=1)
HighlightInclusion  =  input(title="Highlight  Inclusions",  type=input.bool,  defval=true)
ShowGhostTrail  =  input(title="Show  Inclusion  Ghost  Trail",  type=input.bool,  defval=true)
ForecastBias  =  input(title="Forecast  Bias",  defval="Neutral",  options=["Neutral",  "Bullish",  "Bearish"])
ForecastBiasPeriod  =  input(14,  title="Forecast  Bias  Period")
ForecastBiasMagnitude  =  input(1,  title="Forecast  Bias  Magnitude",  minval=0.25,  maxval=20,  step=0.25)
ShowForecast  =  input(title="Show  Forecasts",  type=input.bool,  defval=true)
HideFill  =  input(false,  title="Hide  Fill")
UseBasicFill  =  input(true,  title="Use  Basic  Fill  -  No  Gradient")
ShowBBDetails  =  input(false,  title="Show  Details")
UpperBandSmoothingMAPeriod  =  input(1,  title="Upper  Band  Smoothing  Period",  minval=1,  step=1)
UpperBandSmoothingMAType  =  input(title="Upper  Band  Smoothing  MA  Type",  defval="SMA",  options=["RMA",  "SMA",  "EMA",  "WMA",  "HMA",  "DEMA",  "TEMA",  "VWMA"])
LowerBandSmoothingMAPeriod  =  input(1,  title="Lower  Band  Smoothing  Period",  minval=1,  step=1)
LowerBandSmoothingMAType  =  input(title="Lower  Band  Smoothing  MA  Type",  defval="SMA",  options=["RMA",  "SMA",  "EMA",  "WMA",  "HMA",  "DEMA",  "TEMA",  "VWMA"])
//  Begin  Citation  -  Allanster  backtest  period
//  ===  INPUT  BACKTEST  RANGE  ===
fromMonth  =  input(defval  =  1,        title  =  "From  Month",            type  =  input.integer,  minval  =  1,  maxval  =  12)
fromDay      =  input(defval  =  1,        title  =  "From  Day",                type  =  input.integer,  minval  =  1,  maxval  =  31)
fromYear    =  input(defval  =  2020,  title  =  "From  Year",              type  =  input.integer,  minval  =  1970)
thruMonth  =  input(defval  =  1,        title  =  "Thru  Month",            type  =  input.integer,  minval  =  1,  maxval  =  12)
thruDay      =  input(defval  =  1,        title  =  "Thru  Day",                type  =  input.integer,  minval  =  1,  maxval  =  31)
thruYear    =  input(defval  =  2112,  title  =  "Thru  Year",              type  =  input.integer,  minval  =  1970)
//  ===  INPUT  SHOW  PLOT  ===
showDate    =  input(defval  =  true,  title  =  "Show  Date  Range",  type  =  input.bool)
//  ===  FUNCTION  EXAMPLE  ===
start          =  timestamp(fromYear,  fromMonth,  fromDay,  00,  00)                //  backtest  start  window
finish        =  timestamp(thruYear,  thruMonth,  thruDay,  23,  59)                //  backtest  finish  window
window()    =>  time  >=  start  and  time  <=  finish  ?  true  :  false              //  create  function  "within  window  of  time"
//  ===  PLOTTING  ===
bgcolor(color  =  showDate  and  window()  ?  color.gray  :  na,  transp  =  90)
//  End  Citation  -  uses  the  window()  funciton  later  on
takeProfitPercent  =  input(100,  title="Take  Profit  %",  type=input.float,  step=.25)
stopLossPercent  =  input(100,  title="Stop  Loss  %",  type=input.float,  step=.25)
OpenConditionsRequirement  =  input(title="Open  Conditions  Requirement",  defval="All",  options=["Any",  "All",  "Minimum  count"])
OpenConditionsMinimumCount  =  input(1,  title="Open  Conditions  Minimum  Count",  minval=1,  type=input.integer)
CloseConditionsRequirement  =  input(title="Close  Conditions  Requirement",  defval="All",  options=["Any",  "All",  "Minimum  count"])
CloseConditionsMinimumCount  =  input(1,  title="Close  Conditions  Minimum  Count",  minval=1,  type=input.integer)
CrossoverUpperBand  =  input(title="Crossover  Upper  Band",  defval="Not  Used",  options=["Not  Used",  "Long  Open",  "Long  Close",  "Long  Open  and  Long  Close"])
CrossoverMiddleBand  =  input(title="Crossover  Middle  Band",  defval="Not  Used",  options=["Not  Used",  "Long  Open",  "Long  Close",  "Long  Open  and  Long  Close"])
CrossoverLowerBand  =  input(title="Crossover  Lower  Band",  defval="Not  Used",  options=["Not  Used",  "Long  Open",  "Long  Close",  "Long  Open  and  Long  Close"])
CrossunderUpperBand  =  input(title="Crossunder  Upper  Band",  defval="Not  Used",  options=["Not  Used",  "Long  Open",  "Long  Close",  "Long  Open  and  Long  Close"])
CrossunderMiddleBand  =  input(title="Crossunder  Middle  Band",  defval="Not  Used",  options=["Not  Used",  "Long  Open",  "Long  Close",  "Long  Open  and  Long  Close"])
CrossunderLowerBand  =  input(title="Crossunder  Lower  Band",  defval="Not  Used",  options=["Not  Used",  "Long  Open",  "Long  Close",  "Long  Open  and  Long  Close"])
PriceAboveUpperBand  =  input(title="Price  Above  Upper  Band",  defval="Not  Used",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
PriceAboveMiddleBand=input(title="PriceAboveMiddleBand",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
PriceAboveLowerBand=input(title="PriceAboveLowerBand",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
PriceBelowUpperBand=input(title="PriceBelowUpperBand",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
PriceBelowMiddleBand=input(title="PriceBelowMiddleBand",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
PriceBelowLowerBand=input(title="PriceBelowLowerBand",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
BandWidth1=input(.020,title="BandWidthConditionValue1",minval=0.005,maxval=20,step=0.005)
BandWidth2=input(.040,title="BandWidthConditionValue2",minval=0.005,maxval=20,step=0.005)
BandWidthCrossoverBandValue1=input(title="BandWidthCrossoverAboveBandValue1",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
BandWidthCrossoverBandValue2=input(title="BandWidthCrossoverAboveBandValue2",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
BandWidthCrossunderBandValue1=input(title="BandWidthCrossunderBelowBandValue1",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
BandWidthCrossunderBandValue2=input(title="BandWidthCrossunderBelowBandValue2",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
BandWidthAboveBandValue1=input(title="BandWidthAboveBandValue1",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
BandWidthAboveBandValue2=input(title="BandWidthAboveBandValue2",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
BandWidthBelowBandValue1=input(title="BandWidthBelowBandValue1",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
BandWidthBelowBandValue2=input(title="BandWidthBelowBandValue2",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
PercentB1=input(.35,title="PercentBConditionValue1",step=0.05)
PercentB2=input(.70,title="PercentBConditionValue2",step=0.05)
PercentBCrossoverPercentBValue1=input(title="PercentBCrossoverAbovePercentB1",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
PercentBCrossoverPercentBValue2=input(title="PercentBCrossoverAbovePercentB2",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
PercentBCrossunderPercentBValue1=input(title="PercentBCrossunderBelowPercentB1",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
PercentBCrossunderPercentBValue2=input(title="PercentBCrossunderBelowPercentB2",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
PercentBAbovePercentBValue1=input(title="PercentBAbovePercentB1",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
PercentBAbovePercentBValue2=input(title="PercentBAbovePercentB2",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
PercentBBelowPercentBValue1=input(title="PercentBBelowPercentB1",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
PercentBBelowPercentBValue2=input(title="PercentBBelowPercentB2",defval="NotUsed",options=["NotUsed","LongOpen","LongClose","LongOpenandLongClose"])
//Abitofborrowedcode,modifiedhereusing@PineCodersgradientFramework
f_cRedLime(_g,_hide,_basic)=>_hide?#00000000:_basic?#0080FF35:_g<=0?#FF000035:_g<=.25?#FF000020:_g<=.5?#FF000010:_g<=.75?#00FF0010:_g<=1?#00FF0020:#00FF0035
f_cRedLimeShadow(_g,_hide,_basic)=>_hide?#00000000:_basic?#0080FF09:_g<=0?#FF000009:_g<=.25?#FF000006:_g<=.5?#FF000003:_g<=.75?#00FF0009:_g<=1?#00FF0006:#00FF0003
ma(MAType,MASource,MAPeriod)=>
ifMAPeriod>0
ifMAType=="SMA"
sma(MASource,MAPeriod)
else
ifMAType=="EMA"
ema(MASource,MAPeriod)
else
ifMAType=="WMA"
wma(MASource,MAPeriod)
else
ifMAType=="RMA"
rma(MASource,MAPeriod)
else
ifMAType=="HMA"
hma(MASource,MAPeriod)
else
ifMAType=="DEMA"
e=ema(MASource,MAPeriod)
2*e-ema(e,MAPeriod)
else
ifMAType=="TEMA"
e=ema(MASource,MAPeriod)
3*(e-ema(e,MAPeriod))+ema(ema(e,MAPeriod),MAPeriod)
else
ifMAType=="VWMA"
vwma(MASource,MAPeriod)

res(MAResolution)=>
ifMAResolution=="00Current"
timeframe.period
else
ifMAResolution=="011m"
"1"
else
ifMAResolution=="023m"
"3"
else
ifMAResolution=="035m"
"5"
else
ifMAResolution=="0415m"
"15"
else
ifMAResolution=="0530m"
"30"
else
ifMAResolution=="0645m"
"45"
else
ifMAResolution=="071h"
"60"
else
ifMAResolution=="082h"
"120"
else
ifMAResolution=="093h"
"180"
else
ifMAResolution=="104h"
"240"
else
ifMAResolution=="111D"
"1D"
else
ifMAResolution=="121W"
"1W"
else
ifMAResolution=="131M"
"1M"

gettickerid(MACandleType)=>
ifMACandleType=="00Current"
syminfo.tickerid
else
ifMACandleType=="01HeikinAshi"
heikinashi(syminfo.tickerid)
else
ifMACandleType=="02Renko"
renko(syminfo.tickerid,"ATR",10)
else
ifMACandleType=="03LineBreak"
linebreak(syminfo.tickerid,3)
else
ifMACandleType=="04Kagi"
kagi(syminfo.tickerid,3)
else
ifMACandleType=="05Point&Figure"
pointfigure(syminfo.tickerid,"hl","Traditional",1,3)
MA=security(gettickerid(MACandleType),res(MAResolution),ma(MAType,MASource,MAPeriod))
plot(MAVisible?MA:na,color=color.white,linewidth=2,title="MiddleBand",show_last=HighlightInclusion?MAPeriod:0)
plot(MAVisibleandHighlightInclusionandShowGhostTrail?MA[MAPeriod-1]:na,color=color.black,linewidth=2,title="MATrail",offset=((MAPeriod-1)*-1),transp=10)
Deviation=UseATRDeviation?security(gettickerid(MACandleType),res(MAResolution),atr(ATRPeriod)):security(gettickerid(MACandleType),res(MAResolution),stdev(MASource,MAPeriod))
UpperBand=MA+(Deviation*UpperBandMultiplier)
LowerBand=MA-(Deviation*LowerBandMultiplier)
SmoothedUpperBand=ma(UpperBandSmoothingMAType,UpperBand,UpperBandSmoothingMAPeriod)
SmoothedLowerBand=ma(LowerBandSmoothingMAType,LowerBand,LowerBandSmoothingMAPeriod)
UpperPlot=plot(SmoothedUpperBand,color=color.white,linewidth=1,title="UpperBand",show_last=HighlightInclusion?MAPeriod:0)
UpperShadowPlot=plot(HighlightInclusionandShowGhostTrail?SmoothedUpperBand[MAPeriod-1]:na,color=color.black,linewidth=1,title="UpperBandTrail",offset=((MAPeriod-1)*-1),transp=10)
LowerPlot=plot(SmoothedLowerBand,color=color.white,linewidth=1,title="LowerBand",show_last=HighlightInclusion?MAPeriod:0)
LowerShadowPlot=plot(HighlightInclusionandShowGhostTrail?SmoothedLowerBand[MAPeriod-1]:na,color=color.black,linewidth=1,title="LowerBandTrail",offset=((MAPeriod-1)*-1),transp=10)
PercentB=(security(gettickerid(MACandleType),res(MAResolution),close)-LowerBand)/(UpperBand-LowerBand)
fill(UpperPlot,LowerPlot,color=f_cRedLime(PercentB,HideFill,UseBasicFill),show_last=HighlightInclusion?MAPeriod:100000000)
fill(UpperShadowPlot,LowerShadowPlot,color=f_cRedLimeShadow(PercentB[MAPeriod-1],HideFill,UseBasicFill))
BBWidth=(UpperBand-LowerBand)/MA
if(ShowBBDetails)
labelLabel=label.new(bar_index,na,"\nFancyBollingerBandDetails:\n\nUpperBand:"+tostring(UpperBand)+"\nMidBand:"+tostring(MA)+"\nLowerBand:"+tostring(LowerBand)+"\n%B:"+tostring(PercentB)+"\nBollingerBandWidth:"+tostring(BBWidth)+"\n\nHidethismessageinsettings.\nUncheckShowDetails",
color=color.black,
textcolor=color.white,
style=label.style_label_down,size=size.normal,textalign=text.align_left)
label.set_y(Label,high>UpperBand?high:UpperBand)
label.delete(Label[1])
//Forecasting-forcastedpricesarecalculatedusingourMATypeandMASourcefortheMAPeriod-thelastXcandles.
//itessentiallyreplacestheoldestXcandles,withtheselectedsource*Xcandles
//Bias-We'lladdan"adjustment"foreachadditionalcandlebeingforecastedbasedonATRofthepreviousXcandles
bias(Bias,BiasPeriod)=>
ifBias=="Neutral"
0
else
ifBias=="Bullish"
(atr(BiasPeriod)*ForecastBiasMagnitude)
else
ifBias=="Bearish"
((atr(BiasPeriod)*ForecastBiasMagnitude)*-1)//multiplyingby-1tomakeitanegative,bearishbias
//Note-Cannotshowforecastsondifferentresolutionsatthemoment,x-axisisanissue
Bias=bias(ForecastBias,ForecastBiasPeriod)//14isdefaultatrperiod
MAForecast1=MAPeriod>1?(security(syminfo.tickerid,res(MAResolution),ma(MAType,MASource,MAPeriod-1))*(MAPeriod-1)+((MASource*1)+(Bias*1)))/MAPeriod:na
MAForecast2=MAPeriod>2?(security(syminfo.tickerid,res(MAResolution),ma(MAType,MASource,MAPeriod-2))*(MAPeriod-2)+((MASource*2)+(Bias*2)))/MAPeriod:na
MAForecast3=MAPeriod>3?(security(syminfo.tickerid,res(MAResolution),ma(MAType,MASource,MAPeriod-3))*(MAPeriod-3)+((MASource*3)+(Bias*3)))/MAPeriod:na
MAForecast4=MAPeriod>4?(security(syminfo.tickerid,res(MAResolution),ma(MAType,MASource,MAPeriod-4))*(MAPeriod-4)+((MASource*4)+(Bias*4)))/MAPeriod:na
MAForecast5=MAPeriod>5?(security(syminfo.tickerid,res(MAResolution),ma(MAType,MASource,MAPeriod-5))*(MAPeriod-5)+((MASource*5)+(Bias*5)))/MAPeriod:na
plot(MAResolution=="00Current"andShowForecastandMAVisible?MAForecast1:na,color=color.white,linewidth=1,style=plot.style_circles,title="MiddleBandForecast1",offset=1,show_last=1)
plot(MAResolution=="00Current"andShowForecastandMAVisible?MAForecast2:na,color=color.white,linewidth=1,style=plot.style_circles,title="MiddleBandForecast2",offset=2,show_last=1)
plot(MAResolution=="00Current"andShowForecastandMAVisible?MAForecast3:na,color=color.white,linewidth=1,style=plot.style_circles,title="MiddleBandForecast3",offset=3,show_last=1)
plot(MAResolution=="00Current"andShowForecastandMAVisible?MAForecast4:na,color=color.white,linewidth=1,style=plot.style_circles,title="MiddleBandForecast4",offset=4,show_last=1)
plot(MAResolution=="00Current"andShowForecastandMAVisible?MAForecast5:na,color=color.white,linewidth=1,style=plot.style_circles,title="MiddleBandForecast5",offset=5,show_last=1)
//TakeProfitandStopLoss
profitTarget=(close*(takeProfitPercent/100))/syminfo.mintick
lossTarget=(close*(stopLossPercent/100))/syminfo.mintick
floatlongOpen=0
floatlongOpenCount=0
floatlongClose=0
floatlongCloseCount=0
boolvalidLongOpen=true
boolvalidLongClose=true
testLongOpen(Conditionlo)=>
ifConditionlo
ifOpenConditionsRequirement=="All"andvalidLongOpen
[1,longOpenCount,true]
elseifOpenConditionsRequirement=="Any"
[1,longOpenCount,validLongOpen]
elseifOpenConditionsRequirement=="Minimumcount"
[0,longOpenCount+1,validLongOpen]
else
[longOpen,longOpenCount,validLongOpen]
else
[0,longOpenCount,false]

testLongClose(Conditionlc)=>
ifConditionlc
ifCloseConditionsRequirement=="All"andvalidLongClose
[1,longCloseCount,true]
elseifCloseConditionsRequirement=="Any"
[1,longCloseCount,validLongClose]
elseifCloseConditionsRequirement=="Minimumcount"
[0,int(longCloseCount+1),validLongClose]
else
[longClose,longCloseCount,validLongClose]
else
[0,longCloseCount,false]


//------------------------------CONDITIONS-----------------------------
boolisCrossoverUpperBand=crossover(close,UpperBand)
ifCrossoverUpperBand=="LongOpen"orCrossoverUpperBand=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isCrossoverUpperBand)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifCrossoverUpperBand=="LongClose"orCrossoverUpperBand=="LongOpenandLongClose"
[a,b,c]=testLongClose(isCrossoverUpperBand)
longClose:=a
longCloseCount:=b
validLongClose:=c

boolisCrossunderUpperBand=crossunder(close,UpperBand)

ifCrossunderUpperBand=="LongOpen"orCrossunderUpperBand=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isCrossunderUpperBand)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifCrossunderUpperBand=="LongClose"orCrossunderUpperBand=="LongOpenandLongClose"
[a,b,c]=testLongClose(isCrossunderUpperBand)
longClose:=a
longCloseCount:=b
validLongClose:=c

boolisCrossoverMiddleBand=crossover(close,MA)
ifCrossoverMiddleBand=="LongOpen"orCrossoverMiddleBand=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isCrossoverMiddleBand)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifCrossoverMiddleBand=="LongClose"orCrossoverMiddleBand=="LongOpenandLongClose"
[a,b,c]=testLongClose(isCrossoverMiddleBand)
longClose:=a
longCloseCount:=b
validLongClose:=c

boolisCrossunderMiddleBand=crossunder(close,MA)

ifCrossunderMiddleBand=="LongOpen"orCrossunderMiddleBand=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isCrossunderMiddleBand)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifCrossunderMiddleBand=="LongClose"orCrossunderMiddleBand=="LongOpenandLongClose"
[a,b,c]=testLongClose(isCrossunderMiddleBand)
longClose:=a
longCloseCount:=b
validLongClose:=c

boolisCrossoverLowerBand=crossover(close,LowerBand)
ifCrossoverLowerBand=="LongOpen"orCrossoverLowerBand=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isCrossoverLowerBand)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifCrossoverLowerBand=="LongClose"orCrossoverLowerBand=="LongOpenandLongClose"
[a,b,c]=testLongClose(isCrossoverLowerBand)
longClose:=a
longCloseCount:=b
validLongClose:=c

boolisCrossunderLowerBand=crossunder(close,LowerBand)

ifCrossunderLowerBand=="LongOpen"orCrossunderLowerBand=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isCrossunderLowerBand)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifCrossunderLowerBand=="LongClose"orCrossunderLowerBand=="LongOpenandLongClose"
[a,b,c]=testLongClose(isCrossunderLowerBand)
longClose:=a
longCloseCount:=b
validLongClose:=c




boolisPriceAboveUpperBand=close>UpperBand
ifPriceAboveUpperBand=="LongOpen"orPriceAboveUpperBand=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isPriceAboveUpperBand)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifPriceAboveUpperBand=="LongClose"orPriceAboveUpperBand=="LongOpenandLongClose"
[a,b,c]=testLongClose(isPriceAboveUpperBand)
longClose:=a
longCloseCount:=b
validLongClose:=c

boolisPriceBelowUpperBand=close<UpperBand

ifPriceBelowUpperBand=="LongOpen"orPriceBelowUpperBand=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isPriceBelowUpperBand)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifPriceBelowUpperBand=="LongClose"orPriceBelowUpperBand=="LongOpenandLongClose"
[a,b,c]=testLongClose(isPriceBelowUpperBand)
longClose:=a
longCloseCount:=b
validLongClose:=c

boolisPriceAboveMiddleBand=close>MA
ifPriceAboveMiddleBand=="LongOpen"orPriceAboveMiddleBand=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isPriceAboveMiddleBand)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifPriceAboveMiddleBand=="LongClose"orPriceAboveMiddleBand=="LongOpenandLongClose"
[a,b,c]=testLongClose(isPriceAboveMiddleBand)
longClose:=a
longCloseCount:=b
validLongClose:=c

boolisPriceBelowMiddleBand=close<MA

ifPriceBelowMiddleBand=="LongOpen"orPriceBelowMiddleBand=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isPriceBelowMiddleBand)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifPriceBelowMiddleBand=="LongClose"orPriceBelowMiddleBand=="LongOpenandLongClose"
[a,b,c]=testLongClose(isPriceBelowMiddleBand)
longClose:=a
longCloseCount:=b
validLongClose:=c

boolisPriceAboveLowerBand=close>LowerBand
ifPriceAboveLowerBand=="LongOpen"orPriceAboveLowerBand=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isPriceAboveLowerBand)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifPriceAboveLowerBand=="LongClose"orPriceAboveLowerBand=="LongOpenandLongClose"
[a,b,c]=testLongClose(isPriceAboveLowerBand)
longClose:=a
longCloseCount:=b
validLongClose:=c

boolisPriceBelowLowerBand=close<LowerBand

ifPriceBelowLowerBand=="LongOpen"orPriceBelowLowerBand=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isPriceBelowLowerBand)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifPriceBelowLowerBand=="LongClose"orPriceBelowLowerBand=="LongOpenandLongClose"
[a,b,c]=testLongClose(isPriceBelowLowerBand)
longClose:=a
longCloseCount:=b
validLongClose:=c


boolisBandWidthCrossoverBandValue1=crossover(BBWidth,BandWidth1)

ifBandWidthCrossoverBandValue1=="LongOpen"orBandWidthCrossoverBandValue1=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isBandWidthCrossoverBandValue1)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifBandWidthCrossoverBandValue1=="LongClose"orBandWidthCrossoverBandValue1=="LongOpenandLongClose"
[a,b,c]=testLongClose(isBandWidthCrossoverBandValue1)
longClose:=a
longCloseCount:=b
validLongClose:=c

boolisBandWidthCrossoverBandValue2=crossover(BBWidth,BandWidth2)

ifBandWidthCrossoverBandValue2=="LongOpen"orBandWidthCrossoverBandValue2=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isBandWidthCrossoverBandValue2)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifBandWidthCrossoverBandValue2=="LongClose"orBandWidthCrossoverBandValue2=="LongOpenandLongClose"
[a,b,c]=testLongClose(isBandWidthCrossoverBandValue2)
longClose:=a
longCloseCount:=b
validLongClose:=c




boolisBandWidthCrossunderBandValue1=crossunder(BBWidth,BandWidth1)

ifBandWidthCrossunderBandValue1=="LongOpen"orBandWidthCrossunderBandValue1=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isBandWidthCrossunderBandValue1)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifBandWidthCrossunderBandValue1=="LongClose"orBandWidthCrossunderBandValue1=="LongOpenandLongClose"
[a,b,c]=testLongClose(isBandWidthCrossunderBandValue1)
longClose:=a
longCloseCount:=b
validLongClose:=c

boolisBandWidthCrossunderBandValue2=crossunder(BBWidth,BandWidth2)

ifBandWidthCrossunderBandValue2=="LongOpen"orBandWidthCrossunderBandValue2=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isBandWidthCrossunderBandValue2)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifBandWidthCrossunderBandValue2=="LongClose"orBandWidthCrossunderBandValue2=="LongOpenandLongClose"
[a,b,c]=testLongClose(isBandWidthCrossunderBandValue2)
longClose:=a
longCloseCount:=b
validLongClose:=c


boolisBandWidthAboveBandValue1=BBWidth>BandWidth1

ifBandWidthAboveBandValue1=="LongOpen"orBandWidthAboveBandValue1=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isBandWidthAboveBandValue1)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifBandWidthAboveBandValue1=="LongClose"orBandWidthAboveBandValue1=="LongOpenandLongClose"
[a,b,c]=testLongClose(isBandWidthAboveBandValue1)
longClose:=a
longCloseCount:=b
validLongClose:=c

boolisBandWidthAboveBandValue2=BBWidth>BandWidth2

ifBandWidthAboveBandValue2=="LongOpen"orBandWidthAboveBandValue2=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isBandWidthAboveBandValue2)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifBandWidthAboveBandValue2=="LongClose"orBandWidthAboveBandValue2=="LongOpenandLongClose"
[a,b,c]=testLongClose(isBandWidthAboveBandValue2)
longClose:=a
longCloseCount:=b
validLongClose:=c




boolisBandWidthBelowBandValue1=BBWidth<BandWidth1

ifBandWidthBelowBandValue1=="LongOpen"orBandWidthBelowBandValue1=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isBandWidthBelowBandValue1)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifBandWidthBelowBandValue1=="LongClose"orBandWidthBelowBandValue1=="LongOpenandLongClose"
[a,b,c]=testLongClose(isBandWidthBelowBandValue1)
longClose:=a
longCloseCount:=b
validLongClose:=c

boolisBandWidthBelowBandValue2=BBWidth<BandWidth2

ifBandWidthBelowBandValue2=="LongOpen"orBandWidthBelowBandValue2=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isBandWidthBelowBandValue2)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifBandWidthBelowBandValue2=="LongClose"orBandWidthBelowBandValue2=="LongOpenandLongClose"
[a,b,c]=testLongClose(isBandWidthBelowBandValue2)
longClose:=a
longCloseCount:=b
validLongClose:=c
boolisPercentBCrossoverPercentBValue1=crossover(PercentB,PercentB1)

ifPercentBCrossoverPercentBValue1=="LongOpen"orPercentBCrossoverPercentBValue1=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isPercentBCrossoverPercentBValue1)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifPercentBCrossoverPercentBValue1=="LongClose"orPercentBCrossoverPercentBValue1=="LongOpenandLongClose"
[a,b,c]=testLongClose(isPercentBCrossoverPercentBValue1)
longClose:=a
longCloseCount:=b
validLongClose:=c

boolisPercentBCrossoverPercentBValue2=crossover(PercentB,PercentB2)

ifPercentBCrossoverPercentBValue2=="LongOpen"orPercentBCrossoverPercentBValue2=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isPercentBCrossoverPercentBValue2)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifPercentBCrossoverPercentBValue2=="LongClose"orPercentBCrossoverPercentBValue2=="LongOpenandLongClose"
[a,b,c]=testLongClose(isPercentBCrossoverPercentBValue2)
longClose:=a
longCloseCount:=b
validLongClose:=c




boolisPercentBCrossunderPercentBValue1=crossunder(PercentB,PercentB1)

ifPercentBCrossunderPercentBValue1=="LongOpen"orPercentBCrossunderPercentBValue1=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isPercentBCrossunderPercentBValue1)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifPercentBCrossunderPercentBValue1=="LongClose"orPercentBCrossunderPercentBValue1=="LongOpenandLongClose"
[a,b,c]=testLongClose(isPercentBCrossunderPercentBValue1)
longClose:=a
longCloseCount:=b
validLongClose:=c

boolisPercentBCrossunderPercentBValue2=crossunder(PercentB,PercentB2)

ifPercentBCrossunderPercentBValue2=="LongOpen"orPercentBCrossunderPercentBValue2=="LongOpenandLongClose"
[a,b,c]=testLongOpen(isPercentBCrossunderPercentBValue2)
longOpen:=a
longOpenCount:=b
validLongOpen:=c
ifPercentBCrossunderPercentBValue2=="LongClose"orPercentBCrossunderPercentBValue2=="LongOpenandLongClose"
[a,b,c]=testLongClose(isPercentBCrossunderPercentBValue2)
longClose:=a
longCloseCount:=b
validLongClose:=c


//boolisPercentBAbovePercentBValue1=PercentB>PercentB1

//ifPercentBAbovePercentBValue1=="LongOpen"orPercentBAbovePercentBValue1=="LongOpenandLongClose"
//[a,b,c]=testLongOpen(isPercentBAbovePercentBValue1)
//longOpen:=a
//longOpenCount:=b
//validLongOpen:=c
//ifPercentBAbovePercentBValue1=="LongClose"orPercentBAbovePercentBValue1=="LongOpenandLongClose"
//[a,b,c]=testLongClose(isPercentBAbovePercentBValue1)
//longClose:=a
//longCloseCount:=b
//validLongClose:=c

//boolisPercentBAbovePercentBValue2=PercentB>PercentB2

//ifPercentBAbovePercentBValue2=="LongOpen"orPercentBAbovePercentBValue2=="LongOpenandLongClose"
//[a,b,c]=testLongOpen(isPercentBAbovePercentBValue2)
//longOpen:=a
//longOpenCount:=b
//validLongOpen:=c
//ifPercentBAbovePercentBValue2=="LongClose"orPercentBAbovePercentBValue2=="LongOpenandLongClose"
//[a,b,c]=testLongClose(isPercentBAbovePercentBValue2)
//longClose:=a
//longCloseCount:=b
//validLongClose:=c




//boolisPercentBBelowPercentBValue1=PercentB<PercentB1

//ifPercentBBelowPercentBValue1=="LongOpen"orPercentBBelowPercentBValue1=="LongOpenandLongClose"
//[a,b,c]=testLongOpen(isPercentBBelowPercentBValue1)
//longOpen:=a
//longOpenCount:=b
//validLongOpen:=c
//ifPercentBBelowPercentBValue1=="LongClose"orPercentBBelowPercentBValue1=="LongOpenandLongClose"
//[a,b,c]=testLongClose(isPercentBBelowPercentBValue1)
//longClose:=a
//longCloseCount:=b
//validLongClose:=c

//boolisPercentBBelowPercentBValue2=PercentB<PercentB2

//ifPercentBBelowPercentBValue2=="LongOpen"orPercentBBelowPercentBValue2=="LongOpenandLongClose"
//[a,b,c]=testLongOpen(isPercentBBelowPercentBValue2)
//longOpen:=a
//longOpenCount:=b
//validLongOpen:=c
//ifPercentBBelowPercentBValue2=="LongClose"orPercentBBelowPercentBValue2=="LongOpenandLongClose"
//[a,b,c]=testLongClose(isPercentBBelowPercentBValue2)
//longClose:=a
//longCloseCount:=b
//validLongClose:=c
//-------------------------------------ENDCONDITIONS-------------------------------------------

ifOpenConditionsRequirement=="Minimumcount"
iflongOpenCount>=OpenConditionsMinimumCount
longOpen:=1
ifCloseConditionsRequirement=="Minimumcount"
iflongCloseCount>=CloseConditionsMinimumCount
longClose:=1
//Tiebreaker
iflongClose==1andlongOpen==1
longOpen:=0
iflongOpen==1andwindow()
strategy.entry("Long",true)//buybymarket
strategy.exit("TakeProfitorStopLoss","Long",profit=profitTarget,loss=lossTarget)
elseiflongClose==1andwindow()
strategy.close("Long")
elseifnotwindow()
strategy.close("Long")
Expand (745 lines)
